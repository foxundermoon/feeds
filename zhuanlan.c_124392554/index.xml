<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>Liu言杂记</title>
<link>https://henix.github.io/feeds/zhuanlan.c_124392554/</link>
<description></description>
<language>zh-cn</language>
<lastBuildDate>Sat, 20 Oct 2018 19:07:00 +0800</lastBuildDate>
<item>
<title>“姐姐妹妹站起来”—— Gale-Shapley算法（Part 3）</title>
<link>https://henix.github.io/feeds/zhuanlan.c_124392554/2018-10-19-47114226.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/47114226&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-250102a523c16faf0f7a91807e78bc12_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;“&lt;a href=&quot;https://zhuanlan.zhihu.com/p/47039961&quot;&gt;“姐姐妹妹站起来”—— Gale-Shapley算法（Part 1）&lt;/a&gt;”和“&lt;a href=&quot;https://zhuanlan.zhihu.com/p/47063883&quot;&gt;“姐姐妹妹站起来”—— Gale-Shapley算法（Part 2）&lt;/a&gt;”两文中所描述的其实就是 &lt;b&gt;Gale-Shapley算法&lt;/b&gt;的一个通俗表述。&lt;/p&gt;&lt;p&gt;“稳定匹配问题”久已有之，例如求职者和用人单位的匹配、实习生和岗位的匹配、教师和课程的匹配等等。&lt;/p&gt;&lt;p&gt;1962年，David Gale和Lloyd Shapley研究了在甲（男士M）、乙（女士W）双方人数相等情况下的“稳定匹配”问题，证明了必定存在“稳定匹配”并给出了一个构造算法：&lt;/p&gt;&lt;blockquote&gt;&lt;b&gt;Gale-Shapley 算法 (男方最优化)&lt;/b&gt;&lt;br&gt;         首先将所有人初始化为“自由”状态。&lt;br&gt;&lt;b&gt;         while&lt;/b&gt; (存在某个元素 &lt;equation&gt;m\in M&lt;/equation&gt; 处于“自由”状态——即没有被匹配)&lt;br&gt;                 令 &lt;equation&gt;w\in W&lt;/equation&gt; 为在 &lt;equation&gt;m&lt;/equation&gt; 的列表中尚存的、最靠前的元素&lt;br&gt; &lt;b&gt;if&lt;/b&gt; ( &lt;equation&gt;w&lt;/equation&gt; 也处于“自由”状态)&lt;br&gt;                         将 &lt;equation&gt;m&lt;/equation&gt; 与 &lt;equation&gt;w&lt;/equation&gt; 进行匹配&lt;br&gt; &lt;b&gt;else&lt;/b&gt; &lt;b&gt;if&lt;/b&gt; ( &lt;equation&gt;w&lt;/equation&gt; 已经和 &lt;equation&gt;m&#39;\in M&lt;/equation&gt; 进行了匹配，且 &lt;equation&gt;w&lt;/equation&gt; 看来， &lt;equation&gt;m&lt;/equation&gt; 优于 &lt;equation&gt;m&#39;&lt;/equation&gt; )&lt;br&gt;                         将 &lt;equation&gt;m&lt;/equation&gt; 与 &lt;equation&gt;w&lt;/equation&gt; 进行匹配，并将 &lt;equation&gt;m&#39;&lt;/equation&gt; 的状态设置为“自由”，&lt;br&gt; &lt;equation&gt;m&#39;&lt;/equation&gt; 在自己的列表中划去 &lt;equation&gt;w&lt;/equation&gt;&lt;br&gt; &lt;b&gt;else&lt;/b&gt;&lt;br&gt; &lt;equation&gt;m&lt;/equation&gt; 在自己的列表中划去 &lt;equation&gt;w&lt;/equation&gt; ，自己仍然保持“自由”状态&lt;/blockquote&gt;&lt;hr&gt;&lt;p&gt;例如：&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-e58bbd64444085cccbc370f2b2f92680_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;662&quot; data-rawheight=&quot;518&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-e58bbd64444085cccbc370f2b2f92680&quot; data-watermark-src=&quot;v2-ba5dfcc9cf8b5209ef0faa28dda0cfc8&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;之后，&lt;/p&gt;&lt;p&gt;Step1——&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-c586208b27dd29123f5e8a8501a0e258_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;662&quot; data-rawheight=&quot;518&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-c586208b27dd29123f5e8a8501a0e258&quot; data-watermark-src=&quot;v2-ed67be99d4d1d9eaf963255589ad21c8&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;Step2——&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-d09c0c7326a69c0ff09e62f771553fd5_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;662&quot; data-rawheight=&quot;518&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-d09c0c7326a69c0ff09e62f771553fd5&quot; data-watermark-src=&quot;v2-6e8d5b87e21a5b5fccce53f4644b48ac&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;Step3——&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-61ee9d90822147d11936510c29c705ad_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;662&quot; data-rawheight=&quot;518&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-61ee9d90822147d11936510c29c705ad&quot; data-watermark-src=&quot;v2-d383cae94550a40243007e09578a2ffb&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;Step4——（尝试匹配失败）&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-c9b015f3450a6c0cc36cb94d775a1ca6_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;662&quot; data-rawheight=&quot;518&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-c9b015f3450a6c0cc36cb94d775a1ca6&quot; data-watermark-src=&quot;v2-33d4311f3f6fc06e3086662e1c6f6aa9&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;Step5——（替换掉“1”）&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-766608520114064c1b975260e36e0657_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;662&quot; data-rawheight=&quot;518&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-766608520114064c1b975260e36e0657&quot; data-watermark-src=&quot;v2-8d753b558ba6aca87eac033cc5f34d55&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;Step6——&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-b4a2f081dd33bffc85e1c6b9f1d1ba98_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;662&quot; data-rawheight=&quot;518&quot; data-watermark=&quot;original&quot; data-original-src=&quot;v2-b4a2f081dd33bffc85e1c6b9f1d1ba98&quot; data-watermark-src=&quot;v2-17d0db89cc96a19dd50a5d0305093ffe&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;Step7——（替换掉“2”）&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-3355b8a59d64d2bc9fb5fcbb20c55bd6_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;662&quot; data-rawheight=&quot;518&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-3355b8a59d64d2bc9fb5fcbb20c55bd6&quot; data-watermark-src=&quot;v2-f22f17aea750c1fe1bc805aa93faaa49&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;Step8——（替换掉“1”）&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-e7a739ecd2b240c0596b8aef5917eee7_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;662&quot; data-rawheight=&quot;518&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-e7a739ecd2b240c0596b8aef5917eee7&quot; data-watermark-src=&quot;v2-1b763aeeee94463ea8e4b8f04bab796f&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;Step9——（算法终止）&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-bc08ab3c2d91ca8c045ef98a98c71399_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;662&quot; data-rawheight=&quot;518&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-bc08ab3c2d91ca8c045ef98a98c71399&quot; data-watermark-src=&quot;v2-4ac242d5419d96088030254b5324f58d&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;hr&gt;&lt;p&gt;算法的实现也是简单的，这里就说两点：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;每一个元素的状态可以用0/1表示是否处于“自由”状态；&lt;/li&gt;&lt;li&gt;&lt;equation&gt;w&lt;/equation&gt; 需要比较 &lt;equation&gt;m&lt;/equation&gt; 和 &lt;equation&gt;m&#39;&lt;/equation&gt; 时，可以维护一个反向表，存储的是各个男士在 &lt;equation&gt;w&lt;/equation&gt; 的意愿中的排序号。例如下图：&lt;/li&gt;&lt;/ol&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-7c2e49f29d237e05c2765fd7af5df7d9_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;566&quot; data-rawheight=&quot;207&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-7c2e49f29d237e05c2765fd7af5df7d9&quot; data-watermark-src=&quot;v2-5e116eaf7e7416ca129526d5a93407cd&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;之后比较&lt;equation&gt;m&lt;/equation&gt; 和 &lt;equation&gt;m&#39;&lt;/equation&gt; 在反向列表中对应的值即可。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;如果不是两方的话，那么情况会截然不同。&lt;/p&gt;&lt;p&gt;假设有四名男羽毛球运动员希望组成两组双打，他们各自的意愿是：&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-812077b08754cd592317368963154bae_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;213&quot; data-rawheight=&quot;262&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-812077b08754cd592317368963154bae&quot; data-watermark-src=&quot;v2-a2c668c1a02c449563ccb3dce1f833db&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;那么无论什么样的方案&lt;b&gt;都是不稳定的&lt;/b&gt;。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-8ae3bf8d732b2e54faac4bfb01a3bc68_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;815&quot; data-rawheight=&quot;118&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;hr&gt;&lt;p&gt;最后说一句：2012年诺贝尔经济学奖授予Lloyd S. Shapley与Alvin E. Roth。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>Bat特白</author>
<guid isPermaLink="false">2018-10-19-47114226</guid>
<pubDate>Fri, 19 Oct 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>“姐姐妹妹站起来”—— Gale-Shapley算法（Part 2）</title>
<link>https://henix.github.io/feeds/zhuanlan.c_124392554/2018-10-18-47063883.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/47063883&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-d97672a937aef883867f976b08c79822_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;前文（“&lt;a href=&quot;https://zhuanlan.zhihu.com/p/47039961&quot;&gt;“姐姐妹妹站起来”—— Gale-Shapley算法（Part 1）&lt;/a&gt;”）描述了一个“&lt;b&gt;女士动动嘴男士跑断腿&lt;/b&gt;”的“安排约会算法”，这里再简单复述一下：&lt;/p&gt;&lt;p&gt;假设有2n人（n男n女）参加一个集体相亲会，每位男士心中都有他想约会的女士的“排序”，每位女士心中都有她想约会的男士的“排序”。&lt;/p&gt;&lt;p&gt;那么安排约会的算法就是：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;每天早上，每位男士都去找在他的列表中、现存的、排在首位的女士；&lt;/li&gt;&lt;li&gt;男士都行动了以后，每位女士观察她明天的男士（们），对其中的、在她的列表中最靠前的男士说：“你很有希望啊，请明天继续来”；对其他男士说“你是个好人，但是咱俩不合适”。&lt;/li&gt;&lt;li&gt;傍晚，被发好人卡的男士就在自己的列表中划去发他卡的女士名字。&lt;/li&gt;&lt;li&gt;如果有天傍晚所有男士都没有被发卡，算法终止。&lt;/li&gt;&lt;/ul&gt;&lt;hr&gt;&lt;p&gt;这篇文章的主要内容就是对这个算法进行分析，首先讨论的问题是“算法是否一定会终止？”。&lt;/p&gt;&lt;p&gt;&lt;b&gt;结论1&lt;/b&gt;  没有一位男士会被所有女士拒绝（发卡）。&lt;/p&gt;&lt;p&gt;&lt;b&gt;证明：&lt;/b&gt;如果男士甲在某日被一名女士拒绝了，那么当天一定有一名男士乙被该女士留下，且在该女士看来，男士乙优于男士甲。&lt;/p&gt;&lt;p&gt;之后每天，该女士处，&lt;b&gt;一定都至少会有一名男士&lt;/b&gt;——即使男士乙也被发卡了，那也是因为出现了对该女士而言比男士乙更好的男士丙，自然男士丙也由于男士甲。&lt;/p&gt;&lt;p&gt;那么当男士甲第n次被拒绝的那一刻，每一名女士处都至少有一名对该女士而言“优于”男士甲的其他男士，然而其他男士一共只有 &lt;equation&gt;n-1&lt;/equation&gt; 人，这就产生了矛盾。&lt;/p&gt;&lt;p&gt;&lt;b&gt;结论2&lt;/b&gt;  这个算法在最多 &lt;equation&gt;n^2&lt;/equation&gt; 天后必然终止。&lt;/p&gt;&lt;p&gt;&lt;b&gt;证明：&lt;/b&gt;首先，所有男士的排序表一共有 &lt;equation&gt;n\times n=n^2&lt;/equation&gt; 个女士名字。如果算法不终止，那么每天至少有一位男士被拒绝，他要在自己的列表中划一位女士的名字。所有表格的所有女士名字最多只够划 &lt;equation&gt;n^2&lt;/equation&gt; 天的。所以算法在最多 &lt;equation&gt;n^2&lt;/equation&gt; 天后必然终止。&lt;/p&gt;&lt;p&gt;事实上，结论1表明，&lt;b&gt;不可能&lt;/b&gt;所有人的表格都被划得干干净净。每名男士最多划去 &lt;equation&gt;n-1&lt;/equation&gt; 个名字。而且由算法过程可知，当首次发生某男士甲被 &lt;equation&gt;n-1&lt;/equation&gt; 名女士拒绝时，这拒绝过他的&lt;equation&gt;n-1&lt;/equation&gt; 名女士处一定每位女士前恰有一名其它男士，且这一天只有男士甲一人被拒绝。之后的一天一定是&lt;b&gt;完成匹配&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;因此这时的表格最多是男士甲划去了 &lt;equation&gt;n-1&lt;/equation&gt; 个名字，而其他人划去了 &lt;equation&gt;n-2&lt;/equation&gt; 个名字，这至多经过 &lt;equation&gt;\left( n-1 \right)+\left( n-2 \right)\times\left( n-1 \right)&lt;/equation&gt; 天，而之后的那一天，将不再有男士被拒绝。总天数的上限是 &lt;equation&gt;\left( n-1 \right)+\left( n-2 \right)\times\left( n-1 \right)+1=\left( n-1 \right)^2+1&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;而且 &lt;equation&gt;(n-1)^2+1&lt;/equation&gt; 这个值是“紧的”，例如下图情况，粉底色格子表示最终结果：&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-11d24ceb3a615c4fd0d1b755082d7d3b_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;900&quot; data-rawheight=&quot;312&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-11d24ceb3a615c4fd0d1b755082d7d3b&quot; data-watermark-src=&quot;v2-a4d72dc28112ef7f6f0a2990170fcc0e&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;hr&gt;&lt;p&gt;好了现在知道这个算法是可以终止并且得到“完美匹配”的了，那么，它的结果是“稳定”的么？&lt;/p&gt;&lt;p&gt;&lt;b&gt;结论3&lt;/b&gt;  如果某一女士A曾对某男士甲说过“你很有希望啊，请明天继续来”，那么A最终的约会对象（对A而言）必然会不劣于男士甲。&lt;/p&gt;&lt;p&gt;&lt;b&gt;证明：&lt;/b&gt;其实由算法流程就可以知道这是显然的。&lt;/p&gt;&lt;p&gt;&lt;b&gt;结论4&lt;/b&gt;  这个算法的结果是“稳定”的。&lt;/p&gt;&lt;p&gt;&lt;b&gt;证明：&lt;/b&gt;采用&lt;i&gt;反证法&lt;/i&gt;。假设结果不稳定，其中存在男士B和女士G，而算法的结果B和G*约会、B*和G约会；但是相对于G*，B更偏好G；相对于B*，G更偏好B。&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-cedbcc23d894d42d4789a6b747c4295a_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;281&quot; data-rawheight=&quot;331&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-cedbcc23d894d42d4789a6b747c4295a&quot; data-watermark-src=&quot;v2-f1a2965c9c549c14a3256954d5834bad&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;但是，由于相对于G*，B更偏好G，因此B会先去找G，之后被G拒绝了才会去考虑G*。而由算法描述已知，G最终选择的B*，一定优于被她拒绝的B。——这样就产生了矛盾。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;还记得之前的师生双向选择问题中的那个导师和学生“彼此嫌弃”的例子么？&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-ab75c1fc493b445179a772dedffb815d_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;760&quot; data-rawheight=&quot;358&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-ab75c1fc493b445179a772dedffb815d&quot; data-watermark-src=&quot;v2-750a2893b56afafa45c150d196430835&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;如果把导师作为“男方”，那么就是如下的结果（1天就结束了），教授是满意的，而学生不是：&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-8a5a8b913326b2737fff576f124763f2_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;921&quot; data-rawheight=&quot;392&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-8a5a8b913326b2737fff576f124763f2&quot; data-watermark-src=&quot;v2-20627edad87e219999e56ee6f36eac25&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;如果把学生作为“男方”，那么就是如下的结果（1天就结束了），学生是满意的，而教授不是：&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-f4d4c054c7836a3706bb87f52992b718_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;921&quot; data-rawheight=&quot;392&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-f4d4c054c7836a3706bb87f52992b718&quot; data-watermark-src=&quot;v2-73ed3c670bfd33fc6702be1cfac8ca57&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;那么现在的问题就是：在这个安排约会的算法中，最终结果是偏向于男方，还是偏向于女方？&lt;/p&gt;&lt;p&gt;讨论这个问题之前，得先定义什么叫做“优”——不是说都能和自己的“排序”中排列第一的异性约会就称作“优”，那要是所有都喜欢1号男士怎么办？&lt;/p&gt;&lt;p&gt;我们称：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;女士A是男士甲的“&lt;b&gt;最优约会对象&lt;/b&gt;”，指的是&lt;b&gt;在所有的&lt;/b&gt;稳定完美匹配中（一定存在这样的匹配——上述算法的结果就是一个），A是甲的&lt;b&gt;所有约会对象中“排序”最高&lt;/b&gt;的。&lt;/li&gt;&lt;li&gt;女士A是男士甲的“&lt;b&gt;最劣约会对象&lt;/b&gt;”，指的是&lt;b&gt;在所有的&lt;/b&gt;稳定完美匹配中，A是甲的&lt;b&gt;所有约会对象中“排序”最低&lt;/b&gt;的。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;类似地，可以定义男士的“最优约会对象”和“最劣约会对象”。&lt;/p&gt;&lt;p&gt;例如在上面的“师生双向选择”例子中，&lt;/p&gt;&lt;ul&gt;&lt;li&gt;教授1的“最佳约会对象”是学生1，“最劣约会对象”是学生2；&lt;/li&gt;&lt;li&gt;教授2的“最佳约会对象”是学生2，“最劣约会对象”是学生1；&lt;/li&gt;&lt;li&gt;学生1的“最佳约会对象”是教授2，“最劣约会对象”是教授1；&lt;/li&gt;&lt;li&gt;学生2的“最佳约会对象”是教授1，“最劣约会对象”是教授2。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;当把导师作为“男方”时，教授1和2都得到了自己的“最佳约会对象”，学生1和2都得到了自己的“最劣约会对象”。&lt;/p&gt;&lt;p&gt;当把学生作为“男方”时，学生1和2都得到了自己的“最佳约会对象”，教授1和2都得到了自己的“最劣约会对象”。&lt;/p&gt;&lt;p&gt;下面来一般性地分析这个“&lt;b&gt;女士动动嘴男士跑断腿&lt;/b&gt;”的“安排约会算法”（为了突出说明，我决定贴图）：&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-f6bc87cb74fee08cfc2baca7617edba7_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1012&quot; data-rawheight=&quot;256&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-f6bc87cb74fee08cfc2baca7617edba7&quot; data-watermark-src=&quot;v2-e9dd03432bf8e672fa21fba77062dc2e&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;b&gt;结论5的证明：&lt;/b&gt;采用&lt;i&gt;反证法&lt;/i&gt;。&lt;/p&gt;&lt;p&gt;如果在上述算法中某个男士没有匹配到自己的“最佳约会对象”，那么由算法描述可知，他一定是在某一天被他的“最佳约会对象”拒绝了。&lt;/p&gt;&lt;p&gt;假设首次发生“某男士被他的最佳约会对象拒绝”这种悲伤的事情是在第 &lt;equation&gt;t&lt;/equation&gt; 日，这一天B被G发了好人卡。而发生这件事，一定是当天还有一名在G看来优于B的男士B*也在G这里。&lt;/p&gt;&lt;p&gt;由于这是首次发生这种悲伤的事情，所以B*还没有被他的“最佳约会对象”拒绝过。因此在B*看来，G不会比他的“最佳约会对象”差。&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-0db875682c43eb06ad6c5e91f3e4aa48_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;915&quot; data-rawheight=&quot;128&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;注意到：这时候由于G是B的“最佳约会对象”，由定义，一定存在一个&lt;b&gt;稳定&lt;/b&gt;的完美匹配 &lt;equation&gt;S&lt;/equation&gt; ，在其中，B与G进行了约会；而且，在 &lt;equation&gt;S&lt;/equation&gt; 中，和B*约会的人不是G且不会优于B*的“最佳约会对象”，所以一定是“劣于”G的。&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-fd87cb9fd057b05aa324f0e84edcff00_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;915&quot; data-rawheight=&quot;142&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;这时候！！！出现了&lt;b&gt;不稳定&lt;/b&gt;！！！B*和G更愿意与对方约会！！！这就产生了矛盾。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-49f4c80b6ebe5a5743be72e20b537a51_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;273&quot; data-rawheight=&quot;331&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-49f4c80b6ebe5a5743be72e20b537a51&quot; data-watermark-src=&quot;v2-9f2b6a04a9324c1f07a7bccadb3f9607&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;故而，算法结束时，&lt;b&gt;每位男士都匹配到了自己的“最佳约会对象”&lt;/b&gt;！&lt;/p&gt;&lt;p&gt;&lt;b&gt;结论6的证明：&lt;/b&gt;采用&lt;i&gt;反证法&lt;/i&gt;。&lt;/p&gt;&lt;p&gt;如果某女士G没有匹配到自己的“最劣约会对象”，而事实上是和男士B进行了约会。&lt;/p&gt;&lt;p&gt;按照定义，就存在一个&lt;b&gt;稳定&lt;/b&gt;的完美匹配 &lt;equation&gt;S&lt;/equation&gt; ，在其中，G与她的的“最劣约会对象”B*进行了约会。&lt;/p&gt;&lt;p&gt;按照定义，在G看来，B优于B*。&lt;/p&gt;&lt;p&gt;而由结论5，知道，B的“最佳约会对象”是G。&lt;/p&gt;&lt;p&gt;所以在 &lt;equation&gt;S&lt;/equation&gt; 中，出现了&lt;b&gt;不稳定&lt;/b&gt;！！！B和G更愿意与对方约会！！！这就产生了矛盾。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-bd9792028ce224e4637ccefe8c17c392_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;273&quot; data-rawheight=&quot;331&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-bd9792028ce224e4637ccefe8c17c392&quot; data-watermark-src=&quot;v2-4e5720eb5342f721f9915ffaff5ca9af&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;故而，算法结束时，&lt;b&gt;每位女士都匹配到了自己的“最劣约会对象”&lt;/b&gt;！&lt;/p&gt;&lt;hr&gt;&lt;p&gt;可以这样说：这个“&lt;b&gt;女士动动嘴男士跑断腿&lt;/b&gt;”的“安排约会算法”是所有产生稳定完美匹配的方法中，&lt;b&gt;对男方最有利的&lt;/b&gt;，同时也是&lt;b&gt;对女方最不利的&lt;/b&gt;！&lt;/p&gt;&lt;p&gt;所以，陶晶莹才会告诫大家吧，“&lt;b&gt;姐姐妹妹站起来&lt;/b&gt;！”主动才是对自己最有利的！&lt;/p&gt;&lt;a href=&quot;https://music.163.com/#/song?id=71786&amp;amp;autoplay=true&amp;amp;market=baiduhd&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;v2-0eb95b958136df2d1c742752acad8cf2&quot; data-image-width=&quot;360&quot; data-image-height=&quot;360&quot; data-image-size=&quot;ipico&quot;&gt;姐姐妹妹站起来 - 陶晶莹 - 单曲 - 网易云音乐&lt;/a&gt;&lt;hr&gt;&lt;p&gt;最后说一句，很多实际的相亲婚恋网站就是使用了这样的算法。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>Bat特白</author>
<guid isPermaLink="false">2018-10-18-47063883</guid>
<pubDate>Thu, 18 Oct 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>“姐姐妹妹站起来”—— Gale-Shapley算法（Part 1）</title>
<link>https://henix.github.io/feeds/zhuanlan.c_124392554/2018-10-18-47039961.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/47039961&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-0e0acd45802eb3bee16c92482e977670_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;什么集体相亲、多人约会、六人晚餐之类的活动——虽然我没有参加过——其实都算是&lt;b&gt;双向选择&lt;/b&gt;吧。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;下面来看一个和我的工作有关的“&lt;b&gt;双向选择&lt;/b&gt;”的例子吧——&lt;/p&gt;&lt;p&gt;假设有两位教授：Bat和Cat。&lt;/p&gt;&lt;p&gt;有两名学生希望成为研究生，但是每名教授只能招收一位学生。&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-9ceeabfb494cabe09e53e1c7e16def35_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;495&quot; data-rawheight=&quot;396&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-9ceeabfb494cabe09e53e1c7e16def35&quot; data-watermark-src=&quot;v2-3a0e7e0d1329bb71acaf23e37216791f&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;每位教授心中对他希望招收的学生进行一个排序，每名学生对他希望跟随的导师也会进行一个排序。&lt;/p&gt;&lt;p&gt;（&lt;i&gt;然后这种“排序”会影响最终选择结果是否令各人“满意”。&lt;/i&gt;）&lt;/p&gt;&lt;hr&gt;&lt;p&gt;先来看一个&lt;b&gt;最简单情况&lt;/b&gt;：Bat教授首先喜欢学生1、其次喜欢学生2；Cat教授首先喜欢学生2、其次喜欢学生1。&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-9ad3f4e2e45aa5afd07c3f01c1f00a26_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;424&quot; data-rawheight=&quot;353&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-9ad3f4e2e45aa5afd07c3f01c1f00a26&quot; data-watermark-src=&quot;v2-cb1863f822efc351893f21e61f8a4e46&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;这时候，问题的“解答方案”可以很简单：Bat教授选择学生1、Cat教授选择学生2。&lt;/p&gt;&lt;p&gt;（&lt;i&gt;其实这里没有考虑学生的感受，不过，哪又什么什么关系呢，哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈——后面会专门提到这一点&lt;/i&gt;）&lt;/p&gt;&lt;p&gt;&lt;i&gt;（如果Bat教授首先喜欢学生2、其次喜欢学生1；Cat教授首先喜欢学生1、其次喜欢学生2，情况是完全类似的。）&lt;/i&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;现在&lt;b&gt;情况变化了&lt;/b&gt;：Bat教授和Cat教授&lt;b&gt;都&lt;/b&gt;是首先喜欢学生1、其次喜欢学生2。很明显，这时候无论如何都无法做到让每名教授都（自然意义上的）满意。&lt;/p&gt;&lt;p&gt;那么，在现实世界中这个问题是如何解决的呢？——很简单，看学生1的志愿。&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-b49be996ad856ca4f6c73e177d0f2bbf_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;760&quot; data-rawheight=&quot;358&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-b49be996ad856ca4f6c73e177d0f2bbf&quot; data-watermark-src=&quot;v2-4512e3241ffb02f19629bfe5a413ddec&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;如果学生1的“排序”是“Bat、Cat”（为了简单，也使用数字表示），那么“令人们满意”的方案就是Bat教授选择学生1、Cat教授选择学生2。&lt;/p&gt;&lt;p&gt;如果学生1的“排序”是“2、1”，那么“令人们满意”的方案就是Bat教授选择学生2、Cat教授选择学生1。&lt;/p&gt;&lt;p&gt;&lt;i&gt;（如果两位教授都是首先喜欢学生2、其次喜欢学生1，那么情况是完全类似的，只要询问学生2的意愿即可。）&lt;/i&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;好了，现在问题&lt;b&gt;似乎&lt;/b&gt;解决了，两位教授的“排序”的所有四种可能都考察了，也都解决了。&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-dc6822760e747f0bfc10ca0e64466cab_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;961&quot; data-rawheight=&quot;337&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-dc6822760e747f0bfc10ca0e64466cab&quot; data-watermark-src=&quot;v2-0c77bcc6f415a20914c1885669e362d5&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;hr&gt;&lt;p&gt;但是，现在该回过头来考虑&lt;b&gt;学生的感受&lt;/b&gt;了。&lt;/p&gt;&lt;p&gt;这种情况好处理，无论学生2是什么“排序”，教授1和学生1都是“两情相悦”的：&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-4e28571c5bd13b44a211d4a5a835f1cd_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;760&quot; data-rawheight=&quot;358&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-4e28571c5bd13b44a211d4a5a835f1cd&quot; data-watermark-src=&quot;v2-92090d8f29e98ea8d03f26fd98baf67f&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;下面这个情况，就麻烦多了（导师和学生“彼此嫌弃”）：&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-ab75c1fc493b445179a772dedffb815d_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;760&quot; data-rawheight=&quot;358&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-ab75c1fc493b445179a772dedffb815d&quot; data-watermark-src=&quot;v2-750a2893b56afafa45c150d196430835&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;反正就两种可能：&lt;/p&gt;&lt;p&gt;(1) Bat教授选择学生1、Cat教授选择学生2，教授是满意的，而学生不是：&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-8a5a8b913326b2737fff576f124763f2_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;921&quot; data-rawheight=&quot;392&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-8a5a8b913326b2737fff576f124763f2&quot; data-watermark-src=&quot;v2-20627edad87e219999e56ee6f36eac25&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;(2) Bat教授选择学生2、Cat教授选择学生1，学生是满意的，而教授不是。&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-f4d4c054c7836a3706bb87f52992b718_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;921&quot; data-rawheight=&quot;392&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-f4d4c054c7836a3706bb87f52992b718&quot; data-watermark-src=&quot;v2-73ed3c670bfd33fc6702be1cfac8ca57&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;——这也说明了通常自然意义上的“都满意”&lt;b&gt;很可能是做不到的&lt;/b&gt;；需要在后面定义什么样的结果是“&lt;b&gt;双方不会都改变&lt;/b&gt;”的，这样就认为是达到了“&lt;b&gt;令人满意&lt;/b&gt;”的结果。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;现在又加入了Fat教授和学生3。&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-01997f59683d4bc1f515e380a93b1f30_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;897&quot; data-rawheight=&quot;488&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-01997f59683d4bc1f515e380a93b1f30&quot; data-watermark-src=&quot;v2-f274e73e210ca19fa2eaa6b5755467f4&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;情况就变复杂些了。&lt;/p&gt;&lt;p&gt;例如下图情况，Bat教授选择学生1、Cat教授选择学生3、Fat教授选择学生2：&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-a0e98d9b66eb229b61cc9d4122139956_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;987&quot; data-rawheight=&quot;488&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-a0e98d9b66eb229b61cc9d4122139956&quot; data-watermark-src=&quot;v2-de3a142560d09a830fe9bb1337c36fc9&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;注意到这时候：作为学生1而言，他喜欢教授3甚于给他“分配”的教授1；同样地，站在教授3的立场上看，他喜欢学生1甚于给他“分配”的学生2。&lt;/p&gt;&lt;p&gt;两个人都“身在曹营心在汉”，也许很多年之后，他们再回想起来这件事儿，还会“老态龙钟泪不干”、“还君明珠双泪垂”。&lt;/p&gt;&lt;p&gt;这就是之前提到的，存在“&lt;b&gt;双方都改变&lt;/b&gt;”的意愿和可能，因此不是“&lt;b&gt;令人满意&lt;/b&gt;”的结果。&lt;/p&gt;&lt;p&gt;而下图所示方案就不存在这种情况：&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-bd212ecc439afa1e44d30b0abfeb532c_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;981&quot; data-rawheight=&quot;488&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-bd212ecc439afa1e44d30b0abfeb532c&quot; data-watermark-src=&quot;v2-0ed79060450ae1ae0d082473428943aa&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;hr&gt;&lt;p&gt;下面回到“开开心心约会去，平平安安回家来”的场景。&lt;/p&gt;&lt;p&gt;假设有10人（5男5女）参加一个集体相亲会，每位男士心中都有他想约会的女士的“排序”，每位女士心中都有她想约会的男士的“排序”。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-218c6e440d594800ce6dee5e5bf5110e_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;932&quot; data-rawheight=&quot;494&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-218c6e440d594800ce6dee5e5bf5110e&quot; data-watermark-src=&quot;v2-0783fae19f8b629ce9122bd647d1199e&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;如果出现了如前述的“&lt;b&gt;双方都存在改变的意愿&lt;/b&gt;”的情况，&lt;/p&gt;&lt;blockquote&gt;君知妾有夫，赠妾双明珠。&lt;br&gt;感君缠绵意，系在红罗襦。&lt;br&gt;（略去中间表忠诚的句子）&lt;br&gt;还君明珠双泪垂，恨不相逢未嫁时。&lt;/blockquote&gt;&lt;p&gt;那么这样的约会安排是&lt;b&gt;存在不稳定因素&lt;/b&gt;的。&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-532876a5b60a49a07e9aad6aee053a27_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;851&quot; data-rawheight=&quot;301&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-532876a5b60a49a07e9aad6aee053a27&quot; data-watermark-src=&quot;v2-5fd641b574c5d3f37e0e283297e8c174&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;如果一个约会安排&lt;b&gt;不存在上述不稳定因素&lt;/b&gt;，并且可以恰好每位男士都和一位女士约会（构成&lt;b&gt;完美匹配&lt;/b&gt;），就称这样的约会安排是&lt;b&gt;稳定（stable）&lt;/b&gt;的。&lt;/p&gt;&lt;p&gt;&lt;i&gt;（当然首要问题就是：&lt;b&gt;是否一定存在&lt;/b&gt;稳定的完美匹配？——这一点留在后文介绍。）&lt;/i&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;下面描述解决这个约会问题的算法，其实就类似于传统的“抛绣球”技术。&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-9913b49557d23261ad9246220f674ffa_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;600&quot; data-rawheight=&quot;400&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-9913b49557d23261ad9246220f674ffa&quot; data-watermark-src=&quot;v2-a948ef2198acf020883527a22ca245e3&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;blockquote&gt;（上图是宣萱扮演的王宝钏。&lt;br&gt;王小姐姐抛绣球砸中了花郎薛平贵，然后三击掌和家庭决裂，挖野菜吃，苦守寒窑十八年，终于等到了薛平贵及其妻子回来。&lt;br&gt;然后就被“这锭银，三两三”这样地不信任和试探。&lt;br&gt;再然后薛同学就要把老王——王宝钏之父——干掉，虽然最终还是只干掉了一担挑儿。&lt;br&gt;再再然后王宝钏终于“被”戴上了凤冠霞帔——因为如果薛同学和他爱人代战公主就是不同意的话她没有任何办法，打架都没体力——毕竟天天吃野菜营养不良。&lt;br&gt;再再再然后，据说有个版本的故事是，王宝钏当上皇后只活了18天——可能编故事的人是觉得这是对她苦守寒窑18年的一种“奖赏”和“回报”吧。&lt;br&gt;所以，张爱玲同学评价《红鬃烈马》：“无微不至地描写了男性的自私。薛乎贵致力于他的事业十八年，泰然地将他的夫人搁在寒窑里像冰箱里的一尾鱼。有这么一天，他突然不放心起来，星夜赶回家去。她的一生的最美好的年光已经被贫穷与一个社会叛徒的寂寞给作践完了，然而他以为团圆的快乐足够抵偿了以前的一切。他不给她设身处地想一想——他封了她做皇后，在代战公主的领土里做皇后！在一个年轻的，当权的妻的手里讨生活！难怪她封了皇后之后十八天就死了——她没这福分。可是薛平贵虽对女人不甚体谅，依旧被写成一个好人。”）&lt;/blockquote&gt;&lt;p&gt;（骂完薛平贵，还是讲正事儿吧 = =）具体算法可以这样形象地描述：&lt;/p&gt;&lt;p&gt;&lt;b&gt;第1天&lt;/b&gt;，每个男士都去找他的“排序”中排名首位的女士：&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-07c8a70cff23d22a37cc386e4fe06556_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;901&quot; data-rawheight=&quot;702&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-07c8a70cff23d22a37cc386e4fe06556&quot; data-watermark-src=&quot;v2-21909e6ae9757895bb63180e934965de&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;然后1号女士看到男士2、4、5来找他了，虽然她最喜欢的是男士3，但是人家没来啊，所以她就对男士2和4说：“我更喜欢男士5，来，给你俩一人一张‘好人卡’，你俩走吧。”然后她（暂时）留下男士5。&lt;/p&gt;&lt;p&gt;3号女士（暂时）留下男士1。&lt;/p&gt;&lt;p&gt;4号女士（暂时）留下男士3。&lt;/p&gt;&lt;p&gt;2号和5号女士目前没有追求者，只有继续等待机会的到来（不见得是“拾人牙慧”！！！）。&lt;/p&gt;&lt;p&gt;&lt;b&gt;第2天&lt;/b&gt;，前一天被“留下”的男士继续去找留下他的女士，而前一天被发“好人卡”的男士去找他的“排序列表”中的“下一位”女士：&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-2adc7aef18a2f25c5d0e5946ac203172_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;901&quot; data-rawheight=&quot;702&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-2adc7aef18a2f25c5d0e5946ac203172&quot; data-watermark-src=&quot;v2-a73efd8f348f472da7602809796468a4&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;1号女士继续（暂时）留下男士5。&lt;/p&gt;&lt;p&gt;2号女士（暂时）留下男士2。&lt;/p&gt;&lt;p&gt;4号女士继续（暂时）留下男士3。&lt;/p&gt;&lt;p&gt;5号女士继续等待。&lt;/p&gt;&lt;p&gt;3号女士这里，除了昨天（暂时）留下的男士1，今天又来了男士4，而且在她的列表里4号男士排在1号男士之前。所以她决定留下男士4，而对昨天留下的男士1发一张卡。&lt;/p&gt;&lt;p&gt;&lt;b&gt;第3天&lt;/b&gt;，依然是和第二天一样：&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-c465b30d8b24780daf752323e343d8a2_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;901&quot; data-rawheight=&quot;702&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-c465b30d8b24780daf752323e343d8a2&quot; data-watermark-src=&quot;v2-972b7b1fd09aabd3820a3a5236db25f8&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;b&gt;第4天&lt;/b&gt;：&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-cc8a6e31cc993b2bd10077e9d9d9bac6_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;901&quot; data-rawheight=&quot;707&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-cc8a6e31cc993b2bd10077e9d9d9bac6&quot; data-watermark-src=&quot;v2-3d3545e0d574a83d484b82fa88a4ccd4&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;好了，每位女士都留下了一名男士，于是下一天（第5天）还会是同样的场景、下下天（第6天）还会是同样的场景、……算法可以认为是终止了。&lt;/p&gt;&lt;p&gt;2号女士虽然第一天很寂寞，但是最终选择了她列表中排第二位的；&lt;/p&gt;&lt;p&gt;3号女士虽然第一天有人来，但是她最终只是选择列表中排第三位的。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;如果有n名女士、n名男士也是一样的流程：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;每天早上，每位男士都去找在他的列表中、现存的、排在首位的女士；&lt;/li&gt;&lt;li&gt;男士都行动了以后，每位女士观察她明天的男士（们），对其中的、在她的列表中最靠前的男士说：“你很有希望啊，请明天继续来”；对其他男士说“你是个好人，但是咱俩不合适”。&lt;/li&gt;&lt;li&gt;傍晚，被发好人卡的男士就在自己的列表中划去发他卡的女士名字。&lt;/li&gt;&lt;li&gt;如果有天傍晚所有男士都没有被发卡，那么算法终止。&lt;/li&gt;&lt;/ul&gt;&lt;hr&gt;&lt;p&gt;这个算法产生的&lt;b&gt;一定是“稳定的完美匹配”么&lt;/b&gt;？&lt;/p&gt;&lt;p&gt;而且是在这之前还有个问题：这个&lt;b&gt;算法一定会终止么&lt;/b&gt;？&lt;/p&gt;&lt;p&gt;——这些都将在下一篇文章中回答。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>Bat特白</author>
<guid isPermaLink="false">2018-10-18-47039961</guid>
<pubDate>Thu, 18 Oct 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>一个“二分查找”问题</title>
<link>https://henix.github.io/feeds/zhuanlan.c_124392554/2018-10-16-46855446.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/46855446&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-d89cb87de04290261718af47b1543aae_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;先吐槽一句：每次都要编造出来一个题图实在是太累了~&lt;/p&gt;&lt;hr&gt;&lt;p&gt;读书——（翻译的文笔真是不敢恭维）&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-c6daf25436cd4a48e31a2459ee7e1a3b_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;260&quot; data-rawheight=&quot;341&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-c6daf25436cd4a48e31a2459ee7e1a3b&quot; data-watermark-src=&quot;v2-3ee88f00833318cb686f4984e29eb2c0&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;我决定复述一下这书里面唯一吸引我的问题。（所以这篇小文不完全算是我的原创文章）&lt;/p&gt;&lt;b&gt;&lt;hr&gt;&lt;/b&gt;&lt;p&gt;&lt;b&gt;问题1&lt;/b&gt;：如果有十二个彼此不同的数，按照值大小，有序地排成一行（但是&lt;b&gt;不知道是升序还是降序&lt;/b&gt;）。现在想知道这十二个数中的最大值。&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-882421358f59baf80dc624dc371abde6_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;817&quot; data-rawheight=&quot;71&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;那么只需要“询问”&lt;b&gt;首尾两端的值&lt;/b&gt;再做个比较就可以了。&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-ed635d3567d0a46142a1ebc52ccfd935_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;817&quot; data-rawheight=&quot;71&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;hr&gt;&lt;p&gt;&lt;b&gt;问题2：&lt;/b&gt;如果这十二个数，按照值大小，有序地排成一个环（&lt;b&gt;但是不知道是升序还是降序，也不知道环的起点和终点在哪里&lt;/b&gt;）。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d400de4b94b807d4f8b8ab60dcd78436_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;513&quot; data-rawheight=&quot;510&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-d400de4b94b807d4f8b8ab60dcd78436&quot; data-watermark-src=&quot;v2-375ef19eb52f3a0dcdf00d9b19b47c3c&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;现在想&lt;b&gt;快速&lt;/b&gt;知道这十二个数中的最大值，那么要如何做？&lt;/p&gt;&lt;hr&gt;&lt;p&gt;首先随意询问其中一个值，假设它是100。&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-3ae98a148d19cdaf5ffc922d1b3e9621_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;513&quot; data-rawheight=&quot;510&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-3ae98a148d19cdaf5ffc922d1b3e9621&quot; data-watermark-src=&quot;v2-8b941e9b96917ee1f306deca7a1c1f0e&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;可是也还不够啊，于是&lt;b&gt;再询问它旁边的一个值&lt;/b&gt;（这里其实&lt;b&gt;不是必须&lt;/b&gt;访问旁边的，我后文会讨论）。假设这个值是200（左边是200右边是100的情况完全是类似和镜像的）。&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-8bf4f999c3433b9fa79284f13291959b_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;513&quot; data-rawheight=&quot;510&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-8bf4f999c3433b9fa79284f13291959b&quot; data-watermark-src=&quot;v2-0ca91295aa4fe930aea6d5ada2bc7c62&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;OK，现在我们可以“&lt;b&gt;觉得&lt;/b&gt;”是&lt;b&gt;顺时针增序&lt;/b&gt;排列了，称之为&lt;b&gt;问题2-1&lt;/b&gt;（虽然还不知道首尾都在什么位置）：&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-f1d073cd5a706e398d3aad00eab5a46b_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;513&quot; data-rawheight=&quot;510&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-f1d073cd5a706e398d3aad00eab5a46b&quot; data-watermark-src=&quot;v2-d198a22e9d5d3aa116f36257bb6d5bdb&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;但是，等等，也有可能（虽然不是很大）是，如下图所示的&lt;b&gt;逆时针增序&lt;/b&gt;排列，称之为&lt;b&gt;问题2-2&lt;/b&gt;，此时最大值就是200：&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-e42d2e8ae95d8dcea71676b0989caaef_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;513&quot; data-rawheight=&quot;532&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-e42d2e8ae95d8dcea71676b0989caaef&quot; data-watermark-src=&quot;v2-a29a4f1de39a4a06bd752f1d58d23223&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;暂时无法区分会是哪一种，所以需要&lt;b&gt;再询问第三个值&lt;/b&gt;，这里我选择&lt;b&gt;100“对面”的值&lt;/b&gt;（实际上就是还没有询问的值的“&lt;b&gt;中间位置&lt;/b&gt;”处）：&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-f707719c8a1dace35ba7034078acf95c_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;513&quot; data-rawheight=&quot;510&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-f707719c8a1dace35ba7034078acf95c&quot; data-watermark-src=&quot;v2-89aace083323ad2b8f4f6b40c326b879&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;它有三种可能：介于100和200之间、比100小、比200大。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-af62dd8dd2b2ca0191b46deba1af4ee9_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1658&quot; data-rawheight=&quot;510&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-af62dd8dd2b2ca0191b46deba1af4ee9&quot; data-watermark-src=&quot;v2-18e89ab6fe0434ce393ca0f32307d1e8&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;b&gt;第一种情况&lt;/b&gt;，&lt;b&gt;问题2-2&lt;/b&gt;，就说明了的确是&lt;b&gt;逆时针增序&lt;/b&gt;排列，最大值是200。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-48fd598f77af6fe89a052eb1880d3d51_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;513&quot; data-rawheight=&quot;510&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-48fd598f77af6fe89a052eb1880d3d51&quot; data-watermark-src=&quot;v2-53a9e4fefa79d3347090e613570a3e3c&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;b&gt;第二种情况&lt;/b&gt;，称之为&lt;b&gt;问题2-1-1&lt;/b&gt;，说明了是&lt;b&gt;顺时针增序&lt;/b&gt;排列，最大值在200~50之间的位置上（虽然还是不知道在哪儿）。&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-f420e0e4044916db5e94ddca630158f5_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;513&quot; data-rawheight=&quot;510&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-f420e0e4044916db5e94ddca630158f5&quot; data-watermark-src=&quot;v2-13977d46c86a67b3551b54e4bc1a3e7f&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;这时，可以抛弃50~100之间的位置，并且收缩：&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-db1555589f716e554e2e084c65434f1b_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1167&quot; data-rawheight=&quot;509&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-db1555589f716e554e2e084c65434f1b&quot; data-watermark-src=&quot;v2-2fe74e5ae18e637bba82d0986608f157&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;上右图就形成了类似&lt;b&gt;问题2-1&lt;/b&gt;的情况，于是类似地处理现在的&lt;b&gt;问题2-1-1&lt;/b&gt;，询问50“对面的数值”：&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-99843272633caa685adb27b059aa4ed8_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;507&quot; data-rawheight=&quot;510&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-99843272633caa685adb27b059aa4ed8&quot; data-watermark-src=&quot;v2-fbcf832527cbb06f6f3c3f303e048df7&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;之后，肯定又可以丢弃一半，&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-e50addb07e9ebba422219dda4ddb0570_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;1148&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-e50addb07e9ebba422219dda4ddb0570&quot; data-watermark-src=&quot;v2-54d5f42778fcb05ae75c3c0b7f7f9943&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;然后不断类似处理即可。&lt;/p&gt;&lt;p&gt;&lt;b&gt;第三种情况&lt;/b&gt;，称之为&lt;b&gt;问题2-1-2&lt;/b&gt;，说明了是&lt;b&gt;顺时针增序&lt;/b&gt;排列，最大值在250~100之间的位置上（虽然还是不知道在哪儿）。&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-b917c418a873de6e1b89a3f0db40ec7a_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;513&quot; data-rawheight=&quot;510&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-b917c418a873de6e1b89a3f0db40ec7a&quot; data-watermark-src=&quot;v2-f6b42707cde9c686ca7cd0c005b6928b&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;同样地，忽略一半后收缩。&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-980bcd2980f110c8c650207d6e5dad58_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1110&quot; data-rawheight=&quot;509&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-980bcd2980f110c8c650207d6e5dad58&quot; data-watermark-src=&quot;v2-23711b6ac45d08f0705aec67e5825877&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;再将&lt;b&gt;问题2-1-2&lt;/b&gt;，转化为类似&lt;b&gt;问题2-1&lt;/b&gt;来处理。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d9edbc8371383cf75f934c124401ba2d_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;510&quot; data-rawheight=&quot;507&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-d9edbc8371383cf75f934c124401ba2d&quot; data-watermark-src=&quot;v2-68e83ae19e0be39e48b77793441cfec9&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;hr&gt;&lt;p&gt;这事实上就是一种&lt;b&gt;“二分查找”的变体&lt;/b&gt;而已。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;第一步时候其实也可以先询问三个将圆环三等分的位置的值：&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-a80a8706e6b827e48db2101adeea40b8_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;513&quot; data-rawheight=&quot;510&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-a80a8706e6b827e48db2101adeea40b8&quot; data-watermark-src=&quot;v2-4587b0ec231c7d33e97dd45fc97f5059&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;以其中一种情况为例：&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-340f0e7a1c2135aeb416ab7416d2d2f6_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;515&quot; data-rawheight=&quot;510&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-340f0e7a1c2135aeb416ab7416d2d2f6&quot; data-watermark-src=&quot;v2-e0c6e1499ca1eda5a216a6999355af2c&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;经过简单的分析可以“忽略”掉2/3，只留下1/3。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-2621c6073c91b916c100f348568c5cd6_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;515&quot; data-rawheight=&quot;510&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-2621c6073c91b916c100f348568c5cd6&quot; data-watermark-src=&quot;v2-936b16c00e5a0bdc17b687cacc53e58b&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;但是在收缩为1/3规模后，面临的仍然是&lt;b&gt;知道“相邻”两个值&lt;/b&gt;的情况，很难再继续“三等分”：&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-5a137e18649e1d06f6e17c12e1c179ec_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;512&quot; data-rawheight=&quot;506&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-5a137e18649e1d06f6e17c12e1c179ec&quot; data-watermark-src=&quot;v2-97f05ebcdc64acadfcc640294c86c168&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;而且从算法复杂度的角度来说，复杂度没有变化（用“渐进分析”的语言）。&lt;/p&gt;&lt;p&gt;因此我还是更喜欢之前的方法。&lt;/p&gt;</description>
<author>Bat特白</author>
<guid isPermaLink="false">2018-10-16-46855446</guid>
<pubDate>Tue, 16 Oct 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>中国剩余定理（CRT ）</title>
<link>https://henix.github.io/feeds/zhuanlan.c_124392554/2018-10-16-44591114.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/44591114&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-749a14807cb3f0a0400742d9807367d5_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;题图如有侵权请告知，将道歉并删除。&lt;/p&gt;&lt;p&gt;这次我决定简单粗暴地引入主题，因为要介绍的是我认为非常重要的、我非常喜欢的——&lt;b&gt;中国剩余定理(Chinese remainder theorem, CRT) &lt;/b&gt;！&lt;/p&gt;&lt;hr&gt;&lt;p&gt;《孙子算经》是中国古代重要的数学著作，共三卷，成书约在四、五世纪，作者生平和具体编写年不详。&lt;/p&gt;&lt;p&gt;其卷下的第26题为：&lt;/p&gt;&lt;blockquote&gt;今有物不知其数，三三数之剩二，五五数之剩三，七七数之剩二，问物几何？&lt;br&gt;答曰：‘二十三’。&lt;br&gt;术曰：三三数之剩二，置一百四十；五五数之剩三，置六十三，七七数之剩二，置三十，并之。得二百三十三，以二百一十减之，即得。凡三三数之剩一，则置七十；五五数之剩一，则置二十一；七七数之剩一，则置十五；一百六以上以一百五减之即得。&lt;/blockquote&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-3b96142704ee1adae2f5b7de4a2105d8_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;small&quot; data-rawwidth=&quot;1653&quot; data-rawheight=&quot;2191&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-3b96142704ee1adae2f5b7de4a2105d8&quot; data-watermark-src=&quot;v2-77ea0e0aa8a6542442a5296ac7a66255&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;（即——&lt;/p&gt;&lt;blockquote&gt;一个整数除以3余2、除以5余3、除以7余2，求这个整数。&lt;br&gt;答案：23&lt;br&gt;解法：由于除以3余2，因此加上一个140；由于除以5余3，因此加上一个63；由于除以7余2，因此加上一个30；这三个数的和是140+63+30=233，再减去210，就得到了23了。&lt;br&gt;这么说吧，只要是除以3余了一个1，就加上一个70；只要是除以5余了一个1，就加上一个21；只要是除以7余了一个1，就加上一个15。然后累加。超过了106就减去105就行了。&lt;/blockquote&gt;&lt;p&gt;）&lt;/p&gt;&lt;p&gt;该问题称之为“&lt;b&gt;物不知数&lt;/b&gt;”问题。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;在中国民间还有所谓“&lt;b&gt;韩信点兵&lt;/b&gt;”等类似问题：&lt;/p&gt;&lt;p&gt;（先插播一下所谓“&lt;b&gt;韩信将兵多多益善&lt;/b&gt;”）&lt;/p&gt;&lt;blockquote&gt;上尝从容与信言诸将能不，各有差。上问曰：“如我，能将几何？”信曰：“陛下不过能将十万。”上曰：“如公何如？”曰：“如臣，多多益善耳。”上笑曰：“多多益善，何为为我禽？” 信曰：“陛下不能将兵，而善将将，此乃信之所以为陛下禽也。”&lt;br&gt;——《汉史·韩彭英卢吴传第四》&lt;/blockquote&gt;&lt;p&gt;“&lt;b&gt;韩信点兵&lt;/b&gt;”问题的描述（之一）是：韩信让士兵排队，站3人一排，多出2人；站5人一排，多出4人；站7人一排，多出6人。于是他没有数就说出了士兵的数目。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;南宋，秦九韶在《数书九章》中明确地系统地叙述了求解一次同余组的一般计算步骤。在卷一“大衍总术”中详载了计算乘率的方法——“大衍求一术”。&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-a7e402f164f0f4c435bd3887e6f17831_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;375&quot; data-rawheight=&quot;539&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-a7e402f164f0f4c435bd3887e6f17831&quot; data-watermark-src=&quot;v2-3f5387ced226137ae01567f6001ff875&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;然而我看不懂= =&lt;/p&gt;&lt;p&gt;（&lt;a href=&quot;http://yuedu.163.com/book_reader/42fe434f7bd048a284378b05a54757c9_4/b1c568b0109c443f863e6243347a0217_5&quot;&gt;数学九章-【宋】秦九韶-免费电子书-在线阅读-网易云阅读&lt;/a&gt;）&lt;/p&gt;&lt;hr&gt;&lt;p&gt;明代，程大位在他的著作《直指算法统宗》（简称《算法统宗》）卷五中，提出了“孙子歌”——“&lt;b&gt;三人同行七十稀，五树梅花廿一枝， 七子团圆正半月，除百令五便得知&lt;/b&gt;。”。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-cfb3228dd7b058c16631f54e848102ea_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;320&quot; data-rawheight=&quot;458&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-cfb3228dd7b058c16631f54e848102ea&quot; data-watermark-src=&quot;v2-9ee7334e4e3f59da212566f68c9f9b31&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;实际上说的就是前文的：只要是除以3余了一个1，就加上一个70；只要是除以5余了一个1，就加上一个21；只要是除以7余了一个1，就加上一个15。然后累加。&lt;/p&gt;&lt;p&gt;再加上一句：计算这个总和除以105的余数。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;而我只会用现代的数学语言来解释：&lt;/p&gt;&lt;p&gt;先考虑问题的分解：&lt;/p&gt;&lt;p&gt;&lt;b&gt;问题1：&lt;/b&gt;计算一个整数 &lt;equation&gt;x&lt;/equation&gt; ，使得它满足除以3余2、除以5余3、除以7余2。&lt;/p&gt;&lt;p&gt;如果能够找到三个整数 &lt;equation&gt;x_1,x_2,x_3&lt;/equation&gt; ，使得：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;x_1&lt;/equation&gt; 除以3余2、除以5余0、除以7余0；&lt;/p&gt;&lt;p&gt;&lt;equation&gt;x_2&lt;/equation&gt; 除以3余0、除以5余3、除以7余0；&lt;/p&gt;&lt;p&gt;&lt;equation&gt;x_3&lt;/equation&gt; 除以3余0、除以5余0、除以7余2；&lt;/p&gt;&lt;p&gt;那么令 &lt;equation&gt;x= x_1+x_2+x_3&lt;/equation&gt; ，就很容易验证这时的 &lt;equation&gt;x&lt;/equation&gt; 就满足除以3余2、除以5余3、除以7余2。&lt;/p&gt;&lt;p&gt;分别称找到整数 &lt;equation&gt;x_1,x_2,x_3&lt;/equation&gt; 的问题为&lt;b&gt;问题1-1&lt;/b&gt;、&lt;b&gt;问题1-2&lt;/b&gt;、&lt;b&gt;问题1-3&lt;/b&gt;。可以看出这三个问题本质上是类似的。&lt;/p&gt;&lt;p&gt;下面对&lt;b&gt;问题1-1&lt;/b&gt;继续分解，如果能够找到一个整数 &lt;equation&gt;y_1&lt;/equation&gt; 满足 &lt;equation&gt;y_1&lt;/equation&gt; 除以3余1、除以5余0、除以7余0，那么令 &lt;equation&gt;x_1= 2\times y_1&lt;/equation&gt; ，就很容易验证这时的 &lt;equation&gt;x_1&lt;/equation&gt; 就满足除以3余2、除以5余0、除以7余0。&lt;/p&gt;&lt;p&gt;因此定义&lt;/p&gt;&lt;p&gt;&lt;b&gt;问题1-1-1&lt;/b&gt;为：寻找整数 &lt;equation&gt;y_1&lt;/equation&gt; 满足 &lt;equation&gt;y_1&lt;/equation&gt; 除以3余1、除以5余0、除以7余0；&lt;/p&gt;&lt;p&gt;&lt;b&gt;问题1-2-1&lt;/b&gt;为：寻找整数 &lt;equation&gt;y_2&lt;/equation&gt; 满足 &lt;equation&gt;y_2&lt;/equation&gt; 除以3余0、除以5余1、除以7余0；&lt;/p&gt;&lt;p&gt;&lt;b&gt;问题1-3-1&lt;/b&gt;为：寻找整数 &lt;equation&gt;y_3&lt;/equation&gt; 满足 &lt;equation&gt;y_3&lt;/equation&gt; 除以3余0、除以5余0、除以7余1。&lt;/p&gt;&lt;p&gt;这三个问题本质上是相同的。&lt;/p&gt;&lt;p&gt;如果找到了 &lt;equation&gt;y_1,y_2,y_3&lt;/equation&gt; ，那么就可以取 &lt;equation&gt;x=2\times y_1+3\times y_2+2\times y_3&lt;/equation&gt; 。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;下面就以&lt;b&gt;问题1-1-1&lt;/b&gt;为例：寻找整数 &lt;equation&gt;z&lt;/equation&gt; 使得 &lt;equation&gt;z&lt;/equation&gt; 除以3余1、除以5余0、除以7余0。&lt;/p&gt;&lt;p&gt;于是 &lt;equation&gt;z&lt;/equation&gt; 一定是 &lt;equation&gt;5\times7=35&lt;/equation&gt; 的倍数，假设 &lt;equation&gt;z=35k&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;那么就有 &lt;equation&gt;35k\equiv 1\pmod 3&lt;/equation&gt; ，而这时的 &lt;equation&gt;k&lt;/equation&gt; 就是 &lt;equation&gt;5\times7&lt;/equation&gt; 模3的逆（参看“&lt;a href=&quot;https://zhuanlan.zhihu.com/p/44523169&quot;&gt;5÷2=6？——是的，模7意义下&lt;/a&gt;”），将这个 &lt;equation&gt;k&lt;/equation&gt; 记作 &lt;equation&gt;\left[ 35^{-1} \right]_{3}&lt;/equation&gt; ，那么 &lt;equation&gt;z&lt;/equation&gt; 就等于 &lt;equation&gt;5\times7\times\left[ \left( 5\times7 \right)^{-1} \right]_{3}&lt;/equation&gt; ，恰好就是 &lt;equation&gt;5\times7\times2=70&lt;/equation&gt; ，对应“凡三三数之剩一，则置七十”一句及“三人同行七十稀”一句。&lt;/p&gt;&lt;p&gt;于是类推得到，&lt;/p&gt;&lt;p&gt;&lt;b&gt;问题1-1-2&lt;/b&gt;的解答是 &lt;equation&gt;3\times7\times\left[ \left( 3\times7 \right)^{-1} \right]_{5}&lt;/equation&gt; ，恰好就是 &lt;equation&gt;3\times7\times1=21&lt;/equation&gt; ，对应“五五数之剩一，则置二十一”一句及“五树梅花廿一枝”一句；&lt;/p&gt;&lt;p&gt;&lt;b&gt;问题1-1-3&lt;/b&gt;的解答是 &lt;equation&gt;3\times5\times\left[ \left( 3\times5 \right)^{-1} \right]_{7}&lt;/equation&gt; ，恰好就是 &lt;equation&gt;3\times5\times1=15&lt;/equation&gt; ，对应“七七数之剩一，则置十五”一句及“七子团圆月正半”一句。&lt;/p&gt;&lt;p&gt;所以将分解的问题复原，可得：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;x=2\times\left( 5\times7\times\left[ \left( 5\times7 \right)^{-1} \right]_{3} \right)+3\times \left(3\times7\times\left[ \left( 3\times7 \right)^{-1} \right]_{5} \right)+2\times \left( 3\times5\times\left[ \left( 3\times5 \right)^{-1} \right]_{7} \right)&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;最后 ，注意到，如果 &lt;equation&gt;x&lt;/equation&gt; 满足除以3余2、除以5余3、除以7余2，那么 &lt;equation&gt;x+3\times5\times7&lt;/equation&gt; 也同样满足。&lt;/p&gt;&lt;p&gt;因此要计算满足要求的最小的非负整数，就只需要计算总和除以105的余数即可。——对应“除百零五便得知”一句。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;下面要讨论的是：如果有多个满足要求的整数，那么&lt;b&gt;它们之间有什么关系&lt;/b&gt;呢？&lt;/p&gt;&lt;p&gt;假设 &lt;equation&gt;X,Y&lt;/equation&gt; 都满足“除以3余a、除以5余b、除以7余c”。&lt;/p&gt;&lt;p&gt;观察 &lt;equation&gt;X-Y&lt;/equation&gt; 会发现， &lt;equation&gt;X-Y&lt;/equation&gt; 满足“除以3余0、除以5余0、除以7余0”。因此 &lt;equation&gt;X-Y&lt;/equation&gt; 一定是 &lt;equation&gt;3\times5\times7=105&lt;/equation&gt; 的倍数。&lt;/p&gt;&lt;p&gt;这也就是说，在“模105同余”的意义下，之前通过分解问题、组合解答的方法所得到的 &lt;equation&gt;x&lt;/equation&gt; 恰恰就是&lt;b&gt;唯一解&lt;/b&gt;。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;下面把这个问题一般化：假设整数 &lt;equation&gt;m_1,m_2, ... ,m_n&lt;/equation&gt; 两两互素，则对于任意的整数 &lt;equation&gt;a_1,a_2, ... ,a_n&lt;/equation&gt; ，方程组&lt;/p&gt;&lt;p&gt;&lt;equation&gt;      \begin{equation}     \begin{cases}     x\equiv a_1\pmod {m_1}\\     x\equiv a_2\pmod {m_2}\\     \cdots \\     x\equiv a_n\pmod {m_n}\\     \end{cases}     \end{equation}&lt;/equation&gt; &lt;/p&gt;&lt;p&gt;都存在整数解，且若&lt;equation&gt;X,Y&lt;/equation&gt; 都满足该方程组，则必有 &lt;equation&gt;X\equiv Y\pmod N&lt;/equation&gt; ，其中 &lt;equation&gt;N=\prod_{i=1}^{n}m_i&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;具体而言， &lt;equation&gt;x\equiv\sum_{i=1}^{n}{a_i\times\frac{N}{m_i}\times\left[ \left( \frac{N}{m_i} \right)^{-1} \right]_{m_i}}\pmod N&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;——这就是我非常看重和喜欢的&lt;b&gt;中国剩余定理(Chinese remainder theorem, CRT)&lt;/b&gt;。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;最后，中国剩余定理有&lt;b&gt;很多重要&lt;/b&gt;的应用！我将在后续文章里慢慢介绍。&lt;/p&gt;</description>
<author>Bat特白</author>
<guid isPermaLink="false">2018-10-16-44591114</guid>
<pubDate>Tue, 16 Oct 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>5÷2=6？——是的，模7意义下</title>
<link>https://henix.github.io/feeds/zhuanlan.c_124392554/2018-09-14-44523169.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/44523169&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-7b9617c6b90e45794ebdc0cd58b06377_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;周4后5天是周几？4+5=9？&lt;/p&gt;&lt;p&gt;14时后过15个小时是几点？14+15=29？&lt;/p&gt;&lt;p&gt;7月再过6个月是几月？7+6=13？&lt;/p&gt;&lt;p&gt;……&lt;/p&gt;&lt;p&gt;其实人类早就在使用着“&lt;b&gt;模运算&lt;/b&gt;”。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;首先需要引入“&lt;b&gt;同余&lt;/b&gt;”的概念：假设 &lt;equation&gt;a,b&lt;/equation&gt; 都是整数，如果 &lt;equation&gt;n&lt;/equation&gt; 是一个正整数，且存在整数 &lt;equation&gt;k&lt;/equation&gt; 使得 &lt;equation&gt;a-b=k\times n&lt;/equation&gt; ，&lt;b&gt;则称 &lt;equation&gt;a,b&lt;/equation&gt; 模 &lt;equation&gt;n&lt;/equation&gt; 同余，记作&lt;/b&gt; &lt;equation&gt;a\equiv b \pmod n&lt;/equation&gt; 。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;于是：&lt;/p&gt;&lt;p&gt;周4后5天是周2，因为 &lt;equation&gt;4+5=9\equiv 2\pmod 7&lt;/equation&gt; ，而且 &lt;equation&gt;0\leq2&amp;lt; 7&lt;/equation&gt; （认为周日是一周的开始）。&lt;/p&gt;&lt;p&gt;14时后过15个小时是5时，因为 &lt;equation&gt;14+15=29\equiv 5\pmod {24}&lt;/equation&gt; ，而且 &lt;equation&gt;0\leq 5&amp;lt; 24&lt;/equation&gt; （认为周日是一周的开始）。&lt;/p&gt;&lt;p&gt;7月再过6个月是几月，因为 &lt;equation&gt;7+6=13\equiv 1\pmod {12}&lt;/equation&gt; ，而且 &lt;equation&gt;0\leq 1&amp;lt; 12&lt;/equation&gt; （认为周日是一周的开始）。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;对于给定的正整数 &lt;equation&gt;n&lt;/equation&gt; ，如果我们将谈论的范围限制在 &lt;equation&gt;0\sim n-1&lt;/equation&gt; 之间，那么就可以建立起来“模加法”、“模减法”和“模乘法”。&lt;/p&gt;&lt;p&gt;例如 &lt;equation&gt;n=10&lt;/equation&gt; 时，就可以建立如下的运算表：&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-df4ca159aa2dda1f06a0926bdd5b8929_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1309&quot; data-rawheight=&quot;429&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-df4ca159aa2dda1f06a0926bdd5b8929&quot; data-watermark-src=&quot;v2-c0bfe058570bdcf98d4d31f0edc66551&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;equation&gt;n=7&lt;/equation&gt; 时，可以建立如下的运算表：&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-c339ee8d69411dc4a6d072a407f3c9b4_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;969&quot; data-rawheight=&quot;315&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-c339ee8d69411dc4a6d072a407f3c9b4&quot; data-watermark-src=&quot;v2-abe861d3666931d7e7652b13917b1bb5&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;hr&gt;&lt;p&gt;那么下面来看看，能不能进行“模除法”？例如 &lt;equation&gt;5\div 2 \equiv ?\pmod 7&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;我们这样来看，在实数的世界里，如果 &lt;equation&gt;x=5/2&lt;/equation&gt; ，那么就有 &lt;equation&gt;2\times x=5&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;类比地，在模7的运算的世界里，如果 &lt;equation&gt;y\equiv5/2\pmod 7&lt;/equation&gt; ，那么也应该有 &lt;equation&gt;2\times y\equiv5\pmod 7&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;（从上面的表来看，是有这样的值的：6。&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-afba185cd41b5499edf54d6aac4f523e_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;304&quot; data-rawheight=&quot;316&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-afba185cd41b5499edf54d6aac4f523e&quot; data-watermark-src=&quot;v2-504063d4c2637c002ffb3dfcd598e16a&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;）&lt;/p&gt;&lt;p&gt;进而，我们考虑这样一个问题 ： &lt;equation&gt;1\div 2 \equiv ?\pmod 7&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;如果可以找到 &lt;equation&gt;z\equiv1\div 2 \pmod 7&lt;/equation&gt; ，那么就可以令 &lt;equation&gt;y=5z\pmod 7&lt;/equation&gt; ，就一定有 &lt;equation&gt;2\times y\equiv2\times z\times5 \equiv1\times5\equiv5\pmod 7&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;（从上面的表来看，是有这样的值的：4。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-c2a44f0b60a361f295723cb45037223e_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;304&quot; data-rawheight=&quot;315&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-c2a44f0b60a361f295723cb45037223e&quot; data-watermark-src=&quot;v2-35db2edba27c2feef004d413d5f1ca50&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;）&lt;/p&gt;&lt;p&gt;一般来讲，对于给定的正整数 &lt;equation&gt;n&lt;/equation&gt; 和整数 &lt;equation&gt;a&lt;/equation&gt; ，如何寻找 &lt;equation&gt;z&lt;/equation&gt; 使得 &lt;equation&gt;1\div a\equiv z\pmod n&lt;/equation&gt; ——这个问题暂缓。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;下面我们来看看，是不是可以计算 &lt;equation&gt;4\div 2 \equiv ?\pmod {10}&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;看看表，哦，有俩答案……麻烦……&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-b47da89569973b86eef6e02e380a6d5e_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;417&quot; data-rawheight=&quot;429&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-b47da89569973b86eef6e02e380a6d5e&quot; data-watermark-src=&quot;v2-098c2314cb715cf34a98b5be510233ab&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;那么 &lt;equation&gt;1\div 2 \equiv ?\pmod {10}&lt;/equation&gt; 呢？无解……&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-c68ede5b29bdf4724f839a605580e127_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;417&quot; data-rawheight=&quot;429&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-c68ede5b29bdf4724f839a605580e127&quot; data-watermark-src=&quot;v2-297c650b77a8953c851a32c1eaaf1f44&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;好吧，看来&lt;b&gt;这时候的“除法”是不适于定义的&lt;/b&gt;——可能没有结果、可能结果不唯一，就仿佛 &lt;equation&gt;0\div0&lt;/equation&gt; 、 &lt;equation&gt;3\div0&lt;/equation&gt; 一样，“除以0”是无定义的。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;于是，现在我来分析：对于给定的正整数 &lt;equation&gt;n&lt;/equation&gt; 和整数 &lt;equation&gt;a&lt;/equation&gt; ，如何寻找 &lt;equation&gt;z&lt;/equation&gt; 使得 &lt;equation&gt;1\div a\equiv z\pmod n&lt;/equation&gt; 这个问题。&lt;/p&gt;&lt;p&gt;如果 &lt;equation&gt;1\div a\equiv z\pmod n&lt;/equation&gt; ，那么 &lt;equation&gt;1\equiv a\times z\pmod n&lt;/equation&gt; ，由定义就有：存在整数 &lt;equation&gt;k&lt;/equation&gt; 使得 &lt;equation&gt;z\times a+(-k)\times n=1&lt;/equation&gt; ——而这就是“&lt;b&gt;裴蜀等式&lt;/b&gt;”（见“&lt;a href=&quot;https://zhuanlan.zhihu.com/p/32504576&quot;&gt;凑邮资问题&lt;/a&gt;”）。&lt;/p&gt;&lt;p&gt;于是，这样的整数 &lt;equation&gt;z&lt;/equation&gt; 存在&lt;b&gt;当且仅当 &lt;equation&gt;a,n&lt;/equation&gt; 互素&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;所以之前的&lt;equation&gt;1\div 2 \equiv ?\pmod 7&lt;/equation&gt; 有解而&lt;equation&gt;1\div 2 \equiv ?\pmod {10}&lt;/equation&gt; 无解。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;当 &lt;equation&gt;n&lt;/equation&gt; 是素数时候，&lt;equation&gt;1\sim n-1&lt;/equation&gt; 都与之互素，因此任一个 &lt;equation&gt;1\leq a\leq n-1&lt;/equation&gt; ，都存在某个 &lt;equation&gt;1\leq b \leq n-1&lt;/equation&gt; ，使得 &lt;equation&gt;a\times b\equiv 1\pmod n&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;这时称这个 &lt;equation&gt;b&lt;/equation&gt; 为“ &lt;equation&gt;a&lt;/equation&gt; 模 &lt;equation&gt;n&lt;/equation&gt; 的逆”，记作 &lt;equation&gt;b=a^{-1}\pmod n&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;（就类似于实数世界里面， &lt;equation&gt;3^{-1}=1/3&lt;/equation&gt; ， &lt;equation&gt;3\times3^{-1}=1&lt;/equation&gt; 。）&lt;/p&gt;&lt;p&gt;例如 &lt;equation&gt;n=7&lt;/equation&gt; 时， &lt;equation&gt;1=1^{-1}\pmod 7&lt;/equation&gt; ， &lt;equation&gt;4=2^{-1}\pmod 7&lt;/equation&gt; ， &lt;equation&gt;5=3^{-1}\pmod 7&lt;/equation&gt; ， &lt;equation&gt;2=4^{-1}\pmod 7&lt;/equation&gt; ， &lt;equation&gt;3=5^{-1}\pmod 7&lt;/equation&gt; ， &lt;equation&gt;6=6^{-1}\pmod 7&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;这时，计算 &lt;equation&gt;5\div 2 \equiv ?\pmod 7&lt;/equation&gt; ，事实上就是计算 &lt;equation&gt;5\times 2^{-1} \equiv 5\times 4\equiv 20\equiv6\pmod 7&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;于是有如下计算表：&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-1a4ad553f8112aa5999a90dd1b07d6a6_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;303&quot; data-rawheight=&quot;315&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-1a4ad553f8112aa5999a90dd1b07d6a6&quot; data-watermark-src=&quot;v2-644f8e9a3f421a9c5fff7601a2375590&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;hr&gt;&lt;p&gt;是的，前面的符号有些混乱，说法也不严谨。&lt;/p&gt;&lt;p&gt;事实上，前面是采用了“直观易懂”的叙述方式；而严谨表述应该使用“&lt;b&gt;剩余类&lt;/b&gt;”。&lt;/p&gt;&lt;p&gt;设 &lt;equation&gt;n&lt;/equation&gt; 是一个正整数，则整数集上的“模 &lt;equation&gt;n&lt;/equation&gt; 同余”关系是一个&lt;b&gt;等价关系&lt;/b&gt;。 &lt;equation&gt;A_i=\{x|x\equiv i \pmod n\}&lt;/equation&gt; ， &lt;equation&gt;0\leq i\leq n-1&lt;/equation&gt; ，则 &lt;equation&gt;π=\{A_0, A_1, …, A_{n-1}\}&lt;/equation&gt; 就是整数集&lt;/p&gt;&lt;p&gt;的一个划分。对于整数 &lt;equation&gt;x&lt;/equation&gt; ，用 &lt;equation&gt;\bar{x}&lt;/equation&gt; 或 &lt;equation&gt;\left[ x \right]&lt;/equation&gt; 表示 &lt;equation&gt;x&lt;/equation&gt; 所在的等价类，称作&lt;equation&gt;x&lt;/equation&gt; 所在的&lt;b&gt;剩余类&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;当 &lt;equation&gt;x\equiv y\pmod n&lt;/equation&gt; 时，有 &lt;equation&gt;\bar{x}=\bar{y}&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;在剩余类上可以定义“加法”、“减法”、“乘法”。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;equation&gt;\bar{x}+\bar{y}=\overline {x+y}&lt;/equation&gt; ；&lt;/li&gt;&lt;li&gt;&lt;equation&gt;\bar{x}-\bar{y}=\overline {x-y}&lt;/equation&gt; ；&lt;/li&gt;&lt;li&gt;&lt;equation&gt;\bar{x}\times\bar{y}=\overline {x\times y}&lt;/equation&gt; 。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;当 &lt;equation&gt;y&lt;/equation&gt; 与 &lt;equation&gt;n&lt;/equation&gt; 互素时，可以定义 &lt;equation&gt;\bar{y}^{-1}&lt;/equation&gt; ，并可以定义 &lt;equation&gt;\bar{x}\div\bar{y}=\bar {x}\times \bar{y}^{-1}&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;实际上，这也就构成&lt;b&gt;有限域（finite&lt;/b&gt; &lt;b&gt;field）&lt;/b&gt;中的&lt;b&gt;素域（prime field）&lt;/b&gt;。&lt;/p&gt;</description>
<author>Bat特白</author>
<guid isPermaLink="false">2018-09-14-44523169</guid>
<pubDate>Fri, 14 Sep 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>“德·布鲁因”魔术</title>
<link>https://henix.github.io/feeds/zhuanlan.c_124392554/2018-09-08-44064699.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/44064699&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-c0b9be1e47ed1935eb58ca4916b66635_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;首先需要介绍一下“&lt;b&gt;切牌&lt;/b&gt;”的概念：将一摞扑克中上面的若干张放到一摞的最下面称作一次切牌：&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-9961e67fe74d4588fa9a250b54f6cf89_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;853&quot; data-rawheight=&quot;339&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-9961e67fe74d4588fa9a250b54f6cf89&quot; data-watermark-src=&quot;v2-d7f6e9423c60b099273a33d3d1818eee&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;如果将纸牌视作一个循环序列（即最下面一张牌的“下1张”是顶端的一张），则&lt;b&gt;切牌并不改变纸牌之间的前后相邻关系&lt;/b&gt;。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;魔术师邀请5位丝毫不知情的观众参加；&lt;/p&gt;&lt;ul&gt;&lt;li&gt;拿出16张背面朝上的纸牌交给第1位观众；&lt;/li&gt;&lt;li&gt;请第1位观众随意地切牌任意多次后将这叠纸牌交给第2位观众；&lt;/li&gt;&lt;li&gt;第2位观众取走最上面的一张后将剩下的纸牌交给第3位；&lt;/li&gt;&lt;li&gt;第3位观众取走最上面的一张后将剩下的纸牌交给第4位；&lt;/li&gt;&lt;li&gt;第4位观众取走最上面的一张后将剩下的纸牌交给第5位；&lt;/li&gt;&lt;li&gt;第5位观众取走最上面的一张。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;魔术师（故弄玄虚后）请第2-5位观众中&lt;b&gt;取到红色花色纸牌者举一下手&lt;/b&gt;；&lt;/p&gt;&lt;p&gt;魔术师（再次故弄玄虚后）&lt;b&gt;道出&lt;/b&gt;第2-5位观众手中的纸牌。&lt;/p&gt;&lt;video id=&quot;None&quot; data-swfurl=&quot;&quot; poster=&quot;https://pic3.zhimg.com/80/v2-a168ff90926104f9a5e74ac7f0e94e42_b.jpg&quot; data-sourceurl=&quot;https://www.zhihu.com/video/1021836188742791168&quot; data-name=&quot;“德·布鲁因”魔术&quot; data-video-id=&quot;&quot; data-video-playable=&quot;true&quot; data-lens-id=&quot;1021836188742791168&quot;&gt;&lt;/video&gt;&lt;hr&gt;&lt;p&gt;&lt;b&gt;魔术揭秘&lt;/b&gt;&lt;/p&gt;&lt;p&gt;游戏的关键就在于16张纸牌排为一个&lt;b&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/44034666&quot;&gt;德·布鲁因序列&lt;/a&gt;&lt;/b&gt;：红色表示1，黑色表示0。&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-a6f34228991c80dde59eea6cf6757642_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;371&quot; data-rawheight=&quot;332&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-a6f34228991c80dde59eea6cf6757642&quot; data-watermark-src=&quot;v2-3f78a137e7c23c23738ddba34bff66b6&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;之后关键点在于：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;观众1的&lt;b&gt;切牌并不会改变&lt;/b&gt;这个循环的德·布鲁因序列；&lt;/li&gt;&lt;li&gt;而连续4个“红/黑”组合是&lt;b&gt;唯一&lt;/b&gt;的，所以对应的4张纸牌是&lt;b&gt;可以唯一确定&lt;/b&gt;的。例如下图就是观众2345都是“红红红红”&lt;/li&gt;&lt;/ol&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-9b8eee20405992538afdcabdcfb6a9c2_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;371&quot; data-rawheight=&quot;332&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-9b8eee20405992538afdcabdcfb6a9c2&quot; data-watermark-src=&quot;v2-e05cf49563e65620a459c053f9f514e6&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;hr&gt;&lt;p&gt;下面是一个小技巧：纸牌的点数可以采用一些便于记忆的方法。&lt;/p&gt;&lt;p&gt;例如，用红色表示1，黑色表示0后，所有的16种序列就可以列在下表中：&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-02f99f452320bf4ff6bdd52971b5fcc6_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;691&quot; data-rawheight=&quot;425&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-02f99f452320bf4ff6bdd52971b5fcc6&quot; data-watermark-src=&quot;v2-ed19368a204b2c6f7ec7cd6376ade64f&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;使用第1位表示花色：&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-5b709107b6737f5d8d72c748fe15b695_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;691&quot; data-rawheight=&quot;426&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-5b709107b6737f5d8d72c748fe15b695&quot; data-watermark-src=&quot;v2-a4ad41add9ce41ce78060917d4bde0cf&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;使用后三位的二进制值表示的值再加1m，作为牌的点数，于是每个序列就对应一张牌：&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-14b709e4e795eac36dac6a5aa667a1cc_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;688&quot; data-rawheight=&quot;424&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-14b709e4e795eac36dac6a5aa667a1cc&quot; data-watermark-src=&quot;v2-3333283a2a37c911875fc655ee644689&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;然后将牌拍成一圈，以该张牌开始的4位序列就是该张牌对应的序列：&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-ebe377e95c3814937a1b325eaa4fd617_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1057&quot; data-rawheight=&quot;429&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-ebe377e95c3814937a1b325eaa4fd617&quot; data-watermark-src=&quot;v2-cda269a04b4baccb51d4aeb3429726aa&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;于是只要记住了规则和德·布鲁因序列，这个魔术就变得简单了：&lt;/p&gt;&lt;p&gt;“第2-5位观众中取到红色花色纸牌者举一下手”事实上说明了4位序列，继而魔术师可以得到之后的三个序列，也就可以道出（计算出）四张牌。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;例如下述情形：&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-9a9e6202704d1bef6473c403bb83288e_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;443&quot; data-rawheight=&quot;200&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-9a9e6202704d1bef6473c403bb83288e&quot; data-watermark-src=&quot;v2-b94af14ce2dc43307873969d7a5aa72f&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;第2位观众和第5位观众拿到红色牌，因此第2位观众开始的序列是0101，之后的3个序列分别是：1010、0100和1001。&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-03e77012b21bae7379dfbba10eae4bc2_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;412&quot; data-rawheight=&quot;358&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-03e77012b21bae7379dfbba10eae4bc2&quot; data-watermark-src=&quot;v2-215f7f0fe499b661d2dbe379ed426798&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;得到：&lt;/p&gt;&lt;p&gt;第2位观众手中的牌是♠6；&lt;/p&gt;&lt;p&gt;第3位观众手中的牌是♡3；&lt;/p&gt;&lt;p&gt;第4位观众手中的牌是♠5；&lt;/p&gt;&lt;p&gt;第5位观众手中的牌是♡2。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;这里介绍的实际上是一个充分简化的版本，更复杂情况和更多技巧的介绍可参考：(美)珀西•迪亚科尼斯、葛立恒著，汪晓勤、黄友初译，《魔法数学：大魔术的数学灵魂》，上海科技教育出版社，2015.8）。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-704d9000d57e9026b0c8c7247ec7a033_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;412&quot; data-rawheight=&quot;589&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-704d9000d57e9026b0c8c7247ec7a033&quot; data-watermark-src=&quot;v2-c151a36a95e7ee20957059a451297faf&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>Bat特白</author>
<guid isPermaLink="false">2018-09-08-44064699</guid>
<pubDate>Sat, 08 Sep 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>德·布鲁因（de Bruijn）有向图和德·布鲁因序列</title>
<link>https://henix.github.io/feeds/zhuanlan.c_124392554/2018-09-08-44034666.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/44034666&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-768aa806b2d179f06be37dd93bf696e7_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;在上一篇文章“&lt;a href=&quot;https://zhuanlan.zhihu.com/p/43960965&quot;&gt;存储器轮&lt;/a&gt;”中，曾经引入了两个图： &lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-fa4ced3add12bfb8984a67d6459a7f67_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;845&quot; data-rawheight=&quot;574&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-fa4ced3add12bfb8984a67d6459a7f67&quot; data-watermark-src=&quot;v2-8ae7a1926681a31c6ac6cd87dbaa2c1e&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;事实上，这样的图的顶点集是 &lt;equation&gt;V=\{x_1x_2... x_n|x_i\in\{0, 1\}，i=1, 2, ..., n\}&lt;/equation&gt; ，从任意顶点 &lt;equation&gt;x_1x_2... x_n&lt;/equation&gt; 到2个其他顶点 &lt;equation&gt;x_2...x_n0&lt;/equation&gt; 和 &lt;equation&gt;x_2...x_n1&lt;/equation&gt; 分别各有一条有向边，它们称作&lt;b&gt;德•布鲁因（de Bruijn）有向图&lt;/b&gt; &lt;equation&gt;B(2, n)&lt;/equation&gt; 。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;equation&gt;B(2, n)&lt;/equation&gt; 还有其他两种等价定义。&lt;/p&gt;&lt;p&gt;&lt;b&gt;定义2：&lt;/b&gt; &lt;equation&gt;B(2, n)&lt;/equation&gt; 的顶点集合定义为 &lt;equation&gt;V=\{0, 1, ..., 2^n-1\}&lt;/equation&gt; ，有向边集合定义为 &lt;equation&gt;E=\{(x, y)|y\equiv2x(\bmod 2^n)或y\equiv2x+1(\bmod 2^n)\}&lt;/equation&gt; 。（它和之前定义的等价性是明显的）&lt;/p&gt;&lt;p&gt;例如上述两图等价于下图：&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-5bd0be321d2dab41b618a789c85820d8_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;754&quot; data-rawheight=&quot;476&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-5bd0be321d2dab41b618a789c85820d8&quot; data-watermark-src=&quot;v2-2441463dd7e3502e3f3386d6700cd81e&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;hr&gt;&lt;p&gt;介绍定义3之前需要先有向图上的“线图”：若在有向图 &lt;equation&gt;D&lt;/equation&gt; 中有两条有向边 &lt;equation&gt;(u, v)&lt;/equation&gt; 和 &lt;equation&gt;(v, w)&lt;/equation&gt; ，则在新的图 &lt;equation&gt;L(D)&lt;/equation&gt; 中画一条从代表边 &lt;equation&gt;(u, v)&lt;/equation&gt; 的顶点到代表边 &lt;equation&gt;(v, w)&lt;/equation&gt; 的顶点的有向边（如下图所示）。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-03b2418258970e8d9b9a09f54c8b35b0_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1025&quot; data-rawheight=&quot;214&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-03b2418258970e8d9b9a09f54c8b35b0&quot; data-watermark-src=&quot;v2-ea81729517811c62d3e5a80c7c55730e&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;得到的 &lt;equation&gt;L(D)&lt;/equation&gt; 就称作 &lt;equation&gt;D&lt;/equation&gt; 的&lt;b&gt;线图（line graph）&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;例如下图上的线图就是下图下：&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-9a31c97de1772d42ab4e552dfc403055_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;568&quot; data-rawheight=&quot;409&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-9a31c97de1772d42ab4e552dfc403055&quot; data-watermark-src=&quot;v2-1dfd2ef3ae55991717e01490c70e0d5f&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;hr&gt;&lt;p&gt;&lt;b&gt;定义3：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;(1) 定义 &lt;equation&gt;B(2, 1)&lt;/equation&gt; 如下图所示：&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-9dbd1b57149f9dffa2f27de373cf5c2f_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;405&quot; data-rawheight=&quot;100&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-9dbd1b57149f9dffa2f27de373cf5c2f&quot; data-watermark-src=&quot;v2-45d8139706fb0232b829e5530d2a9268&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;(2) &lt;equation&gt;n\geq2&lt;/equation&gt; 时， &lt;equation&gt;B(2, n)&lt;/equation&gt; 为 &lt;equation&gt;B(2, n-1)&lt;/equation&gt; 的线图，即 &lt;equation&gt;B(2, n)=L(B(2, n-1))&lt;/equation&gt; ，在 &lt;equation&gt;B(2, n-1)&lt;/equation&gt; 中由顶点 &lt;equation&gt;x_1x_2...x_n&lt;/equation&gt; 指向顶点 &lt;equation&gt;x_2...x_nx_{n+1}&lt;/equation&gt; 的有向边在 &lt;equation&gt;B(2, n)&lt;/equation&gt; 中命名为顶点 &lt;equation&gt;x_1x_2...x_nx_{n+1}&lt;/equation&gt; 。（例如 &lt;equation&gt;B(2, 2)&lt;/equation&gt; 如下图左所示， &lt;equation&gt;B(2, 3)&lt;/equation&gt; 如下图右所示）&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-0d07be00c3f781a424141cbe21225cc0_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;809&quot; data-rawheight=&quot;432&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-0d07be00c3f781a424141cbe21225cc0&quot; data-watermark-src=&quot;v2-45fc3b90e5abb5b5567d4437a5ebfef2&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;hr&gt;&lt;p&gt;由 &lt;equation&gt;B(2, n)&lt;/equation&gt; 中欧拉回路得到的0-1串称作长度 &lt;equation&gt;2^n&lt;/equation&gt; 的&lt;b&gt;德·布鲁因（de Bruijn）序列&lt;/b&gt;。例如由下图左得到长度16的德·布鲁因序列1111011001010000。&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-9e4670d59cd994b0d3834a087686fdb6_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;860&quot; data-rawheight=&quot;438&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-9e4670d59cd994b0d3834a087686fdb6&quot; data-watermark-src=&quot;v2-6816b822bd218a1fab6cb0330b34d2d3&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;hr&gt;&lt;p&gt;长度 &lt;equation&gt;2^n&lt;/equation&gt; 的德·布鲁因序列还有其他的构造方法，举例如下。&lt;/p&gt;&lt;p&gt;&lt;b&gt;其他方法1：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;令 &lt;equation&gt;m=2^{n-1}&lt;/equation&gt; ，第一行写下 &lt;equation&gt;m&lt;/equation&gt; 个“1”和 &lt;equation&gt;m&lt;/equation&gt; 个“0”，第二行写下 &lt;equation&gt;m&lt;/equation&gt; 个“10”， &lt;equation&gt;n=3&lt;/equation&gt; 的情况如下图所示：&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-803384dd95818e925d01bb044c88def7_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;319&quot; data-rawheight=&quot;273&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-803384dd95818e925d01bb044c88def7&quot; data-watermark-src=&quot;v2-ee9c83b03561ee6358066995a2f5bc47&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;上一行编号和“1”或“0”之间的映射关系为： &lt;equation&gt;f(i)=1，f(m+i)=0，1\leq i\leq m&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;之后将第一行和第二行的“1”自左而右依次一一相连、将第一行和第二行的“0”也自左而右依次一一相连。连线实际上构成了位置编号的置换 &lt;equation&gt;p(i)=2i-1，p(m+i)=2i，1\leq i\leq m&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;&lt;equation&gt;n=3&lt;/equation&gt; 的情况如下图所示：&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-6102635816ba638c9589f466387ca596_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;319&quot; data-rawheight=&quot;273&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-6102635816ba638c9589f466387ca596&quot; data-watermark-src=&quot;v2-3d22387b1f390c0fc6e91a498dfcd995&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;将这个置换写成轮换的乘积的形式（每个轮换中最小的数值是递增的，且每个轮换都满足其中最小数值在第一个位置）。自左而右逐个写出各个轮换中数值对应第一行各个位置的“1”或“0”，则得到有 &lt;equation&gt;2^n&lt;/equation&gt; 个元素的德·布鲁因序列。&lt;/p&gt;&lt;p&gt;&lt;equation&gt;n=3&lt;/equation&gt; 的情况如下图所示：&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-8553267c3d7f3a844cf33a86e00841c0_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;319&quot; data-rawheight=&quot;273&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-8553267c3d7f3a844cf33a86e00841c0&quot; data-watermark-src=&quot;v2-2450e84997e7f291afcf9c1e17388c53&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;置换分解为轮换的乘积后，符合要求的表示为(1)(235)(476)(8)，对应的序列为 &lt;equation&gt;f(1)f(2)f(3)f(5)f(4)f(7)f(6)f(8)=11101000&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;&lt;equation&gt;n=2&lt;/equation&gt; 时如下图所示，置换分解为轮换的乘积后，符合要求的表示为(1)(23)(4)，对应的序列为 &lt;equation&gt;f(1)f(2)f(3)f(4)=1100&lt;/equation&gt; 。&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-bca9e4176e89c0ff2be2aed05418411e_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;168&quot; data-rawheight=&quot;271&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;equation&gt;n=4&lt;/equation&gt; 时的情况如下图所示。置换分解为轮换的乘积后，符合要求的表示为(1)(2, 3, 5, 9)(4, 7, 13, 10)(6, 11)(8, 15, 14, 12)(16)，对应的序列为 &lt;equation&gt;f(1)f(2)f(3)f(5)f(9)f(4)f(7)f(13)f(10)f(6)f(11)f(8)f(15)f(14)f(12)f(16)=1111011001010000&lt;/equation&gt; 。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-026d4e86bc662b3b9b3d986cde975133_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;622&quot; data-rawheight=&quot;255&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-026d4e86bc662b3b9b3d986cde975133&quot; data-watermark-src=&quot;v2-7844c8b7343e9ac09d7d9e49b04ac7c4&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;b&gt;其他方法2：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;马丁（M.A.Martin）1934证明了以下贪婪算法对所有的 &lt;equation&gt;n\geq2&lt;/equation&gt; 都可以构造出一个长度 &lt;equation&gt;2^n&lt;/equation&gt; 的德·布鲁因序列：&lt;/p&gt;&lt;p&gt;1. 写出 &lt;equation&gt;n&lt;/equation&gt; 个0构成序列开始的 &lt;equation&gt;n&lt;/equation&gt; 项；&lt;/p&gt;&lt;p&gt;2. 如果在序列尾部添加一个1后，和前 &lt;equation&gt;n-1&lt;/equation&gt; 项相连构成已经出现过的长为 &lt;equation&gt;n&lt;/equation&gt; 的0-1子串，则在序列尾部添加一个0；否则在序列尾部添加一个1。&lt;/p&gt;&lt;p&gt;3. 序列若还不够 &lt;equation&gt;2^n&lt;/equation&gt; 项，则返回步骤2；否则序列就是一个长度 &lt;equation&gt;2^n&lt;/equation&gt; 的德·布鲁因序列。&lt;/p&gt;&lt;p&gt;&lt;equation&gt;n=3&lt;/equation&gt; 时算法过程的情况如下表所示：&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-ffdb8550934f114a0bb18102ab25c110_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;848&quot; data-rawheight=&quot;380&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-ffdb8550934f114a0bb18102ab25c110&quot; data-watermark-src=&quot;v2-31750571fc7f063ce7ba630533e32fec&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;equation&gt;n= 4&lt;/equation&gt; 时算法过程的情况如下表所示：&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-01d75279892dc5345a0a40c25c503576_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;848&quot; data-rawheight=&quot;547&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-01d75279892dc5345a0a40c25c503576&quot; data-watermark-src=&quot;v2-897f8c411a422f08dce28adb04b49970&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;hr&gt;&lt;p&gt;德·布鲁因有向图在并行计算的网络拓扑方面得到了很多研究和应用。&lt;/p&gt;</description>
<author>Bat特白</author>
<guid isPermaLink="false">2018-09-08-44034666</guid>
<pubDate>Sat, 08 Sep 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>存储器轮</title>
<link>https://henix.github.io/feeds/zhuanlan.c_124392554/2018-09-08-43960965.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/43960965&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-13300e09dbd1806d6aee103a32ed77de_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;考虑如下图所示，由4个0和4个1组成的一个圆形排列：&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-6c726270f8852e1aca60da8605c08e84_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;454&quot; data-rawheight=&quot;453&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-6c726270f8852e1aca60da8605c08e84&quot; data-watermark-src=&quot;v2-4f23871c907949f807d031abd752f3ba&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;每次顺时针连续读三个数字的话，一共有8种方法（8个开始位置）。&lt;/p&gt;&lt;p&gt;上图所示的情况延内侧弧线读出的是010，而延外侧弧线读出的是101。&lt;/p&gt;&lt;p&gt;而这8种读法就恰好包含了所有长度为3的0-1序列：（依次是）010、101、011、111、110、111、100、000（下一次又回到了010）。&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-ec6c49aa93054d980d5c8a0157b40ad6_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2146&quot; data-rawheight=&quot;1019&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-ec6c49aa93054d980d5c8a0157b40ad6&quot; data-watermark-src=&quot;v2-745aecf0d8dac0c2f7686f57a78002ca&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;于是这个圆周可以描述所有8个3位0-1串，而仅需要8位0-1数字。&lt;/p&gt;&lt;p&gt;我们称其为（3位）&lt;b&gt;存储器轮&lt;/b&gt;。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;下面我们将这个问题一般化：能否将&lt;b&gt;若干个&lt;/b&gt;二进制数字0或1排列成圆，使得所有的相邻的 &lt;equation&gt;n&lt;/equation&gt; 元组（即指顺时针连续读 &lt;equation&gt;n&lt;/equation&gt; 个数字）包括所有的 &lt;equation&gt;2^n&lt;/equation&gt; 个 &lt;equation&gt;n&lt;/equation&gt; 位二进制序列&lt;b&gt;一次且仅一次&lt;/b&gt;?&lt;/p&gt;&lt;hr&gt;&lt;p&gt;我们首先分析一些基本结果：&lt;/p&gt;&lt;p&gt;&lt;b&gt;问题1：&lt;/b&gt;上面提到的“&lt;b&gt;若干个&lt;/b&gt;”到底是多少个？&lt;/p&gt;&lt;p&gt;&lt;b&gt;回答1：&lt;/b&gt; &lt;equation&gt;2^n&lt;/equation&gt; 个。&lt;/p&gt;&lt;p&gt;考虑&lt;equation&gt;2^n&lt;/equation&gt; 个 &lt;equation&gt;n&lt;/equation&gt; 位二进制序列的第一位，一定是在彼此不同的位置，而且恰好填满圆周。&lt;/p&gt;&lt;p&gt;&lt;b&gt;问题2：&lt;/b&gt;这 &lt;equation&gt;2^n&lt;/equation&gt; 个0或1中，有多少个0？多少个1？&lt;/p&gt;&lt;p&gt;&lt;b&gt;回答2：&lt;/b&gt;各有 &lt;equation&gt;2^{n-1}&lt;/equation&gt; 个。&lt;/p&gt;&lt;p&gt;考虑 &lt;equation&gt;2^n&lt;/equation&gt; 个 &lt;equation&gt;n&lt;/equation&gt; 位二进制序列的第一位，一定是一半0一半1，于是圆周上也一定是一半0一半1。&lt;/p&gt;&lt;p&gt;&lt;b&gt;问题3：&lt;/b&gt;能否将 &lt;equation&gt;2^{n-1}&lt;/equation&gt; 个0和 &lt;equation&gt;2^{n-1}&lt;/equation&gt; 个1排列成圆，使得所有的相邻的 &lt;equation&gt;n&lt;/equation&gt; 元组（即指顺时针连续读 &lt;equation&gt;n&lt;/equation&gt; 个数字）包括所有的 &lt;equation&gt;2^n&lt;/equation&gt; 个 &lt;equation&gt;n&lt;/equation&gt; 位二进制序列&lt;b&gt;一次且仅一次&lt;/b&gt;?&lt;br&gt;&lt;b&gt;分析3 （方法1）&lt;/b&gt;：&lt;/p&gt;&lt;p&gt;以 &lt;equation&gt;n=3&lt;/equation&gt; 为例，考虑“相邻”的两个三元组，必然是“&lt;i&gt;xyz&lt;/i&gt;”和“&lt;i&gt;yzw&lt;/i&gt;”的形式。&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-df2c0e17d4a84dc27cdcfd516b53af7d_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;376&quot; data-rawheight=&quot;392&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-df2c0e17d4a84dc27cdcfd516b53af7d&quot; data-watermark-src=&quot;v2-147d876fa0bcfd602bd81a1d5ff8b30c&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;于是，就把每一个三元组都作为顶点（一共有8个顶点），在具有“&lt;i&gt;xyz&lt;/i&gt;”和“&lt;i&gt;yzw&lt;/i&gt;”形式的两个顶点之间，从顶点&lt;i&gt;xyz&lt;/i&gt;到顶点&lt;i&gt;yzw&lt;/i&gt;引一条有向边，形成如下图所示的一个有向图：&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-d4c00e940c554ee96743d57cf544d113_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;319&quot; data-rawheight=&quot;398&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-d4c00e940c554ee96743d57cf544d113&quot; data-watermark-src=&quot;v2-d9d187af0fd37e39ff6e57440c0ae7f5&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;之后在图中寻找&lt;b&gt;哈密尔顿回路&lt;/b&gt;（定义参看&lt;a href=&quot;https://zhuanlan.zhihu.com/p/29282544&quot;&gt;格雷码与超立方体的哈密尔顿回路&lt;/a&gt;）即可。&lt;/p&gt;&lt;p&gt;例如下图所示的哈密尔顿回路&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-081ab5558ec5df1989388e50d2ef5478_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;320&quot; data-rawheight=&quot;397&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-081ab5558ec5df1989388e50d2ef5478&quot; data-watermark-src=&quot;v2-b14fe85042d07c9bfb2241cc7bd82d2f&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;它就是  &lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-9b36509df47593795dd00206b780589a_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;509&quot; data-rawheight=&quot;402&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-9b36509df47593795dd00206b780589a&quot; data-watermark-src=&quot;v2-b4944632648bd507b5fc12c9ac481b81&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;于是，形成如下图的三位存储器轮。&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-d5dc58bdabb0b2d8d5f50cd74a4d9473_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;444&quot; data-rawheight=&quot;453&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-d5dc58bdabb0b2d8d5f50cd74a4d9473&quot; data-watermark-src=&quot;v2-6a54be38d90517612e68ef9d0fec04e5&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;hr&gt;&lt;p&gt;&lt;b&gt;问题3-1：&lt;/b&gt; &lt;equation&gt;n=4&lt;/equation&gt; 时，是否存在四位存储器轮？&lt;/p&gt;&lt;p&gt;&lt;b&gt;分析3-1（方法1）&lt;/b&gt;：如果沿用之前的方法，那么图将是——&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-e833789dc054300b107361dc114fe57a_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;846&quot; data-rawheight=&quot;687&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-e833789dc054300b107361dc114fe57a&quot; data-watermark-src=&quot;v2-d0a2cc823226c5aed89f9fb0b058c66a&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;在“哈密尔顿回路的构造又缺乏有效算法”的前提下（涉及到&quot;P=NP?&quot;问题），至少我个人不认为上图中寻找哈密尔顿回路是一个愉快的任务。当 &lt;equation&gt;n\geq5&lt;/equation&gt; 时候，我就连图都不想画了。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;进而，必须（只好）寻找其他思路：&lt;/p&gt;&lt;p&gt;&lt;b&gt;问题3：&lt;/b&gt;能否将 &lt;equation&gt;2^{n-1}&lt;/equation&gt; 个0和 &lt;equation&gt;2^{n-1}&lt;/equation&gt; 个1排列成圆，使得所有的相邻的 &lt;equation&gt;n&lt;/equation&gt; 元组（即指顺时针连续读 &lt;equation&gt;n&lt;/equation&gt; 个数字）包括所有的 &lt;equation&gt;2^n&lt;/equation&gt; 个 &lt;equation&gt;n&lt;/equation&gt; 位二进制序列&lt;b&gt;一次且仅一次&lt;/b&gt;? &lt;/p&gt;&lt;p&gt;&lt;b&gt;分析3 （方法2）&lt;/b&gt;：1946年，古德（I.J.Good）在一篇关于数论的论文中，使用不同的数学模型解决了这个问题。&lt;/p&gt;&lt;p&gt;以 &lt;equation&gt;n=3&lt;/equation&gt; 为例，将三元组&lt;i&gt;xyz&lt;/i&gt;作为顶点 “&lt;i&gt;xy&lt;/i&gt;” 到顶点 “&lt;i&gt;yz&lt;/i&gt;” 的有向边。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-33899fcb4ce7a27b03029b34f1d6b2fe_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;218&quot; data-rawheight=&quot;94&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-33899fcb4ce7a27b03029b34f1d6b2fe&quot; data-watermark-src=&quot;v2-fdc0907954635db3679b50649705b922&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;考虑“相邻”的两个三元组，必然是“&lt;i&gt;xyz&lt;/i&gt;”和“&lt;i&gt;yzw&lt;/i&gt;”的形式，将用顶点“&lt;i&gt;yz&lt;/i&gt;”连接。&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-7e20289205328af05c2eba3b7e689067_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;239&quot; data-rawheight=&quot;196&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-7e20289205328af05c2eba3b7e689067&quot; data-watermark-src=&quot;v2-e7d0c894b6d3f912cf7851b1702f39f7&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;于是，这时，就形成一个与前述不同的有向图：&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-d2ee35f1f06c637a9ce986c9c40a991f_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;331&quot; data-rawheight=&quot;510&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-d2ee35f1f06c637a9ce986c9c40a991f&quot; data-watermark-src=&quot;v2-9b2b0e381e9730005dd15fc36a89a8c6&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;因为它所有顶点的入度都等于出度，所以它是一个&lt;b&gt;有向欧拉图&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;其中一条欧拉回路是：&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-96728e9b6ee8dd84827651f749f9f535_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;455&quot; data-rawheight=&quot;402&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-96728e9b6ee8dd84827651f749f9f535&quot; data-watermark-src=&quot;v2-1f960b2a66c0e8450cb14f1a06756e6b&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;得到同样的存储器轮。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;equation&gt;n=4&lt;/equation&gt; 时，下左图中存在欧拉回路（下中图所示），由之可以得到下右图所示的四位存储器轮。&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-cceb98b7b54ac7ee70dc0be8c652e29c_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1305&quot; data-rawheight=&quot;574&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-cceb98b7b54ac7ee70dc0be8c652e29c&quot; data-watermark-src=&quot;v2-06b4fbddfc5347fd3d3a9642d9125772&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;hr&gt;&lt;p&gt;当 &lt;equation&gt;n\geq3&lt;/equation&gt; 时（ &lt;equation&gt;n=1,2&lt;/equation&gt; 的情况手绘都可以得到存储器轮），问题就转换为在一个&lt;b&gt;有向图中寻找欧拉回路&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;而有向图存在欧拉回路的充要条件是：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;有向图连通；&lt;/li&gt;&lt;li&gt;每个顶点的入度等于出度。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;于是我们就来看看我们构造出来的图是否满足这两个条件——&lt;/p&gt;&lt;p&gt;(1) 在任意两个顶点 &lt;equation&gt;a_1a_2…a_{n-1}&lt;/equation&gt; 和 &lt;equation&gt;b_1b_2…b_{n-1}&lt;/equation&gt; 之间，是否存在道路？&lt;/p&gt;&lt;p&gt;答案是&lt;b&gt;肯定&lt;/b&gt;的。&lt;/p&gt;&lt;p&gt;我们可以这样做：&lt;/p&gt;&lt;p&gt;将 &lt;equation&gt;a_1a_2…a_{n-1}&lt;/equation&gt; 和 &lt;equation&gt;b_1b_2…b_{n-1}&lt;/equation&gt; 连着写下来，&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-742885cd83b376deef8de20c8a684905_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;463&quot; data-rawheight=&quot;61&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;再使用一个大小为 &lt;equation&gt;n-1&lt;/equation&gt; 的“窗口”从左一直走到右，&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-545e10ec9433097091bf7dfb345fdcba_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;466&quot; data-rawheight=&quot;331&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-545e10ec9433097091bf7dfb345fdcba&quot; data-watermark-src=&quot;v2-b890bbef7da3e67162874ceefa5c0042&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;就得到了顶点 &lt;equation&gt;a_1a_2…a_{n-1}&lt;/equation&gt; 和 &lt;equation&gt;b_1b_2…b_{n-1}&lt;/equation&gt; 之间的有向道路。&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-94bf0e127da0d978d49262cf23c51647_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;735&quot; data-rawheight=&quot;210&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-94bf0e127da0d978d49262cf23c51647&quot; data-watermark-src=&quot;v2-beeb380f4e9bad2bb85c4c725a47ef68&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;(2)  每个顶点的&lt;b&gt;入度和出度都是2&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;考察某个顶点“xy…zw” ，由图的构造方法很容易得到它有2条入边和2条出边。&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-8eae52b526a44ca171031c63e4f6463a_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;540&quot; data-rawheight=&quot;207&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-8eae52b526a44ca171031c63e4f6463a&quot; data-watermark-src=&quot;v2-100eae5340c27d920c48dbe320a4e4a4&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;因此所有顶点的入度和出度都等于2。&lt;/p&gt;&lt;p&gt;由以上二者可以得到：&lt;b&gt;该图是欧拉图，每一条欧拉回路对应一个存储器轮。 &lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>Bat特白</author>
<guid isPermaLink="false">2018-09-08-43960965</guid>
<pubDate>Sat, 08 Sep 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>汉诺塔杂谈（六）——变体之“循环移动”</title>
<link>https://henix.github.io/feeds/zhuanlan.c_124392554/2018-06-03-36124436.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/36124436&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-0526c4c14869c7ff79bb6efd32e77b9d_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;（抱歉更新速度很慢，因为学生的毕业季有很多事情要处理。）&lt;/p&gt;&lt;p&gt;所谓“循环移动” 就是在原始的汉诺塔问题（参看“&lt;a href=&quot;http://zhuanlan.zhihu.com/p/36075202&quot;&gt;汉诺塔杂谈（一）&lt;/a&gt;”）上增加一个要求：&lt;/p&gt;&lt;p&gt;设A柱、B柱、C柱（及A柱）构成一个顺时针方向的三角形，&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-6a9f4cb7f4ce28b6f69ec9e9a5e5ecc8_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;489&quot; data-rawheight=&quot;488&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-6a9f4cb7f4ce28b6f69ec9e9a5e5ecc8&quot; data-watermark-src=&quot;v2-aab6711aa2ae182ac9b4399572636321&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;所有的移动&lt;b&gt;必须&lt;/b&gt;是顺时针方向，即只能：或从A柱到B柱；或从B柱到C柱；或从C柱到A柱（如下图所示）。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-db5228c95b545529e80cc12221708662_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;791&quot; data-rawheight=&quot;326&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-db5228c95b545529e80cc12221708662&quot; data-watermark-src=&quot;v2-e7aed970707b8adc67d90611be0a53ae&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;目标是将原来都处于A柱的 &lt;equation&gt;n&lt;/equation&gt; 个盘子都移到C柱。&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-41f52f9e8b39c61386c4b5224999fe48_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;832&quot; data-rawheight=&quot;477&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-41f52f9e8b39c61386c4b5224999fe48&quot; data-watermark-src=&quot;v2-fff2f0aa5a63bf6473330520910c2a32&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;hr&gt;&lt;p&gt;只有1个盘子时，那么需要两步：1号盘A→B、1号盘B→C。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;有2个盘子时，那么需要将2号盘从A“移到”（不止一步）C，就必须先后经历将2号盘从A移到B、将2号盘从B移到C。&lt;/p&gt;&lt;p&gt;而要将2号盘从A移到B，就得先&lt;b&gt;把1号盘从A移到C&lt;/b&gt;；要将2号盘从B移到C，就得先&lt;b&gt;把1号盘再从C移到A&lt;/b&gt;；最后再把1号盘从A移到C。&lt;/p&gt;&lt;p&gt;但是这时要注意的是：&quot;把1号盘从A移到C&quot;和“把1号盘再从C移到A”是&lt;b&gt;不同&lt;/b&gt;的问题！！！通俗地讲，前者是要“跨过”B柱的、是不“相邻”的移动，而后者则不然。&lt;/p&gt;&lt;p&gt;所以，有2个盘子时，可以采用下表方式分析（写的有点粗略，应该能看懂吧= =），黄色部分可以看作类似原问题的子问题，而粉色部分和黄色部分是不同的。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-e23badcddf7753f58ae54fc514ab42de_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;484&quot; data-rawheight=&quot;352&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-e23badcddf7753f58ae54fc514ab42de&quot; data-watermark-src=&quot;v2-9d0c032a2d925d932d4f0ce5a736ac53&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;hr&gt;&lt;p&gt;更一般性地讲，有 &lt;equation&gt;n&lt;/equation&gt; 个盘子时，要采用如下的移动步骤：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;先将A柱上的 &lt;equation&gt;1\sim n-1&lt;/equation&gt; 号盘子移到C柱上（这是一个类似于自己的子问题）;&lt;/li&gt;&lt;li&gt;接着将最大的盘子（ &lt;equation&gt;n&lt;/equation&gt; 号）从A柱移到B柱；&lt;/li&gt;&lt;li&gt;之后再将C柱上的 &lt;equation&gt;1\sim n-1&lt;/equation&gt; 号盘子移到A柱上（注意，这不是一个类似于自己的子问题！！！）；&lt;/li&gt;&lt;li&gt;接着将最大的盘子（ &lt;equation&gt;n&lt;/equation&gt; 号）从B柱移到C柱；&lt;/li&gt;&lt;li&gt;最后再将A柱上的 &lt;equation&gt;1\sim n-1&lt;/equation&gt; 号盘子移到C柱上（这还是一个类似于自己的子问题）。&lt;/li&gt;&lt;/ol&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-7991a9e345fa0f33270da29cf720300e_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;348&quot; data-rawheight=&quot;296&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-7991a9e345fa0f33270da29cf720300e&quot; data-watermark-src=&quot;v2-dd98fc7dcd9beb4f5da12bd94be39699&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;hr&gt;&lt;p&gt;因此我们需要定义一个“附属问题”：设所有的移动&lt;b&gt;必须&lt;/b&gt;是顺时针方向，即只能：或从A柱到B柱；或从B柱到C柱；或从C柱到A柱。目标是将原来都处于A柱的 &lt;equation&gt;n&lt;/equation&gt; 个盘子都移到B柱。&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-db751b3e5363a942c259f9419510f198_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;832&quot; data-rawheight=&quot;477&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-db751b3e5363a942c259f9419510f198&quot; data-watermark-src=&quot;v2-86dfac592428192b10c0b28c8fef0c78&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;可以分析这时的解法是：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;先将A柱上的 &lt;equation&gt;1\sim n-1&lt;/equation&gt; 号盘子移到C柱上;&lt;/li&gt;&lt;li&gt;接着将最大的盘子（ &lt;equation&gt;n&lt;/equation&gt; 号）从A柱移到B柱；&lt;/li&gt;&lt;li&gt;之后再将C柱上的 &lt;equation&gt;1\sim n-1&lt;/equation&gt; 号盘子移到B柱上。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;如果用表格表示的话就是：&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-002985ab7a279d1c469e17c62ee53827_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;348&quot; data-rawheight=&quot;188&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-002985ab7a279d1c469e17c62ee53827&quot; data-watermark-src=&quot;v2-011c3cd220dc4b4b267b25e3d86a9dc4&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;hr&gt;&lt;p&gt;下面来计算移动步数：&lt;/p&gt;&lt;p&gt;假设最初的“循环移动”问题的解法的步数为 &lt;equation&gt;G(n)&lt;/equation&gt; ，而“循环移动”问题的“附属问题”解法的步数为 &lt;equation&gt;F(n)&lt;/equation&gt;。&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-326fb43211415615d43a4dcc9af4a514_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1827&quot; data-rawheight=&quot;477&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-326fb43211415615d43a4dcc9af4a514&quot; data-watermark-src=&quot;v2-e39edf8d63afbc7d78f986d871ac9a94&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;则由解法描述有：&lt;/p&gt;&lt;p&gt;&lt;equation&gt; \begin{equation} \left\{ \begin{aligned} G(n)&amp;amp;=G(n-1)+1+F(n-1)+1+G(n-1)\\ F(n)&amp;amp;=G(n-1)+1+G(n-1)\\ \end{aligned} \right. \end{equation}&lt;/equation&gt; ， &lt;equation&gt;G(1)=2&lt;/equation&gt; ， &lt;equation&gt;F(1)=1&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;我将采用两种方法来求解。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;（一） 基于“2阶常系数线性齐次递推关系”的解法。&lt;/p&gt;&lt;p&gt;将 &lt;equation&gt;F(n)&lt;/equation&gt; 代入 &lt;equation&gt;G(n)&lt;/equation&gt; ，得到：&lt;/p&gt;&lt;p&gt;&lt;equation&gt; \begin{equation} \begin{aligned} G(n)&amp;amp;=2G(n-1)+F(n-1)+2\\ &amp;amp;=2G(n-1)+(2G(n-2)+1)+2\\ &amp;amp;=2G(n-1)+2G(n-2)+3 \end{aligned} \end{equation}&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;之后类似于“&lt;a href=&quot;https://zhuanlan.zhihu.com/p/36075202&quot;&gt;汉诺塔杂谈（一）&lt;/a&gt;”和“&lt;a href=&quot;https://zhuanlan.zhihu.com/p/36124427&quot;&gt;汉诺塔杂谈（五）——变体之“临近移动”&lt;/a&gt;”的方法，处理一下常数“3”：令 &lt;equation&gt;g(n)=G(n)+1&lt;/equation&gt; ，则得到 &lt;equation&gt;g(n)=2g(n-1)+2g(n-2) &lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;——这就是一个“&lt;b&gt;2阶常系数线性齐次递推关系&lt;/b&gt;”：&lt;/p&gt;&lt;p&gt;假设序列 &lt;equation&gt;a(n)&lt;/equation&gt; 满足递推关系 &lt;equation&gt;a(n)=c_1a(n-1)+c_2a(n-2)&lt;/equation&gt; ，其中 &lt;equation&gt;c_1,c_2&lt;/equation&gt; 为已知常数，又 &lt;equation&gt;a(0),a(1)&lt;/equation&gt; 均已知（或者&lt;equation&gt;a(1),a(2)&lt;/equation&gt; 均已知，可由递推关系逆推出 &lt;equation&gt;a(0)&lt;/equation&gt; ）。&lt;/p&gt;&lt;p&gt;称 &lt;equation&gt;x^2-c_1x-c_2=0&lt;/equation&gt; 为该递推关系的特征方程，假设它的两个根为 &lt;equation&gt;\alpha,\beta&lt;/equation&gt; （允许 &lt;equation&gt;\alpha=\beta&lt;/equation&gt; 情况，即为二重根）。&lt;/p&gt;&lt;p&gt;可以很容易验证 &lt;equation&gt;a(n)=(\alpha+\beta)a(n-1)-(\alpha \times \beta)a(n-2)&lt;/equation&gt; ，及 &lt;equation&gt;a(n)-\alpha\times a(n-1)=\beta\times(a(n-1)-\alpha\times a(n-2))&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;递推可以得到：&lt;/p&gt;&lt;p&gt;&lt;equation&gt; \begin{equation} \begin{aligned} a(n)-\alpha\times a(n-1) &amp;amp;=\beta(a(n-1)-\alpha\times a(n-2))\\ &amp;amp;=\beta^2(a(n-2)-\alpha\times a(n-3))\\ &amp;amp;=\dots\\ &amp;amp;=\beta ^{n-1}(a(1)-\alpha\times a(0)) \end{aligned} \end{equation} &lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;由此再使用&lt;b&gt;倒推法&lt;/b&gt;得到： &lt;/p&gt;&lt;p&gt;&lt;equation&gt;a(n)-\alpha^na(0)=(\beta^{n-1}+\alpha\beta^{n-2}+\alpha^2\beta^{n-3}+...+\alpha^{n-1})(a(1)-\alpha\times a(0))&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;于是&lt;/p&gt;&lt;ul&gt;&lt;li&gt;当 &lt;equation&gt;\alpha\neq\beta&lt;/equation&gt; 时， &lt;equation&gt;a(n)-\alpha^na(0)=\frac{{{\alpha }^{n}}-{{\beta }^{n}}}{\alpha -\beta }(a(1)-\alpha\times a(0))&lt;/equation&gt; ，即 &lt;equation&gt;{a(n)}=\frac{\left( {{a}_{1}}-\beta {{a}_{0}} \right)}{\alpha -\beta }{{\alpha }^{n}}+\frac{\left( {{a}_{1}}-\alpha {{a}_{0}} \right)}{\beta -\alpha }{{\beta }^{n}}&lt;/equation&gt; ；&lt;/li&gt;&lt;li&gt;当 &lt;equation&gt;\alpha=\beta&lt;/equation&gt; 时， &lt;equation&gt;a(n)-\alpha^na(0)=n\times\alpha^{n-1}\times(a(1)-\alpha\times a(0))&lt;/equation&gt; ，即 &lt;equation&gt;a(n)=a(0)\times\alpha^n+(a(1)-\alpha\times a(0))×n×\alpha^{n-1}&lt;/equation&gt; 。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;回到递推关系 &lt;equation&gt;g(n)=2g(n-1)+2g(n-2)&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;特征方程为 &lt;equation&gt;x^2-2x-2=0&lt;/equation&gt; ，两个特征根为 &lt;equation&gt;\alpha,\beta=1\pm\sqrt{3}&lt;/equation&gt; ， &lt;equation&gt;g(1)=G(1)+1=3&lt;/equation&gt; ， &lt;equation&gt;g(2)=G(2)+1=8&lt;/equation&gt; ，可逆推得到 &lt;equation&gt;g(0)=1&lt;/equation&gt; 。解得&lt;/p&gt;&lt;p&gt;&lt;equation&gt;g(n)=\frac{3+2\sqrt{3}}{6}(1+\sqrt{3})^n+\frac{3-2\sqrt{3}}{6}(1-\sqrt{3})^n&lt;/equation&gt; ，即得 &lt;equation&gt;G(n)=g(n)-1&lt;/equation&gt; 。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;（二） 基于“矩阵递推关系”的解法。&lt;/p&gt;&lt;p&gt;假设 &lt;equation&gt;X(n)=\left( \begin{matrix} G(n)\\ F(n)\end{matrix}\right)&lt;/equation&gt; ， &lt;equation&gt;A=\left( \begin{matrix} 2 &amp;amp;&amp;amp; 1\\ 2 &amp;amp;&amp;amp; 0\\ \end{matrix}\right)&lt;/equation&gt; ， &lt;equation&gt;B=\left( \begin{matrix} 2\\ 1\end{matrix}\right)&lt;/equation&gt; 。则得到矩阵递推关系：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;X(n)=A\times X(n-1)+B&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;可以进一步递推得到&lt;/p&gt;&lt;p&gt;&lt;equation&gt; \begin{equation} \begin{aligned} X(n) &amp;amp;=AX(n-1)+B\\ &amp;amp;=A(AX(n-2)+B)+B=A^2X(n-2)+AB+B\\ &amp;amp;=A^2(AX(n-3)+B)+AB+B=A^3X(n-3)+A^2B+AB+B\\ &amp;amp;=\dots\\ &amp;amp;=A^nX(0)+(A^{n-1}+A^{n-2}+\dots+A+I)B \end{aligned} \end{equation}&lt;/equation&gt; ，&lt;/p&gt;&lt;p&gt;其中 &lt;equation&gt;I&lt;/equation&gt; 是单位矩阵。&lt;/p&gt;&lt;p&gt;下面介绍一般性解法：&lt;/p&gt;&lt;p&gt;（首先我们假设 &lt;equation&gt;A&lt;/equation&gt; 可以对角化，否则可以使用Jordan分解，过程类似，但是复杂点儿）&lt;/p&gt;&lt;ul&gt;&lt;li&gt;假设&lt;equation&gt;A&lt;/equation&gt; 可以对角化为 &lt;equation&gt;A=P\Lambda P^{-1}&lt;/equation&gt; ，那么 &lt;equation&gt;A^n=P\Lambda^nP^{-1}&lt;/equation&gt; ；&lt;/li&gt;&lt;li&gt;注意到 &lt;equation&gt;(A-I)(A^{n-1}+A^{n-2}+\dots+A+I)=A^n-I&lt;/equation&gt; ，于是如果 &lt;equation&gt;A-I&lt;/equation&gt; 可逆的话，则 &lt;equation&gt;(A^{n-1}+A^{n-2}+\dots+A+I)=(A-I)^{-1}(A^n-I)&lt;/equation&gt; ；&lt;/li&gt;&lt;li&gt;综合这两者，得到 &lt;equation&gt;X(n) =P\Lambda^nP^{-1}X(0)+(A-I)^{-1}(P\Lambda^nP^{-1}-I)B&lt;/equation&gt; 。 &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;回到具体问题， &lt;equation&gt;\left( \begin{matrix} 2 &amp;amp;&amp;amp; 1\\ 2 &amp;amp;&amp;amp; 0\\ \end{matrix}\right)=A=P\Lambda P^{-1} &lt;/equation&gt; ，其中 &lt;equation&gt;P=\left( \begin{matrix} \frac{1-\sqrt{3}}{2} &amp;amp;&amp;amp; \frac{1+\sqrt{3}}{2}\\ 1 &amp;amp;&amp;amp; 1\\ \end{matrix}\right)&lt;/equation&gt; ， &lt;equation&gt;\Lambda=\left( \begin{matrix} 1-\sqrt{3} &amp;amp;&amp;amp; 0\\ 0 &amp;amp;&amp;amp; 1+\sqrt{3}\\ \end{matrix}\right)&lt;/equation&gt; ， &lt;equation&gt;P^{-1}=\left( \begin{matrix} -\frac{1}{\sqrt{3}} &amp;amp;&amp;amp; \frac{1}{6}\left(3+\sqrt{3}\right)\\ \frac{1}{\sqrt{3}} &amp;amp;&amp;amp; \frac{1}{6}\left(3-\sqrt{3}\right)\\ \end{matrix}\right)&lt;/equation&gt; ， &lt;equation&gt;(A-I)^{-1}=\left( \begin{matrix} \frac{1}{3} &amp;amp;&amp;amp; \frac{1}{3}\\ \frac{2}{3} &amp;amp;&amp;amp; -\frac{1}{3}\\ \end{matrix}\right)&lt;/equation&gt; ，由 &lt;equation&gt;X(1)=\left( \begin{matrix} G(1)\\ F(1)\end{matrix}\right)=\left( \begin{matrix} 2\\ 1\end{matrix}\right)&lt;/equation&gt; 可以逆推得到 &lt;equation&gt;X(0)=\left( \begin{matrix} 0\\ 0\end{matrix}\right)&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;代入 &lt;equation&gt;X(n) =P\Lambda^nP^{-1}X(0)+(A-I)^{-1}(P\Lambda^nP^{-1}-I)B&lt;/equation&gt; ，整理得到 &lt;/p&gt;&lt;p&gt;&lt;equation&gt;X(n) =\left( \begin{matrix}\frac{2+\sqrt{3}}{2\sqrt{3}}(1+\sqrt{3})^n-\frac{2-\sqrt{3}}{2\sqrt{3}}(1-\sqrt{3})^n-1\\ \frac{1+\sqrt{3}}{2\sqrt{3}}(1+\sqrt{3})^n-\frac{1-\sqrt{3}}{2\sqrt{3}}(1-\sqrt{3})^n-1\end{matrix}\right)&lt;/equation&gt; 。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;最后看一下“汉诺塔图”，此时变成了有向图，红色有向边形成了解：&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-c845bb4464375b56cf2d908e5a90427f_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;275&quot; data-rawheight=&quot;230&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-c845bb4464375b56cf2d908e5a90427f&quot; data-watermark-src=&quot;v2-024dd9c4657a7762d28b41044de998b9&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-a617a0be01cfe6ef6f99693efb5f6930_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;678&quot; data-rawheight=&quot;542&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-a617a0be01cfe6ef6f99693efb5f6930&quot; data-watermark-src=&quot;v2-350c0303affcfdbcb3ad14a6c8f62eb0&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-47a710c4c06f1b30b1ff8ed8a0d6bdf1_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;608&quot; data-rawheight=&quot;592&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-47a710c4c06f1b30b1ff8ed8a0d6bdf1&quot; data-watermark-src=&quot;v2-55f40071e54694ef721b9a994c55e91b&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>Bat特白</author>
<guid isPermaLink="false">2018-06-03-36124436</guid>
<pubDate>Sun, 03 Jun 2018 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
