<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>雾雨魔法店</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/</link>
<description>http://zhuanlan.zhihu.com/marisa/20419321</description>
<language>zh-cn</language>
<lastBuildDate>Mon, 07 Jan 2019 22:50:33 +0800</lastBuildDate>
<item>
<title>TypeScript Type-Level Programming</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-01-06-54182787.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/54182787&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;TypeScript 有着足够强大（？）的类型系统，我们可以用它做类型层面的编程。首先来看如何在类型层面表达编程的几个要素：数据（广义地指可供编写者操作的所有实体）、操作变换数据的原语和控制流（广义，包括命令式的&lt;code&gt;loop&lt;/code&gt;以及所谓函数式的&lt;code&gt;recursion&lt;/code&gt;等）。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;数据及其基本变换&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;TypeScript 中有 N 个原生类型：来自 JS 的 number, boolean, string, null, undefined, ...，以及 TS 中独特的 literal type（string, number, boolean literal 如 &#39;foo&#39;, 1, true 可作为类型，其值域只包含&lt;i&gt;自己&lt;/i&gt;，即 let a: 1 这个变量中只能存放 1 ），&lt;b&gt;这些类型都可以在类型编程中作为基本数据对象&lt;/b&gt;，供我们操作。在此之上，我们可以借助 TS 的类型系统构造两种复合对象：“list” 和 “dict”。&lt;/p&gt;&lt;p&gt;我们把 TS 中所有的 object types （如 &lt;code&gt;{ a: number, b: string}&lt;/code&gt;）定义为 dict。除了这种“literal dict”之外，可以用 TS 中的 Mapped Types 从一个 dict 得到另一个 dict：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* do sth. to K or T[K] */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;Mapped Types 可以看作对原 dict 的 &quot;values&quot;作 map 变换（保留 keys 不变）得到的一个新的 dict&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;我们把 TS 中的 Union Type 定义为 list。要得到一个 list，除了最简单的“literal union type”之外，还有如下几种构造方式：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// &#39;a&#39; | &#39;b&#39;，类比 dict.keys()&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// number | string，对一个 dict 进行“lookup with unioned key”得到 Union Type，类比 dict.values()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结合 Mapped Types 和 Lookup Types，我们可以得到一个普适的对 list 进行 map的方法：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;KS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* do sth. to K */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;KS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;KS 是任意的一个 list，这样我们就能得到一个对 KS 的每个元素做变换后的 list。问题是，怎么对每个元素做变换呢？&lt;/p&gt;&lt;h2&gt;&lt;b&gt;控制流&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;最显而易见的是 Conditional Types，它可以用来实现分支结构。如：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面 v 的&lt;i&gt;类型&lt;/i&gt;是 &lt;code&gt;true&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;注意这里引入了&lt;code&gt;extends&lt;/code&gt;用于判断子类型关系，可以作为谓词判断某一陈述的真假。&lt;/p&gt;&lt;p&gt;结合 conditional typing 与 &lt;code&gt;never&lt;/code&gt;的特性（&lt;code&gt;never&lt;/code&gt;是关于&lt;code&gt;|&lt;/code&gt;运算的幺元，即&lt;code&gt;a | never&lt;/code&gt;等于&lt;code&gt;a&lt;/code&gt;），我们可以对 list 做 filter 操作：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;never&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// numbers: { a: number | never } 即 { a: number }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在此基础上应用 lookup 即可实现对 dict 的 filter 操作。&lt;/p&gt;&lt;p&gt;如果说判断子类型关系相当于&lt;code&gt;&amp;lt;=&lt;/code&gt;（I mean, in type lattice），那么我们还希望它能够判断&lt;code&gt;=&lt;/code&gt;的关系。由&lt;code&gt;a ≤ b /\ b ≤ a  =&amp;gt;  a = b&lt;/code&gt;我们可知，只要能判断&lt;code&gt;&amp;lt;=&lt;/code&gt;并能够进行逻辑与运算，就能判断相等关系。可惜的是 TS 并没有在这种“type condition”中为我们提供“与”逻辑，所以我们用嵌套的条件判断来表示“与逻辑”：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;Function&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Func&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Func&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// v7: true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;“非”、“或”逻辑同理，只需调整层次结构和分支顺序，我们就能实现任意的布尔逻辑了。&lt;/p&gt;&lt;p&gt;上面的这个判断相等的 pattern 很好用，我们可以把它放进一个函数……等等，函数？&lt;/p&gt;&lt;p&gt;&lt;b&gt;Generic Type Declaration！&lt;/b&gt;&lt;/p&gt;&lt;p&gt;把上面的这种分支逻辑，放进一个带有类型参数的类型声明（别名）里，即可作为一个 type-level function，在需要时使用：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Equal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;Equal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// v: true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有了函数，很自然地想到递归。不过目前 TypeScript 只支持 recursive mapped types，也就是说我们的“递归函数”只能返回 dict。作为一个有点牵强的例子，想象这样一个情景：有一种 object type T，它的 field 要么也是 T 类型的 object，要么是 &lt;code&gt;Promise&amp;lt;U&amp;gt;&lt;/code&gt;；我们有一个函数将这种 object 里所有的 &lt;code&gt;Promise&lt;/code&gt; 变成其结果（等待所有 &lt;code&gt;Promise&lt;/code&gt; resolve ，记录结果并替换），那么如何描述这个函数的类型？&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Unwrapped&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keyof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;infer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;U&lt;/span&gt; : &lt;span class=&quot;kt&quot;&gt;Unwrapped&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Unwrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapped&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Unwrapped&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里我们的 &lt;code&gt;Unwrapped&lt;/code&gt;除了使用类型参数之外还使用了条件类型里的&lt;code&gt;infer&lt;/code&gt;语法来引入新的 local binding，算是某种意义上的“&lt;b&gt;模式匹配&lt;/b&gt;”。在普通的编程语言里，我们对 ADT 的值作模式匹配；而在我们的 type-level programming 里，我们对有着“代数类型类型”的类型作模式匹配。ADT 有 data constructor，它们其实就是普通的函数；而我们的“ATT”当然也对应地有 type constructor，比如 &lt;code&gt;Promise&lt;/code&gt;就是一个把&lt;code&gt;T&lt;/code&gt;这个类型变换成&lt;code&gt;Promise&amp;lt;T&amp;gt;&lt;/code&gt;这个类型的“类型函数”。在我们的类型世界中，“代数类型类型”是除了 primitives 和 list, dict 之外构造数据的第三种方法。&lt;/p&gt;&lt;p&gt;我们可以尝试用这个代数类型来实现经典的自然数：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Zero&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Succ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pred&lt;/span&gt;: &lt;span class=&quot;kt&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Zero&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Zero&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Succ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;One&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Succ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Zero&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Two&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Succ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;One&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IsNat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;infer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ZeroIsNat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IsNat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Zero&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OneIsNat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IsNat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;One&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NumberIsNat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IsNat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IsNatIsNat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IsNat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IsNat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// error! IsNat cannot be used like this!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Succ&lt;/code&gt; 并不一定要有上述代码所示的结构，只是因为 TS 采用的是 structural typing，所以我们只要保证不同等级的 &lt;code&gt;Succ&lt;/code&gt; 有不同的结构即可。用 pattern match 我们可以构造一个谓词函数，用来判断一个类型是否属于我们定义的代数类型。&lt;/p&gt;&lt;p&gt;有意思的是最后一句，我们将 &lt;code&gt;IsNat&lt;/code&gt; 传给 &lt;code&gt;IsNat&lt;/code&gt;，期望的答案是 &lt;code&gt;false&lt;/code&gt;，即 &lt;code&gt;IsNat&lt;/code&gt; 作为一个函数，不属于代数类型 &lt;code&gt;Nat&lt;/code&gt;；而 TypeScript 编译器告诉我们&lt;/p&gt;&lt;p&gt;&lt;code&gt;Generic type &#39;IsNat&#39; requires 1 type argument(s).&lt;/code&gt; &lt;/p&gt;&lt;p&gt;这就是我们常说的，“函数不是一等公民”。&lt;/p&gt;&lt;p&gt;&lt;i&gt;- THE END -&lt;/i&gt;&lt;/p&gt;</description>
<author>lsdsjy</author>
<guid isPermaLink="false">2019-01-06-54182787</guid>
<pubDate>Sun, 06 Jan 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>Coq 入门级技巧</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-01-06-54164515.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/54164515&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-f0468e697d9fd64d5729bfd4f46a770a_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;我第一次听说 Coq 是在本科的时候。从那以后我就一直很想学 Coq，但是并不知道怎么开始。大部分的 Coq 教程都是在讲逻辑，我觉得并不是很有趣。&lt;/p&gt;&lt;p&gt;上个学期我选了 &lt;a href=&quot;http://link.zhihu.com/?target=https%3A//sites.google.com/cs.washington.edu/cse-505-18au/home&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;UW CSE505&lt;/a&gt; 这门课。&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//homes.cs.washington.edu/%7Eztatlock/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Prof. Zach Tatlock&lt;/a&gt; 和 TA &lt;a href=&quot;http://link.zhihu.com/?target=https%3A//tlringer.github.io/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Talia Ringer&lt;/a&gt; 设计了一系列非常棒的作业来帮我们学习 Coq。在这个课里面，我们证明了一些更加实际的东西，包括一个简单的编程语言的解释器还有一个简单的正则表达式引擎。事实上，我发现我对在 Coq 里面写证明还蛮在行的（但是写规范就完全是另外一回事了），至少在做作业的时候我是这么觉得的。&lt;/p&gt;&lt;p&gt;如果你在自学 Coq，我推荐以下资源：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//sites.google.com/cs.washington.edu/cse-505-18au/home&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;UW CSE505&lt;/a&gt; 的作业&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//adam.chlipala.net/frap/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Formal Reasoning About Programs&lt;/a&gt; 这本书是我们上课的教材。这本书很短，边距很大，空白很多，每一章附带了详细的 Coq 代码。这本书还自带了一个很好用的 Coq 库 &lt;code&gt;frap&lt;/code&gt;。&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//softwarefoundations.cis.upenn.edu/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Software Foundations&lt;/a&gt; 如果你真的对形式化验证很感兴趣的话。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;我非常高兴我终于能把 Coq 从我的愿望单里面划掉了。不过我并不是形式化验证的狂热粉丝，我觉得我之后也不用用到 Coq。我决定趁我还没完全忘记 Coq，赶紧把我做作业时学会的 Coq 技巧写下来，万一以后哪天我又用到 Coq 了呢，希望也对读者有所帮助。&lt;/p&gt;&lt;h2&gt;Tactics&lt;/h2&gt;&lt;p&gt;虽然说我并不是很能理解 Coq 官方的文档，但是有问题的时候看看还是有帮助的：&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//coq.inria.fr/refman/coq-tacindex.html&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;coq.inria.fr/refman/coq&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;-tacindex.html&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;code&gt;intros&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;intros&lt;/code&gt; 从目标中按照顺序引入假设。每一次它会消耗 &lt;code&gt;forall&lt;/code&gt; 里面的一个自由变量，或者是一个 &lt;code&gt;-&amp;gt;&lt;/code&gt; 前面的命题（也就是前提条件）。举个例子：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;Theorem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transform_transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;intros c1 c2 H.&lt;/code&gt; 之后：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另外，你也可以用 &lt;code&gt;intros.&lt;/code&gt; 来引入所有的假设，Coq 会自动给他们命名。&lt;/p&gt;&lt;h2&gt;&lt;code&gt;simpl&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;simpl.&lt;/code&gt; 能化简目标。 &lt;code&gt;simpl in H.&lt;/code&gt; 化简假设 &lt;code&gt;H&lt;/code&gt;. &lt;code&gt;simpl in *.&lt;/code&gt; 化简所有的假设和目标。当你不知道证明下一步怎么走的时候，总是可以试试 &lt;code&gt;simpl in *.&lt;/code&gt;，看有没有发生什么变化。&lt;/p&gt;&lt;h2&gt;&lt;code&gt;simplify&lt;/code&gt; (Frap Tactic)&lt;/h2&gt;&lt;p&gt;&lt;code&gt;simplify.&lt;/code&gt; 是 &lt;code&gt;frap&lt;/code&gt; 库里面一个更强版本的 &lt;code&gt;simpl in *.&lt;/code&gt;。我个人总是使用 &lt;code&gt;simplify&lt;/code&gt; 来替代 &lt;code&gt;simpl&lt;/code&gt;，如果有引入 &lt;code&gt;frap&lt;/code&gt; 库的话。&lt;/p&gt;&lt;h2&gt;&lt;code&gt;destruct&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;假设 &lt;code&gt;x&lt;/code&gt; 是一个归纳类型，当你 &lt;code&gt;destruct x.&lt;/code&gt;，Coq 会为每一个构造函数生成一个小目标。换句话说，&lt;code&gt;destruct&lt;/code&gt; 让你可以分类讨论所有可能的情况。&lt;/p&gt;&lt;p&gt;让我们先看一个简单的例子。假设我们有这么一个递归类型：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;Inductive&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Skip&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Assign&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;else_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;While&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们想要证明：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;Theorem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transform_Transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果我们 &lt;code&gt;destruct c2.&lt;/code&gt;，我们会看到 &lt;code&gt;c2&lt;/code&gt; 被各个构造函数替换掉了:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subgoals&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Skip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Skip&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Assign&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Assign&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2_1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2_2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2_1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2_2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2_1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2_2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2_1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2_2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;While&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;While&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意到，Coq 里面许多东西都是归纳类型，你可以用 &lt;code&gt;destruct&lt;/code&gt; 来“打开”他们，比如这个例子：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adjacent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reachable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;假设 &lt;code&gt;H&lt;/code&gt; 告诉我们存在一个 &lt;code&gt;a&lt;/code&gt; 能够使得后面的命题成立，但是我们如何把这个实例给取出来呢？如果我们关闭 Coq 的记号显示（&lt;i&gt;notation display&lt;/i&gt;），我们可以看到 &lt;code&gt;H&lt;/code&gt; 实际上是：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adjacent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reachable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后如果你 &lt;code&gt;Print ex.&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;Inductive&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Prop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Prop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ex_intro&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;ex&lt;/code&gt; 也是一个归纳类型。所以说我们可以用 &lt;code&gt;destruct H.&lt;/code&gt; 把这个实例取出来：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;Set&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adjacent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reachable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在我们有了这个实例，虽然说它叫做 &lt;code&gt;x&lt;/code&gt; 而不是 &lt;code&gt;a&lt;/code&gt;。然后我们现在怎么把 &lt;code&gt;/\&lt;/code&gt; 打开呢？再来一次 &lt;code&gt;destruct H.&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;Set&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adjacent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reachable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是因为 &lt;code&gt;and&lt;/code&gt; 也是一个归纳类型。你可以用 &lt;code&gt;Print and.&lt;/code&gt; 验证一下:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;Inductive&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Prop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Prop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那 &lt;code&gt;\/&lt;/code&gt; 怎么样呢？&lt;code&gt;Print or.&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;Inductive&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Prop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Prop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or_introl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or_intror&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以说你也一样可以用 &lt;code&gt;destruct&lt;/code&gt; 打开一个 &lt;code&gt;\/&lt;/code&gt;，然后它会变成两个小目标。这很合理，从逻辑上来说，当你知道 &lt;code&gt;A \/ B&lt;/code&gt; 成立，你需要讨论两个情况：&lt;code&gt;A&lt;/code&gt; 成立以及 &lt;code&gt;B&lt;/code&gt; 成立.&lt;/p&gt;&lt;h2&gt;&lt;code&gt;induction&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;induction&lt;/code&gt; 是总重要的招数之一。你可以 &lt;code&gt;induction&lt;/code&gt; 一个归纳类型（&lt;i&gt;inductive type&lt;/i&gt;），会产生和这个归纳类型的构造函数数量一样多的小目标。如果构造函数里面用到了这个归纳类型本身，那么在归纳的过程中会产生相应的归纳假设。&lt;/p&gt;&lt;p&gt;一开始的时候，我把 &lt;code&gt;induction&lt;/code&gt; 和数学归纳法搞混了。要用数学归纳法证明一个命题 &lt;code&gt;P&lt;/code&gt;，你需要先证明一个基础步骤 &lt;code&gt;P(0)&lt;/code&gt;，然后在 &lt;code&gt;P(n)&lt;/code&gt; 成立的情况下证明一个递推步骤 &lt;code&gt;P(n+1)&lt;/code&gt;。但是在 &lt;code&gt;induction&lt;/code&gt; 里面没有“基础步骤”和“递推步骤”之分，甚至 &lt;code&gt;induction&lt;/code&gt; 产生的小目标的数量都不一定等于2。&lt;/p&gt;&lt;p&gt;之后，我发现你可以把 &lt;code&gt;induction&lt;/code&gt; 理解成数学归纳法的一种扩展。数学归纳法是作用在自然数上面的，而自然数是一种递归定义的归纳类型：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;Inductive&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;nat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;nat&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;nat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;nat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以说当你在 &lt;code&gt;induction&lt;/code&gt; 一个 &lt;code&gt;nat&lt;/code&gt; 的时候，你实际上就是在进行数学归纳法。另外一方面，你也可以把 &lt;code&gt;induction&lt;/code&gt; 想成作用在结构上面。&lt;/p&gt;&lt;p&gt;先举一个例子：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;Lemma&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len_repeat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;repeat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 &lt;code&gt;induction&lt;/code&gt; 一个变量的时候，Coq &lt;code&gt;intros&lt;/code&gt; 直到这个变量出现在假设中。所以说我们可以直接 &lt;code&gt;induction n.&lt;/code&gt;，这等同于 &lt;code&gt;intros s n. induction n.&lt;/code&gt;。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;repeat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;repeat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你可以看到这里变成了两个小目标。一个是 &lt;code&gt;0&lt;/code&gt;，另一个是 &lt;code&gt;S n&lt;/code&gt;。注意到在第一个小目标里面没有归纳假设，因为 &lt;code&gt;O&lt;/code&gt; 不是递归定义的。完成了第一个小目标之后，我们可以看到第二个小目标：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;nat&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IHn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;repeat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;repeat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为 &lt;code&gt;S&lt;/code&gt; 是递归定义的，所以这里就出现了归纳假设 &lt;code&gt;IHn&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;让我们再看另一个例子：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;Inductive&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Prop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransformSkip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Skip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Skip&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransformAssign&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Assign&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Assign&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransformSeq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransformIf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;then_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;else_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tthen&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;telse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;then_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tthen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;else_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;telse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;then_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;else_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;telse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tthen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransformWhile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tbody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tbody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;While&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;While&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tbody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;Theorem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transform_transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以用 &lt;code&gt;induction 1.&lt;/code&gt; 来开始证明。&lt;code&gt;induction n&lt;/code&gt; 会不断地 &lt;code&gt;intros&lt;/code&gt; 直到第 &lt;code&gt;n&lt;/code&gt; 个命题已经引入到了假设里面，然后对这个命题进行归纳。在这个例子里面，&lt;code&gt;induction 1.&lt;/code&gt; 和 &lt;code&gt;intros c1 c2 H. induction H.&lt;/code&gt; 是一样的效果。然后我们可以看到：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subgoals&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Skip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Skip&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Assign&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Assign&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;then_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;else_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;telse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tthen&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;While&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;While&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tbody&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于每一个 &lt;code&gt;Transform&lt;/code&gt; 的构造函数，我们都有一个对应的小目标。让我们看一下第四个小目标：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arith&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;then_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;else_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tthen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;telse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;then_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tthen&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;else_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;telse&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IHTransform1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;then_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tthen&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IHTransform2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;else_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;telse&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;then_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;else_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;telse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tthen&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以看到这里有两个归纳假设（&lt;code&gt;IHTransform1&lt;/code&gt; 和 &lt;code&gt;IHTransform2&lt;/code&gt;），因为构造函数 &lt;code&gt;TransformIf&lt;/code&gt; 有两个递归定义的前提条件。&lt;/p&gt;&lt;h2&gt;&lt;code&gt;inversion&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;在我看来，&lt;code&gt;inversion&lt;/code&gt; 是最常用最强大的招数之一。我对 &lt;code&gt;inversion H.&lt;/code&gt; 的理解是，它让 Coq 找出来要让 &lt;code&gt;H&lt;/code&gt; 成立还有哪些事情要成立。它有可能会添加新的假设，也可能会添加新的小目标。&lt;/p&gt;&lt;p&gt;一个常见的用途是说明一个等式两边的构造函数里面的对应的部分是相同的。你也可以把 &lt;code&gt;inversion&lt;/code&gt; 理解成“打开盒子”。举个例子，这里 &lt;code&gt;If&lt;/code&gt; 是一个归纳类型的构造函数：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1_2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1_1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2_1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2_2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1_1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1_2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2_1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2_2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 &lt;code&gt;inversion H.&lt;/code&gt; 之后变成:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1_2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1_1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2_1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2_2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2_1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2_2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1_1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1_2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1_2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1_1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Coq&lt;/code&gt; 为我们找到了三个非常有用的关系。顺带一提，&lt;code&gt;inversion&lt;/code&gt; 和 &lt;code&gt;subst&lt;/code&gt; 搭配使用效果更佳，因为 &lt;code&gt;subst&lt;/code&gt; 可以把 &lt;code&gt;inversion&lt;/code&gt; 发现的等式带入并化简，让假设看起来更加清楚。另外，如果在 &lt;code&gt;inversion H; subst.&lt;/code&gt; 之后你发现假设列表里面唯一的变化就是多了一条和 &lt;code&gt;H&lt;/code&gt; 一模一样的假设，那么你就知道说这个时候 &lt;code&gt;inversion H.&lt;/code&gt; 完全没有作用。&lt;/p&gt;&lt;p&gt;实际上，&lt;code&gt;=&lt;/code&gt; 没有任何特殊之处，因为它只不过是一个叫做 &lt;code&gt;eq&lt;/code&gt; 的归纳类型。让我们看看一个稍微复杂一点的例子：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;Inductive&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Prop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransformSkip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Skip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Skip&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransformSeq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransformIf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;then_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;else_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tthen&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;telse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;then_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tthen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;else_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;telse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;then_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;else_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;telse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tthen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;(* Other constructors omitted *)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;Inductive&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step_buggy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valuation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valuation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Prop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StepBuggySeq1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;step_buggy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step_buggy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StepBuggySeq2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;step_buggy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Skip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;(* Other constructors omitted *)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;假设我们有：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subgoal&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valuation&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Skip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step_buggy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 &lt;code&gt;inversion H; subst.&lt;/code&gt; 之后:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valuation&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Skip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step_buggy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Skip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;让我来解释一下发生了什么。&lt;code&gt;H&lt;/code&gt; 匹配上了 &lt;code&gt;TransformSeq&lt;/code&gt; 构造函数，所以我们多了两个假设，也就是 &lt;code&gt;TransformSeq&lt;/code&gt; 的两个前提条件（&lt;code&gt;H3&lt;/code&gt; 和 &lt;code&gt;H5&lt;/code&gt;）。从这个构造函数里面，我们还知道了 &lt;code&gt;c1&#39;&lt;/code&gt; 一定也是一个 &lt;code&gt;Sequence&lt;/code&gt;，所以说这里 &lt;code&gt;c1&#39;&lt;/code&gt; 被替换成了 &lt;code&gt;(Sequence tc1 tc2)&lt;/code&gt;。现在，让我们进入下一步，&lt;code&gt;inversion H3; subst.&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valuation&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Skip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Skip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step_buggy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Skip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Skip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Skip&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以看到 &lt;code&gt;tc1&lt;/code&gt; 被替换成了 &lt;code&gt;Skip&lt;/code&gt;，因为我们知道 &lt;code&gt;H3 : Transform Skip tc1&lt;/code&gt; 成立，而唯一能匹配的就是 &lt;code&gt;TransformSkip&lt;/code&gt; 构造函数，从这里面我们可以知道 &lt;code&gt;tc1&lt;/code&gt; 就是 &lt;code&gt;Skip&lt;/code&gt;。现在让我们 &lt;code&gt;inversion H0; subst.&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valuation&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Skip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Skip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step_buggy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Skip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step_buggy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Skip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Skip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Skip&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为这里有两个 &lt;code&gt;step_buggy&lt;/code&gt; 构造函数能匹配上 &lt;code&gt;H0&lt;/code&gt;，所以这两个情况我们都需要讨论，所以说这里产生了两个小目标。这种分类讨论的感觉就有点像 &lt;code&gt;destruct&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;那如果一个构造函数都匹配不上呢？比方说下面这个例子：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个时候 &lt;code&gt;inversion H.&lt;/code&gt; 就能结束证明，因为这种情况根本不可能出现。&lt;/p&gt;&lt;h2&gt;&lt;code&gt;f_equal&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;当目标是一个归纳类型的构造函数等于同一个构造函数的时候，你可以用 &lt;code&gt;f_equal.&lt;/code&gt; 转换成证明其中对应的部分是相同的。比方说，&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valuation&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arith&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tbody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;While&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tbody&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;While&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tbody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 &lt;code&gt;f_equal.&lt;/code&gt; 之后会变成：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valuation&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arith&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tbody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tbody&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;While&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;While&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tbody&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;显然，如果你在第二个小目标里面运行 &lt;code&gt;f_equal.&lt;/code&gt;，它会进一步变成：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tbody&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意到，尽管 &lt;code&gt;f_equal&lt;/code&gt; 可以把目标转化成更小的问题，但是在使用的时候你一定要确信其中对应的部分是相等的，不然你会产生错误的结论，比方说这个例子：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个例子里面，我们想要证明一个字符串翻转过来之后的长度和原来的长度是一样的。如果我们用 &lt;code&gt;f_equal.&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;目标变成了证明一个任意的字符串翻转过来和原字符串是一样的，这完全讲不通。&lt;/p&gt;&lt;h2&gt;&lt;code&gt;assumption&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;如果目标已经出现在假设里面了，你可以用 &lt;code&gt;assumption.&lt;/code&gt; 来结束证明。另外，你也可以使用 &lt;code&gt;auto&lt;/code&gt; 或者 &lt;code&gt;exact&lt;/code&gt;。&lt;/p&gt;&lt;h2&gt;&lt;code&gt;constructor&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;当目标是一个归纳类型的时候，结束证明的方法一般来说是用构造函数。&lt;code&gt;constructor.&lt;/code&gt; 会按照定义的顺序逐个尝试这个归纳类型的构造函数，直到第一个匹配上的为止。因为 &lt;code&gt;constructor.&lt;/code&gt; 用的是第一个匹配上的构造函数，所以并不一定是正确的，如果遇到了这种情况，你需要使用 &lt;code&gt;apply&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;举一个简单的例子，假设我们有这么一个归纳类型：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;Inductive&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eval_unop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Prop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eval_neg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;eval_unop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oneg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eval_not&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;eval_unop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Onot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vbool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vbool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;negb&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在我们有：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;v&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;eval_unop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Onot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vbool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vbool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;negb&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在我们用 &lt;code&gt;consturctor.&lt;/code&gt;， Coq 会匹配上第二个构造函数 &lt;code&gt;eval_not&lt;/code&gt;。&lt;/p&gt;&lt;h2&gt;&lt;code&gt;apply&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;apply&lt;/code&gt; 也可以用来应用构造函数。实际上，你可以 &lt;code&gt;apply&lt;/code&gt; 任何定理，你可以认为构造函数就是一种定理。比方说，在前面 &lt;code&gt;constructor&lt;/code&gt; 的例子里面，你也可以 &lt;code&gt;apply eval_not.&lt;/code&gt; 来代替 &lt;code&gt;constructor.&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;让我来用一个稍微复杂一点的例子来讲解 &lt;code&gt;apply&lt;/code&gt;，假设我们有这么一个归纳类型和一个定理：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;Inductive&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eval_e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Prop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;(* Omitted *)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;Inductive&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eval_s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stmt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Prop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eval_ifelse_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;eval_e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vbool&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;                  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;eval_s&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;                  &lt;span class=&quot;n&quot;&gt;s&#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;eval_s&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sifelse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;s&#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eval_ifelse_f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;eval_e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vbool&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;                 &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;eval_s&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;                  &lt;span class=&quot;n&quot;&gt;s&#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;eval_s&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sifelse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;s&#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eval_seq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;eval_s&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;eval_s&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;eval_s&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sseq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;Lemma&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interp_e_eval_e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;interp_e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;eval_e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在我们有：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IHfuel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;interp_s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fuel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;eval_s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Heqo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interp_e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vbool&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interp_s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fuel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;eval_s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sifelse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在构造函数里面有一些 &lt;code&gt;-&amp;gt;&lt;/code&gt;，如果你是第一次接触 Coq 的话，这看起来很吓人，不过一旦你理解了 &lt;code&gt;apply&lt;/code&gt; 和 &lt;code&gt;constructor&lt;/code&gt; 的原理，事情就很容易了。&lt;/p&gt;&lt;p&gt;在这个例子里面，我们想要用构造函数 &lt;code&gt;eval_ifelse_t&lt;/code&gt;。为什么呢？首先，看一下目标，这是一个 &lt;code&gt;eval_s&lt;/code&gt; 所以我们要找找 &lt;code&gt;eval_s&lt;/code&gt; 的构造函数。我们怎么知道要的不是构造函数 &lt;code&gt;eval_seq&lt;/code&gt; 呢？因为我们的目标从结构上匹配不上 &lt;code&gt;eval_seq&lt;/code&gt;。但是 &lt;code&gt;eval_ifelse_t&lt;/code&gt; 和 &lt;code&gt;eval_ifelse_f&lt;/code&gt; 的结论有完全一样的形式 &lt;code&gt;eval_s  env  s h (Sifelse e p1 p2)   s&#39; h&#39;&lt;/code&gt;，要用哪个呢，以及要怎么处理这些前提条件呢？&lt;/p&gt;&lt;p&gt;从逻辑上来说，要使用 &lt;code&gt;eval_ifelse_t&lt;/code&gt; 的话，我们需要证明它的前提条件。实际上，如果你 &lt;code&gt;constructor.&lt;/code&gt; 或者 &lt;code&gt;apply eval_ifelse_t.&lt;/code&gt;，就会变成两个小目标，这符合逻辑，因为这里有两个前提条件：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;eval_e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vbool&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;eval_s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其实第二个小目标是显然的，你可以用 &lt;code&gt;apply IHfuel. assumption.&lt;/code&gt; 解决掉它。让我再讲解一遍这个显然的情况，加深对 &lt;code&gt;apply&lt;/code&gt; 的理解。&lt;code&gt;IHfuel&lt;/code&gt; 的最后一个命题的形式（&lt;code&gt;eval_s env s h p s&#39; h&#39;&lt;/code&gt;）能匹配上第二个小目标的形式（&lt;code&gt;eval_s env s h p1 s&#39; h&#39;&lt;/code&gt;）。注意到在 &lt;code&gt;IHfuel&lt;/code&gt; 里面有一个 &lt;code&gt;forall&lt;/code&gt;，在 &lt;code&gt;apply IHfuel.&lt;/code&gt; 的时候，Coq 能自己搞清楚这些自由变量是什么。所以说第二个小目标变成了  &lt;code&gt;interp_s fuel env s h p1 = Some (s&#39;, h&#39;)&lt;/code&gt;，这就是 &lt;code&gt;Heqo&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;我说第二个小目标是显然的，因为你也可以 &lt;code&gt;auto.&lt;/code&gt; 而不用 &lt;code&gt;apply IHfuel. assumption.&lt;/code&gt;。甚至更简单地，如果你一开始就 &lt;code&gt;constructor; auto.&lt;/code&gt; 或者 &lt;code&gt;apply eval_ifelse_t; auto.&lt;/code&gt;，第二个小目标根本就不会出现。&lt;/p&gt;&lt;p&gt;至于第一个小目标，我们可以用 &lt;code&gt;apply interp_e_eval_e. assumption.&lt;/code&gt; 来完成证明。想想这是为什么。其实是一样的。&lt;/p&gt;&lt;p&gt;除了转化目标以外，&lt;code&gt;apply&lt;/code&gt; 也可以作用在假设上面，只要你加上 &lt;code&gt;in H&lt;/code&gt;。比方说：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;Theorem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transform_transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在我们有：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Assign&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;apply Transform_transform in H.&lt;/code&gt; 可以把 &lt;code&gt;H&lt;/code&gt; 变成：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Assign&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;&lt;code&gt;exists&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;证明全称量词的一个方法是直接告诉 Coq 这些变量到底是什么。举个例子：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmptySet&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmptySet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以告诉 Coq &lt;code&gt;exists s1, s2.&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmptySet&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmptySet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后一个 &lt;code&gt;first_order&lt;/code&gt; 就能结束证明。&lt;/p&gt;&lt;h2&gt;&lt;code&gt;reflexivity&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;正如这个名字本身的含义，当目标类似 &lt;code&gt;x = x&lt;/code&gt; 的形式，使用 &lt;code&gt;reflexivity.&lt;/code&gt; 就能结束证明。&lt;/p&gt;&lt;h2&gt;&lt;code&gt;discriminate&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;如果有一个假设是一个等式，但是等式两边结构不同，可以使用 &lt;code&gt;discriminate.&lt;/code&gt; 来结束证明，无论要证明的结论是什么，因为逻辑上一个错误的假设可以推导出任何结论。举个例子，&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;eval_unop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Oneg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vbool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;discriminate.&lt;/code&gt; 就能结束证明。&lt;/p&gt;&lt;p&gt;再来一个例子：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c1_1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1_2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1_1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1_2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1_1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1_2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里 &lt;code&gt;cmd&lt;/code&gt; 是一个归纳类型，&lt;code&gt;Sequence&lt;/code&gt; 是其中的一个构造函数。显然，&lt;code&gt;c2&lt;/code&gt; 也必须是一个 &lt;code&gt;Sequence&lt;/code&gt;. 如果你运行 &lt;code&gt;destruct c2; try discriminate.&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c1_1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1_2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2_1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1_1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1_2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2_1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2_2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1_1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1_2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2_1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2_2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这就符合我们的预期。这个效果类似于 &lt;code&gt;inversion H; subst.&lt;/code&gt;。&lt;/p&gt;&lt;h2&gt;&lt;code&gt;congruence&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;我发现 &lt;code&gt;congruence&lt;/code&gt; 好像是一个更强版本的 &lt;code&gt;discriminate&lt;/code&gt;。前面 &lt;code&gt;discriminate&lt;/code&gt; 的两个例子都可以用 &lt;code&gt;congruence.&lt;/code&gt; 替代。但是 &lt;code&gt;congruence&lt;/code&gt; 可以做更多的事情，比方说：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个例子里面，&lt;code&gt;congruence.&lt;/code&gt; 可以发现 &lt;code&gt;H&lt;/code&gt; 不成立，所以证明就结束了，但是 &lt;code&gt;discriminate.&lt;/code&gt; 就不能。&lt;/p&gt;&lt;h2&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;我一开始的时候以为 &lt;code&gt;auto&lt;/code&gt; 是一个非常强力的招数，但是后来我发现其实它只能解决一些简单的情况。我对它的理解就是把它当做自动地尝试 &lt;code&gt;assumptions&lt;/code&gt;、 &lt;code&gt;reflexivity&lt;/code&gt;、 &lt;code&gt;congruence&lt;/code&gt;，以及尝试应用假设里面的定理。&lt;/p&gt;&lt;h2&gt;&lt;code&gt;econstructor&lt;/code&gt; / &lt;code&gt;eapply&lt;/code&gt; / &lt;code&gt;eauto&lt;/code&gt; / &lt;code&gt;edestruct&lt;/code&gt; / &lt;code&gt;eexists&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;带有 &lt;code&gt;e&lt;/code&gt; 版本的这些招数做的事情和不带 &lt;code&gt;e&lt;/code&gt; 的版本一样，只不过当找不到某些变量的时候，带 &lt;code&gt;e&lt;/code&gt; 的版本会引入像未知数一样的变量，而不是直接失败。而后随着证明的推进，Coq 有可能会自动地搞清楚这些引入的变量是什么。&lt;/p&gt;&lt;h2&gt;&lt;code&gt;rewrite&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;如果你有一个等式，你可以用它来转化其他假设或者目标。&lt;code&gt;rewrite H.&lt;/code&gt; 把等式 &lt;code&gt;H&lt;/code&gt; 左边的表达式替换成等式右边的。如果要反过来，你可以使用 &lt;code&gt;rewrite &amp;lt;- H.&lt;/code&gt;。如果你想要改变一个假设 &lt;code&gt;H1&lt;/code&gt; 而不是目标，使用 &lt;code&gt;rewrite H in H1.&lt;/code&gt;。如果你想要改变所有的假设和目标，使用 &lt;code&gt;in *&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;举个例子：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ht&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snoc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ht&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 &lt;code&gt;rewrite H1.&lt;/code&gt; 之后：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ht&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ht&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snoc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ht&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再举一个例子：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ht&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ht&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snoc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ht&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TBool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 &lt;code&gt;rewrite &amp;lt;-H1 in H8.&lt;/code&gt; 之后：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ht&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snoc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ht&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TBool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另外，如果你不确定应该用哪边替换另一边，就带和不带 &lt;code&gt;&amp;lt;-&lt;/code&gt; 两个都试一下，总有一个是对的。&lt;/p&gt;&lt;h2&gt;&lt;code&gt;unfold&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;有时候一个命题里面包含了抽象的定义，要把这层抽象去掉，可以用 &lt;code&gt;unfold&lt;/code&gt;。举个例子：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subgoal&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;derives&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;derive&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;面对这个目标，我们并没有任何的招式可用。但是在 &lt;code&gt;unfold derives.&lt;/code&gt; 之后：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ascii&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reg_exp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is_der&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;derive&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在看来就好多了，我们可以进一步 &lt;code&gt;unfold is_der.&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ascii&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reg_exp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;derive&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在我们就可以对它进行变换了（&lt;code&gt;intros. split.&lt;/code&gt;）。&lt;/p&gt;&lt;p&gt;和 &lt;code&gt;rewrite&lt;/code&gt; 类似, &lt;code&gt;unfold&lt;/code&gt; 默认应用到目标上。要应用到一个假设 &lt;code&gt;H&lt;/code&gt; 上，使用 &lt;code&gt;in H&lt;/code&gt;。要应用到所有假设和目标，用 &lt;code&gt;in *&lt;/code&gt;。&lt;/p&gt;&lt;h2&gt;&lt;code&gt;specialize&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;如果有个假设以 &lt;code&gt;forall&lt;/code&gt; 开头，你可以用 &lt;code&gt;specialize&lt;/code&gt; 来代入这些自由变量。&lt;/p&gt;&lt;p&gt;如果有个假设是若干个命题用 &lt;code&gt;-&amp;gt;&lt;/code&gt; 连接起来的，而这些前提条件又正好都在你的假设里面，那你就可以用 &lt;code&gt;specialize&lt;/code&gt; 把这个假设里面的这些前提条件去掉。&lt;/p&gt;&lt;p&gt;举个例子：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IHstep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;c1&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step_buggy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 &lt;code&gt;specialize (IHstep tc1).&lt;/code&gt; 之后：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IHstep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step_buggy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果你转而使用 &lt;code&gt;specialize (IHstep tc1 (eq_refl tc1) H3).&lt;/code&gt; 就会有如下结果：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IHstep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step_buggy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tc1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;&lt;code&gt;pose proof&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;pose proof&lt;/code&gt; 可以做 &lt;code&gt;specialize&lt;/code&gt; 能做的事情，但有一点点不同。&lt;code&gt;pose proof&lt;/code&gt; 会添加一个新的假设，而 &lt;code&gt;specialize&lt;/code&gt; 则是原地修改原来假设。&lt;/p&gt;&lt;p&gt;因为 &lt;code&gt;pose proof&lt;/code&gt; 能够添加新的假设，所以它可以做更多的事情。特别地，你可以使用一个引理来添加一个假设。&lt;/p&gt;&lt;p&gt;下面是两个例子：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;pose proof (IHstep tc1 (eq_refl tc1) H3).&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;pose proof (step_step_buggy p1 p2 H c1&#39; H0).&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;code&gt;split&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;如果目标是若干个命题 &lt;code&gt;/\&lt;/code&gt; 连起来的，也就是一个和取范式，那你可以使用 &lt;code&gt;split.&lt;/code&gt; 把它们拆开变成若干个小目标。&lt;/p&gt;&lt;p&gt;如果目标是一个当且仅当 &lt;code&gt;iff&lt;/code&gt;，你也可以使用 &lt;code&gt;split.&lt;/code&gt; 来把它拆成两个方向。&lt;/p&gt;&lt;h2&gt;&lt;code&gt;left&lt;/code&gt; / &lt;code&gt;right&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;另外一方面，如果目标是一个析取范式，使用 &lt;code&gt;left.&lt;/code&gt; 或者 &lt;code&gt;right.&lt;/code&gt; 来选择你要证明哪一边。&lt;/p&gt;&lt;h2&gt;&lt;code&gt;exact&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;如果你的目标已经在假设里面了，你可以用 &lt;code&gt;exact&lt;/code&gt; 来结束证明。另外，你也可以用 &lt;code&gt;exact&lt;/code&gt; 来替代 &lt;code&gt;pose proof&lt;/code&gt; 和 &lt;code&gt;assumption&lt;/code&gt; 的组合。&lt;/p&gt;&lt;p&gt;两个例子：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;exact H7.&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;exact (ReachRefl g b).&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;assert&lt;/code&gt; 可以往假设里面添加一个命题，当然你要证明它。&lt;code&gt;assert P.&lt;/code&gt; 会产生两个小目标：一个是给定当前已知的假设，证明 &lt;code&gt;P&lt;/code&gt;；另一个是给定当前已知的假设和 &lt;code&gt;P&lt;/code&gt;，证明原来的目标。&lt;/p&gt;&lt;p&gt;这么做的动机可能是因为你想要复制一份现有的假设，因为你后面打算对它进行修改。还有一个常见的情况就是你看出来一些假设是成立的，但是 Coq 没有。&lt;/p&gt;&lt;p&gt;几个例子：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;assert (H8 := Heqo0).&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;assert (a &amp;lt; length h); try omega.&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;assert (&quot;&quot; = &quot;&quot; ++ &quot;&quot;). equality.&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;assert (~ free e1 x).&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;code&gt;first_order&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;first_order&lt;/code&gt; 可以用来打开假设和目标中的 &lt;code&gt;/\&lt;/code&gt;、&lt;code&gt;\/&lt;/code&gt;、&lt;code&gt;-&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;-&amp;gt;&lt;/code&gt; 以及很多其他东西。&lt;/p&gt;&lt;p&gt;举个例子：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Union&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;derive&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;derive&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;first_order&lt;/code&gt; 会把复杂的 &lt;code&gt;H&lt;/code&gt; and &lt;code&gt;H0&lt;/code&gt; 打开。因为 &lt;code&gt;H&lt;/code&gt; 里面有一个 &lt;code&gt;\/&lt;/code&gt;，所以会变成两个小目标：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Union&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;derive&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;derive&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以及&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Union&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;derive&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;derive&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再举一个例子：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap_typ_extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ht&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap_typed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;heap_typ_extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ht&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap_typed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 &lt;code&gt;first_order&lt;/code&gt; 之后会变成：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap_typ_extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ht&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap_typed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;typed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;尽管原先的目标由三个命题组成，但是 &lt;code&gt;first_order&lt;/code&gt; 之后依然只有一个目标而不是三个，这是因为另外两个命题已经在假设 &lt;code&gt;H4&lt;/code&gt; 里面了。顺带一提，&lt;code&gt;first_order&lt;/code&gt; 会进一步把 &lt;code&gt;heap_typed&lt;/code&gt; 的前提条件拆出来，但是我这里为了简单就假装没有发生。&lt;/p&gt;&lt;h2&gt;&lt;code&gt;admit&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;在有多个小目标的情况下，有时候你想要跳过其中的几个小目标。这可能是因为你暂时不知道怎么证明；有可能是因为你觉得这太简单现在不想证；也有可能你不确定现在走的这条路对不对，想要先看一眼后面的其他几个小目标。&lt;/p&gt;&lt;p&gt;这时候，你可以用 &lt;code&gt;admit.&lt;/code&gt; 来跳过当前的小目标。当然了，一旦你有了一个 &lt;code&gt;admit.&lt;/code&gt;，你这个证明就不能 &lt;code&gt;Qed.&lt;/code&gt;，你只能 &lt;code&gt;Admitted&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;&lt;code&gt;symmetry&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;如果目标是一个等式，而且你想要翻转它，你可以使用 &lt;code&gt;symmetry.&lt;/code&gt;。举个例子：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;env2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 &lt;code&gt;symmetry&lt;/code&gt; 之后：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;&lt;code&gt;revert&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;revert&lt;/code&gt; 可以把你之前 &lt;code&gt;intros&lt;/code&gt; 引入的假设放回去。为什么放回去？因为有时候你需要把归纳假设变得更强一些。比方说：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;Lemma&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extends_lookup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;heap_typ_extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lookup_typ&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lookup_typ&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果我们直接 &lt;code&gt;induction a; intros.&lt;/code&gt;，第二个小目标会是这样的：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;h&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap_typ&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;nat&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IHa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;heap_typ_extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;lookup_typ&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lookup_typ&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap_typ_extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lookup_typ&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lookup_typ&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然而，如果我们 &lt;code&gt;intros h h&#39; a. revert h h&#39;. induction a; intros.&lt;/code&gt;，我们的第二个小目标会变成这样：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;nat&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IHa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap_typ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;heap_typ_extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;lookup_typ&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lookup_typ&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typ&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;h&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap_typ&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap_typ_extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lookup_typ&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lookup_typ&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到，后面这个版本里面的归纳假设 &lt;code&gt;IHa&lt;/code&gt; 比没有 &lt;code&gt;revert&lt;/code&gt; 的那个版本的更强。如果不 &lt;code&gt;revert&lt;/code&gt; 的话，&lt;code&gt;IHa&lt;/code&gt; 就不足以证明这个命题（我当时浪费了很长时间在这个上面）。&lt;/p&gt;&lt;p&gt;所以怎么知道要不要 &lt;code&gt;revert&lt;/code&gt; 呢？我觉得我们可以先想简单一点，不要 &lt;code&gt;revert&lt;/code&gt;。当你发现你的归纳假设不够强之后，再来想想 &lt;code&gt;revert&lt;/code&gt;。&lt;/p&gt;&lt;h2&gt;&lt;code&gt;remember&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;我遇到的关于 &lt;code&gt;induction&lt;/code&gt; 的另一个问题是这样的：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ascii&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reg_exp&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Star&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Star&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里 &lt;code&gt;=~&lt;/code&gt; 只是一个归纳类型的记号，&lt;code&gt;x =~ y&lt;/code&gt; 的意思是 &lt;code&gt;exp_match x y&lt;/code&gt;。尽管直觉上我们知道我们需要对 &lt;code&gt;H&lt;/code&gt; 进行归纳，但如果我们直接 &lt;code&gt;induction H&lt;/code&gt;，我们会得到一大堆无法证明的东西：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subgoals&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ascii&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reg_exp&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmptyStr&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dot&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Union&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Union&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Star&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re0&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Star&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我听说这是因为当构造函数的参数不是变量的时候，&lt;code&gt;induction&lt;/code&gt; 就会表现得很糟糕。这个例子里面 &lt;code&gt;String a s&lt;/code&gt; and &lt;code&gt;Star re&lt;/code&gt; 都是表达式，不是变量。&lt;/p&gt;&lt;p&gt;在这种情况下，我们可以使用 &lt;code&gt;remember (String a s). remember (Star re).&lt;/code&gt; 来把这两个表达式替换成变量：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ascii&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reg_exp&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Heqs0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reg_exp&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Heqr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Star&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在我们就可以 &lt;code&gt;induction H; try discriminate.&lt;/code&gt;，现在就只剩下一个可以证明的目标了：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ascii&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reg_exp&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Heqs0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;re0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reg_exp&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Heqr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Star&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Star&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Star&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IHexp_match1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;Star&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Star&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Star&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IHexp_match2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;re0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Star&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re0&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Star&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;&lt;code&gt;induct&lt;/code&gt; (Frap Tactic)&lt;/h2&gt;&lt;p&gt;&lt;code&gt;induct&lt;/code&gt; 是 &lt;code&gt;frap&lt;/code&gt; 库里面一个更强版本的 &lt;code&gt;induction&lt;/code&gt;。你不需要使用 &lt;code&gt;remember&lt;/code&gt;，而且甚至可以得到更强的结论。比如上面的例子，如果我们直接 &lt;code&gt;induct H.&lt;/code&gt;，我们就会有：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reg_exp&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Star&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IHexp_match1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ascii&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;re0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reg_exp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;Star&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Star&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Star&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IHexp_match2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ascii&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;re0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reg_exp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Star&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
               &lt;span class=&quot;k&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Star&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ascii&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;______________________________________(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Star&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的归纳假设比原来更强了。所以说如果有可能的话，我都会使用 &lt;code&gt;induct&lt;/code&gt; 来替代 &lt;code&gt;induction&lt;/code&gt;。&lt;/p&gt;&lt;h2&gt;Vernacular Commands&lt;/h2&gt;&lt;h2&gt;&lt;code&gt;Print&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;你可以用 &lt;code&gt;Print&lt;/code&gt; 来检查定义。比方说 &lt;code&gt;Print or.&lt;/code&gt;：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;Inductive&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Prop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Prop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or_introl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or_intror&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;&lt;code&gt;Search&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;要想找到一个你想要的 Coq 内置的定理是很难的。有一次我遇到了一个情况，我需要翻转一个不等于关系：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;H1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;H5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;虽然说这个对人类来说非常的显然，但是对 Coq 来说并不是。后来，我发现，只要我知道怎么表达我需要的定理，我就可以用 &lt;code&gt;Search&lt;/code&gt; 来找到它。在这个例子里面，我想要的定理是这样的：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;Search&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后 Coq 就会神奇般地告诉我：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;not_eq_sym&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再举一个我遇到的情况：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IHtyped&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;heap_typed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ht&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;exists&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isValue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我怎么才能告诉 Coq 所有东西都会等于自身呢？&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;Search&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;于是我知道了：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eq_refl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不过有时候你不确定怎么表达一个定理（比方说，我就不知道怎么表达“&lt;code&gt;x = y&lt;/code&gt; 和 &lt;code&gt;x &amp;lt;&amp;gt; y&lt;/code&gt; 两者必有一个成立”），在这种情况下，你可以尝试搜索名字，比方说 &lt;code&gt;Search &quot;eq&quot;.&lt;/code&gt;。Coq 会告诉你所有沾有 &lt;code&gt;eq&lt;/code&gt; 两字的定理，然后你就可以一条条地看过去。&lt;/p&gt;&lt;h2&gt;Tricks&lt;/h2&gt;&lt;h2&gt;对什么进行归纳？&lt;/h2&gt;&lt;p&gt;归纳一般来说会反映定义。比方说：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;Lemma&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len_app_plus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要证明 &lt;code&gt;len_app_plus&lt;/code&gt;，就对 &lt;code&gt;s1&lt;/code&gt; 进行归纳，因为 &lt;code&gt;String.length&lt;/code&gt; 在每次迭代中会消耗字符串的第一个字符。当你对 &lt;code&gt;s1&lt;/code&gt; 进行归纳的时候，第二个情况会是 &lt;code&gt;s1 = String ch s&lt;/code&gt;，也就是一个字符后面跟着一个字符串，这就对应了 &lt;code&gt;String.length&lt;/code&gt; 的定义，所以说我们就可以应用归纳假设。&lt;/p&gt;&lt;p&gt;再举一个例子：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;Lemma&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len_repeat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;repeat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;类似地，要证明 &lt;code&gt;len_repeat&lt;/code&gt;，我们就要对 &lt;code&gt;n&lt;/code&gt; 进行归纳，因为 &lt;code&gt;repeat&lt;/code&gt; 是定义在 &lt;code&gt;n&lt;/code&gt; 上的一个递归。&lt;/p&gt;&lt;h2&gt;缩进和子弹点&lt;/h2&gt;&lt;p&gt;我不确定 Coq 社区是如何看待缩进的，但是我来自一个很强的编程背景，所以我就会希望我的证明也能有缩进来反映证明的结构。&lt;/p&gt;&lt;p&gt;Coq 会忽略空白字符和空行，但是 Coq 提供了子弹点来区分不同的小目标：&lt;code&gt;+&lt;/code&gt;、&lt;code&gt;-&lt;/code&gt;、&lt;code&gt;*&lt;/code&gt;、以上符号的重复（&lt;code&gt;++&lt;/code&gt;、&lt;code&gt;***&lt;/code&gt;、……）以及一对 &lt;code&gt;{}&lt;/code&gt;。所以你可以这么写证明：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;Proof&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;             &lt;span class=&quot;c&quot;&gt;(* become two subgoals after this *)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;(* enter &quot;+&quot;, level 1, focus only one subgoal *)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;(* become three subgoals after this *)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;(* enter &quot;-&quot;, level 2, focus only one subgoal, and prove it *)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;(* focus another level 2 subgoal, and prove it *)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;(* focus another L2 subgoal, become two subgoals after this *)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;(* enter &quot;*&quot;, level 3, focus only one subgoal *)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;(* become two subgoals after this *)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;(* enter &quot;{}&quot;, level 4, focus only one subgoal *)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;(* become two subgoals after this *)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;(* enter &quot;-&quot; inside &quot;{}&quot;, level 5, focus only one subgoal *)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* level 6 *)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;(* prove another &quot;-&quot; inside &quot;{}&quot; and finish the first &quot;{}&quot; *)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;(* enter another &quot;{}&quot; subgoal *)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;(* finish the subgoal *)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;(* come back to the very first level *)&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;Qed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;虽然说不用子弹点也能完成证明，但是我发现子弹点可以帮助我们追踪证明的结构。在你进入了一个子弹点之后，目标就会变成只有一个。在你结束了这个小目标之后，Coq 会告诉你还有多少这个级别的小目标要证。&lt;/p&gt;&lt;p&gt;另外，我个人喜欢避免在简单的情况分叉，不然的话这个证明就会看起来往一边偏：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
               &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
               &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
                   &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
                   &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tactic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要避免这种无意义的分叉有若干种办法：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;如果有若干个情况，但是只有一个是有意义的&lt;/li&gt;&lt;li&gt;用 &lt;code&gt;;&lt;/code&gt; 和 &lt;code&gt;try&lt;/code&gt;，比方说 &lt;code&gt;destruct c2; try discriminate.&lt;/code&gt;&lt;/li&gt;&lt;li&gt;如果恰好只有两个情况&lt;/li&gt;&lt;li&gt;如果显然的情况是在第一个，那就直接证明，不要用子弹点&lt;/li&gt;&lt;li&gt;如果显然的情况是在第二个，可以用 &lt;code&gt;2:&lt;/code&gt; 跳到第二个情况，比方说 &lt;code&gt;destruct s2. 2: inversion x.&lt;/code&gt; 还有 &lt;code&gt;cases (ascii_dec a0 a0). 2: congruence.&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;在一行里面写多个招式&lt;/h2&gt;&lt;p&gt;我发现把紧密相关的几句话写在一行里面实际上会让证明看起来更清楚。比方说：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;inversion&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;subst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cases&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ascii_dec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;congruence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;econstructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;eauto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;看起来就比下面这个好：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;inversion&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;subst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cases&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ascii_dec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;congruence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;econstructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;eauto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;尤其是当证明很长、子弹点很多的时候。&lt;/p&gt;&lt;h2&gt;向前证明和向后证明&lt;/h2&gt;&lt;p&gt;有两种证明的风格，向前和向后。向前证明就是一直加入假设，直到目标已经在假设里面了。向后证明就是一直对目标进行变换，直到目标已经在假设里面了。&lt;/p&gt;&lt;p&gt;一般来说这两者会混着来，因为有时候 &lt;code&gt;pose proof&lt;/code&gt; 更容易，有时候 &lt;code&gt;apply&lt;/code&gt; 定理更容易，或者用 &lt;code&gt;e&lt;/code&gt; 系列的招数让 Coq 自动把问题解决。&lt;/p&gt;&lt;h2&gt;显示记号&lt;/h2&gt;&lt;p&gt;一开始看到 Coq 里面奇奇怪怪的符号的时候非常吓人，但其实他们一般来说就只是记号（&lt;i&gt;notation&lt;/i&gt;）而已，并不是什么特殊的东西，你甚至可以为你自己的归纳类型添加记号。&lt;/p&gt;&lt;p&gt;但是当记号妨碍你理解的时候，你可以选择不显示它们。在 CoqIDE 里面，这个选项是在 &lt;i&gt;View / Display notations&lt;/i&gt;。&lt;/p&gt;&lt;h2&gt;FAQ&lt;/h2&gt;&lt;h2&gt;已知 &lt;code&gt;Some x = Some y&lt;/code&gt;，怎么变成 &lt;code&gt;x = y&lt;/code&gt;？&lt;/h2&gt;&lt;p&gt;&lt;code&gt;inversion&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;求证 &lt;code&gt;Some x = Some y&lt;/code&gt;，怎么转变成证明 &lt;code&gt;x = y&lt;/code&gt;？&lt;/h2&gt;&lt;p&gt;&lt;code&gt;f_equal&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;已知 &lt;code&gt;x &amp;lt;&amp;gt; y&lt;/code&gt;，怎么变成 &lt;code&gt;y &amp;lt;&amp;gt; x&lt;/code&gt;？&lt;/h2&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coq&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;Search&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;not_eq_sym&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;forall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;怎么说明要么 &lt;code&gt;x = y&lt;/code&gt;，要么 &lt;code&gt;x &amp;lt;&amp;gt; y&lt;/code&gt;？&lt;/h2&gt;&lt;p&gt;一般来说这个是叫做 &lt;code&gt;_dec&lt;/code&gt;，比方说：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;ascii_dec&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;string_dec&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;Nat.eq_dec&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;你可以用 &lt;code&gt;destruct (string_dec x y).&lt;/code&gt; 来分类讨论这两种情况。&lt;/p&gt;&lt;h2&gt;我的假设里面有 &lt;code&gt;/\&lt;/code&gt; 或 &lt;code&gt;\/&lt;/code&gt; 怎么办？&lt;/h2&gt;&lt;p&gt;&lt;code&gt;first_order&lt;/code&gt; 或者 &lt;code&gt;destruct&lt;/code&gt;。&lt;/p&gt;&lt;h2&gt;我的目标里面有 &lt;code&gt;/\&lt;/code&gt; 或 &lt;code&gt;&amp;lt;-&amp;gt;&lt;/code&gt; 怎么办？&lt;/h2&gt;&lt;p&gt;&lt;code&gt;first_order&lt;/code&gt; 或者 &lt;code&gt;split&lt;/code&gt;。&lt;/p&gt;&lt;h2&gt;我的目标里面有 &lt;code&gt;\/&lt;/code&gt; 怎么办？&lt;/h2&gt;&lt;p&gt;用 &lt;code&gt;left.&lt;/code&gt; 或者 &lt;code&gt;right.&lt;/code&gt; 来证明两者中的其中一个。&lt;/p&gt;&lt;h2&gt;怎么样复制一份假设？&lt;/h2&gt;&lt;p&gt;&lt;code&gt;assert&lt;/code&gt;。&lt;/p&gt;&lt;h2&gt;怎么样把一个命题加到假设里面？&lt;/h2&gt;&lt;p&gt;&lt;code&gt;assert&lt;/code&gt;。&lt;/p&gt;&lt;h2&gt;我的假设里面有矛盾怎么办？&lt;/h2&gt;&lt;p&gt;比方说现在有一个 &lt;code&gt;H : False&lt;/code&gt; 或者任何能被转化成 &lt;code&gt;False&lt;/code&gt; 的假设（比方说 &lt;code&gt;Some x = None&lt;/code&gt;、&lt;code&gt;1 = 2&lt;/code&gt; 或者 &lt;code&gt;True = False&lt;/code&gt;），那么恭喜，试试看 &lt;code&gt;discriminate.&lt;/code&gt; 或者 &lt;code&gt;congruence.&lt;/code&gt;，这个证明就结束了。&lt;/p&gt;&lt;p&gt;这是因为从逻辑上说，一个假的命题可以推导出任何东西。&lt;/p&gt;&lt;h2&gt;我的假设里面的前提条件有矛盾怎么办？&lt;/h2&gt;&lt;p&gt;比方说现在有一个 &lt;code&gt;H : Some x = None -&amp;gt; P&lt;/code&gt;，那么现在你就只能 &lt;code&gt;clear H.&lt;/code&gt; 把它删掉了，因为你永远没有办法使用 &lt;code&gt;H&lt;/code&gt;。这跟前面的条件不一样，因为你没办法证明 &lt;code&gt;Some x = None&lt;/code&gt; 所以你没办法去掉 &lt;code&gt;H&lt;/code&gt; 里面的前提条件，所以 &lt;code&gt;P&lt;/code&gt; 无法成立。&lt;/p&gt;&lt;h2&gt;目标是个矛盾怎么办？不可证怎么办？&lt;/h2&gt;&lt;p&gt;如果你的目标是 &lt;code&gt;False&lt;/code&gt; 或者 &lt;code&gt;Some x = None&lt;/code&gt; 或者任何类似的不可证的东西，别慌张，先检查一下假设里面有没有任何能导出矛盾的地方，因为假命题可以推导出任何东西，包括假命题。&lt;/p&gt;&lt;p&gt;如果所有的假设都很合理，那就说明你在之前的步骤中做错了事情。把它找出来，改掉。&lt;/p&gt;&lt;h2&gt;目标里面有 &lt;code&gt;-&amp;gt;&lt;/code&gt; 怎么办？&lt;/h2&gt;&lt;p&gt;&lt;code&gt;intros&lt;/code&gt;。&lt;/p&gt;&lt;h2&gt;目标以 &lt;code&gt;forall&lt;/code&gt; 开头怎么办？&lt;/h2&gt;&lt;p&gt;&lt;code&gt;intros&lt;/code&gt;。&lt;/p&gt;&lt;h2&gt;目标以 &lt;code&gt;exists&lt;/code&gt; 开头怎么办？&lt;/h2&gt;&lt;p&gt;一般来时我会用 &lt;code&gt;exists&lt;/code&gt; 告诉 Coq 这些变量是什么，但是你也可以用 &lt;code&gt;eexists.&lt;/code&gt; 向前推进证明，然后到某个时刻 Coq 会自动推导出来这个变量是什么。&lt;/p&gt;&lt;h2&gt;我的假设以 &lt;code&gt;forall&lt;/code&gt; 开头怎么办？&lt;/h2&gt;&lt;p&gt;&lt;code&gt;specialize&lt;/code&gt; 或者 &lt;code&gt;pose proof&lt;/code&gt;。&lt;/p&gt;&lt;h2&gt;我的假设以 &lt;code&gt;exists&lt;/code&gt; 开头怎么办？&lt;/h2&gt;&lt;p&gt;&lt;code&gt;destruct&lt;/code&gt; 来把这个变量取出来。&lt;/p&gt;&lt;h2&gt;我的假设里面有 &lt;code&gt;-&amp;gt;&lt;/code&gt; 怎么办？&lt;/h2&gt;&lt;p&gt;&lt;code&gt;specialize&lt;/code&gt; 或者 &lt;code&gt;pose proof&lt;/code&gt;。&lt;/p&gt;&lt;h2&gt;怎么样才能跳过这个小目标去证下一个？&lt;/h2&gt;&lt;p&gt;&lt;code&gt;admit&lt;/code&gt;。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;首发于博客&lt;/p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//abcdabcd987.com/coq/&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Coq 小技巧&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>陈乐群</author>
<guid isPermaLink="false">2019-01-06-54164515</guid>
<pubDate>Sun, 06 Jan 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>Haskell中的范畴之积与和</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-01-06-25554114.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/25554114&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-924d4313803502a678947a3a87a51d29_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;在上一篇&lt;a href=&quot;https://zhuanlan.zhihu.com/p/25565309&quot; class=&quot;internal&quot;&gt;Haskell中的范畴之函子和自然变换 - 知乎专栏&lt;/a&gt;文章中，介绍了函子和自然变换。于是我们可以接下来使用对象0和对象1、函子和自然变换来构造一些常用的代数结构，比如两个范畴的积、范畴内的对象的积与和、指数类型。&lt;/p&gt;&lt;p&gt;从现在开始，要精确的用Haskell代码来描述范畴论的概念就比较难了，而且也没有那么直观了，我在这之后的这一系列文章将会使用更直观但不够精确的方式来用Haskell代码来描述范畴论的概念。有兴趣的可以参考Edward kmett写的Hask（&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/ekmett/hask&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/ekmett/hask&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;）&lt;/p&gt;&lt;p&gt;这个package，这是一个严谨而精确的用Haskell代码来描述范畴论概念的库，不过理解这个库有一定的门槛。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;积范畴&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;把两个范畴拼在一起，我们就得到了积范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D+%5Ctimes+%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C} \times \mathcal{C}&quot; eeimg=&quot;1&quot;&gt; ，其对象是一对对象&amp;lt; a1, a2 &amp;gt;，其中a1是第一个范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C}&quot; eeimg=&quot;1&quot;&gt; 的对象，a2是第二个范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C}&quot; eeimg=&quot;1&quot;&gt; 的对象。积范畴的态射是一对态射&amp;lt; f1, f2 &amp;gt; ，其中f1: a1 -&amp;gt; b1是第一个范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C}&quot; eeimg=&quot;1&quot;&gt; 中的态射，f2: a2 -&amp;gt; b2是第二个范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=+%5Cmathcal%7BC%7D&quot; alt=&quot; \mathcal{C}&quot; eeimg=&quot;1&quot;&gt; 中的态射。&lt;/p&gt;&lt;p&gt;积范畴的单位元是 id = &amp;lt;id, id&amp;gt;，态射的组合是 &amp;lt;g1, g2&amp;gt; . &amp;lt;f1, f2&amp;gt; = &amp;lt;g1 . f1, g2 . f 2&amp;gt;。&lt;/p&gt;&lt;p&gt;积范畴的Hom-Set，记为 &lt;img src=&quot;https://www.zhihu.com/equation?tex=Hom_%7B%5Cmathcal%7BC%7D+%5Ctimes+%5Cmathcal%7BC%7D%7D+%28%3Ca1%2C+b1%3E%2C+%3Ca2%2C+b2%3E%29&quot; alt=&quot;Hom_{\mathcal{C} \times \mathcal{C}} (&amp;lt;a1, b1&amp;gt;, &amp;lt;a2, b2&amp;gt;)&quot; eeimg=&quot;1&quot;&gt;  。&lt;/p&gt;&lt;p&gt;由于无法在Haskell中表示积范畴，只好以如下的伪代码形式表示： &lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;-- 下面是Haskell的伪代码，不能编译运行，只用来表述积范畴 Hask × Hask&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Hask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Hask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D+%5Ctimes+%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C} \times \mathcal{C}&quot; eeimg=&quot;1&quot;&gt; 和范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C}&quot; eeimg=&quot;1&quot;&gt; 之间是存在态射的，也即函子。&lt;/p&gt;&lt;p&gt;范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D+%5Ctimes+%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C} \times \mathcal{C}&quot; eeimg=&quot;1&quot;&gt; 到范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C}&quot; eeimg=&quot;1&quot;&gt; 的函子中有两个简单的函子 OutL : &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D+%5Ctimes+%5Cmathcal%7BC%7D+%5Cto+%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C} \times \mathcal{C} \to \mathcal{C}&quot; eeimg=&quot;1&quot;&gt; 和  OutR : &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D+%5Ctimes+%5Cmathcal%7BC%7D+%5Cto+%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C} \times \mathcal{C} \to \mathcal{C}&quot; eeimg=&quot;1&quot;&gt; ，其实现如下&lt;/p&gt;&lt;p&gt;                                     OutL &amp;lt;a1, a2&amp;gt; = a1           OutL &amp;lt;f1, f2&amp;gt; = f1&lt;/p&gt;&lt;p&gt;                                     OutR &amp;lt;a1, a2&amp;gt; = a2          OutR &amp;lt;f1, f2&amp;gt; = f2&lt;/p&gt;&lt;p&gt;范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C}&quot; eeimg=&quot;1&quot;&gt; 到范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D+%5Ctimes+%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C} \times \mathcal{C}&quot; eeimg=&quot;1&quot;&gt; 的函子中有一个简单的函子 ∆ : &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D+%5Cto+%5Cmathcal%7BC%7D+%5Ctimes+%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C} \to \mathcal{C} \times \mathcal{C}&quot; eeimg=&quot;1&quot;&gt; ，称为对角函子，其实现如下&lt;/p&gt;&lt;p&gt;                                     ∆ a = &amp;lt;a, a&amp;gt;                       ∆ f = &amp;lt;f, f&amp;gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;二函子&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D+%5Ctimes+%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C} \times \mathcal{C}&quot; eeimg=&quot;1&quot;&gt; 到范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C}&quot; eeimg=&quot;1&quot;&gt; 的函子称为二函子(Bifunctor)。二函子的一般形式是 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%28+-+%5Cotimes+-+%29+%3A+%5Cmathcal%7BC%7D+%5Ctimes+%5Cmathcal%7BD%7D+%5Cto+%5Cmathcal%7BE%7D&quot; alt=&quot;( - \otimes - ) : \mathcal{C} \times \mathcal{D} \to \mathcal{E}&quot; eeimg=&quot;1&quot;&gt; ，当我们固定住左边，则得到了部分应用函子&lt;img src=&quot;https://www.zhihu.com/equation?tex=%28+a+%5Cotimes+-+%29+%3A+%5Cmathcal%7BD%7D+%5Cto+%5Cmathcal%7BE%7D&quot; alt=&quot;( a \otimes - ) : \mathcal{D} \to \mathcal{E}&quot; eeimg=&quot;1&quot;&gt; 。当我们固定住右边，则得到了部分应用函子 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%28+-+%5Cotimes+b+%29+%3A+%5Cmathcal%7BC%7D+%5Cto+%5Cmathcal%7BE%7D&quot; alt=&quot;( - \otimes b ) : \mathcal{C} \to \mathcal{E}&quot; eeimg=&quot;1&quot;&gt; 。这两个部分应用函子对任意的态射 f : a1 -&amp;gt; a2 和态射 g : b1 -&amp;gt; b2 满足如下的性质：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%28f+%5Cotimes+g%29+%3D+%28a2+%5Cotimes+g%29+%5Ccdot+%28f+%5Cotimes+b1%29%3D%28f+%5Cotimes+b2%29+%5Ccdot+%28a1+%5Cotimes+g%29+%5C%5C&quot; alt=&quot;(f \otimes g) = (a2 \otimes g) \cdot (f \otimes b1)=(f \otimes b2) \cdot (a1 \otimes g) \\&quot; eeimg=&quot;1&quot;&gt; &lt;/p&gt;&lt;p&gt;这个性质同时也说明若我们有两个部分应用函子，只有满足上述性质的两个部分应用函子才可以组合成一个二函子。&lt;/p&gt;&lt;p&gt;我们前面提到的范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C}&quot; eeimg=&quot;1&quot;&gt; 上的Hom函子&lt;img src=&quot;https://www.zhihu.com/equation?tex=Hom_%5Cmathcal%7BC%7D%28-%2C%5C+-%29&quot; alt=&quot;Hom_\mathcal{C}(-,\ -)&quot; eeimg=&quot;1&quot;&gt;，简记为 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D%28-%2C%5C+-%29&quot; alt=&quot;\mathcal{C}(-,\ -)&quot; eeimg=&quot;1&quot;&gt; ，也是一个二函子，只是这个二函子相对第一个变量是反变的，因此也叫反变二函子（Profunctor）。同样的，Hom函子也可以得到两个部分应用函子，分别是协变Hom函子&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D%28a%2C%5C+-%29&quot; alt=&quot;\mathcal{C}(a,\ -)&quot; eeimg=&quot;1&quot;&gt; 和 反变Hom函子&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D%28-%2C%5C+b%29&quot; alt=&quot;\mathcal{C}(-,\ b)&quot; eeimg=&quot;1&quot;&gt;。&lt;/p&gt;&lt;p&gt;若我们有态射 h : a1 -&amp;gt; b1，由于协变Hom函子&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D%28a%2C%5C+-%29&quot; alt=&quot;\mathcal{C}(a,\ -)&quot; eeimg=&quot;1&quot;&gt; 对态射 g : b1 -&amp;gt; b2 是协变的，因此 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D%28a1%2C%5C+g%29+%5C+h+%3D+g+%5Ccdot+h&quot; alt=&quot;\mathcal{C}(a1,\ g) \ h = g \cdot h&quot; eeimg=&quot;1&quot;&gt;。&lt;/p&gt;&lt;p&gt;同样的，由于反变Hom函子&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D%28-%2C%5C+b%29&quot; alt=&quot;\mathcal{C}(-,\ b)&quot; eeimg=&quot;1&quot;&gt; 对态射 f : a1 -&amp;gt; a2 是反变的，因此 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D%28f%5E%7Bop%7D%2C%5C+b1%29+%5C+h+%3D+h+%5Ccdot+f&quot; alt=&quot;\mathcal{C}(f^{op},\ b1) \ h = h \cdot f&quot; eeimg=&quot;1&quot;&gt;。这里态射&lt;img src=&quot;https://www.zhihu.com/equation?tex=f%5E%7Bop%7D&quot; alt=&quot;f^{op}&quot; eeimg=&quot;1&quot;&gt; : a2 -&amp;gt; a1 是态射 f 的对偶。&lt;/p&gt;&lt;p&gt;根据二函子需要满足的部分应用函子的性质，并注意对第一个变量是反变的，我们可以得到：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D%28f%5E%7Bop%7D%2C%5C+g%29+%3D+%5Cmathcal%7BC%7D%28a2%2C%5C+g%29+%5Ccdot+%5Cmathcal%7BC%7D%28f%5E%7Bop%7D%2C%5C+b1%29+%3D+%5Cmathcal%7BC%7D%28f%5E%7Bop%7D%2C%5C+b2%29+%5Ccdot+%5Cmathcal%7BC%7D%28a1%2C%5C+g%29+%5C%5C&quot; alt=&quot;\mathcal{C}(f^{op},\ g) = \mathcal{C}(a2,\ g) \cdot \mathcal{C}(f^{op},\ b1) = \mathcal{C}(f^{op},\ b2) \cdot \mathcal{C}(a1,\ g) \\&quot; eeimg=&quot;1&quot;&gt; &lt;/p&gt;&lt;p&gt;从协变Hom函子和反变Hom函子的特性，我们有&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%28%5Cmathcal%7BC%7D%28a2%2C%5C+g%29+%5Ccdot+%5Cmathcal%7BC%7D%28f%5E%7Bop%7D%2C%5C+b1%29%29+%5C+h+%3D+g+%5Ccdot+%28h+%5Ccdot+f%29+%5C%5C&quot; alt=&quot;(\mathcal{C}(a2,\ g) \cdot \mathcal{C}(f^{op},\ b1)) \ h = g \cdot (h \cdot f) \\&quot; eeimg=&quot;1&quot;&gt; &lt;/p&gt;&lt;p&gt;和&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=%28%5Cmathcal%7BC%7D%28f%5E%7Bop%7D%2C%5C+b2%29+%5Ccdot+%5Cmathcal%7BC%7D%28a1%2C%5C+g%29%29+%5C+h+%3D+%28g+%5Ccdot+h%29+%5Ccdot+f+%5C%5C&quot; alt=&quot;(\mathcal{C}(f^{op},\ b2) \cdot \mathcal{C}(a1,\ g)) \ h = (g \cdot h) \cdot f \\&quot; eeimg=&quot;1&quot;&gt; &lt;/p&gt;&lt;p&gt;于是我们从&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D%28-%2C%5C+-%29&quot; alt=&quot;\mathcal{C}(-,\ -)&quot; eeimg=&quot;1&quot;&gt;这个二函子的部分应用函子的性质，得到了态射的结合律&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=g+%5Ccdot+%28h+%5Ccdot+f%29+%3D+%28g+%5Ccdot+h%29+%5Ccdot+f+%5C%5C&quot; alt=&quot;g \cdot (h \cdot f) = (g \cdot h) \cdot f \\&quot; eeimg=&quot;1&quot;&gt; &lt;/p&gt;&lt;p&gt;在Haskell的Hask范畴中，同样可以得到如上的性质&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contramap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Op&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contramap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Op&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                          &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Op&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Op&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getOp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                                          &lt;span class=&quot;c1&quot;&gt;-- Op f . Op h = Op (h . f)&lt;/span&gt;
                                          &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                          &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contramap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Op&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contramap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Op&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                          &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contramap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Op&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                          &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Op&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Op&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getOp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                                          &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将一个函子&lt;img src=&quot;https://www.zhihu.com/equation?tex=F%3A+%5Cmathcal%7BC%7D+%5Cto+%5Cmathcal%7BD%7D&quot; alt=&quot;F: \mathcal{C} \to \mathcal{D}&quot; eeimg=&quot;1&quot;&gt; 应用到范畴&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C}&quot; eeimg=&quot;1&quot;&gt;中的对象a，我们就得到了范畴&lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BD%7D&quot; alt=&quot;\mathcal{D}&quot; eeimg=&quot;1&quot;&gt;中的对象F a，这个函子的应用操作也是一个二函子 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%28-%5C+%5C+-%29+%3A+%5Cmathcal%7BD%7D%5E%5Cmathcal%7BC%7D+%5Ctimes+%5Cmathcal%7BC%7D+%5Cto+%5Cmathcal%7BD%7D&quot; alt=&quot;(-\ \ -) : \mathcal{D}^\mathcal{C} \times \mathcal{C} \to \mathcal{D}&quot; eeimg=&quot;1&quot;&gt; 。是一个从函子范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BD%7D%5E%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{D}^\mathcal{C}&quot; eeimg=&quot;1&quot;&gt; 与范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C}&quot; eeimg=&quot;1&quot;&gt; 的积范畴到范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BD%7D&quot; alt=&quot;\mathcal{D}&quot; eeimg=&quot;1&quot;&gt; 的二函子。其两个部分应用函子分别是 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%28F%5C+%5C+-%29+%3A+%5Cmathcal%7BC%7D+%5Cto+%5Cmathcal%7BD%7D&quot; alt=&quot;(F\ \ -) : \mathcal{C} \to \mathcal{D}&quot; eeimg=&quot;1&quot;&gt; 和 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%28-%5C+%5C+a%29+%3A+%5Cmathcal%7BD%7D%5E%5Cmathcal%7BC%7D+%5Cto+%5Cmathcal%7BD%7D&quot; alt=&quot;(-\ \ a) : \mathcal{D}^\mathcal{C} \to \mathcal{D}&quot; eeimg=&quot;1&quot;&gt; ，这里 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%28F+%5C+%5C+-%29&quot; alt=&quot;(F \ \ -)&quot; eeimg=&quot;1&quot;&gt; 就是函子 F ，而 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%28-+%5C+%5C+a%29&quot; alt=&quot;(- \ \ a)&quot; eeimg=&quot;1&quot;&gt; 则和自然变换有关。&lt;/p&gt;&lt;p&gt;由二函子需要满足的部分应用函子的性质，和函子&lt;img src=&quot;https://www.zhihu.com/equation?tex=G%3A+%5Cmathcal%7BC%7D+%5Cto+%5Cmathcal%7BD%7D&quot; alt=&quot;G: \mathcal{C} \to \mathcal{D}&quot; eeimg=&quot;1&quot;&gt; ，以及自然变换 &lt;img src=&quot;https://www.zhihu.com/equation?tex=t+%3A+F+%5CRightarrow+G&quot; alt=&quot;t : F \Rightarrow G&quot; eeimg=&quot;1&quot;&gt; ，我们可以得到&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://www.zhihu.com/equation?tex=t+%5C+f+%3D+%28G+%5C+f%29+%5Ccdot+t_%7Ba1%7D+%3D+t_%7Ba2%7D+%5Ccdot+%28F+%5C+f%29+%5C%5C&quot; alt=&quot;t \ f = (G \ f) \cdot t_{a1} = t_{a2} \cdot (F \ f) \\&quot; eeimg=&quot;1&quot;&gt; &lt;/p&gt;&lt;p&gt;这就是自然变换的交换关系。&lt;/p&gt;&lt;p&gt;二函子和对角函子都是重要的函子，在后续的章节中会陆续有相应的介绍。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;范畴上的积&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;若我们可以在范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C}&quot; eeimg=&quot;1&quot;&gt; 中找到一个对象 &lt;img src=&quot;https://www.zhihu.com/equation?tex=b1+%5Ctimes+b2&quot; alt=&quot;b1 \times b2&quot; eeimg=&quot;1&quot;&gt; 来表示积范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D+%5Ctimes+%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C} \times \mathcal{C}&quot; eeimg=&quot;1&quot;&gt;中的一对对象&amp;lt;b1, b2&amp;gt;，且这个对象具有如下的性质，那我们就称范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C}&quot; eeimg=&quot;1&quot;&gt;中的对象&lt;img src=&quot;https://www.zhihu.com/equation?tex=b1+%5Ctimes+b2&quot; alt=&quot;b1 \times b2&quot; eeimg=&quot;1&quot;&gt; 是范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C}&quot; eeimg=&quot;1&quot;&gt;中的对象b1和对象b2的积。&lt;/p&gt;&lt;p&gt;&lt;b&gt;积对象的泛性质：&lt;/b&gt;范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C}&quot; eeimg=&quot;1&quot;&gt;中的积对象&lt;img src=&quot;https://www.zhihu.com/equation?tex=b1+%5Ctimes+b2&quot; alt=&quot;b1 \times b2&quot; eeimg=&quot;1&quot;&gt; 和一对态射outl : b1 x b2 -&amp;gt; b1 和outr : b1 x b2 -&amp;gt; b2，对任意一个对象a 和一对态射 f1 : a -&amp;gt; b1 和 f2 : a -&amp;gt; b2，存在唯一的态射g : a -&amp;gt; b1 x b2，满足如下等式：&lt;/p&gt;&lt;p&gt;                 f1 = outl . g   和    f2 = outr . g&lt;/p&gt;&lt;p&gt;态射 g 也可表示为 f1 △ f2，于是有&lt;/p&gt;&lt;p&gt;                    g = f1 △ f2&lt;/p&gt;&lt;p&gt;当 f1 和 f2 分别是 outl 和 outr时，态射 g 就是积对象&lt;img src=&quot;https://www.zhihu.com/equation?tex=b1+%5Ctimes+b2&quot; alt=&quot;b1 \times b2&quot; eeimg=&quot;1&quot;&gt; 上的 id 态射了，于是有&lt;/p&gt;&lt;p&gt;                   id = outl △ outr&lt;/p&gt;&lt;p&gt;在Hask范畴中，用(b1, b2)来表示积对象&lt;img src=&quot;https://www.zhihu.com/equation?tex=b1+%5Ctimes+b2&quot; alt=&quot;b1 \times b2&quot; eeimg=&quot;1&quot;&gt;，用Haskell代码表示如下&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;{-# LANGUAGE TypeOperators #-}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- Hask范畴中用 (b1, b2) 表示积对象 b1 x b2&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;outl&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;outl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;-- outl = fst&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;outr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b2&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;outr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;-- outr = snd&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- g = f1 △ f2, 用 /\来表示 △算子&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;f1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;积对象的泛性质 f1 = outl . g 和 f2 = outr . g 的证明如下&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
                    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
                    &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果对积范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D+%5Ctimes+%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C} \times \mathcal{C}&quot; eeimg=&quot;1&quot;&gt;中的任意一对对象&amp;lt;b1, b2&amp;gt; 都可以在范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C}&quot; eeimg=&quot;1&quot;&gt;中找到积对象 &lt;img src=&quot;https://www.zhihu.com/equation?tex=b1+%5Ctimes+b2&quot; alt=&quot;b1 \times b2&quot; eeimg=&quot;1&quot;&gt; ，那积运算就是范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D+%5Ctimes+%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C} \times \mathcal{C}&quot; eeimg=&quot;1&quot;&gt; 到范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C}&quot; eeimg=&quot;1&quot;&gt; 的二函子 × 。其将积范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D+%5Ctimes+%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C} \times \mathcal{C}&quot; eeimg=&quot;1&quot;&gt;中的对象&amp;lt;b1, b2&amp;gt;变换为范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C}&quot; eeimg=&quot;1&quot;&gt;中的积对象 &lt;img src=&quot;https://www.zhihu.com/equation?tex=b1+%5Ctimes+b2&quot; alt=&quot;b1 \times b2&quot; eeimg=&quot;1&quot;&gt; 。将积范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D+%5Ctimes+%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C} \times \mathcal{C}&quot; eeimg=&quot;1&quot;&gt;中的态射&amp;lt;f1, f2&amp;gt; 变换为范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C}&quot; eeimg=&quot;1&quot;&gt;中的态射f1 × f2，其定义如下：&lt;/p&gt;&lt;p&gt;             f1 × f2 = (f1 . outl) △ (f2 . outr)&lt;/p&gt;&lt;p&gt;容易证明二函子 × 满足函子定律，即满足如下等式：&lt;/p&gt;&lt;p&gt;              id = id × id&lt;/p&gt;&lt;p&gt;              g1 . f1 × g2 . f2 = (g1 × g2) . (f1 × f2)&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;范畴上的和&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;若我们可以在范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C}&quot; eeimg=&quot;1&quot;&gt; 中找到一个对象 &lt;img src=&quot;https://www.zhihu.com/equation?tex=a1+%2B+a2&quot; alt=&quot;a1 + a2&quot; eeimg=&quot;1&quot;&gt; 来表示积范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D+%5Ctimes+%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C} \times \mathcal{C}&quot; eeimg=&quot;1&quot;&gt;中的一对对象&amp;lt;a1, a2&amp;gt;，且这个对象具有如下的性质，那我们就称范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C}&quot; eeimg=&quot;1&quot;&gt;中的对象&lt;img src=&quot;https://www.zhihu.com/equation?tex=a1+%2B+a2&quot; alt=&quot;a1 + a2&quot; eeimg=&quot;1&quot;&gt; 是范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C}&quot; eeimg=&quot;1&quot;&gt;中的对象a1和对象a2的和。&lt;/p&gt;&lt;p&gt;&lt;b&gt;积对象的泛性质：&lt;/b&gt;范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C}&quot; eeimg=&quot;1&quot;&gt;中的和对象&lt;img src=&quot;https://www.zhihu.com/equation?tex=a1+%2B+a2&quot; alt=&quot;a1 + a2&quot; eeimg=&quot;1&quot;&gt; 和一对态射inl : a1 -&amp;gt; a1 + a2 和inr : a2 -&amp;gt; a1 + a2，对任意一个对象b 和一对态射 g1 : a1 -&amp;gt; b 和g2 : a2 -&amp;gt; b，存在唯一的态射 f : a1 + a2 -&amp;gt; b，满足如下等式：&lt;/p&gt;&lt;p&gt;                 g1 = f . inl   和    g2 = f . inr&lt;/p&gt;&lt;p&gt;态射 f 也可表示为 g1 ▽ g2，于是有&lt;/p&gt;&lt;p&gt;                    f = g1 ▽ g2&lt;/p&gt;&lt;p&gt;当 g1 和 g2 分别是 inl 和 inr时，态射 f 就是和对象&lt;img src=&quot;https://www.zhihu.com/equation?tex=a1+%2B+a2&quot; alt=&quot;a1 + a2&quot; eeimg=&quot;1&quot;&gt; 上的 id 态射了，于是有&lt;/p&gt;&lt;p&gt;                   id = inl ▽ inr&lt;/p&gt;&lt;p&gt;在Hask范畴中，用Either a1 a2来表示和对象&lt;img src=&quot;https://www.zhihu.com/equation?tex=a1+%2B+a2&quot; alt=&quot;a1 + a2&quot; eeimg=&quot;1&quot;&gt;，用Haskell代码表示如下&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;{-# LANGUAGE TypeOperators #-}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- Hask范畴中用 Either a1 a2 表示积对象 a1 + a2&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Either&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;inl&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;inl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;-- inl = Left&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;inr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;inr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Right&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;-- inr = Right&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- f = g1 ▽ g2, 用 \/来表示 ▽算子&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Left&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Right&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和对象的泛性质 g1 = f . inl 和 g2 = f . inr 的证明如下&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&lt;span&gt;&lt;/span&gt;(f . inl) g1 g2   = (\(Left x) -&amp;gt; b) . (\a1 -&amp;gt; Left a1)
                    = \a1 -&amp;gt; b
                    = g1

(f . inr) g1 g2 = (\(Right y) -&amp;gt; b) . (\a2 -&amp;gt; Right a2)
                    = \a2 -&amp;gt; b
                    = g2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果对积范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D+%5Ctimes+%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C} \times \mathcal{C}&quot; eeimg=&quot;1&quot;&gt;中的任意一对对象&amp;lt;a1, a2&amp;gt; 都可以在范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C}&quot; eeimg=&quot;1&quot;&gt;中找到和对象 &lt;img src=&quot;https://www.zhihu.com/equation?tex=a1+%2B+a2&quot; alt=&quot;a1 + a2&quot; eeimg=&quot;1&quot;&gt; ，那和运算就是范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D+%5Ctimes+%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C} \times \mathcal{C}&quot; eeimg=&quot;1&quot;&gt; 到范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C}&quot; eeimg=&quot;1&quot;&gt; 的二函子 + 。其将积范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D+%5Ctimes+%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C} \times \mathcal{C}&quot; eeimg=&quot;1&quot;&gt;中的对象&amp;lt;b1, b2&amp;gt;变换为范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C}&quot; eeimg=&quot;1&quot;&gt;中的和对象 &lt;img src=&quot;https://www.zhihu.com/equation?tex=a1+%2B+a2&quot; alt=&quot;a1 + a2&quot; eeimg=&quot;1&quot;&gt; 。将积范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D+%5Ctimes+%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C} \times \mathcal{C}&quot; eeimg=&quot;1&quot;&gt;中的态射&amp;lt;g1, g2&amp;gt; 变换为范畴 &lt;img src=&quot;https://www.zhihu.com/equation?tex=%5Cmathcal%7BC%7D&quot; alt=&quot;\mathcal{C}&quot; eeimg=&quot;1&quot;&gt;中的态射 g1 + g2，其定义如下：&lt;/p&gt;&lt;p&gt;             g1 + g2 = (inl . g1) ▽ (inr . g2)&lt;/p&gt;&lt;p&gt;容易证明二函子 + 满足函子定律，即满足如下等式：&lt;/p&gt;&lt;p&gt;              id = id + id&lt;/p&gt;&lt;p&gt;              g1 . f1 + g2 . f2 = (g1 + g2) . (f1 + f2)&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;在这一章中我们知道了什么是积范畴和二函子，以及如何构造范畴上的积与和，我们接下来就可以来介绍范畴论中很基本又很重要的米田引理了。有兴趣的读者可以期待下一章 Haskell中的范畴之米田引理。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>parker liu</author>
<guid isPermaLink="false">2019-01-06-25554114</guid>
<pubDate>Sun, 06 Jan 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>Visitor Pattern 与 Finally Tagless：解决表达式问题</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2019-01-02-53810286.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/53810286&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-7f1c4dc6025a8c2ff0eaaf7cd33aec1f_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;原文链接：&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//ice1000.org/2019/01/01/FinallyTaglessVisitorPattern/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ice1000.org&lt;/a&gt;&lt;/p&gt;&lt;p&gt;说到设计模式，大家一定会想到世界上著名的『面向对象编程语言』（棒读）Java。以及一大群认为动态类型编程语言比静态类型编程语言更『灵活』、设计模式解决的问题在动态类型编程语言里面都不是问题的人在各大娱乐网站发表的谜样の言论。 这篇文章虽然说是讨论设计模式，但是不是讨论这种问题的（2019 年了，同学）。我们站在一个更 PLT 的层次来看其中一个（我觉得还比较巧妙的）设计模式——Visitor 模式，以及它在函数式编程中对应的函数式编程的『设计模式』。&lt;/p&gt;&lt;h2&gt;Expression Problem&lt;/h2&gt;&lt;p&gt;最早的时候，我以为 Visitor 只是为了在 Java 里面模拟模式匹配用的。比如，考虑这段幼儿园水平的 Haskell 代码：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Exp&lt;/span&gt;
  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lit&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Exp&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Lit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 Java 里面写起来会很痛苦，因为 Java 没有『代数数据类型』的概念，也没有 &lt;code&gt;sealed class&lt;/code&gt;。啊先不说这么多，我们先写一个：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Lit&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此处为了代码简洁性，略去了构造函数。可以看出两种实现在可维护性上的区别：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Haskell 版本&lt;/li&gt;&lt;ul&gt;&lt;li&gt;如果想给 &lt;code&gt;Exp&lt;/code&gt; 添加新的操作（比如输出整颗 AST），只需要新写一个函数就是了&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dump&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;dump&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Lit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;dump&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;(&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dump&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;)&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&lt;ul&gt;&lt;li&gt;如果想给 &lt;code&gt;Exp&lt;/code&gt; 添加新的数据构造器（比如加个 &lt;code&gt;Sub&lt;/code&gt; 表示减），就得修改所有的函数&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Java 版本&lt;/li&gt;&lt;ul&gt;&lt;li&gt;如果想给 &lt;code&gt;Exp&lt;/code&gt; 添加新的数据构造器（比如加个 &lt;code&gt;Sub&lt;/code&gt; 表示减），加个 &lt;code&gt;class&lt;/code&gt; 去 &lt;code&gt;implements Exp&lt;/code&gt; 就是了&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sub&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&lt;ul&gt;&lt;li&gt;如果想给 &lt;code&gt;Exp&lt;/code&gt; 添加新的操作（比如输出整颗 AST），需要在接口和所有实例中增加新的方法&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;看起来这是一个鱼和熊掌的模型，两者互相有不同之处。&lt;/p&gt;&lt;p&gt;Java 为了解决这个问题，引入了 Visitor 模式：我们换一种方法『引入操作』，即提供 &lt;code&gt;visit&lt;/code&gt;（又叫 &lt;code&gt;accept&lt;/code&gt;）接口。 我们使用 Visitor 设计模式重写前面的 Java 代码：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Visitor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Visitor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Lit&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Visitor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Visitor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Eval&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Visitor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样的话，我们的代码变得很 Haskell 了——『操作』和 &lt;code&gt;class&lt;/code&gt; 互相独立（而不是像 &lt;code&gt;class&lt;/code&gt; 和方法一样紧耦合）：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;如果想给 &lt;code&gt;Exp&lt;/code&gt; 添加新的操作（比如输出整颗 AST），只需要新写一个 &lt;code&gt;class&lt;/code&gt; 去 &lt;code&gt;implements Visitor&amp;lt;&amp;gt;&lt;/code&gt; 就是了&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dump&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Visitor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;(&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;如果想给 &lt;code&gt;Exp&lt;/code&gt; 添加新的数据构造器（比如加个 &lt;code&gt;Sub&lt;/code&gt; 表示减），就得修改所有的 Visitor&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这就很像 Haskell 那种使用模式匹配的方式定义数据类型了。&lt;/p&gt;&lt;p&gt;这个双向扩展的问题，叫做&lt;b&gt;Expression Problem&lt;/b&gt;（&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//okmij.org/ftp/tagless-final/course/lecture.pdf&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;出处&lt;/a&gt;（9102 了怎么还是 http））。&lt;/p&gt;&lt;p&gt;后来，在看了&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//zju-lambda.tech/introduction-to-object-algebra/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;浙江大学一位极为优秀的编程大牛的文章&lt;/a&gt;（前面的代码基本是参考的这篇文章的。如果你知道如何使用 Visitor 进行双向扩展，那么就不需要点击这个链接了）后（知乎id &lt;a class=&quot;member_mention&quot; href=&quot;http://www.zhihu.com/people/dca943c375a8194d28e1c0aa8210d0c3&quot; data-hash=&quot;dca943c375a8194d28e1c0aa8210d0c3&quot; data-hovercard=&quot;p$b$dca943c375a8194d28e1c0aa8210d0c3&quot;&gt;@zjuwyd&lt;/a&gt; ），我才知道 Visitor 可以同时支持可扩展地添加新的操作和数据构造器的。 这种做法似乎叫 Object Algebra。&lt;/p&gt;&lt;p&gt;那么，Java 就同时在保留自己的优点的情况下，借助设计模式，解决了 Haskell 的问题。是不是可以说，Java 大法好，垃圾 Haskell 了？其实不行，人家 Haskell 也有『设计模式』解决这个问题。&lt;/p&gt;&lt;p&gt;解决方案叫——Finally Tagless。&lt;/p&gt;&lt;h2&gt;Finally Tagless&lt;/h2&gt;&lt;p&gt;这是原本的 AST，它长这样。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Exp&lt;/span&gt;
  &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Lit&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Exp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们把它写成 GADT 的形式，看起来更顺眼一些（方便思路转换）：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Lit&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们把它变成 typeclass，这个东西的形状和前面 Java 的 Visitor 几乎一模一样（这里没有解释这个转换是怎么想出来的，下面的延伸阅读里面有）。 变化的规则是，我们把 &lt;code&gt;Exp&lt;/code&gt; 的每个构造器表示成函数（typeclass 里面的抽象方法），然后把它们的返回类型通过一个 typeclass 的参数（下面代码中的 &lt;code&gt;a&lt;/code&gt;）抽象出来：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Visitor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这和基于 Object Algebra 的 Visitor 是完全一致的——后者提供的 Visitor 可以在外部被扩展，而这正是 typeclass 与生俱来的性质。我们利用 typeclass 的这一天然性质，实现了 Visitor 实现的一切。这种方法就叫 Finally Tagless。&lt;/p&gt;&lt;p&gt;我们可以添加 type instance，作为『操作』（这是伪代码，我们假设一下平凡的 &lt;code&gt;Applicative&lt;/code&gt; 实现）：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Visitor&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Visitor&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;(&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; + &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;)&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后如果要执行『操作』，就先构建 AST，然后显式指定 AST 的类型，编译器就会使用那个特定的 type instance 去真正的把这颗 AST『折叠』起来。比如：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sampleAst&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Visitor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;sampleAst&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;114&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;514&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1926&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;evaluatedAst&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sampleAst&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;dumpedAst&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sampleAst&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面讲讲两者的对应关系，Visitor 的代码直接抄前面引用的文章的：&lt;/p&gt;&lt;h2&gt;Visitor&lt;/h2&gt;&lt;p&gt;原本提供的接口：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Visitor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;添加新的操作&lt;/h2&gt;&lt;p&gt;比如，添加一个打印 AST 的操作：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@FunctionalInterface&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dump&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DumpVisitor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Visitor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dump&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dump&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dump&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dump&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dump&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;(&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; + &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dump&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和一个求值的操作：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@FunctionalInterface&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Eval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EvalVisitor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Visitor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Eval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Eval&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Eval&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Eval&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Eval&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;添加新的数据类型&lt;/h2&gt;&lt;p&gt;比如，添加一个表达减法的数据类型：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SubVisitor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Visitor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于前面已经扩展了 &lt;code&gt;Eval&lt;/code&gt; 和 &lt;code&gt;Dump&lt;/code&gt;，我们分别再&lt;b&gt;不修改已有代码的情况下&lt;/b&gt;把前面的功能扩展出来：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EvalSubVisitor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EvalVisitor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SubVisitor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Eval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Eval&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Eval&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Eval&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DumpSubVisitor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DumpVisitor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SubVisitor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dump&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dump&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dump&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dump&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;(&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; - &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt; 注意到整个过程中都没有冗余代码出现，Object Algebra 成功地解决了它们之间的耦合问题！&lt;/blockquote&gt;&lt;h2&gt;Finally Tagless&lt;/h2&gt;&lt;p&gt;原本提供的接口：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Visitor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lit&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里好像没说怎么构建 AST，那么我构建一个：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;constructAst&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Visitor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;constructAst&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lit&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;114&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lit&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;514&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;（好像没什么必要说，太 trivial）&lt;/p&gt;&lt;h2&gt;添加新的操作&lt;/h2&gt;&lt;p&gt;比如，添加一个打印 AST 的操作：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Visitor&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lit&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;(&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; + &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;)&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;和一个求值的操作：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Visitor&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lit&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;添加新的数据类型&lt;/h2&gt;&lt;p&gt;比如，添加一个表达减法的数据类型：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Visitor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SubVisitor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于前面已经扩展了 &lt;code&gt;Visitor String&lt;/code&gt; 和 &lt;code&gt;Visitor Int&lt;/code&gt;，我们分别再&lt;b&gt;不修改已有代码的情况下&lt;/b&gt;把前面的功能扩展出来：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SubVisitor&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SubVisitor&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;where&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;(&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; - &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;)&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意到整个过程中都没有冗余代码出现，Finally Tagless 成功地解决了它们之间的耦合问题！&lt;/p&gt;&lt;h2&gt;总结&lt;/h2&gt;&lt;p&gt;Haskell 的版本很明显要比 Java 版本简洁很多，而且不需要想很多名字（Java 那边起了一堆名字，什么 &lt;code&gt;Eval&lt;/code&gt; 什么 &lt;code&gt;Dump&lt;/code&gt;，Haskell 那边都是平凡的 &lt;code&gt;instance&lt;/code&gt;）。但是反过来，Java 版本拥有同时存在多种类型相同的操作的可能性，而 Haskell 就没那么方便了，因为直接拿类型对应的。&lt;/p&gt;&lt;p&gt;这个问题，如果使用&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//ice1000.org/lagda/Typeclassopedia.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;first class module（aka dependent record）实现的 typeclass&lt;/a&gt;，就可以变得和 Java 一样给这些不同的 &lt;code&gt;instance&lt;/code&gt; 起名字，同时保留 Haskell 的简洁性。&lt;/p&gt;&lt;h2&gt;延伸阅读&lt;/h2&gt;&lt;p&gt;本文并不是讲解 Finally Tagless 的，只是讲解它和 Visitor 这种设计模式之间的对应关系的。 对于 Finally Tagless 本身的讲解和推导，可以看下面的文章。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/22598462&quot; class=&quot;internal&quot;&gt;一个语文极好的人写的『一不小心发明 de Bruijn Indices, SKI 组合子和 Finally Tagless』&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/22231273&quot; class=&quot;internal&quot;&gt;一个语文极差的人写的『解决 HOAS 无法 look into 的问题，同时一不小心发明 SKI 组合子』&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;练习&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.codewars.com/kata/finally-tagless-interpreter/discuss/haskell&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CodeWars Kata: Finally Tagless Interpreter&lt;/a&gt;&lt;/p&gt;&lt;p&gt;我时隔多年又回到了 CodeWars 做题了……真是一种怀念的感觉。&lt;/p&gt;&lt;h2&gt;我说完了&lt;/h2&gt;&lt;p&gt;祝大家新年快乐，2019 心想事成。&lt;/p&gt;&lt;p&gt;明天就要离开中国了……&lt;/p&gt;&lt;p&gt;&lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt;&lt;p&gt;啊，东方幕华祭真好玩啊，搞得我都想搞斗金 STG 了……还有点想学作曲。&lt;/p&gt;</description>
<author>兴趣使然千里冰封</author>
<guid isPermaLink="false">2019-01-02-53810286</guid>
<pubDate>Wed, 02 Jan 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>rust，substructural type 与嵌入式开发</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2018-12-24-48721806.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/48721806&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为什么要用Rust开发嵌入式？目前随着深度学习走入实用，比如自动驾驶等，嵌入式部分需要协调，控制和调度各种外设和神经网络加速芯片等，复杂度急速上升，而C的弱类型系统可能会带来的巨量Bug，消耗大量开发时间。这时足够强大的类型系统能够帮助在编译期发现Bug。&lt;/p&gt;&lt;p&gt;很大一部分Bug是由于语言的限制，我们无法静态地保证某个资源在某时刻只被使用一次。而&lt;a href=&quot;https://en.wikipedia.org/wiki/Substructural_type_system&quot;&gt;Substructural type system&lt;/a&gt; 能够在代码中强迫你指定资源的使用方式：&lt;/p&gt;&lt;p&gt;1.borrow checker (affine type) 可以实现编译期静态检查某寄存器（外设）同一时间只被写入一次，而读取无限制，避免加锁。&lt;/p&gt;&lt;p&gt;2.避免空指针问题（同样是affine type)&lt;/p&gt;&lt;p&gt;下面是一些嵌入式领域的实际操作&lt;/p&gt;&lt;a data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; href=&quot;https://rust-embedded.github.io/discovery/index.html&quot;&gt;Introduction -&lt;/a&gt;&lt;a data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; href=&quot;https://news.ycombinator.com/item?id=16488227&quot;&gt;Should you Rust in embedded yet?&lt;/a&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;a data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; href=&quot;https://theburningmonk.com/2015/05/rust-memory-safety-without-gc/&quot; data-image=&quot;v2-757373e33df68436f413b52ebda14738&quot; data-image-width=&quot;500&quot; data-image-height=&quot;384&quot; data-image-size=&quot;180x120&quot;&gt;Rust – memory safety without garbage collector | theburningmonk.com&lt;/a&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;a data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; href=&quot;https://rust-embedded.github.io/bookshelf/book/peripherals/peripherals.html&quot;&gt;The Embedded Rust Book&lt;/a&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;a data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; href=&quot;https://medium.com/coinmonks/coding-the-stm32-blue-pill-with-rust-and-visual-studio-code-b21615d8a20&quot;&gt;https://medium.com/coinmonks/coding-the-stm32-blue-pill-with-rust-and-visual-studio-code-b21615d8a20&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>Martin awodey</author>
<guid isPermaLink="false">2018-12-24-48721806</guid>
<pubDate>Mon, 24 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>愿你走出半生，归来仍是Java Parser</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2018-12-15-51811022.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/51811022&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;几天前，我的一个朋友给了我一个Haskell问题&lt;/p&gt;&lt;blockquote&gt;Hey, MK，假设我有个BNF，并且我在Haskell中有个这个BNF的parser。&lt;br&gt;现在，我想给这个BNF改一行，有没有办法不用动这个BNF parser的代码（因为是其他人写的），而是对这parser进行扩展呢？&lt;/blockquote&gt;&lt;p&gt;这问题挺有趣的，也不算难。&lt;/p&gt;&lt;p&gt;这问题说是extensibility problem，其实有两个地方需要扩展。&lt;/p&gt;&lt;p&gt;0：Parser需要用open recursion之类的方法扩展&lt;/p&gt;&lt;p&gt;1：Parse出来的ADT也需要可扩展性&lt;/p&gt;&lt;p&gt;后半个需求见多了，Final Tagless，DTALC，Tree that grow，Recursion scheme style fix。。。于是放下不表，我们来处理前一个。&lt;/p&gt;&lt;p&gt;前半个。。Haskell&#39;s Overlooked Object System就搞过，当然他们有点heavy weight，打算随手弄一个&lt;b&gt;超级轻量级的&lt;/b&gt;：5行就够了，多一行是小莎莎。&lt;/p&gt;&lt;p&gt;Ready？&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;data Object x = MkObject (x -&amp;gt; x)&lt;/code&gt;&lt;p&gt;1。Inheritance is not subtyping式的Object=recursive type。为了简易性（反正也不需要多高的扩展性）就不model真。recursive type，而只有recursive dependency。&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;use :: Object x -&amp;gt; x
use (MkObject x) = let res = x res in res&lt;/code&gt;&lt;p&gt;2。3。最典型的tying the knot。其实就是fix了。&lt;/p&gt;&lt;p&gt;我们想想，这个x是什么variant的呢？covariant还是contravariant？&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;inherit :: (a -&amp;gt; b) -&amp;gt; (b -&amp;gt; a) -&amp;gt; Object a -&amp;gt; Object b
inherit ab ba (MkObject aa) = MkObject (ab . aa . ba)&lt;/code&gt;&lt;p&gt;既然是invariant，那fmap contramap都用不上，但invariant依然能有map：两边一起传进来就行了。4。5。&lt;/p&gt;&lt;p&gt;这就是一个prototype based oo system了。&lt;/p&gt;&lt;p&gt;接下来讲怎么用哈：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;test :: Object (Int, Int)
test = MkObject $ \self -&amp;gt; (2, fst self + fst self)&lt;/code&gt;&lt;p&gt;这弄了个两个field的object，第零个field初始值为2（可能因为继承被override），第一个field为第零个field的值*2（不一定是3，如果任何field被override这个值都能改）。use test应该是(2, 4)。&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;inheritTest :: Object ((Int, Int), Int)
inheritTest = inherit (\(l, r) -&amp;gt; ((l + 1, r + 2), r + 1)) fst test&lt;/code&gt;&lt;p&gt;这里继承了上面的Object，override了l(l + 1是super + 1），r被override到super + 2，加了个新的field，值是r+1。use inheritTest应该是((3, 8), 7)。记着传进来的参数不是self而是super就很好理解了。&lt;/p&gt;&lt;p&gt;好，open recursion搞好了，剩下的就是标准的final tagless了，体力活，没啥意思&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;class AST repr where
  lit :: Int -&amp;gt; repr
  plus :: repr -&amp;gt; repr -&amp;gt; repr

class Var repr where
  var :: String -&amp;gt; repr

type WholeParser repr = Parser repr
type LitParser repr = Parser repr
type PlusParser repr = Parser repr

intP :: Parser Int
intP = read &amp;lt;$&amp;gt; many1 digit

stringP :: Parser String
stringP = many1 letter

type OriginalParser repr = ((LitParser repr, PlusParser repr), WholeParser repr)
originalParser :: AST repr =&amp;gt; Object (OriginalParser repr)
originalParser = MkObject $ \(~(_, p)) -&amp;gt; let
  litP = lit &amp;lt;$&amp;gt; intP
  plusP = between (char &#39;(&#39;) (char &#39;)&#39;) (do {l &amp;lt;- p; spaces; char &#39;+&#39;; spaces; r &amp;lt;- p; return $ plus l r})
  wholeP = litP &amp;lt;|&amp;gt; plusP in
  ((litP, plusP), wholeP)

type VarParser repr = Parser repr
extendedParser :: (AST repr, Var repr) =&amp;gt; Object (VarParser repr, OriginalParser repr)
extendedParser = inherit extend snd originalParser
  where
    extend ~((litP, plusP), wholeP) = let
      varP = var &amp;lt;$&amp;gt; stringP in
      (varP, ((litP, plusP), varP &amp;lt;|&amp;gt; wholeP))

instance AST String where
  lit = show
  plus x y = &quot;(&quot; ++ x ++ &quot; &quot; ++ &quot;+&quot; ++ &quot; &quot; ++ y ++ &quot;)&quot;

instance Var String where
  var x = x&lt;/code&gt;&lt;p&gt;大功告成。&lt;/p&gt;&lt;p&gt;代码在&lt;a href=&quot;https://github.com/MarisaKirisame/extensible-parser/blob/master/src/Lib.hs&quot;&gt;https://github.com/MarisaKirisame/extensible-parser/blob/master/src/Lib.hs&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Q：封装呢？&lt;/p&gt;&lt;p&gt;A：Abstract Type is Existential Type&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Q：这是prototype based的，class怎么办？&lt;/p&gt;&lt;p&gt;A：A Theory Of Object里面讲过怎么用prototype来做class&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Q：多继承呢？&lt;/p&gt;&lt;p&gt;A：给定Object a，Object b，可以组合出Object (a, b)，要菱形继承自己手动再inherit一下就好&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Q：Subtyping?&lt;/p&gt;&lt;p&gt;A：Typeclass。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;如果大家感兴趣，请评论下，我可以再写个blog把这些功能补完。&lt;/p&gt;</description>
<author>圆角骑士魔理沙</author>
<guid isPermaLink="false">2018-12-15-51811022</guid>
<pubDate>Sat, 15 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>Rust 阴阳谜题，及纯基于代码的分析与化简</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2018-12-13-52249705.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/52249705&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;听 &lt;a class=&quot;member_mention&quot; href=&quot;http://www.zhihu.com/people/c3a3b37f42ed38a9783c00cea5156e55&quot; data-hash=&quot;c3a3b37f42ed38a9783c00cea5156e55&quot; data-hovercard=&quot;p$b$c3a3b37f42ed38a9783c00cea5156e55&quot;&gt;@头顶青天红美铃&lt;/a&gt; 说&lt;/p&gt;&lt;blockquote&gt;看了一圈，大家都说的是怎么拿一个动态语言跑yin yang。无论是编译，解释，最底的层次基本是某个动态语言。&lt;/blockquote&gt;&lt;a href=&quot;https://www.zhihu.com/question/27683900/answer/541141000&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot;&gt;如何实现 Call / CC 或者阴阳谜题（Yin Yang Puzzle）？&lt;/a&gt;&lt;h2&gt;0. 前（请务必跳过）&lt;/h2&gt;&lt;p&gt;之前用 Haskell 通过 Cont Monad 模拟过 &lt;code class=&quot;inline&quot;&gt;call/cc&lt;/code&gt; （实际上在阴阳谜题中用作 get-current-continuation，这里我们只讨论 &lt;code class=&quot;inline&quot;&gt;get/cc&lt;/code&gt;），但似乎确实是搞个 DSL 再模拟。&lt;/p&gt;&lt;p&gt;但我是觉得这&lt;b&gt;和动态类型其实关系不大&lt;/b&gt;，只是通常语言是栈机模型，而 call/cc 的“栈”是一棵树，还可能到处跳。唯一和类型有关的是 &lt;code class=&quot;inline&quot;&gt;get/cc&lt;/code&gt; 类型是递归类型 &lt;code class=&quot;inline&quot;&gt;a where a ~ (a -&amp;gt; _|_)&lt;/code&gt;，但我们可以用类似 &lt;code class=&quot;inline&quot;&gt;data Out a = In (Out a) (Out a)&lt;/code&gt; 的实现，在需要的时候把&lt;code class=&quot;inline&quot;&gt;Cont&lt;/code&gt;翻成&lt;code class=&quot;inline&quot;&gt;Cont -&amp;gt; Cont&lt;/code&gt;，或者反过来即可。 &lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;1. Rust 代码实现&lt;/h2&gt;&lt;p&gt;因为&lt;b&gt;不想搞得那么学术派&lt;/b&gt;，我们不用 Haskell 那种数学语言，用&lt;b&gt;很工程很靠谱的 Rust &lt;/b&gt;实现以下这个 阴阳谜题/YinYang Puzzle。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;首先，我们直译一下 ：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;yin = getcc();
print!(&quot;@&quot;);
yin = getcc();
print!(&quot;*&quot;);
yin(yang);&lt;/code&gt;&lt;p&gt;但这当然是搞不了的。&lt;/p&gt;&lt;p&gt;我们 &lt;code class=&quot;inline&quot;&gt;getcc&lt;/code&gt; 拿来的 &lt;code class=&quot;inline&quot;&gt;yin&lt;/code&gt;不可能在全局都能用（主程序还是栈机啊喂，超级 goto 过分了），我们限定它在一个闭包里面才能用（这里我们要手动 CPS 一下），具体多大范围按需即可。&lt;/p&gt;&lt;p&gt;此外，由于函数调用的重载还没 stable，用了怕一下有 stable 癖的人觉得这不 Rust，所以这里用成员函数实现。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;所以我们的代码应该是这样，然后一跑发现&lt;b&gt;已经是预期行为了&lt;/b&gt;：(&lt;a href=&quot;https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=e1885dbdd463f9015072178981e3d5db&quot;&gt;Rust Playground&lt;/a&gt;)&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;/// Continuation.
/// Cont ~ (Cont -&amp;gt; !)    We use `()` instead of `!` here since `!` not stable
struct Cont&amp;lt;&#39;a&amp;gt;(&amp;amp;&#39;a dyn Fn(&amp;amp;Cont));

impl Cont&amp;lt;&#39;_&amp;gt; {
    fn call(&amp;amp;self, value: &amp;amp;Cont) {
        (self.0)(value); // Simple proxy. Note that it is dynamic dispatch.
    }
}

/// Equal to `{ let cc_ = getcc(); cc(cc_); }`
/// Apparently, `cc_` and `cc` is the same continuation.
fn with_cc(cc: impl Fn(&amp;amp;Cont)) {
    cc(&amp;amp;Cont(&amp;amp;cc)); // Call `cc` with `cc` itself (current continuation)
}

fn puzzle() {
    with_cc(|yin| {
        print!(&quot;@&quot;);
        with_cc(|yang| {
            print!(&quot;*&quot;);
            yin.call(yang);
        });
    });
}&lt;/code&gt;&lt;p&gt;输出：&lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;@*@**@***@****@*****@******@*******@********@**** .....stack overflow&lt;/code&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;PS：惊奇地发现这份代码在 Release 下跑可以避免栈溢出，一直输出下去，看来是 TCO 了，果然优化还是很强劲的。当然记得本地编译跑，在线会被杀掉而看不到输出。&lt;/p&gt;&lt;p&gt;PSS：因为这里闭包引用结构的嵌套无法消去（我觉得 Rust 应该做不了 Idris 的 &lt;code class=&quot;inline&quot;&gt;Nat &amp;lt;=&amp;gt; Int&lt;/code&gt; 优化），所以内存应该还是会缓慢（ &lt;equation&gt;O(\sqrt {\text{Len}})&lt;/equation&gt; ）增长的。&lt;br&gt;&lt;/p&gt;&lt;h2&gt;2. 分析与化简&lt;/h2&gt;&lt;p&gt;现在我们试着&lt;b&gt;只从代码上分析，尽量避免数学推导，证明为何是这样的输出&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;（才不是因为看不懂 pi-calculus / 不会分析平行宇宙呢）&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;首先，我们这里有两个闭包，&lt;code class=&quot;inline&quot;&gt;|yin| { .. }&lt;/code&gt;没有捕获东西，&lt;code class=&quot;inline&quot;&gt;|yang| { .. }&lt;/code&gt;捕获了上一层的&lt;code class=&quot;inline&quot;&gt;yin&lt;/code&gt; 的引用，我们要手动展开闭包语法糖。&lt;/p&gt;&lt;p&gt;然后考虑到&lt;code class=&quot;inline&quot;&gt;&amp;amp;dyn Fn(&amp;amp;Cont)&lt;/code&gt; 是动态分发，但只可能是两个闭包之一，直接用 &lt;code class=&quot;inline&quot;&gt;enum&lt;/code&gt;实现这个 Trait Object 引用，也是展开语法糖。&lt;/p&gt;&lt;p&gt;因为闭包代码都很少，这里我们直接把函数体代码 inline 进动态分发的&lt;code class=&quot;inline&quot;&gt;call&lt;/code&gt;里去了。 &lt;/p&gt;&lt;p&gt;(&lt;a href=&quot;https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=1574dc2f845671fda44ae124b06be4e8&quot;&gt;Rust Playground&lt;/a&gt;)&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;enum Cont&amp;lt;&#39;a&amp;gt; { // Desugar of `&amp;amp;dyn Fn(&amp;amp;Cont)`
    ClosureA,
    ClosureB { yin: &amp;amp;&#39;a Cont&amp;lt;&#39;a&amp;gt; },
}

impl Cont&amp;lt;&#39;_&amp;gt; {
    fn call(&amp;amp;self, value: &amp;amp;Cont) {
        match self { // Manually dynamic dispatch
            Cont::ClosureA =&amp;gt; {
                let yin = value;
                print!(&quot;@&quot;);
                with_cc(Cont::ClosureB { yin });
            }
            Cont::ClosureB { yin } =&amp;gt; {
                let yang = value;
                print!(&quot;*&quot;);
                yin.call(yang);
            }
        }
    }
}

fn with_cc(cc: Cont) {
    cc.call(&amp;amp;cc);
}

fn puzzle() {
    with_cc(Cont::ClosureA);
}&lt;/code&gt;&lt;p&gt;可能还看不出来调用顺序如何，但&lt;code class=&quot;inline&quot;&gt;call&lt;/code&gt;经过或不经过&lt;code class=&quot;inline&quot;&gt;with_cc&lt;/code&gt;，最终递归调用自己，至少可以知道它是个死循环，而且似乎还是尾递归的。&lt;/p&gt;&lt;p&gt;然后我们可以发现，这个 &lt;code class=&quot;inline&quot;&gt;enum Cont&lt;/code&gt;实际上就是一个&lt;b&gt;不带值的链表结构&lt;/b&gt;（ &lt;code class=&quot;inline&quot;&gt;Cont::ClosureA&lt;/code&gt; &amp;lt;=&amp;gt; Null，&lt;code class=&quot;inline&quot;&gt;Cont::ClosureB&lt;/code&gt; &amp;lt;=&amp;gt; Next），它&lt;b&gt;只包含长度信息。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;所以我们&lt;b&gt;只用一个自然数即可和它一一对应。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;（对，这就是皮亚诺自然数定义的 Nat，但因为不要学术，不展开）&lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;0 &amp;lt;=&amp;gt; Cont::ClosureA
1 &amp;lt;=&amp;gt; Cont::ClosureB { yin: &amp;amp;Cont::ClosureA }
2 &amp;lt;=&amp;gt; Cont::ClosureB { yin: &amp;amp;Cont::ClosureB { yin: &amp;amp;Cont::ClosureA }  }
...&lt;/code&gt;&lt;p&gt;我们直接定义 &lt;code class=&quot;inline&quot;&gt;type Cont = usize&lt;/code&gt;来重写简化一下&lt;code class=&quot;inline&quot;&gt;call&lt;/code&gt;函数。&lt;/p&gt;&lt;p&gt;多套一层就是加一，模式匹配就是判零/减一。&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;type Cont = usize;

fn call(this: Cont, value: Cont) {
    if this == 0 {
        let yin = value;
        print!(&quot;@&quot;);
        let cc = yin + 1;
        call(cc, cc);
    } else {
        let yin = this - 1;
        let yang = value;
        print!(&quot;*&quot;);
        call(yin, yang);
    }
}

fn puzzle() {
    call(0, 0);
}&lt;/code&gt;&lt;p&gt;哇，尾递归！就是循环！&lt;/p&gt;&lt;p&gt;然后我们把两个函数 inline 到一起：&lt;/p&gt;&lt;p&gt;（&lt;a href=&quot;https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=9d0d28a2a7ea56fa65b54d790212568c&quot;&gt;Rust Playground&lt;/a&gt; 上把死循环改成 &lt;code class=&quot;inline&quot;&gt;for&lt;/code&gt;了，不然卡死看不到输出）&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;fn puzzle() {
    let (mut this, mut value) = (0, 0);
    loop {
    // for _ in 0..1024 { // For test running online
        if this == 0 {
            print!(&quot;@&quot;);
            this = value + 1;
            value = value + 1;
        } else {
            print!(&quot;*&quot;);
            this = this - 1;
            // value = value; // Unchanged
        }
    }
}&lt;/code&gt;&lt;p&gt;这下可以清楚看到这个&lt;b&gt;拍扁的二重循环&lt;/b&gt;结构了：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code class=&quot;inline&quot;&gt;this == 0&lt;/code&gt; 时，&lt;code class=&quot;inline&quot;&gt;value&lt;/code&gt;自增 1，并设&lt;code class=&quot;inline&quot;&gt;this = value&lt;/code&gt;， 输出一个&lt;code class=&quot;inline&quot;&gt;@&lt;/code&gt;；&lt;/li&gt;&lt;li&gt;否则一次&lt;code class=&quot;inline&quot;&gt;this&lt;/code&gt;自减 1，输出一个&lt;code class=&quot;inline&quot;&gt;*&lt;/code&gt;；&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;最后重写成更语义化的二重循环就好啦：&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;3. 最终化简代码&lt;/h2&gt;&lt;p&gt;(&lt;a href=&quot;https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=a3c2e5b8845ec62ddcf669f22043f161&quot;&gt;Rust Playground&lt;/a&gt; 限制了第一个&lt;code class=&quot;inline&quot;&gt;for&lt;/code&gt;范围以防止死循环)&lt;/p&gt;&lt;p&gt;子循环是&lt;code class=&quot;inline&quot;&gt;this&lt;/code&gt;从&lt;code class=&quot;inline&quot;&gt;value&lt;/code&gt;自减到 1,（0 不输出了 &lt;code class=&quot;inline&quot;&gt;*&lt;/code&gt;，直接返回上一层了） 。当然显然这个循环顺序其实没啥关系，为了和上面对应还是反过来了。&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;fn puzzle() {
    for value in 1.. { // The value after `print`, starting from 1
    // for value in 1..64 { // For test running online
        print!(&quot;@&quot;);
        for _this in (1..=value).rev() {
            print!(&quot;*&quot;);
        }
    }
}&lt;/code&gt;&lt;p&gt;大循环一次一个&lt;code class=&quot;inline&quot;&gt;@&lt;/code&gt;，然后小循环输出 &lt;code class=&quot;inline&quot;&gt;value&lt;/code&gt;个&lt;code class=&quot;inline&quot;&gt;*&lt;/code&gt;，自增&lt;code class=&quot;inline&quot;&gt;value&lt;/code&gt;，重复。&lt;/p&gt;&lt;p&gt;输出结果当然就是 &lt;code class=&quot;inline&quot;&gt;@*@**@***@****@*****@******@*******@********@....&lt;/code&gt;啦 。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;4. 以上&lt;/h2&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>HOOCCOOH</author>
<guid isPermaLink="false">2018-12-13-52249705</guid>
<pubDate>Thu, 13 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>Recursion Schemes（六）基本函子革命</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2018-11-30-51286145.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/51286145&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-e5a2a9858bfa0c0e317c6943a84edb5b_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;h2&gt;前言&lt;/h2&gt;&lt;p&gt;为了能够不拖更，我决定讨论一些小一点的话题，本章中我们将讨论基本函子（base functor）这一概念，以及 &lt;a href=&quot;https://hackage.haskell.org/package/recursion-schemes&quot;&gt;recursion-schemes&lt;/a&gt; 库函数中如何使用基本函子来使 recursion scheme 在实践中更为优雅高效。&lt;/p&gt;&lt;h2&gt;前情回顾&lt;/h2&gt;&lt;p&gt;在之前数篇文章中，我们已经看到了某种定义参数化数据类型的模式，我们从这样的数据类型定义：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;data Expr
  = Index Expr Expr
  | Call Expr [Expr]
  | Unary String Expr
  | Binary Expr String Expr
  | Paren Expr
  | Literal Int
  deriving (Show, Eq)&lt;/code&gt;&lt;p&gt;变为了这样：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;data ExprF a
  = Index a a
  | Call a [a]
  | Unary String a
  | Binary a String a
  | Paren a
  | Literal Int
  deriving (Show, Eq, Functor)&lt;/code&gt;&lt;p&gt;一样的数据类型，但是 kind [1] 变为了 &lt;code class=&quot;inline&quot;&gt;* -&amp;gt; *&lt;/code&gt;，所有的 &lt;code class=&quot;inline&quot;&gt;Expr&lt;/code&gt; 都用 &lt;code class=&quot;inline&quot;&gt;a&lt;/code&gt; 做了替换。接着我们使用了 Y-组合子的技巧来定义 &lt;code class=&quot;inline&quot;&gt;Term&lt;/code&gt;，这样的定义与之前的 &lt;code class=&quot;inline&quot;&gt;Expr&lt;/code&gt; 等价，但是可以使用 &lt;code class=&quot;inline&quot;&gt;fmap&lt;/code&gt;，以及 &lt;code class=&quot;inline&quot;&gt;cata&lt;/code&gt;：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;newtype Term f = In { out :: f (Term f) }

type Expr = ExprF (Term ExprF)&lt;/code&gt;&lt;p&gt;类似地，在第四章中，我们定义了自然数，它的 kind 也是 &lt;code class=&quot;inline&quot;&gt;* -&amp;gt; *&lt;/code&gt; 的：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;data Nat a
    = Zero
    | Next a
    deriving Functor&lt;/code&gt;&lt;p&gt;我们也定义了 &lt;code class=&quot;inline&quot;&gt;Plant&lt;/code&gt;，也是类似的定义：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;data Plant a
  = Root a
  | Stalk a
  | Fork a a a
  | Bloom&lt;/code&gt;&lt;p&gt;这个表达数据的办法确实清晰明了，但是也有相应的问题。&lt;/p&gt;&lt;p&gt;假设我们考虑一个最简单地链表类型：&lt;code class=&quot;inline&quot;&gt;a:[a]&lt;/code&gt;。&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;infixr 5 :
data [] a = a : [a]
          | []&lt;/code&gt;&lt;p&gt;显然 &lt;code class=&quot;inline&quot;&gt;cata&lt;/code&gt;，我们最基本的右折叠操作，应该可以支持这一结构。毕竟它的 kind 也是 &lt;code class=&quot;inline&quot;&gt;* -&amp;gt; *&lt;/code&gt;。但如果我在这一结构上使用 &lt;code class=&quot;inline&quot;&gt;Term&lt;/code&gt;，我们马上就遇到了麻烦：我们无法在了链表里存储元素了。 &lt;code class=&quot;inline&quot;&gt;a&lt;/code&gt; 只能表示嵌套的 &lt;code class=&quot;inline&quot;&gt;Term a&lt;/code&gt; 这一结构。没有地方来存储链表本身的元素。可以想见，这样的链表并不十分有用。&lt;/p&gt;&lt;p&gt;当然我们也可以将 &lt;code class=&quot;inline&quot;&gt;[a]&lt;/code&gt; 转换为之前我们常见的那种模式，新加入一个参数来表达递归的部分。&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;data ListF a b
  = Cons a b
  | Nil
    deriving (Show, Eq, Functor)&lt;/code&gt;&lt;p&gt;在这样的结构上我们就可以完成递归了：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;listSum :: Num a =&amp;gt; Algebra (ListF a) a
listSum (Cons a b) = a + b
listSum Nil = 0&lt;/code&gt;&lt;p&gt;但是这一办法非常丑陋，如果对于 &lt;code class=&quot;inline&quot;&gt;[]&lt;/code&gt;，这样的类型全部进行手动替换的话，我们完全丧失了使用 recursion scheme 的初衷。幸好并不是我一个人这么觉得，实际上有非常多种做法来绕开这个问题，我们会着重描述 &lt;a href=&quot;https://hackage.haskell.org/package/recursion-schemes&quot;&gt;recursion-schemes&lt;/a&gt; 中解决该问题的办法。&lt;/p&gt;&lt;h2&gt;救星基本函子&lt;/h2&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;recursion-schemes&lt;/code&gt; 库文档中有如下定义：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;type family Base t :: * -&amp;gt; *&lt;/code&gt;&lt;p&gt;这个定义明显会吓到不少人，但实际上并没有那么难以理解，而正是这一定义使得 &lt;code class=&quot;inline&quot;&gt;recursion-schemes&lt;/code&gt; 在易用性上远远超越了它的竞争对手们。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;Base&lt;/code&gt; 类型类的目的就是将 Haskell 中的原生类型定义，或者我们自己的类型定义与相对应的参数化类型定义绑定起来。对 type family 的详尽用法进行介绍显然超出了本文的范畴（感兴趣的读者可参阅 &lt;a href=&quot;https://wiki.haskell.org/GHC/Type_families&quot;&gt;GHC wiki&lt;/a&gt;），我们可以简单认为 type family 是一个在类型上定义函数的方式。如果我们定义了一个 type family，以及一个它的实例（这与 typeclass 以及它的实例实际上是类似的）：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;type family Something t

type instance Something Foo = Bar&lt;/code&gt;&lt;p&gt;那么之后我们无论在哪里遇到调用 &lt;code class=&quot;inline&quot;&gt;Something Foo&lt;/code&gt;，GHC 类型系统都会将它代换为 &lt;code class=&quot;inline&quot;&gt;Bar&lt;/code&gt;，为什么不直接写 &lt;code class=&quot;inline&quot;&gt;Bar&lt;/code&gt; 呢？—— 这初看起来无关紧要，但这为我们建立两种类型间的联系提供了便利。&lt;/p&gt;&lt;p&gt;我们观察一下 &lt;code class=&quot;inline&quot;&gt;Base&lt;/code&gt; 的定义，当你传入 &lt;code class=&quot;inline&quot;&gt;t&lt;/code&gt; 时，你得到了一个 &lt;code class=&quot;inline&quot;&gt;* -&amp;gt; *&lt;/code&gt; 的类型，回想一下不难发现，我们也把 &lt;code class=&quot;inline&quot;&gt;Expr&lt;/code&gt; 变成 &lt;code class=&quot;inline&quot;&gt;ExprF&lt;/code&gt; 的过程也是一个 &lt;code class=&quot;inline&quot;&gt;*&lt;/code&gt; 到 &lt;code class=&quot;inline&quot;&gt;* -&amp;gt; *&lt;/code&gt; 的过程。同理，&lt;code class=&quot;inline&quot;&gt;list&lt;/code&gt; 就是一个 &lt;code class=&quot;inline&quot;&gt;* -&amp;gt; *&lt;/code&gt; 到 &lt;code class=&quot;inline&quot;&gt;* -&amp;gt; * -&amp;gt; *&lt;/code&gt; 的过程。&lt;/p&gt;&lt;p&gt;一个 &lt;code class=&quot;inline&quot;&gt;Base&lt;/code&gt; 类型的实例或许更能说明问题：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;type instance Base [a] = ListF a&lt;/code&gt;&lt;p&gt;简单来说，这样的写法使得 &lt;code class=&quot;inline&quot;&gt;ListF a&lt;/code&gt; 可以用 &lt;code class=&quot;inline&quot;&gt;Base [a]&lt;/code&gt; 来表达。对应于每种类型，它的参数化递归类型（&lt;code class=&quot;inline&quot;&gt;*&lt;/code&gt; 变换为 &lt;code class=&quot;inline&quot;&gt;* -&amp;gt; *&lt;/code&gt;）只有一种合法实现，对应来看，对于任意 &lt;code class=&quot;inline&quot;&gt;a&lt;/code&gt;，&lt;code class=&quot;inline&quot;&gt;Base a&lt;/code&gt; 也只有一种合法实现。&lt;/p&gt;&lt;p&gt;当我们把这一定义与 &lt;code class=&quot;inline&quot;&gt;Recursive&lt;/code&gt; 类型类相结合以后，事情变得有趣起来。（为了阐述方便，这里的定义进行了适当简化）。&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;class (Functor (Base t)) =&amp;gt; Recursive t where
  project :: t -&amp;gt; Base t t
  cata    :: (Base t a -&amp;gt; a) -&amp;gt; t -&amp;gt; a&lt;/code&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;Recursive&lt;/code&gt; 类型类与 &lt;code class=&quot;inline&quot;&gt;Foldable&lt;/code&gt; 类型类实际上是同构的[2]。无论我们定义了怎样的 &lt;code class=&quot;inline&quot;&gt;Recursive&lt;/code&gt; 实例，&lt;code class=&quot;inline&quot;&gt;Expr&lt;/code&gt; 或是 &lt;code class=&quot;inline&quot;&gt;[a]&lt;/code&gt;，我们都可以在上面做折叠操作。实际上这里我们定义了两种方法，&lt;code class=&quot;inline&quot;&gt;project&lt;/code&gt; 参数为一个 &lt;code class=&quot;inline&quot;&gt;t&lt;/code&gt; 类型变量，得到变化后的 &lt;code class=&quot;inline&quot;&gt;Base&lt;/code&gt; 形式。以及 &lt;code class=&quot;inline&quot;&gt;cata&lt;/code&gt; 函数，给定一个 &lt;code class=&quot;inline&quot;&gt;Base t a -&amp;gt; a&lt;/code&gt; 函数，一个初始化的 &lt;code class=&quot;inline&quot;&gt;t&lt;/code&gt;，最后得到一个 &lt;code class=&quot;inline&quot;&gt;a&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;这里的 &lt;code class=&quot;inline&quot;&gt;cata&lt;/code&gt; 和我们之前的定义初看上去似乎有所不同。我们定义的 &lt;code class=&quot;inline&quot;&gt;cata&lt;/code&gt; 只有 &lt;code class=&quot;inline&quot;&gt;Founctor&lt;/code&gt; 的约束：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;cata :: (Functor f) =&amp;gt; Algebra f a -&amp;gt; Term f -&amp;gt; a
cata f = out &amp;gt;&amp;gt;&amp;gt; fmap (cata f) &amp;gt;&amp;gt;&amp;gt; f&lt;/code&gt;&lt;p&gt;但我们的 &lt;code class=&quot;inline&quot;&gt;cata&lt;/code&gt; 必须使用 &lt;code class=&quot;inline&quot;&gt;Term List&lt;/code&gt; 而不是简单的 &lt;code class=&quot;inline&quot;&gt;[a]&lt;/code&gt;，而使用 &lt;code class=&quot;inline&quot;&gt;Recursive&lt;/code&gt; 类型类允许我们向 &lt;code class=&quot;inline&quot;&gt;cata&lt;/code&gt; 传入一般的数据类型 &lt;code class=&quot;inline&quot;&gt;t&lt;/code&gt; 而不是 &lt;code class=&quot;inline&quot;&gt;Term t&lt;/code&gt;，&lt;code class=&quot;inline&quot;&gt;Recursive&lt;/code&gt; 的实例使用 &lt;code class=&quot;inline&quot;&gt;project&lt;/code&gt; 函数来将提供的类型转换为带参数的类型，并将它传递给 &lt;code class=&quot;inline&quot;&gt;cata&lt;/code&gt; 函数，省去了我们包装 &lt;code class=&quot;inline&quot;&gt;Term&lt;/code&gt; 和拼接 &lt;code class=&quot;inline&quot;&gt;Cons&lt;/code&gt; 的工作。&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;sumList :: Num a =&amp;gt; [a] -&amp;gt; a
sumList = cata go where
  go Nil = 0
  go (Cons a acc) = a + acc&lt;/code&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;Recursive&lt;/code&gt; 的魔法不止于此，根据它的最小编译指示，我们实现 &lt;code class=&quot;inline&quot;&gt;Recursive&lt;/code&gt; 类时，最低限度只需要实现 &lt;code class=&quot;inline&quot;&gt;project&lt;/code&gt; 函数即可。&lt;code class=&quot;inline&quot;&gt;cata&lt;/code&gt; 等函数可以沿用默认定义。&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;class Functor (Base t) =&amp;gt; Recursive t where
  project :: t -&amp;gt; Base t t

  cata :: (Base t a -&amp;gt; a) -- ^ a (Base t)-algebra
       -&amp;gt; t               -- ^ fixed point
       -&amp;gt; a               -- ^ result
  cata f = c where c = f . fmap c . project&lt;/code&gt;&lt;p&gt;这只是 &lt;code class=&quot;inline&quot;&gt;cata&lt;/code&gt; 的默认实现而已，如果在你特定的数据结构上，&lt;code class=&quot;inline&quot;&gt;cata&lt;/code&gt; 存在更好的实现，当然你可以重写这一定&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;Recursive&lt;/code&gt; 类型类中还定义了其他方法，例如我们曾在之前的文章中讨论过的 &lt;code class=&quot;inline&quot;&gt;para&lt;/code&gt;，还包括一些我们没涉及的比如泛化的 paramorphism &lt;code class=&quot;inline&quot;&gt;gpara&lt;/code&gt;，以及 Fokkinga 提出的 prepromorphism &lt;code class=&quot;inline&quot;&gt;prepro&lt;/code&gt;，或许我们会在之后的文章中讨论它们（译者注：作者在之后的文章中并未讨论它们，或许我会在之后的文章中讨论它们？）。&lt;/p&gt;&lt;p&gt;注意 Base 类型受限于 Recursive 实例：&lt;code class=&quot;inline&quot;&gt;t&lt;/code&gt; 必须有一个 &lt;code class=&quot;inline&quot;&gt;Base&lt;/code&gt; 的实例，而且 &lt;code class=&quot;inline&quot;&gt;Base t&lt;/code&gt; 必须是一个 &lt;code class=&quot;inline&quot;&gt;Functor&lt;/code&gt; 类型，这是因为 &lt;code class=&quot;inline&quot;&gt;cata&lt;/code&gt; 依赖于使用 &lt;code class=&quot;inline&quot;&gt;fmap&lt;/code&gt; 在进行递归操作。&lt;/p&gt;&lt;p&gt;正是因为有了 &lt;code class=&quot;inline&quot;&gt;Recursive&lt;/code&gt; 类型类，我们可以操作 &lt;code class=&quot;inline&quot;&gt;[a]&lt;/code&gt; 而非 &lt;code class=&quot;inline&quot;&gt;ListF&lt;/code&gt;，&lt;code class=&quot;inline&quot;&gt;Expr&lt;/code&gt; 而非 &lt;code class=&quot;inline&quot;&gt;ExprF&lt;/code&gt;，我们可以在简单数据类型上使用 Recursion Scheme。这一技巧在其它的库中也有采用，比如 José Pedro Magalhães 的 &lt;a href=&quot;https://hackage.haskell.org/package/regular/docs/Generics-Regular-Base.html#t:PF&quot;&gt;regular&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;下面我们看一下定义 &lt;code class=&quot;inline&quot;&gt;[a]&lt;/code&gt; 为 &lt;code class=&quot;inline&quot;&gt;Recursive&lt;/code&gt; 的实例。&lt;code class=&quot;inline&quot;&gt;[]&lt;/code&gt; 变为了 &lt;code class=&quot;inline&quot;&gt;Nil&lt;/code&gt;，&lt;code class=&quot;inline&quot;&gt;:&lt;/code&gt; 变为了 &lt;code class=&quot;inline&quot;&gt;Cons&lt;/code&gt;。&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;instance Recursive [a] where
  project (x:xs) = Cons x xs
  project [] = Nil&lt;/code&gt;&lt;p&gt;另外一个重要的例子是 &lt;code class=&quot;inline&quot;&gt;Natural&lt;/code&gt; —— 我们在之前也讨论过。我们自己定义了自然数类型 &lt;code class=&quot;inline&quot;&gt;Nat&lt;/code&gt;，这一类型与 &lt;code class=&quot;inline&quot;&gt;Maybe&lt;/code&gt; 等同的。所以在 &lt;code class=&quot;inline&quot;&gt;recursion-schemes&lt;/code&gt; 中就使用了 &lt;code class=&quot;inline&quot;&gt;Maybe&lt;/code&gt; 来实现 &lt;code class=&quot;inline&quot;&gt;Natural&lt;/code&gt; 的 &lt;code class=&quot;inline&quot;&gt;Recursive&lt;/code&gt; 和 &lt;code class=&quot;inline&quot;&gt;Base&lt;/code&gt;。&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;type instance Base Natural = Maybe

instance Recursive Natural where
  project 0 = Nothing
  project n = Just (n - 1)&lt;/code&gt;&lt;h2&gt;更进一步&lt;/h2&gt;&lt;p&gt;正如我们之前所看到的，给定一个 &lt;code class=&quot;inline&quot;&gt;t&lt;/code&gt;，构造 &lt;code class=&quot;inline&quot;&gt;Base&lt;/code&gt; 的示例是非常直观的：为原来的类型定义加入一个新的类型变量，接着改造每一个构造函数使其可以加入递归的新的类型变量。而借助 Haskell 的模板能力，&lt;code class=&quot;inline&quot;&gt;recursion-schemes&lt;/code&gt; 可以生成如下的代码：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;import Data.Functor.Foldable.TH

data Expr
  = Index Expr Expr
  | Call Expr [Expr]
  | Unary String Expr
  | Binary Expr String Expr
  | Paren Expr
  | Literal Lit
  deriving (Show, Eq)

makeBaseFunctor &#39;&#39;Expr&lt;/code&gt;&lt;p&gt;其中 &lt;code class=&quot;inline&quot;&gt;makeBaseFunctor&lt;/code&gt; 生成的代码实际上等价于：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;data ExprF a
  = IndexF a a
  | CallF a [a]
  | UnaryF String a
  | BinaryF a String a
  | ParenF a
  | LiteralF Lit
  deriving (Show, Eq, Functor)

type instance Base Expr = ExprF

instance Recursive Expr where
  project (Index a b) = IndexF a b
  project (Call a b)  = CallF a b
  -- and so on and so forth&lt;/code&gt;&lt;p&gt;这实际上就是讲上述描述应用而生成的代码，为了避免命名冲突，新的类型构造函数带一个后缀 ‘F’（中缀表达式后缀为‘$’）。&lt;/p&gt;&lt;p&gt;应用了 Haskell 模板以后，意味着对于我们这些库使用者，使用 &lt;code class=&quot;inline&quot;&gt;recursion-schemes&lt;/code&gt; 的代价非常之小。而这些处理嵌套结构的能力，在我编写 Haskell 生产级别代码时带来了非常大的益处。你可以非常优雅地处理嵌套结构，不需要引入任何额外代码。&lt;/p&gt;&lt;h2&gt;再次翻转箭头&lt;/h2&gt;&lt;p&gt;在之前的文章中，我们多次使用翻转箭头的操作来生成展开操作。所以想必读者们对于我们要进行的操作也不会陌生，我们会同样对 &lt;code class=&quot;inline&quot;&gt;Recursive&lt;/code&gt; 进行类似操作。从而得到 &lt;code class=&quot;inline&quot;&gt;Corecursive&lt;/code&gt; 类型类，对应相应的展开操作。&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;class Functor (Base t) =&amp;gt; Corecursive t where
  embed :: Base t t -&amp;gt; t
  ana :: (a -&amp;gt; Base t a) -&amp;gt; a -&amp;gt; t&lt;/code&gt;&lt;p&gt;我们已经展示过，从 &lt;code class=&quot;inline&quot;&gt;cata&lt;/code&gt; 生成 &lt;code class=&quot;inline&quot;&gt;ana&lt;/code&gt; 的过程，所以只剩下通过翻转箭头从 &lt;code class=&quot;inline&quot;&gt;project&lt;/code&gt; 生成 &lt;code class=&quot;inline&quot;&gt;embed&lt;/code&gt; 的过程，我们从 &lt;code class=&quot;inline&quot;&gt;Base&lt;/code&gt; 函子生成 &lt;code class=&quot;inline&quot;&gt;t&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;也对应于 &lt;code class=&quot;inline&quot;&gt;cata&lt;/code&gt;，&lt;code class=&quot;inline&quot;&gt;ana&lt;/code&gt; 使用 &lt;code class=&quot;inline&quot;&gt;fmap&lt;/code&gt; 和 &lt;code class=&quot;inline&quot;&gt;embed&lt;/code&gt; 生成：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;class Functor (Base t) =&amp;gt; Corecursive t where
  embed :: Base t t -&amp;gt; t
  ana
    :: (a -&amp;gt; Base t a) -- ^ a (Base t)-coalgebra
    -&amp;gt; a               -- ^ seed
    -&amp;gt; t               -- ^ resulting fixed point
  ana g = a where a = embed . fmap a . g&lt;/code&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;embed&lt;/code&gt; 实例的定义也是非常直观的对称：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;instance Corecursive [a] where
  embed (Cons x xs) = x:xs
  embed Nil = []&lt;/code&gt;&lt;p&gt;更棒的是，实际上你不必真的自己写 &lt;code class=&quot;inline&quot;&gt;Corecursive&lt;/code&gt; 的实例，&lt;code class=&quot;inline&quot;&gt;makeBaseFunctor&lt;/code&gt; 会同时自动生成 &lt;code class=&quot;inline&quot;&gt;Recursive&lt;/code&gt; 和 &lt;code class=&quot;inline&quot;&gt;Corecursive&lt;/code&gt; 的实例。&lt;/p&gt;&lt;h2&gt;餐后甜点&lt;/h2&gt;&lt;p&gt;敏锐的读者可能已经注意到了，&lt;code class=&quot;inline&quot;&gt;recursion-schemes&lt;/code&gt; 库中的 &lt;code class=&quot;inline&quot;&gt;cata&lt;/code&gt; 实现与我们之前的形式有一些微妙的不同。我们的定义中，包括 &lt;code class=&quot;inline&quot;&gt;cata&lt;/code&gt; 的柯里化—— &lt;code class=&quot;inline&quot;&gt;cata f&lt;/code&gt;，将它传给了 &lt;code class=&quot;inline&quot;&gt;fmap&lt;/code&gt;：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;cata :: (Functor f) =&amp;gt; Algebra f a -&amp;gt; Term f -&amp;gt; a
cata f = out &amp;gt;&amp;gt;&amp;gt; fmap (cata f) &amp;gt;&amp;gt;&amp;gt; f&lt;/code&gt;&lt;p&gt;而 &lt;code class=&quot;inline&quot;&gt;recursion-schemes&lt;/code&gt; 则实现了 where 语句定义了变量 &lt;code class=&quot;inline&quot;&gt;c&lt;/code&gt; 来代换 &lt;code class=&quot;inline&quot;&gt;cata f&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;两种 &lt;code class=&quot;inline&quot;&gt;cata&lt;/code&gt; 定义都是 point-free 的，但是 &lt;code class=&quot;inline&quot;&gt;recursion-schemes&lt;/code&gt; 的实现曾令笔者十分困惑，&lt;code class=&quot;inline&quot;&gt;c&lt;/code&gt; 的出现似乎毫无意义。直到若干年以后，我才大致理解了其中的含义。如果你避免了这样的柯里化，GHC 会生成更加高效的代码。柯里化函数必须携带它们的参数，在调用过程中必须追溯这些参数。而对于一个裸函数，调用的过程会简单得多（你可以访问 GHC 的 wiki 页面 &lt;a href=&quot;https://ghc.haskell.org/trac/ghc/wiki/Commentary/Rts/Storage/HeapObjects&quot;&gt;heap objects&lt;/a&gt; 来获得更多恶心的细节）。&lt;/p&gt;&lt;p&gt;当得知这一知识以后，我们就可以发现 &lt;code class=&quot;inline&quot;&gt;cata&lt;/code&gt; 的实现十分优雅，通过 &lt;code class=&quot;inline&quot;&gt;cata&lt;/code&gt; 的命名，我们可以像一个普通函数一样对待它，从而生成更加高效的代码。一般来说这样的优化，效果是微乎其微的，但是由于 &lt;code class=&quot;inline&quot;&gt;cata&lt;/code&gt; 在每层折叠操作中都会被调用，累积导致的效率损失对于一个库函数来说也是不可忽视的。&lt;/p&gt;&lt;h2&gt;结语&lt;/h2&gt;&lt;p&gt;我必须向 Edward Kmett 表示感谢，他的 &lt;code class=&quot;inline&quot;&gt;recursion-schemes&lt;/code&gt; 库优雅且富有启发性。同时我还要感谢 Austin Seipp，帮我检查了文章关于 GHC 代码生成部分的描述。&lt;/p&gt;&lt;p&gt;我希望能在下一篇文章中介绍 hylomorphisms and chronomorphisms，从而可以结束这一系列文章。感谢大家的耐心阅读！&lt;/p&gt;&lt;p&gt;[1]: 如果你对 kind 这一定义并不熟悉，你可以大致地认为，kind 描述了数据类型需要的参数个数，&lt;code class=&quot;inline&quot;&gt;Expr&lt;/code&gt; 中不需要参数，所以 kind 为 &lt;code class=&quot;inline&quot;&gt;*&lt;/code&gt;，需要一个参数的则为 &lt;code class=&quot;inline&quot;&gt;* -&amp;gt; *&lt;/code&gt;。需要更多参数的比如 &lt;code class=&quot;inline&quot;&gt;Either&lt;/code&gt;，kind 为 &lt;code class=&quot;inline&quot;&gt;* -&amp;gt; * -&amp;gt; *&lt;/code&gt;，对于 kind 更精准的描述是类型的类型，但是我们可以简单地将其理解为参数的个数表示。对于任意类型，在 GHCi 中可以使用 &lt;code class=&quot;inline&quot;&gt;:k&lt;/code&gt; 来查看它所属的类型。&lt;/p&gt;&lt;p&gt;[2]: 你可以从它所属的模块名 &lt;code class=&quot;inline&quot;&gt;Data.Functor.Foldable&lt;/code&gt; 中看到这样的暗示。这个类原本就叫 &lt;code class=&quot;inline&quot;&gt;Foldable&lt;/code&gt;，由于与标准库中的 &lt;code class=&quot;inline&quot;&gt;Foldable&lt;/code&gt; 重名，才改为 &lt;code class=&quot;inline&quot;&gt;Recursive&lt;/code&gt;。&lt;/p&gt;</description>
<author>禾木旁</author>
<guid isPermaLink="false">2018-11-30-51286145</guid>
<pubDate>Fri, 30 Nov 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>随机游走法解 Possion 方程！</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2018-11-28-51047940.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/51047940&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-160d55f74cacc560575f32f2f18b17bd_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;Possion 方程是指形如 &lt;equation&gt;\Delta \varphi = f&lt;/equation&gt; 的方程，在三维欧几里得空间中 &lt;equation&gt;\Delta=\nabla^2=\frac{\partial^2}{\partial x^2}+\frac{\partial^2}{\partial y^2}+\frac{\partial^2}{\partial z^2}&lt;/equation&gt; ，这类方程在物理上有很多应用，如在静电学中给定电荷分布求解电势的方程 &lt;equation&gt;\nabla^2\Phi=-\rho/\epsilon_0&lt;/equation&gt; ，牛顿力学中的引力场方程 &lt;equation&gt;\nabla^2\phi=4\pi G\rho&lt;/equation&gt;，达到定态时的热传导方程 &lt;equation&gt;k\nabla^2u=0&lt;/equation&gt; 。本文介绍一种解 Possion 方程的数值方法，随机游走法。&lt;/p&gt;&lt;p&gt;作为一种数值解法，我们首先考虑将 Possion 方程离散化，只求解离散的格点上的函数值。&lt;/p&gt;&lt;p&gt;&lt;equation&gt;\varphi(x,y) \mapsto \varphi_{ij},f(x,y) \mapsto f_{ij}&lt;/equation&gt; &lt;/p&gt;&lt;p&gt;然后是 &lt;equation&gt;\nabla^2&lt;/equation&gt; 的离散化：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;\frac{\partial \varphi}{\partial x}\mapsto \frac{\varphi(x+h/2,y)-\varphi(x-h/2,y)}{h}&lt;/equation&gt; &lt;/p&gt;&lt;p&gt;考虑格点间距 &lt;equation&gt;h=1&lt;/equation&gt; ，有&lt;/p&gt;&lt;p&gt;&lt;equation&gt;\frac{\partial^2 \varphi}{\partial x^2}\mapsto\varphi(x+1,y)+\varphi(x-1,y)-2\varphi(x,y)&lt;/equation&gt; &lt;equation&gt;\nabla^2 \varphi=\frac{\partial^2 \varphi}{\partial x^2}+\frac{\partial^2 \varphi}{\partial y^2}=f\mapsto \varphi_{i,j+1}+\varphi_{i,j-1}+\varphi_{i+1,j}+\varphi_{i-1,j}-4\varphi_{ij}=f_{ij}&lt;/equation&gt; &lt;/p&gt;&lt;p&gt;上式即为 Possion 方程的离散形式，可以看到，这是一个极其稀疏的线性方程组 &lt;equation&gt;A\varphi=f&lt;/equation&gt; ，如果我们求解的区间内有 &lt;equation&gt;100\times100&lt;/equation&gt; 个格点， &lt;equation&gt;A&lt;/equation&gt; 即为一个 &lt;equation&gt;100\times100&lt;/equation&gt; 的矩阵，而其每一行只有 5 个系数不为 0。我们可以通过直接求解这个线性方程组来解出 Possion 方程，但本文要介绍另外一种算法：随机游走法。&lt;/p&gt;&lt;p&gt;将离散化的 Possion 方程稍微改变一下形式：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;\varphi_{ij}=\frac{1}{4}(\varphi_{i,j+1}+\varphi_{i,j-1}+\varphi_{i+1,j}+\varphi_{i-1,j})+f&#39;_{ij}&lt;/equation&gt; &lt;/p&gt;&lt;p&gt;等式右边的第一项可以看作是一次对 &lt;equation&gt;\varphi_{i,j+1},\varphi_{i,j-1},\varphi_{i+1,j},\varphi_{i-1,j}&lt;/equation&gt; 这四个值的等概率随机抽样的均值，记单次抽样结果为 &lt;equation&gt;\varphi_{\{\varphi_{i,j+1},\varphi_{i,j-1},\varphi_{i+1,j},\varphi_{i-1,j}\}}&lt;/equation&gt; 。将单次随机抽样计算得到的 &lt;equation&gt;\varphi_{ij}&lt;/equation&gt; 记为 &lt;equation&gt;\phi_{ij}&lt;/equation&gt; ，上式可以改写为&lt;/p&gt;&lt;p&gt;&lt;equation&gt;\varphi_{ij}=E(\phi_{ij})=E(\varphi_{\{\varphi_{i,j+1},\varphi_{i,j-1},\varphi_{i+1,j},\varphi_{i-1,j}\}}+f&#39;_{ij})=E(\varphi_{\{\phi_{i,j+1},\phi_{i,j-1},\phi_{i+1,j},\phi_{i-1,j}\}}+f&#39;_{ij})&lt;/equation&gt; &lt;/p&gt;&lt;p&gt;这个式子就是随机游走法的原理。&lt;/p&gt;&lt;p&gt;我们将 &lt;equation&gt;E&lt;/equation&gt; 移到最外层，即将求均值的计算放到最后一步，这样计算单个格点的值的抽样就变成了单次抽样，这等价于一个朝上下左右四个方向的随机游走。&lt;/p&gt;&lt;p&gt;我们从区间中的任意一个格点出发随机游走到区间的边界，该格点的抽样值即为边界条件所确定的边界值加上路径上的 &lt;equation&gt;f&#39;_{ij}&lt;/equation&gt; 的求和，最后多次抽样取平均即可得到 Possion 方程的近似解。&lt;/p&gt;&lt;p&gt;我用 Julia 实现了这个算法，求解了几个方程并画出了函数图像：&lt;/p&gt;&lt;p&gt;边界为正弦函数的 Laplace 方程：&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-f0dbe5f0a05873e353418f6c23bf49f5_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;600&quot; data-rawheight=&quot;400&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-bbad1c1cf759e161b40a6b854f38028a_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;600&quot; data-rawheight=&quot;400&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;边界为阶跃函数的 Laplace 方程：&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-83023a109ee1cfd13587c5715606a84f_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;600&quot; data-rawheight=&quot;400&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-9730f508f7846f2d83b2f98496253509_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;600&quot; data-rawheight=&quot;400&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;边界为 0 但非其次项在中心不为 0 的 Possion 方程：&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-524aa8ef5f2b3c0e66ccd2a564bcdaba_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;600&quot; data-rawheight=&quot;400&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-c8320d0981f9fc0230e97fee028fabd0_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;600&quot; data-rawheight=&quot;400&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;附上代码：&lt;/p&gt;&lt;code lang=&quot;julia&quot;&gt;isEdge(x::Int, y::Int) =  x == 1 || y == 1 || x == 50 || y == 50

function walk(x::Int, y::Int, m::Array{Float64, 2}, c::Array{Float64, 2},
              getEdgeVal::Function,f::Function)::Float64
    randv = rand()
    res = f(x, y) + if isEdge(x, y)
        getEdgeVal(x, y)
    elseif randv &amp;lt; 1/4
        walk(x-1, y, m, c, getEdgeVal, f)
    elseif randv &amp;lt; 1/2
        walk(x+1, y, m, c, getEdgeVal, f)
    elseif randv &amp;lt; 3/4
        walk(x, y+1, m, c, getEdgeVal, f)
    else
        walk(x, y-1, m, c, getEdgeVal, f)
    end
    m[x, y] += res
    c[x, y] += 1
    res
end

function solve(n::Int, getEdgeVal::Function, f::Function)
    accum = zeros(50, 50)
    counter = zeros(50,50)
    for _ in 1:n
        for i in 1:50
            for j in 1:50
                walk(i, j, accum, counter, getEdgeVal, f)
            end
        end
    end
    accum ./ counter
end&lt;/code&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>Narc</author>
<guid isPermaLink="false">2018-11-28-51047940</guid>
<pubDate>Wed, 28 Nov 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>形式验证、依赖类型与动态类型</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2018-11-25-50792280.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/50792280&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-22a53ae89319b99e314a4886dc6f882b_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;aka 依赖类型传教文&lt;/p&gt;&lt;p&gt;推荐阅读&lt;a href=&quot;https://ice1000.org/lagda/DependentFunctionsVersusDynamicTyping.html&quot;&gt;我的博客的版本&lt;/a&gt;，你可以点击网页的代码块里面的变量名，可以跳转到定义。&lt;/p&gt;&lt;p&gt;前排提醒：你或许&lt;b&gt;不&lt;/b&gt;需要一个&lt;a href=&quot;https://baike.baidu.com/item/%E6%B8%B8%E6%A0%87%E5%8D%A1%E5%B0%BA&quot;&gt;游标卡尺&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;本文面向一切有任何形式编程经验的读者，将会使用 Agda 和极少量其他语言展示代码例子。 读不懂的代码可以借助附近的文字描述理解它的含义，所以不用担心语言问题。&lt;/p&gt;&lt;p&gt;一切规矩照旧，这篇文章是一个 Agda 模块，我们导入一些基本库：&lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;{-# OPTIONS --no-unicode #-}
{-# OPTIONS --without-K  #-}
{-# OPTIONS --safe       #-}
module DependentFunctionsVersusDynamicTyping where

open import lib.Basics
&lt;/code&gt;&lt;p&gt;这次，我们需要使用 &lt;a href=&quot;https://github.com/HoTT/HoTT-Agda/tree/master/core/lib&quot;&gt;HoTT-Agda&lt;/a&gt; 中的自然数类型的相关定义：&lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;open import lib.types.Nat
&lt;/code&gt;&lt;p&gt;泛化阶：&lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;variable i : ULevel
&lt;/code&gt;&lt;p&gt;本人承诺不会在这种面向非 Agda 专业人士的文章里使用 Unicode 。&lt;/p&gt;&lt;p&gt;在这个没有 &lt;code class=&quot;inline&quot;&gt;null&lt;/code&gt; 的语言里，我们有时还是需要使用 &lt;code class=&quot;inline&quot;&gt;null&lt;/code&gt; 的：&lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;data Nullable {i} (A : Type i) : Type i where
  nullptr : Nullable A
  new_    : A -&amp;gt; Nullable A
&lt;/code&gt;&lt;p&gt;这样， &lt;code class=&quot;inline&quot;&gt;nullptr&lt;/code&gt; 和 &lt;code class=&quot;inline&quot;&gt;new 1&lt;/code&gt; 都是 &lt;code class=&quot;inline&quot;&gt;Nullable Nat&lt;/code&gt; 类型的实例了（这些符号马上就介绍）：&lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;_ = nullptr :&amp;gt; Nullable Nat
_ = (new 1) :&amp;gt; Nullable Nat
&lt;/code&gt;&lt;h2&gt;依赖类型的数组&lt;/h2&gt;&lt;p&gt;定义一个数组类型，数组长度是类型的一部分：&lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;infixr 5 _cat_
data Vec {i} (A : Type i) : Nat -&amp;gt; Type i where
  []    : Vec A O
  _cat_ : forall {n} -&amp;gt; A -&amp;gt; Vec A n -&amp;gt; Vec A (S n)
&lt;/code&gt;&lt;p&gt;这样，我们可以有空数组，以自然数类型为例：&lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;_ = [] :&amp;gt; Vec Nat 0
&lt;/code&gt;&lt;p&gt;其中， &lt;code class=&quot;inline&quot;&gt;:&amp;gt;&lt;/code&gt; 左边是一个表达式（在这里是 &lt;code class=&quot;inline&quot;&gt;[]&lt;/code&gt;），右边是它的类型。&lt;code class=&quot;inline&quot;&gt;_ =&lt;/code&gt; 表示把这个表达式赋值给一个无法被使用的变量，也就是丢掉这个表达式。 以这种形式写出来，我就可以在编译我的博客的时候让 Agda 编译器检查我的这些代码片段是否在类型上是正确的。&lt;/p&gt;&lt;p&gt;把代码编译成网页是 Agda 编译器的一个功能，我目前正在着手改善它的这个功能。 也就是说，如果我给我的博客写一个 &lt;code class=&quot;inline&quot;&gt;main&lt;/code&gt; 函数，我就可以运行我的博客了……&lt;/p&gt;&lt;p&gt;先不说这个，一个元素的数组，也就是一个元素和一个空数组连接的结果：&lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;_ = (233 cat []) :&amp;gt; Vec Nat 1
&lt;/code&gt;&lt;p&gt;两个元素：&lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;_ = (666 cat 233 cat []) :&amp;gt; Vec Nat 2
&lt;/code&gt;&lt;p&gt;观察发现，数组的类型 &lt;code class=&quot;inline&quot;&gt;Vec&lt;/code&gt; 有两个参数，第一个参数是元素的类型 &lt;code class=&quot;inline&quot;&gt;Nat&lt;/code&gt; ，也就是自然数，第二个是长度，这两个参数都是编译期已知的。 这个数组的定义常常被 Idris 语言的粉丝用于布道——因为它很安全，可以在编译的时候防止越界的情况发生，就像 C++ 程序员会推荐 &lt;code class=&quot;inline&quot;&gt;std::array&lt;/code&gt; 一样。 而由于 Agda 语言人气不足，别人布道的时间 Agda 程序员都写论文去了。&lt;/p&gt;&lt;p&gt;我们来尝试一下 Agda 的『小于』类型。小于关系是一个类型，如果我们有一个类型为 &lt;code class=&quot;inline&quot;&gt;a &amp;lt; b&lt;/code&gt; 的变量，那么我们就『证明』了 &lt;code class=&quot;inline&quot;&gt;a &amp;lt; b&lt;/code&gt;。 也就是说，我们可以弄出一个类型为 &lt;code class=&quot;inline&quot;&gt;3 &amp;lt; 4&lt;/code&gt; 的变量：&lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;_ = ltS :&amp;gt; (3 &amp;lt; 4)
&lt;/code&gt;&lt;p&gt;也可以有 &lt;code class=&quot;inline&quot;&gt;114514 &amp;lt; 114516&lt;/code&gt; 类型的变量：&lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;_ = ltSR ltS :&amp;gt; (114514 &amp;lt; 114516)
&lt;/code&gt;&lt;p&gt;但是我们无论如何也弄不出 &lt;code class=&quot;inline&quot;&gt;1 &amp;lt; 1&lt;/code&gt; 类型的对象——这是由 &lt;code class=&quot;inline&quot;&gt;&amp;lt;&lt;/code&gt; 的定义决定的，这里就不展开说了（涉及的东西有点多）。&lt;/p&gt;&lt;p&gt;因此，我们可以写出这样一个函数：它『从长度为 &lt;code class=&quot;inline&quot;&gt;m&lt;/code&gt; 数组中获取第 &lt;code class=&quot;inline&quot;&gt;n&lt;/code&gt; 个元素』，并要求调用这个函数的人额外传入一个 类型为 &lt;code class=&quot;inline&quot;&gt;n &amp;lt; m&lt;/code&gt; 的变量。&lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;module GetAtIndex where
  _!!_&amp;lt;[_]&amp;gt; : {A : Type i} -&amp;gt; forall {l} -&amp;gt; Vec A l
          -&amp;gt; (n : Nat) -&amp;gt; n &amp;lt; l -&amp;gt; A
  (x cat _) !! O &amp;lt;[ _ ]&amp;gt; = x
  (_ cat a) !! S n &amp;lt;[ p ]&amp;gt; = a !! n &amp;lt;[ &amp;lt;-cancel-S p ]&amp;gt;
&lt;/code&gt;&lt;p&gt;这样，有了 &lt;code class=&quot;inline&quot;&gt;n &amp;lt; m&lt;/code&gt; 的证明，我们无论如何都能安全地从数组里拿出一个元素了。 举一个简单的调用的例子。这是一个测试用的数组：&lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;sampleList : Vec Nat 4
  sampleList = 0 cat 1 cat 2 cat 3 cat []
&lt;/code&gt;&lt;p&gt;我们试图取它的第 2 项，没有问题（下面的代码是让编译器试图验证『从刚才那个数组中取第 2 项得到的是 2』）：&lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;_ = idp :&amp;gt; ((sampleList !! 2 &amp;lt;[ ltSR ltS ]&amp;gt;) == 2)
&lt;/code&gt;&lt;p&gt;试试第一项？&lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;_ = idp :&amp;gt; ((sampleList !! 1 &amp;lt;[ ltSR (ltSR ltS) ]&amp;gt;) == 1)
&lt;/code&gt;&lt;h2&gt;运行时错误&lt;/h2&gt;&lt;code lang=&quot;agda&quot;&gt;module RuntimeErrors where
  open GetAtIndex
&lt;/code&gt;&lt;p&gt;一个老生常谈（我在两个群里被问过了）的问题：如果下标和数组都是运行时获取的，编译器的验证不就凉了吗？&lt;/p&gt;&lt;p&gt;解决方法：在运行时进行判断——如果下标小于数组长度，那么在这样的条件下可以得到一个小于关系的证明， 就可以安全地进行函数调用。否则，你将不能调用这个函数，请自行处理非法输入。&lt;/p&gt;&lt;p&gt;给出一个简单的实现（库里面其实有一个 &lt;code class=&quot;inline&quot;&gt;Decidable&lt;/code&gt; 的版本，但是它里面用了 Unicode ，我不想用，所以就自己写了一个）。 首先，我们需要判断两个自然数的大小，并在小于的时候返回小于的证明，其他时候返回 &lt;code class=&quot;inline&quot;&gt;nullptr&lt;/code&gt;：&lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;lessThan : forall a b -&amp;gt; Nullable (a &amp;lt; b)
  lessThan O O = nullptr
  lessThan O (S b) = new O&amp;lt;S b 
  lessThan (S a) O = nullptr
  lessThan (S a) (S b) with lessThan a b
  ... | nullptr = nullptr
  ... | new x   = new &amp;lt;-ap-S x
&lt;/code&gt;&lt;p&gt;然后，我们就可以在不模式匹配、直接把参数拿来用的情况下，对 &lt;code class=&quot;inline&quot;&gt;_!!_&amp;lt;[_]&amp;gt;&lt;/code&gt; 进行调用了。 这个函数通过接收任意的自然数和任意的数组来模拟运行时无法保证的输入，并返回可能不存在的输出：&lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;runtimeInput : forall {m} -&amp;gt; Vec Nat m -&amp;gt; Nat -&amp;gt; Nullable Nat
  runtimeInput [] _ = nullptr
  runtimeInput{m}vn with lessThan n m
  ... | nullptr = nullptr
  ... | new x   = new (v !! n &amp;lt;[ x ]&amp;gt;)
&lt;/code&gt;&lt;p&gt;这个函数和 Java、JavaScript 函数就没什么可见的区别了，这也体现出了形式验证的一个小小的局限性。&lt;/p&gt;&lt;p&gt;但在运行时的情况下，我们还是能看出形式验证的好处的——类型签名里函数对参数需要满足的关系以非常清晰的形式呈现了（比如， &lt;code class=&quot;inline&quot;&gt;a &amp;gt; b&lt;/code&gt; 这种表达式），表达的也很简洁， 函数的调用者无需阅读文档即可安全地进行 API 调用，运行时不需要任何错误处理——编译的时候就能保证所有的错误得到处理，运行时当然是把这些东西全部都擦除掉了。&lt;/p&gt;&lt;h2&gt;稍微弱一点的类型系统&lt;/h2&gt;&lt;p&gt;看到这里，我们会想起，像 Java 和 JavaScript 里类似的函数都会在参数不合法的时候抛出一个异常。 因此，如果我们的程序要足够健壮，我们会选择：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;处理这个异常&lt;/li&gt;&lt;li&gt;判断下标是否小于长度，提前避免错误&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;具有证明命题能力的编程语言一般会强制程序员进行后者的操作，具有责任心的程序员会主动进行后者的操作， 绝大多数时间我们是忽略了这件事的——编译器、程序员、用户都没有去证明输入数据对程序来说一定合法。 当输入不合法时（尽管这很少发生），我们的程序会崩溃掉（&lt;b&gt;运行时错误&lt;/b&gt;），否则将正常运行。&lt;/p&gt;&lt;p&gt;运行时错误，从动态类型到静态类型的过程中已经大幅减少了。但这里可以看出，它还是存在的。&lt;/p&gt;&lt;p&gt;不知道 C++ 程序员有没有想到 SFINAE 呢？（笑）&lt;/p&gt;&lt;p&gt;但总而言之，把证明传来传去是一件很麻烦的事情，光是阅读命题本来就是额外工作，证明就更麻烦了。 像 C++ 的 SFINAE，在参数不合法的时候，如果不手动让编译器抛出一些可读的异常，编译器会产生大量的错误信息， 印在厕纸上都能用一年。&lt;/p&gt;&lt;p&gt;但是呢，会把程序写成这样的形式验证研究员都是垃圾（凭空制造复杂度），他们的思维都被限制了。&lt;/p&gt;&lt;p&gt;我们首先来看看大家觉得虽然邪恶但是写起来爽的『动态类型』。&lt;/p&gt;&lt;h2&gt;更浅显的话题&lt;/h2&gt;&lt;p&gt;程序员们常常对『动态类型和静态类型哪个更好』这一话题产生激烈的讨论。 这其实是一个完全没有意义的讨论，因为这首先是一个罗卜白菜的问题——两者都有能称得上是『优点』的地方； 其次不同的人对程序有不同的追求，有人想写出健壮可扩展的程序，有人只是想快速交付收钱； 再其次同一个人也有不同的需求，有时只是想批量处理一些文件，有时需要构建长期维护的大型项目。&lt;/p&gt;&lt;p&gt;对于简单的批处理需求，我们甚至会完全不考虑任何的可读性、可维护性、可扩展性、安全性、鲁棒性， 写出类似这样的代码（已经整理过了，再看不懂就是语言的问题）：&lt;/p&gt;&lt;code lang=&quot;perl&quot;&gt;while (my $line = &amp;lt;$imguiHeader&amp;gt;) {
  chomp $line;
  $_ = $line;
  if (m!^// dear imgui, (.*)$!) {
    my $commandPrefix = &#39;cd ../imgui &amp;amp;&amp;amp; git rev-parse&#39;;
    print &quot;--- Generating for dear-imgui version $1\n&quot;, &quot;--- Revision &quot;, `$commandPrefix --verify HEAD`;
    print &quot;--- Branch &quot;, `$commandPrefix --abbrev-ref HEAD`, &quot;---\n\n&quot;, &quot;local $moduleName = { _version = &#39;@{[ $1 =~ s/[^∙↓]//gr ]}&#39; }\n&quot;;
  }
  elsif (/^\s*enum\s(\w+)_/) {
    $currentEnum = $1;
    $currentEnumMangled = $currentEnum =~ s/^Im(Gui)?(.)([^\s]*)$/@{[ lc $2 ]}$3/r =~ s/Flags$//gr;
    # =~ s/([a-z])([A-Z])/$1.@{[ lc $2 ]}/gr;
    print &quot;\n&quot;, &#39;--{&#39;, &#39;{&#39;, &quot;{ $currentEnumMangled\n&quot;, &quot;---\@type _$currentEnumMangled\n&quot;, &quot;local $currentEnumMangled = {}\n&quot;
  }
  elsif (length $currentEnum) {
    if (/\}/) {
      print &quot;$moduleName.$currentEnumMangled = $currentEnumMangled\n&quot;;
      print &quot;$currentEnumMangled = nil\n&quot;, &#39;--}&#39;, &#39;}&#39; &quot;} $currentEnumMangled\n&quot;;
      $currentEnum = &#39;&#39;; $previousDefault = 0;
    }
    elsif (m!^\s*${currentEnum}_(\w+)((\s*=\s*([^,/]+))?),?\s*(//\s*(.*))?!) {
      print &quot;\n--- $6\n&quot; if $5 and length $6;
      $mangledName = length $1 == 1 ? &quot;_$1&quot; : $1;
      $value = $2 ? calculate $4 : $previousDefault++;
      print &quot;$currentEnumMangled.$mangledName = &quot;, $value, &quot;\n&quot;;
    }
    elsif (m!^\s*//(.*)!) { print &quot;---$1\n&quot; }
  }
}&lt;/code&gt;&lt;p&gt;这样的代码完全是一个精雕细琢的艺术品——它的每一个字符都是我（没错这是我写的……用来提取一段 C++ 代码中的一部分定义并翻译成 Lua） 小心翼翼写出来的，稍微改一点就会出错，输入数据有一点点变化也可能出错，静态分析工具对这个代码的正确性完全没有保障（Perl 的解释器在运行你的代码的时候也不知道你的程序的目的，只是一行一行地运行而已）。&lt;/p&gt;&lt;p&gt;动态类型往往因为其灵活性被一些程序员（不是我）喜欢。比如我们可以写出这样的 JavaScript 程序：&lt;/p&gt;&lt;code lang=&quot;js&quot;&gt;const Error = {}
const getAtIndex = (a, n) =&amp;gt; n &amp;lt; a.length ? a[n] : Error;&lt;/code&gt;&lt;p&gt;简单地运行：&lt;/p&gt;&lt;code lang=&quot;js&quot;&gt;&amp;gt; getAtIndex([1, 2, 3], 2)
&amp;lt; 3
&amp;gt; GetAtIndex([], 1)
&amp;lt; {}&lt;/code&gt;&lt;p&gt;这个 &lt;code class=&quot;inline&quot;&gt;getAtIndex&lt;/code&gt; 接收一个数组和一个整数，返回『有时是一个数组元素，有时是 &lt;code class=&quot;inline&quot;&gt;Error&lt;/code&gt;』。 用 TypeScript 描述一下它的类型，就是：&lt;/p&gt;&lt;code lang=&quot;ts&quot;&gt;&amp;lt;a&amp;gt;(a[], number): a|Error&lt;/code&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;而我们调用这个函数，它到底会返回什么类型，我们也必须看它的实现才能知道。 返回 &lt;code class=&quot;inline&quot;&gt;Error&lt;/code&gt; 只是方便起见，我们大可使用异常来代替返回一个表达异常的对象。 但它做到了一点——在我们不想处理错误的时候，我们可以不处理错误，让运行时炸。 在我们想处理错误的时候，我们可以处理错误。&lt;/p&gt;&lt;p&gt;但这给了我们一个启发。或许我们可以实现这样的函数：在很明显没有错误的时候，我们可以不处理错误。 在有可能错误的时候，我们需要处理错误。&lt;/p&gt;&lt;p&gt;或许有人会说，我们不还有异常吗？但首先异常这一概念首先本身就足够『运行时』， 我们对什么样的函数会抛出什么样的异常都一无所知。Java 的 Checked Exception 作为一个例外，是静态的异常， &lt;b&gt;但是这种语法结构和返回带有错误信息的类型&lt;/b&gt; （可以理解为 Haskell 的 &lt;code class=&quot;inline&quot;&gt;Either&lt;/code&gt;， Rust 的 &lt;code class=&quot;inline&quot;&gt;Result&lt;/code&gt;） &lt;b&gt;是&lt;a href=&quot;http://www.yinwang.org/blog-cn/2017/05/23/kotlin&quot;&gt;同构&lt;/a&gt;的&lt;/b&gt;（这篇文章本身说的很有道理，但请不要看它所引用的《给 Java 说句公道话》）。&lt;/p&gt;&lt;blockquote&gt;首先，写 C# 代码时最让我头痛的事情之一，就是 C# 没有 CE。每调用一个函数（不管是标准库函数，第三方库函数，还是队友写的函数，甚至我自己写的函数），我都会疑惑这个函数是否会抛出异常。由于 C# 的函数类型上不需要标记它可能抛出的异常，为了确保一个函数不会抛出异常，你就需要检查这个函数的源代码，以及它调用的那些函数的源代码……&lt;br&gt;也就是说，你必须检查这个函数的整个“调用树”的代码，才能确信这个函数不会抛出异常。这样的调用树可以是非常大的。说白了，这就是在用人工对代码进行“全局静态分析”，遍历整个调用树。这不但费时费力，看得你眼花缭乱，还容易漏掉出错。显然让人做这种事情是不现实的，所以绝大部分时候，程序员都不能确信这个函数调用不会出现异常。&lt;/blockquote&gt;&lt;p&gt;在静态类型中，我们要么使用静态的带错误信息的返回类型（强制检查错误，即使很明显的正确的代码也必须处理错误）、要么使用异常（静态变动态，你干啥不去用 Python）。&lt;/p&gt;&lt;p&gt;而且，刚才那段 JavaScript 根本不可能在静态类型语言里实现（当然，这里没有考虑支持和类型的语言。但是要考虑到 支持和类型的编程语言大部分都是渐进类型或者以动态类型编程语言为目标语言的编程语言）——我们写不出一个同时有两种可能的返回类型的语言。&lt;/p&gt;&lt;p&gt;也就是说，动态类型能做（即使做的不完美，比如那个 &lt;code class=&quot;inline&quot;&gt;getAtIndex&lt;/code&gt; 并不会强制你处理异常，即使可能异常）的事静态类型做不到； 静态类型能做动态类型做不到的事就多了去了，在绝大多数情况下使用静态类型还是能带来远高于动态类型的编程体验的（ 包括 IDE 补全重构跳转、尽可能减少了类型错误等），这里就略过不提了。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;难道鱼和熊掌真的不可兼得吗？&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;不，小孩才做选择。&lt;/p&gt;&lt;h2&gt;我全都要&lt;/h2&gt;&lt;code lang=&quot;agda&quot;&gt;module IQuanDouWant where
  open RuntimeErrors&lt;/code&gt;&lt;p&gt;这时我们就需要用到依赖类型了。&lt;/p&gt;&lt;p&gt;我们除了传入证明作为参数之外，还可以使用依赖函数！&lt;/p&gt;&lt;p&gt;我们的 &lt;code class=&quot;inline&quot;&gt;getAtIndex&lt;/code&gt; 函数，在下标越界的时候返回 &lt;code class=&quot;inline&quot;&gt;Error&lt;/code&gt;，其他时候返回正常的值。 我们先定义一个表达错误的类型：&lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;data ???? : Type0 where ??? : ????
&lt;/code&gt;&lt;p&gt;我们的函数 &lt;code class=&quot;inline&quot;&gt;getAtIndex&lt;/code&gt;，返回的类型，是根据两个参数决定的。 所以，我们需要先写一个函数，接收两个自然数，返回『我们的 &lt;code class=&quot;inline&quot;&gt;getAtIndex&lt;/code&gt; 的返回类型』， 也就是说如果左边大于右边，就返回『自然数』这个类型，否则返回表达错误的类型。 请注意，只有带有较好的依赖类型支持的类型系统才能做到这种事。如果一个语言声称自己支持依赖类型， 你可以问问他能不能写出这样的代码。&lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;returnType : (_ _ : Nat) -&amp;gt; Type0
  returnType O _ = ????
  returnType (S _) O = Nat
  returnType (S n) (S m) = returnType n m
&lt;/code&gt;&lt;p&gt;然后，我们的 &lt;code class=&quot;inline&quot;&gt;getAtIndex&lt;/code&gt; 需要返回的，就是这个类型。&lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;getAtIndex : forall {m} -&amp;gt; (v : Vec Nat m) -&amp;gt; (n : Nat) -&amp;gt; returnType m n
  getAtIndex [] _ = ???
  getAtIndex (x cat _) O = x
  getAtIndex (_ cat v) (S n) = getAtIndex v n
&lt;/code&gt;&lt;p&gt;看看看！这个函数的实现真的好简单啊！&lt;/p&gt;&lt;p&gt;我们试试证明它的性质？我们先传入合法的参数，看看是不是就直接返回了数组的元素：&lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;open GetAtIndex using (sampleList)
  _ = idp :&amp;gt; (getAtIndex sampleList 2 == 2)
  _ = idp :&amp;gt; (getAtIndex sampleList 1 == 1)
&lt;/code&gt;&lt;p&gt;真的耶！那如果是超过长度上限的下标，是不是就会返回那个错误类型呢？&lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;_ = idp :&amp;gt; (getAtIndex sampleList 233 == ???)
&lt;/code&gt;&lt;p&gt;是的！&lt;/p&gt;&lt;p&gt;这个函数的返回类型真的在变耶！而且这是非常非常纯正的静态类型编程哦！&lt;/p&gt;&lt;p&gt;你看，静态类型做不到的事，依赖类型做到了。动态类型没法编译期进行类型检查，依赖类型可以。&lt;/p&gt;&lt;h2&gt;实际应用&lt;/h2&gt;&lt;code lang=&quot;text&quot;&gt;module FSharpLang where

  -- ...
&lt;/code&gt;&lt;p&gt;就懒得写了，毕竟本来就是我的另一篇博客。这是一个依赖函数的经典应用—— &lt;code class=&quot;inline&quot;&gt;&lt;a href=&quot;https://ice1000.org/2018/08/04/TypeSafePrintf/&quot;&gt;printf&lt;/a&gt;&lt;/code&gt;。 它的类型是：&lt;code class=&quot;inline&quot;&gt;String -&amp;gt; ??&lt;/code&gt;，其中 &lt;code class=&quot;inline&quot;&gt;??&lt;/code&gt; 具体的值，取决于 &lt;code class=&quot;inline&quot;&gt;String&lt;/code&gt; 参数中有多少个 &lt;code class=&quot;inline&quot;&gt;%d&lt;/code&gt;, &lt;code class=&quot;inline&quot;&gt;%c&lt;/code&gt; 等。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;啊，今泉影狼真可爱啊。&lt;/p&gt;</description>
<author>兴趣使然千里冰封</author>
<guid isPermaLink="false">2018-11-25-50792280</guid>
<pubDate>Sun, 25 Nov 2018 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
