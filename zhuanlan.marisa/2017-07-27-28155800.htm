<p>如果上面这些例子能格式化输出一些内容就爽了，所以下面这个例子教我们一种的方法，使用io:format函数输出。像其他函数一样，你也可以在shell中测试<b>io:format</b>函数。</p><code lang="erlang">31&gt; io:format("hello world~n", []).
hello world
ok
32&gt; io:format("this outputs one Erlang term: ~w~n", [hello]).
this outputs one Erlang term: hello
ok
33&gt; io:format("this outputs two Erlang terms: ~w~w~n", [hello, world]).
this outputs two Erlang terms: helloworld
ok
34&gt; io:format("this outputs two Erlang terms: ~w ~w~n", [hello, world]).
this outputs two Erlang terms: hello world
ok</code><p>函数format/2(即格式化两个参数)接受两个列表参数。第一个列表总是用引号<b>" "</b>包含的。它是什么样就输出什么样，除了<b>~w</b>有点特别，它表示一个占位符，第二个列表参数将会代替这些占位符。每个<b> ~n</b>都被替换为一个新行。如果一切顺利，函数io:format/2 本身返回一个原子（atom）ok。像其他Erlang函数一样，如果有错误发生它就会crash。这不是Erlang的缺陷，这是有意为之。Erlang有一个复杂的错误处理机制，这点会在后面说明。 作为一个练习，试试让<b>io:format</b> crash，应该很简单吧。 但是请注意虽然io:format 函数crash了，Erlang shell却不会crash。</p>