<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>业余程序员的个人修养</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/</link>
<description></description>
<language>zh-cn</language>
<lastBuildDate>Fri, 27 Jul 2018 18:33:39 +0800</lastBuildDate>
<item>
<title>工程趣闻（六）：历史不可修改</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-07-27-37670453.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37670453&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;b&gt;沉没成本&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-61c50ec8a26b146424569e3be3df0a73_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;444&quot; data-rawheight=&quot;445&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-61c50ec8a26b146424569e3be3df0a73&quot; data-watermark-src=&quot;v2-a8c151865791bf4fa669a388b19cf64b&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;人们在决定是否做一件事情的时候，不仅要看这件事对自己有没有好处，&lt;br&gt;而且还要看过去是不是已经在这件事情上有过投入。&lt;/p&gt;&lt;p&gt;我们把这些已经发生的，不可收回的支出，&lt;br&gt;如时间、金钱、精力等称为“&lt;b&gt;沉没成本&lt;/b&gt;”（Sunk Cost）。&lt;/p&gt;&lt;p&gt;在微观经济学理论中，做&lt;b&gt;决策&lt;/b&gt;时仅需要考虑&lt;b&gt;可变成本&lt;/b&gt;。&lt;br&gt;如果同时考虑到沉没成本，那结论就不是纯粹基于事物的价值作出来的了。&lt;/p&gt;&lt;p&gt;如果你预订了一张电影票，已经付了钱且假设不能退票。&lt;br&gt;此时你付的价钱已经不能收回，就算你不看电影钱也收不回来，&lt;br&gt;电影票的价钱就是你的沉没成本。&lt;/p&gt;&lt;p&gt;大多数经济学家们认为，如果你是理性的，那就&lt;b&gt;不该在做决策时考虑沉没成本&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;比如在前面提到的看电影的例子中，会有两种可能结果：&lt;br&gt;付钱后发觉电影不好看，但忍受着看完；&lt;br&gt;付钱后发觉电影不好看，退场去做别的事情。&lt;/p&gt;&lt;p&gt;两种情况下你都已经付钱，所以应该不考虑这件事情。&lt;br&gt;如果你后悔买票了，那么你当前的决定应该是基于你是否想继续看这部电影，&lt;br&gt;而不是你为这部电影付了多少钱。&lt;/p&gt;&lt;p&gt;此时的决定不应该考虑到买票的事，而应该以看免费电影的心态来作判断。&lt;/p&gt;&lt;p&gt;经济学家们往往建议选择后者，这样你只是花了点冤枉钱，&lt;br&gt;还可以&lt;b&gt;通过腾出时间来做其他更有意义的事来降低机会成本&lt;/b&gt;，&lt;br&gt;而选择前者你还要继续受冤枉罪。&lt;/p&gt;&lt;p&gt;在编写软件过程中，人们受制于沉没成本束缚的案例也屡见不鲜。&lt;/p&gt;&lt;p&gt;我们花费了很多精力开发了一套软件，就很难接受它不被别人使用的结局，&lt;br&gt;会尝试花更大的精力推广它，总想把它用到那些本不适用的场景中。&lt;/p&gt;&lt;p&gt;这和赌徒的心态并无二致，&lt;br&gt;以前投入过的巨额赌资，会变成无形压力，&lt;br&gt;让他们继续赌下去。&lt;/p&gt;&lt;p&gt;因此，我们不如把已经写好的软件看做一个免费的开源工具，&lt;br&gt;很不幸，是否使用它，要取决于现在看来它是否还是适用的，&lt;br&gt;是否继续维护，也要再衡量它是否有维护的价值。&lt;/p&gt;&lt;p&gt;这种判断最好在软件编写的过程中，时时刻刻在发生。&lt;/p&gt;&lt;b&gt;&lt;hr&gt;&lt;/b&gt;&lt;h2&gt;&lt;b&gt;兼容性&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-a0715423ad92759b73137aa9361a69d3_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;298&quot; data-rawheight=&quot;206&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-a0715423ad92759b73137aa9361a69d3&quot; data-watermark-src=&quot;v2-4bbcd2eec0146fefad7f8bb4a00d59d8&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;b&gt;DLL地狱&lt;/b&gt;（DLL Hell）指在Microsoft Windows系统中，&lt;br&gt;因为动态链接库（DLL）的版本或兼容性的问题而造成程序无法正常运行。 &lt;/p&gt;&lt;p&gt;Windows早期并没有很严谨的DLL版本管理机制，&lt;br&gt;以致经常发生安装了某软件后，因为其覆盖了系统上原有的同一个DLL档，&lt;br&gt;而导致原有可运行的程序无法运行。&lt;/p&gt;&lt;p&gt;可是，还原回原有的DLL档之后，新安装的软件就无法运行。&lt;/p&gt;&lt;p&gt;Linux 系统中也遇到共享库（Shared Library）的&lt;b&gt;兼容问题&lt;/b&gt;，&lt;br&gt;共享库的开发者会不停的更改共享库的版本，&lt;br&gt;以修正原有的Bug，增加新的功能或改进性能等。&lt;/p&gt;&lt;p&gt;由于动态链接的灵活性，使得程序本身和程序所依赖的共享库可以分别独立开发和更新，&lt;br&gt;但是共享库版本的更新可能会导致接口的更改或删除，&lt;br&gt;这可能导致依赖于该共享库的程序无法正常运行。（&lt;a href=&quot;https://en.wikipedia.org/wiki/Soname&quot;&gt;soname&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;兼容性是应该被事先考虑的问题&lt;/b&gt;，&lt;br&gt;我们的软件一旦被使用，就埋下了祸根。&lt;/p&gt;&lt;p&gt;软件各个模块之间的依赖关系，实际上反映了在编写时被依赖模块的特性，&lt;br&gt;而不是反映在被使用时的当前特性。&lt;/p&gt;&lt;p&gt;在需求变更的压力下，软件的对外表现不得不发生变更，&lt;br&gt;接口也就不得不进行调整，&lt;br&gt;这就引发了一系列不可避免的兼容性问题。&lt;/p&gt;&lt;p&gt;虽然追求优雅的设计在一定程度上可以缓解它，但也不是万能的，&lt;br&gt;而且担心接口变更会带来麻烦从而裹足不前也是不恰当的。&lt;br&gt;这极大的限制了软件演进的速度，也限制了解决方案对问题的及时响应。&lt;/p&gt;&lt;blockquote&gt;我们应该把代码看成有3-5年的半生命周期，因此应该定期进行更新。&lt;br&gt;——Eliot Horowitz&lt;/blockquote&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%B2%89%E6%B2%A1%E6%88%90%E6%9C%AC&quot;&gt;沉没成本&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/DLL%E5%9C%B0%E7%8D%84&quot;&gt;DLL地狱&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/3652388/&quot;&gt;程序员的自我修养&lt;/a&gt;&lt;/p&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-07-27-37670453</guid>
<pubDate>Fri, 27 Jul 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>工程趣闻（五）：小步快跑</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-07-21-37670015.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37670015&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;b&gt;利特尔法则&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-4922c4ed32f948101fa0f788ee27fa2a_r.jpg&quot; data-rawwidth=&quot;399&quot; data-rawheight=&quot;304&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-4922c4ed32f948101fa0f788ee27fa2a&quot; data-watermark-src=&quot;v2-96e263c49fec2a37f8aded498b2b5b8d&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;一个商场在一段时间内会有人进入也会有人离开，&lt;br&gt;如果平均滞留人数保持恒定，就可以看做是稳定的系统（stable system），&lt;br&gt;系统的&lt;b&gt;吞吐率&lt;/b&gt;就是单位时间内进入或离开的人数。&lt;/p&gt;&lt;p&gt;假设商场中平均滞留人数为 &lt;equation&gt;L&lt;/equation&gt; ，吞吐率为 &lt;equation&gt;\lambda&lt;/equation&gt; ，&lt;br&gt;则每个人的&lt;b&gt;平均等待时间&lt;/b&gt;就是 &lt;equation&gt;W=L/\lambda&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;要想缩短平均等待时间，只能增加吞吐率 &lt;equation&gt;\lambda&lt;/equation&gt; 或减少平均滞留人数 &lt;equation&gt;L&lt;/equation&gt; 来实现。&lt;br&gt;其中， &lt;equation&gt;W=L/\lambda&lt;/equation&gt; 称为&lt;b&gt;利特尔法则&lt;/b&gt;。&lt;/p&gt;&lt;blockquote&gt;The long-term average number of customers in a stable system L is equal to the long-term average effective arrival rate, λ, multiplied by the average time a customer spends in the system, W; or expressed algebraically: L = λW.&lt;/blockquote&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;翻转硬币游戏&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-567bc4f2e7a81b9e1c761f6664dd3d7f_r.jpg&quot; data-rawwidth=&quot;437&quot; data-rawheight=&quot;321&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-567bc4f2e7a81b9e1c761f6664dd3d7f&quot; data-watermark-src=&quot;v2-abedb84533182c6c46c291cf57cee151&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;假设有20枚硬币，还有4个人A，B，C，D，&lt;br&gt;每个人都要把硬币翻转才能传递给下一个人。&lt;/p&gt;&lt;p&gt;假设将一枚硬币进行翻转需要1s，&lt;br&gt;我们采用以下不同的策略，看看对任务完成的时间有什么影响。&lt;/p&gt;&lt;p&gt;（1）翻转20枚硬币后传递：&lt;br&gt;A需要20s，B需要20s，C需要20s，D需要20s。&lt;br&gt;第一枚硬币到达需要80s，最后一枚硬币到达需要80s。&lt;/p&gt;&lt;p&gt;（2）翻转5枚硬币后传递：&lt;br&gt;A需要5s×4，B需要5s×4，C需要5s×4，D需要5s×4。&lt;br&gt;第一枚硬币到达需要20s，最后一枚硬币到达需要35s。&lt;/p&gt;&lt;p&gt;（3）翻转1枚硬币后传递：&lt;br&gt;A需要1s×20，B需要1s×20，C需要1s×20，D需要1s×20。&lt;br&gt;第一枚硬币到达需要4s，最后一枚硬币到达需要23s。&lt;/p&gt;&lt;p&gt;因此，&lt;b&gt;减小在制品数量可以有效的缩短工期。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;注：&lt;br&gt;WIP的意思即为Work In Process ，也就是在制品的意思。&lt;br&gt;&lt;b&gt;在制品&lt;/b&gt;指的是正在加工，尚未完成的产品。&lt;br&gt;广义的包括正在加工的产品和准备进一步加工的半成品；&lt;br&gt;狭义的仅指正在加工的产品。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;看板&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-7659a52d879d47732e60e13e8054b9c3_r.jpg&quot; data-rawwidth=&quot;992&quot; data-rawheight=&quot;366&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-7659a52d879d47732e60e13e8054b9c3&quot; data-watermark-src=&quot;v2-03d47cb72995916f1875be1430b56620&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;看板（Kanban）一词来自日文，本义是&lt;b&gt;可视化卡片&lt;/b&gt;，&lt;br&gt;它源于&lt;b&gt;精益制造&lt;/b&gt;——上世纪50年代由丰田公司创造的生产管理方法。&lt;/p&gt;&lt;p&gt;看板工具的实质是：后道工序在需要时，通过看板向前道工序发出信号，&lt;br&gt;前道工序只会根据看板按需生产。&lt;/p&gt;&lt;p&gt;看板信号&lt;b&gt;由下游向上游传递，拉动上游的生产活动&lt;/b&gt;，使产品向下游流动。&lt;br&gt;拉动的源头是最下游的客户价值，也就是客户订单或需求。&lt;/p&gt;&lt;p&gt;看板开发方法是看板方法在软件工程中的应用，&lt;br&gt;越来越多的案例表明，它能够改善协作、优化管理，显著提高交付速度、质量和灵活性。&lt;/p&gt;&lt;p&gt;价值、&lt;b&gt;价值流&lt;/b&gt;，以及&lt;b&gt;问题和瓶颈的可视化&lt;/b&gt;，&lt;br&gt;是改善价值的前提，也是其它看板实践的基础。&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-7c67f376f3fecb02c5ec0b9ca793bfe6_r.jpg&quot; data-rawwidth=&quot;1240&quot; data-rawheight=&quot;595&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-7c67f376f3fecb02c5ec0b9ca793bfe6&quot; data-watermark-src=&quot;v2-f7c0e8b53beb11f6a5ba590bf09d9d05&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;blockquote&gt;任何非瓶颈资源究竟能使系统赚多少钱，不是由它自己的潜能所决定，而是由系统中的其他制约因素所决定。——艾利·高德拉特&lt;/blockquote&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Little%27s_law&quot;&gt;Little&#39;s law&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/26729634/&quot;&gt;看板实战&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.woshipm.com/pd/54968.html&quot;&gt;解析精益产品开发（一）—— 看板开发方法&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/1464593/&quot;&gt;目标：简单而有效的常识管理&lt;/a&gt;&lt;/p&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-07-21-37670015</guid>
<pubDate>Sat, 21 Jul 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>工程趣闻（四）：不要制造问题</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-07-16-37669640.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37669640&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;b&gt;XY问题&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-278fb2bc7f11a3ad58a044c4a6d22569_r.jpg&quot; data-rawwidth=&quot;440&quot; data-rawheight=&quot;298&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-278fb2bc7f11a3ad58a044c4a6d22569&quot; data-watermark-src=&quot;v2-95d00e0f158ee2c853cfb4c18676246a&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;这个问题，最早是在&lt;a href=&quot;http://coolshell.cn/articles/10804.html&quot;&gt;酷壳：X-Y Problem&lt;/a&gt;中看到的。&lt;/p&gt;&lt;p&gt;对于X-Y Problem的意思如下：&lt;br&gt;1）有人想解决问题X&lt;br&gt;2）他觉得Y可能是解决X问题的方法&lt;br&gt;3）但是他不知道Y应该怎么做&lt;br&gt;4）于是他去问别人Y应该怎么做？&lt;br&gt;简而言之，没有去问怎么解决问题X，而是&lt;b&gt;去问&lt;/b&gt;解决方案Y应该怎么去实现和操作。&lt;/p&gt;&lt;p&gt;&lt;b&gt;于是乎：&lt;/b&gt;&lt;br&gt;1）热心的人们帮助并告诉这个人Y应该怎么搞，但是大家都觉得Y这个方案有点怪异。&lt;br&gt;2）在经过大量地讨论和浪费了大量的时间后，热心的人终于明白了原始问题X是怎么一回事。&lt;br&gt;3）于是大家都发现，Y根本就不是用来解决X的合适的方案。&lt;/p&gt;&lt;p&gt;X-Y Problem最大的严重的问题就是：&lt;br&gt;&lt;b&gt;在一个根本错误的方向上浪费他人大量的时间和精力！&lt;/b&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;Accidental complexity&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;Neal Ford&lt;/b&gt;指出，&lt;br&gt;&lt;b&gt;Essential complexity&lt;/b&gt;指的是问题与生俱来的，无法避免的困难。&lt;br&gt;&lt;b&gt;Accidental complexity&lt;/b&gt;，是人们解决Essential complexity的过程中衍生的。&lt;/p&gt;&lt;p&gt;系统设计的初衷是解决Essential complexity，&lt;br&gt;但是解决方案本身带来了新的问题。&lt;/p&gt;&lt;p&gt;许多软件框架和厂商提供的“解决方案”都表现出Accidental complexity的症状。&lt;br&gt;解决特定问题的框架很管用，&lt;br&gt;但&lt;b&gt;设计过度的框架&lt;/b&gt;增加的复杂性反而超过了它应该缓解的复杂性。&lt;/p&gt;&lt;p&gt;在大型软件项目中，关注Essential complexity，消除Accidental complexity，&lt;br&gt;抽丝剥茧制订解决方案，才是真正的挑战。&lt;/p&gt;&lt;blockquote&gt;It&#39;s the duty of the architect to solve the problems inherent in essential complexity without introducing accidental complexity.&lt;/blockquote&gt;&lt;p&gt;注：&lt;br&gt;就英语：accidental的这个字眼而言，并不是指偶然发生的意思，&lt;br&gt;也不是意外不幸的意思，而是比较接近&lt;b&gt;伴随的&lt;/b&gt;或次要的意思。&lt;/p&gt;&lt;b&gt;&lt;hr&gt;&lt;/b&gt;&lt;h2&gt;&lt;b&gt;关注难点&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-0687103524cfe50bcb5d6e1f332181bb_r.jpg&quot; data-rawwidth=&quot;460&quot; data-rawheight=&quot;460&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-0687103524cfe50bcb5d6e1f332181bb&quot; data-watermark-src=&quot;v2-c4d0521f7621d8e084ddbd074a59b915&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;b&gt;Frederick P. Brooks&lt;/b&gt;在论文&lt;a href=&quot;http://worrydream.com/refs/Brooks-NoSilverBullet.pdf&quot;&gt;No Silver Bullet&lt;/a&gt;中将软件开发的困难分为两类：&lt;br&gt;（1）&lt;b&gt;Essential Difficulties：&lt;/b&gt;打造由抽象软件实体构成的复杂概念结构&lt;br&gt;（2）&lt;b&gt;Accidental Difficulties：&lt;/b&gt;使用编程语言表达这些抽象实体，在空间和时间限制内将它们映射成机器语言&lt;/p&gt;&lt;p&gt;软件开发真正的困难，是在于这种&lt;b&gt;概念构造&lt;/b&gt;的规格制定、设计和测试。&lt;br&gt;而并非在孜孜矻矻于它的呈现方式，以及测试该呈现方式的精确程度。&lt;/p&gt;&lt;p&gt;Accidental Difficulties会随着工具的改善而逐渐淡化，&lt;br&gt;反而是Essential Difficulties最难以解决，&lt;br&gt;因为大部分的活动是发生在人们的&lt;b&gt;脑海里&lt;/b&gt;，缺乏有效的辅助工具。&lt;/p&gt;&lt;p&gt;Brooks认为现在是关注软件任务中的必要活动的时候了，&lt;br&gt;也就是那些和构造异常复杂的&lt;b&gt;抽象概念&lt;/b&gt;结构有关的部分。&lt;/p&gt;&lt;p&gt;他提出了几个建议：&lt;br&gt;（1）仔细地进行市场调研，避免开发已上市的产品，&lt;br&gt;构建软件最可能的彻底解决方案是&lt;b&gt;不开发任何软件&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;（2）在获取和制订软件需求时，将快速原型开发作为迭代计划的一部分。&lt;br&gt;因为，开发软件系统的过程中，最困难的部分是&lt;b&gt;确切地决定搭建什么样的系统&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;（3）增量开发——增长，而非搭建系统。&lt;br&gt;有机地更新软件，随着系统的运行、使用和测试，&lt;b&gt;逐渐添加&lt;/b&gt;越来越多的功能。&lt;/p&gt;&lt;p&gt;（4）不断挑选和培养杰出的概念设计人员，&lt;br&gt;软件行业的核心，一如既往的是&lt;b&gt;人员&lt;/b&gt;。&lt;/p&gt;&lt;blockquote&gt;Good programmers spend much of the other 90% thinking, researching, and experimenting to find the best design. Bad programmers spend much of that 90% debugging code by randomly making changes and seeing if they work.&lt;/blockquote&gt;&lt;b&gt;&lt;hr&gt;&lt;/b&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://xyproblem.info/&quot;&gt;The XY Problem&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/4745287/&quot;&gt;软件架构师应该知道的97件事&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/1102259/&quot;&gt;人月神话&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%B2%A1%E6%9C%89%E9%93%B6%E5%BC%B9&quot;&gt;没有银弹&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://automagical.rationalmind.net/2010/08/17/some-lesser-known-truths-about-programming/&quot;&gt;Some lesser known truths about programming&lt;/a&gt;&lt;/p&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-07-16-37669640</guid>
<pubDate>Mon, 16 Jul 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>工程趣闻（三）：臣妾做不到</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-07-13-37669183.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37669183&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;b&gt;哥德尔不完备定理&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-9fd658624931175cc32be0039cebcc68_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;909&quot; data-rawheight=&quot;1327&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-9fd658624931175cc32be0039cebcc68&quot; data-watermark-src=&quot;v2-354786285ed9dd63e2637541cff3959e&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;b&gt;库尔特·哥德尔&lt;/b&gt;（Kurt Friedrich Gödel，1906年4月28日－1978年1月14日），&lt;br&gt;数学家、逻辑学家和哲学家，维也纳学派（维也纳小组）的成员。&lt;br&gt;其最杰出的贡献是哥德尔不完备定理和连续统假设的相对协调性证明。&lt;/p&gt;&lt;p&gt;哥德尔的数学天分极高，他在维也纳大学时本来修读理论物理和基础数学，&lt;br&gt;后来又在汉斯·哈恩的指导下研习数理逻辑、集合论。&lt;br&gt;二十四岁时，完成哥德尔完备性定理，并获得同校博士学位。&lt;/p&gt;&lt;p&gt;在数理逻辑中，哥德尔不完备定理是库尔特·哥德尔于1931年证明并发表的两条定理。&lt;/p&gt;&lt;p&gt;第一条&lt;b&gt;定理&lt;/b&gt;指出：&lt;br&gt;任何相容的形式系统，只要蕴涵皮亚诺算术公理，&lt;br&gt;就可以在其中构造在体系中不能被证明的真命题。&lt;/p&gt;&lt;p&gt;即，通过推演不能得到所有真命题（即体系是不完备的）。&lt;/p&gt;&lt;p&gt;第二条&lt;b&gt;定理&lt;/b&gt;指出：&lt;br&gt;任何相容的形式系统，只要蕴涵皮亚诺算术公理，&lt;br&gt;它就不能用于证明它本身的相容性。&lt;/p&gt;&lt;p&gt;这个结果破坏了数学中一个称为希尔伯特计划的哲学企图。&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-9b36fbaad1834d12671b13ddbb24b02c_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;592&quot; data-rawheight=&quot;189&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-9b36fbaad1834d12671b13ddbb24b02c&quot; data-watermark-src=&quot;v2-124694a4b679357363ee7675bd93e5a3&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;通常的形式系统中, 所有公理构成的集合都是&lt;b&gt;递归集&lt;/b&gt;。&lt;br&gt;而在一阶逻辑中, 所有定理构成的集合 &lt;equation&gt;P&lt;/equation&gt; 是一个递归可枚举集，不是递归集。&lt;/p&gt;&lt;p&gt;由于递归集当且仅当它和它的补集都是递归可枚举集，&lt;br&gt;所以 &lt;equation&gt;P&lt;/equation&gt; 的补集就不是递归可枚举集，否则就与 &lt;equation&gt;P&lt;/equation&gt; 不是递归集矛盾。&lt;/p&gt;&lt;p&gt;递归可枚举集，意味着存在一个算法判定元素&lt;b&gt;属于&lt;/b&gt;集合，&lt;br&gt;但&lt;b&gt;如果元素不属于集合则算法不终止&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;递归集，意味着存在一个&lt;b&gt;总是会终止&lt;/b&gt;的算法，判定元素&lt;b&gt;是否&lt;/b&gt;属于集合。&lt;/p&gt;&lt;p&gt;既然定理集 &lt;equation&gt;P&lt;/equation&gt; 的补集 &lt;equation&gt;P&#39;&lt;/equation&gt; 不是一个递归可枚举集，&lt;br&gt;那么对于一个不可证的命题，就不存在一个算法来判定它属于 &lt;equation&gt;P&#39;&lt;/equation&gt; 。&lt;br&gt;即，存在一个不可证的命题，但没有算法来判定它是不可证的。&lt;/p&gt;&lt;p&gt;然而，它又在 &lt;equation&gt;P&lt;/equation&gt; 之外，用于判定它是否属于P的算法不会终止。&lt;/p&gt;&lt;p&gt;因此，存在一个命题，找不到一个算法来判定它可证，&lt;br&gt;也找不到一个算法来判定它不可证。&lt;/p&gt;&lt;b&gt;&lt;hr&gt;&lt;/b&gt;&lt;h2&gt;&lt;b&gt;关注方法论&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-9b8c3605d505f51c99420e2a969f0e0e_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;400&quot; data-rawheight=&quot;408&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-9b8c3605d505f51c99420e2a969f0e0e&quot; data-watermark-src=&quot;v2-f828ce7b2a8f56df5df12460a4d0b0de&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;b&gt;Maura Thomas&lt;/b&gt;是一个屡获殊荣的国际演说家，&lt;br&gt;同时她还是对个人、企业生产力、注意力、效率方面的教练。&lt;br&gt;她曾指出相比工具而言，技能的重要性&lt;br&gt;——Until You Have Productivity Skills, Productivity Tools Are Useless。&lt;/p&gt;&lt;p&gt;生产力结合了技能和工具两个方面，但大多数情况下，工具只能起辅助作用，&lt;br&gt;&lt;b&gt;工具强化的是已经具备的技能&lt;/b&gt;。&lt;br&gt;如果本身不是一个棒球手，使用一支好的球棒也无济于事。&lt;/p&gt;&lt;p&gt;工匠们很容易犯下的错误就是，总是寄希望于制造工具来解决当前的问题。&lt;br&gt;可是，通常总是先有解决问题的方法，相应的工具才会被制造出来，而不是相反。&lt;br&gt;这个道理大家都知道，但一涉足到软件领域，人们就糊涂起来。&lt;/p&gt;&lt;p&gt;生搬硬套别人的解决方案或者自己造轮子，希望能解决当前的开发效率问题，&lt;br&gt;这不正是工匠们犯下的错误吗？&lt;br&gt;软件只能简化那些可以被自动化的部分，&lt;br&gt;对于那些还没想到解决方案的问题，软件也是无能为力的。&lt;/p&gt;&lt;blockquote&gt;你们看，这只手指节圆润，根有肉，心为虚，真可惜，如此天赋异禀，却任性妄为，流落江湖，终日与污泥相伴，实乃辜负天人，辜负皇恩。吴道玄，如今太上皇召你入宫，我不辞辛苦民间寻访，你却自立坟墓，埋的不是你的名声，而是你的神妙画技。苍天无眼哪，&lt;b&gt;如果我唐安州有幸，生出如此神妙之手，我定能登堂入室，名流千古！&lt;/b&gt;——《画圣》&lt;/blockquote&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-e0befffbc8527ee94d96ef56cec29171_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1240&quot; data-rawheight=&quot;174&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%BA%93%E5%B0%94%E7%89%B9%C2%B7%E5%93%A5%E5%BE%B7%E5%B0%94&quot;&gt;库尔特·哥德尔&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%93%A5%E5%BE%B7%E5%B0%94%E4%B8%8D%E5%AE%8C%E5%A4%87%E5%AE%9A%E7%90%86&quot;&gt;哥德尔不完备定理&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E4%BC%AF%E7%89%B9%E8%AE%A1%E5%88%92&quot;&gt;希尔伯特计划&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92%E5%8F%AF%E6%9E%9A%E4%B8%BE%E9%9B%86%E5%90%88&quot;&gt;递归可枚举集合&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92%E9%9B%86%E5%90%88&quot;&gt;递归集合&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/2364517/&quot;&gt;数理逻辑&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/1291204/&quot;&gt;哥德尔、艾舍尔、巴赫：集异璧之大成&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://hbr.org/2016/08/until-you-have-productivity-skills-productivity-tools-are-useless&quot;&gt;Until You Have Productivity Skills, Productivity Tools Are Useless&lt;/a&gt;&lt;/p&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-07-13-37669183</guid>
<pubDate>Fri, 13 Jul 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>工程趣闻（二）：检验假设</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-07-09-37668713.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37668713&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;b&gt;科学方法&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-22258c043521d21264720c056115cb59_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;306&quot; data-rawheight=&quot;432&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-22258c043521d21264720c056115cb59&quot; data-watermark-src=&quot;v2-98b2fe5b3e64ddea88410e56d5c3df13&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;科学方法是一种有系统地寻求知识的程序，涉及了以下几个步骤：&lt;br&gt;（1）细致的观察真实世界的特点，通常还要有精确的测量&lt;br&gt;（2）根据观察结果提出假设模型&lt;br&gt;（3）根据模型预测未来的事件&lt;br&gt;（4）继续观察&lt;b&gt;并核实预测的准确性&lt;/b&gt;&lt;br&gt;（5）如此反复直到确认预测和观察一致&lt;/p&gt;&lt;p&gt;科学方法的一条关键原则就是我们所设计的实验必须是&lt;b&gt;可重现的&lt;/b&gt;，&lt;br&gt;这样他人也可以自己验证假设的真实性。&lt;br&gt;所有的假设也必须是&lt;b&gt;可证伪的&lt;/b&gt;，&lt;br&gt;这样我们才能确认某个假设是错误的（并需要修正）。&lt;/p&gt;&lt;p&gt;正如爱因斯坦的一句名言所说：&lt;br&gt;“再多的实验也不一定能够证明我是对的，但只需要一个实验就能证明我是错的。”&lt;br&gt;我们永远也没法知道某个假设是否绝对正确，我们只能验证它和我们的观察的一致性。&lt;/p&gt;&lt;p&gt;不坚持科学方法的人们，容易在第（4）步误入歧途，&lt;br&gt;他们提出模型后不去检验，活在想象的世界中。&lt;/p&gt;&lt;p&gt;常有的表现是，“我推翻了XX理论”。&lt;br&gt;而本来“XX理论”就是一个&lt;b&gt;模型&lt;/b&gt;而已，&lt;b&gt;找到不适用性是迟早的事。&lt;/b&gt;&lt;br&gt;只是推翻以后，能否解释更多“XX理论”不可准确解释的现象才是重要的。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;相容性&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-289cd3b8124e17d87403c760b95bf168_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;449&quot; data-rawheight=&quot;327&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-289cd3b8124e17d87403c760b95bf168&quot; data-watermark-src=&quot;v2-e79b7be8e17f35a93f3b2f9edc25eb06&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;商业思想家&lt;b&gt;罗杰·马丁&lt;/b&gt;，曾采访过50多位成功的领导者，&lt;br&gt;最终发现，他们大都具有一个非同寻常的特征。&lt;/p&gt;&lt;p&gt;他们愿意而且能够同时接纳两种互相冲突的观点，&lt;br&gt;在碰到意见冲突时，他们既不慌张，也不是简单的进行非此即彼的取舍，&lt;br&gt;而是另辟蹊径，提出一个新思路，既包含了原先两种观点的内容，&lt;br&gt;又比原先两种观点胜出一筹。&lt;/p&gt;&lt;p&gt;罗杰·马丁把这种思考和综合的过程，称为&lt;b&gt;整合性思维&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;70多年前，美国小说家&lt;b&gt;斯科特·菲茨杰拉德&lt;/b&gt;也指出过，&lt;br&gt;真正智者的特点之一就是能同时容下两个相对立的想法，但仍然保持行动能力。&lt;/p&gt;&lt;p&gt;我国古代，三国时期魏国大臣，政治家，军事家&lt;b&gt;司马懿&lt;/b&gt;，&lt;br&gt;在教育孩子时，也曾说过：&lt;br&gt;“夫处世之道，亦即应变之术，岂可&lt;b&gt;偏执一端&lt;/b&gt;；用兵之道亦然如此，皆贵在&lt;b&gt;随机应变&lt;/b&gt;。”&lt;/p&gt;&lt;p&gt;以上例子表明，不能接受矛盾的想法是人之常情。&lt;br&gt;人们倾向于对同一件事情，只得到一种结论。&lt;/p&gt;&lt;p&gt;可是，如何成为智者，如何全面的看待问题呢？&lt;br&gt;科学方法表明，&lt;b&gt;我们需要检验这些想法的前提条件&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;大前研一曾经说过，&lt;br&gt;“解决问题的能力，就是为印证假设不辞劳苦的行动力”。&lt;br&gt;是啊，&lt;b&gt;真理不是陈述句，而是条件性为真的判断句&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;能相信未被证明的假设，会避开经验对我们的限制。&lt;br&gt;当别人表述某个论点的时候，很难同时携带着该论点的证明，&lt;br&gt;如果转而让他去证明这个论点，就会打断他的思路，证明完之后还要再跳回来。&lt;/p&gt;&lt;p&gt;不幸的是，现场的不充分的思考，根本不具备清晰证明某个论点的条件，&lt;br&gt;这也是为什么会议容易被无限延长的原因。&lt;/p&gt;&lt;p&gt;一个好的权衡之计就是，先让分享者把事情讲完，&lt;br&gt;哪怕其中包含了很多值得怀疑的论点，&lt;br&gt;我们先记录下来，最后大家一起，&lt;b&gt;用行动去检验它们&lt;/b&gt;。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%A7%91%E5%AD%A6%E6%96%B9%E6%B3%95&quot;&gt;科学方法&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%8F%AF%E8%AF%81%E4%BC%AA%E6%80%A7&quot;&gt;可证伪性&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/3138847/&quot;&gt;思考的技术&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://wenku.baidu.com/view/1d94574dfe4733687e21aa8b.html&quot;&gt;整合性思维：成功领导人的思考方式&lt;/a&gt;&lt;/p&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-07-09-37668713</guid>
<pubDate>Mon, 09 Jul 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>工程趣闻（一）：如何落子</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-07-06-37668452.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37668452&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;b&gt;未来是不可预测的&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-99253a83c221bc2419f45513f715f214_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;367&quot; data-rawheight=&quot;367&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-99253a83c221bc2419f45513f715f214&quot; data-watermark-src=&quot;v2-c7427e12654c3c2e0f13bfe2b81a1659&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;b&gt;定式&lt;/b&gt;，一般是指围棋中，经过棋手们长久以来的经验累积，&lt;br&gt;而形成在某些情况下双方都会依循的&lt;b&gt;固定下法&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;一般通常发生在布局阶段的角落地区，&lt;br&gt;但有些在中盘时的某些固定下法，也被称作中盘定式。&lt;br&gt;围棋定式的总数在一万种以上且仍不断增加中，但常用的仅约数百种，&lt;br&gt;而且随着各时代对围棋的见解不同，旧定式也有被修正的可能。&lt;/p&gt;&lt;p&gt;软件工程师每天的工作，像极了围棋比赛中的落子，&lt;br&gt;软件工程师们面对的都是自己目前不知道答案的问题，&lt;br&gt;他们只能凭经验得到大致的方向，&lt;br&gt;而且，&lt;b&gt;每次决定都会对以后的局势产生影响。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;然而，我们有什么理由相信历史经验的正确性，&lt;br&gt;过去的经验根本不适合现在这个从未被遇到过的问题啊，&lt;br&gt;贪心的选择目前看到的最优解，真的好吗？&lt;/p&gt;&lt;p&gt;也有不少人怪责前人挖坑后人遭殃，&lt;br&gt;那是站在现在的角度来看的。&lt;br&gt;无论采取什么办法，未来还是会有未料到的情况出现，&lt;br&gt;如果换做我们，该怎么做呢？&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;变化只能被适应&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-c4bfcdeed4a8222f14e2677ff2aeb6ca_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;338&quot; data-rawheight=&quot;350&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-c4bfcdeed4a8222f14e2677ff2aeb6ca&quot; data-watermark-src=&quot;v2-3b281edcc8fb552aec2e7d1197077087&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;b&gt;刻舟求剑&lt;/b&gt;是《吕氏春秋·察今》中记述的一则寓言。&lt;/p&gt;&lt;p&gt;说的是楚国有人坐船渡河时，不慎把剑掉入江中，&lt;br&gt;他在舟上刻下记号，说：“这是我把剑掉下的地方。”&lt;br&gt;当舟停驶时，他才沿着记号跳入河中找剑，遍寻不获。&lt;/p&gt;&lt;p&gt;该寓言劝勉为政者要明白世事在变，若不知改革，就无法治国，&lt;br&gt;后引申为不懂变通、&lt;b&gt;墨守成规&lt;/b&gt;之意。&lt;/p&gt;&lt;p&gt;软件工程师讨厌需求变更，&lt;b&gt;就好像需求不应该变更一样，&lt;/b&gt;&lt;br&gt;这是不切实际的，不符合瞬息万变的客观世界。&lt;/p&gt;&lt;p&gt;因此，极限编程的支持者们，认为软件需求的不断变化是&lt;b&gt;很自然的现象&lt;/b&gt;，&lt;br&gt;是软件项目开发中不可避免的，也是应该欣然接受的现象。&lt;br&gt;他们相信，和传统的在项目起始阶段定义好所有需求再费尽心思的控制变化的方法相比，&lt;br&gt;有能力在项目周期的任何阶段去&lt;b&gt;适应变化&lt;/b&gt;，将是更加现实更加有效的方法。&lt;/p&gt;&lt;p&gt;我们都想一劳永逸，软件发布之后，就再也不想动它了，&lt;br&gt;可能这种认识本身就有问题。&lt;br&gt;软件这种解决方案，能不断的与问题一起生长，可能这才是它的全貌吧。&lt;br&gt;刻在光盘上的，只是这个&lt;b&gt;生命体&lt;/b&gt;在某个瞬间的照片罢了。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%AE%9A%E5%BC%8F&quot;&gt;定式&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%B4%AA%E5%BF%83%E6%B3%95&quot;&gt;贪心法&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%88%BB%E8%88%9F%E6%B1%82%E5%8A%8D&quot;&gt;刻舟求剑&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%9E%81%E9%99%90%E7%BC%96%E7%A8%8B&quot;&gt;极限编程&lt;/a&gt;&lt;/p&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-07-06-37668452</guid>
<pubDate>Fri, 06 Jul 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>编程哲学（九）：让技能被使用</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-07-02-37657557.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37657557&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-585f8e8e7c060859e61937dc127d8e33_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;600&quot; data-rawheight=&quot;441&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-585f8e8e7c060859e61937dc127d8e33&quot; data-watermark-src=&quot;v2-a9a7983baacffe10c7d5bd5e28bd6546&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;随着信息化社会的发展，人们接触到的&lt;b&gt;信息呈爆炸式的增长&lt;/b&gt;，&lt;br&gt;我们获取知识的途径也越来越多了，网络中的知识更是取之不尽用之不竭。&lt;/p&gt;&lt;p&gt;我们每天都要学习，主动的或者被动的，但是人们的记忆力总是有限的。&lt;br&gt;人们常说，“我的脑袋实在装不下了”。&lt;br&gt;就好像我们记住了新知识，旧知识就不得不被忘掉一样。&lt;/p&gt;&lt;p&gt;难道不是吗？我们一直在学习新技术，&lt;br&gt;结果导致大脑超负荷运转，忘记了以前熟练掌握的内容，&lt;br&gt;自己非但没有进步，反而退步了。&lt;/p&gt;&lt;p&gt;其实不然，&lt;br&gt;因为学习不是遗忘旧知识的原因，&lt;b&gt;不再使用那些旧知识了&lt;/b&gt;才是。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;不要怕忘记&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-edaec699b6f1645b03090ce91386fbc8_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;312&quot; data-rawheight=&quot;220&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-edaec699b6f1645b03090ce91386fbc8&quot; data-watermark-src=&quot;v2-99a874788be4d9c6e70c2f2bd7deaad2&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;心理学家&lt;b&gt;赫尔曼·艾宾浩斯&lt;/b&gt;通过实验，得到了一条记忆曲线，称为&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%81%97%E5%BF%98%E6%9B%B2%E7%BA%BF&quot;&gt;遗忘曲线&lt;/a&gt;。&lt;br&gt;它表明了记忆的保持与时长之间的关系。&lt;/p&gt;&lt;p&gt;我们看到，即使不学习，旧知识也会被慢慢忘记的，&lt;br&gt;并不是新知识“排挤”出了旧知识，而是&lt;b&gt;旧知识被自然而然的忘记了&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;要想保持对旧知识的记忆，唯一的办法就是&lt;b&gt;复习&lt;/b&gt;。&lt;br&gt;我们需要经常性的回顾那些已经掌握了的，但是目前暂时不用的知识。&lt;br&gt;以免在用到的时候，它已经变得不可用了。&lt;/p&gt;&lt;p&gt;一个演奏家，应该在&lt;b&gt;平时&lt;/b&gt;进行多种训练，从而保证演出的品质，&lt;br&gt;&lt;b&gt;而不是把舞台当做训练场&lt;/b&gt;，用以巩固演奏技术。&lt;/p&gt;&lt;p&gt;程序员也是这样，日常工作并不会保证自己不忘记已经学会的编程技能，&lt;br&gt;经常进行一些恢复性的训练同样也是必要的。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;不要懒于实践&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-5deb5b39eb7b4b701e9aa41d3dde233a_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;520&quot; data-rawheight=&quot;181&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-5deb5b39eb7b4b701e9aa41d3dde233a&quot; data-watermark-src=&quot;v2-5fc514936f49a376b6b123a5f1c16376&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;有很多技能，我们学了很久了，但总是不能掌握它。&lt;br&gt;这是什么原因呢？&lt;/p&gt;&lt;p&gt;答案可能是，缺乏实践。&lt;br&gt;我以前看过很多篇文章提到过，“动手去实践”，都不以为然，&lt;br&gt;现在发现，“动手去实践”才是掌握一项新技能的秘诀。&lt;/p&gt;&lt;p&gt;新技术只有被不断的使用，我们才能学会&lt;b&gt;如何用它解决问题&lt;/b&gt;。&lt;br&gt;盯着它看，最终也只是&lt;b&gt;知道它可以解决问题&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;“知道可以解决问题”属于“了解”，而“能用它解决问题”就是“掌握”了，&lt;br&gt;如果你发现始终掌握不了一门新技术，很可能是因为你没有真正去使用过它。&lt;/p&gt;&lt;p&gt;要想掌握一门新技术，就要想办法去&lt;b&gt;用它&lt;/b&gt;。&lt;br&gt;编译原理，操作系统，计算机图形学以及数据库，人们戏称为“程序员的四大浪漫”，&lt;br&gt;他们很难被掌握，是因为普通程序员总是缺乏直接的使用场景。&lt;/p&gt;&lt;p&gt;我们不会经常性的去写一个编译器，或者实现一个操作系统，&lt;br&gt;只是看别人是怎么做的，就很难掌握它，&lt;br&gt;自己没有踩过的坑，就没有切身的体会，以后也无从避免再次进入陷阱。&lt;/p&gt;&lt;p&gt;因此，要想真的掌握一门技术，就得去使用它，&lt;br&gt;创造场景，&lt;b&gt;弄脏双手&lt;/b&gt;，义无反顾的去使用它。&lt;/p&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-07-02-37657557</guid>
<pubDate>Mon, 02 Jul 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>编程哲学（八）：偿还不起的技术债务</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-06-29-37657098.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37657098&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-160d7c20a4dd2c0a21621f86fb02d2de_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;506&quot; data-rawheight=&quot;317&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-160d7c20a4dd2c0a21621f86fb02d2de&quot; data-watermark-src=&quot;v2-8b11a4a63fab3515bcb1f104df46f49a&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;h2&gt;&lt;b&gt;修改代码的风险&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/4262627/&quot;&gt;重构&lt;/a&gt;，就是在&lt;b&gt;不改变外部行为&lt;/b&gt;的前提下，有条不紊地改善代码。&lt;br&gt;为了保障软件的外部行为，唯一的办法就是通过&lt;b&gt;测试&lt;/b&gt;。&lt;br&gt;因此，重构是建立在&lt;a href=&quot;https://book.douban.com/subject/1230036/&quot;&gt;完备的测试覆盖&lt;/a&gt;基础之上的。&lt;/p&gt;&lt;p&gt;如果我们不能保证修改后的代码还能提供相同的功能，&lt;br&gt;那么这种修改就是&lt;b&gt;错误的&lt;/b&gt;，会给用户带来极大的损失。&lt;br&gt;在有风险意识的团队中，不会同意发生&lt;a href=&quot;https://book.douban.com/subject/11614538/&quot;&gt;这样的修改&lt;/a&gt;。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;什么是所有的功能&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;一个涉及几百个页面的网站，多个角色处于不同状态的用户都可以访问它，&lt;br&gt;那么它总共提供了哪些功能？&lt;/p&gt;&lt;p&gt;页面之间的跳转，以及同一个网页为他们展示的不同功能，都是业务逻辑的细节表现。&lt;br&gt;没有人知道“&lt;b&gt;所有的功能&lt;/b&gt;”指的是什么，因为太复杂。&lt;/p&gt;&lt;p&gt;代码中的某个分支，看起来似乎用不到，但是可能就是有那百分之一的用户会使用它。&lt;br&gt;另外某处，为什么这里要向一个莫名的服务器发送请求，很可能必不可少。&lt;/p&gt;&lt;p&gt;某个类到底有没有人在使用它，我们只知道自己的依赖，很难知道谁依赖了我们。&lt;br&gt;如果不确定谁在以什么方式使用它，就&lt;b&gt;不能进行修改&lt;/b&gt;。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;偿还周期&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;哪怕我们已经有了完备的测试，如果重构所花费的时间周期太长，还是很危险，&lt;br&gt;我们不得不在这段时间内，同时应付&lt;b&gt;重构工作&lt;/b&gt;和&lt;b&gt;新功能的开发&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;框架迁移就是这样的一个典型例子，如果我们打算把旧框架的功能迁移到新框架，&lt;br&gt;那么几乎所有的功能，都不得不在新框架下重新开发并测试一遍，&lt;br&gt;新需求也不得不在旧框架中完成，并且最终还得再迁移过去。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;高利贷&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;我们很容易低估重构的成本，&lt;br&gt;假设框架迁移需要 &lt;equation&gt;n&lt;/equation&gt; 个“&lt;a href=&quot;https://book.douban.com/subject/2230248/&quot;&gt;人日&lt;/a&gt;”的工作量，团队中有 &lt;equation&gt;x&lt;/equation&gt; 人，需要 &lt;equation&gt;y&lt;/equation&gt; 天才能把事情做完，&lt;br&gt;则 &lt;equation&gt;n&lt;/equation&gt; 不等于 &lt;equation&gt;xy&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;因为这 &lt;equation&gt;y&lt;/equation&gt; 天中会有新功能要开发，这些新功能需要 &lt;equation&gt;xy&lt;/equation&gt; 人日的工作量，&lt;br&gt;于是，人们必须加班，假设人们比原来努力 &lt;equation&gt;t&lt;/equation&gt; 倍，&lt;br&gt;则， &lt;equation&gt;n+xy=txy&lt;/equation&gt; ，因此 &lt;equation&gt;xy=n/(t-1)&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;如果以前已经在加班了，那么我只能说，真是&lt;b&gt;太不幸了&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;如果框架迁移需要100人日，有5个人来完成它，他们都用1.5倍的努力进行工作，&lt;br&gt;则事实上需要40天才能完成，而不是20天，居然比原来估算的时间多了一倍。&lt;/p&gt;&lt;p&gt;这40天中，每人每天必须想办法比原来多做一半的事情，&lt;br&gt;我们知道，就算加班其实也很难达到这个目标。&lt;/p&gt;&lt;p&gt;这就是技术负债的利滚利效应，也是著名的&lt;a href=&quot;http://baike.baidu.com/item/%E7%89%9B%E9%A1%BF%E9%97%AE%E9%A2%98&quot;&gt;牛顿问题&lt;/a&gt;。&lt;br&gt;&lt;b&gt;偿还周期越长，所需偿还的债务总量就越多。&lt;/b&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;试错的代价&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;重构其实很难进行下去，即使进行下去了也做的很不彻底，&lt;br&gt;项目中混杂了各个时代的代码遗骸，战场从来没有干净过。&lt;/p&gt;&lt;p&gt;一开始就寄希望于用重构来逐渐解决问题，可能是有害的，&lt;br&gt;代码中会留下很多做到一半的事情，开发者必须小心谨慎的理解所有技术细节。&lt;/p&gt;&lt;p&gt;快速试错能反映出这种侥幸心理，虽然快速试错的目的是为了降低最终出错的代价，&lt;br&gt;但是&lt;b&gt;实际上很难承认自己的确是错了&lt;/b&gt;，人们会想尽办法弥补它，&lt;br&gt;于是，等我们看到失败时，再退出已经来不及了。&lt;/p&gt;&lt;p&gt;快速试错通常是一个借口，掩饰自己还没有想清楚它。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/4262627/&quot;&gt;重构：改善既有代码的设计&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/1230036/&quot;&gt;测试驱动开发&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/11614538/&quot;&gt;程序员的职业素养&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/2230248/&quot;&gt;人月神话&lt;/a&gt;&lt;/p&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-06-29-37657098</guid>
<pubDate>Fri, 29 Jun 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>编程哲学（七）：我写不出好代码</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-06-26-37656839.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37656839&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-a9fc4aa95a75e68340a32e7967b1ed56_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;499&quot; data-rawheight=&quot;313&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-a9fc4aa95a75e68340a32e7967b1ed56&quot; data-watermark-src=&quot;v2-bf599426cb467b86acde22905e7902af&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;h2&gt;&lt;b&gt;我们在为别人编程&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;编程，是一个解决问题的过程，&lt;br&gt;通过对问题本身进行分析，考虑目前可用的计算资源，&lt;br&gt;整合出一套自动化的解决问题的步骤，就是程序。&lt;/p&gt;&lt;p&gt;在这个过程中，我们需要发现规律，找到普适性，&lt;br&gt;以降低软件的成本，覆盖大部分场景，&lt;br&gt;这是我们每天要做的事情。&lt;/p&gt;&lt;p&gt;&lt;b&gt;我们很少为自己编程，&lt;/b&gt;&lt;br&gt;我们做软件，并不是为了解决自己的问题，而是帮用户，&lt;br&gt;我们提供了一个代码库，也不是为了自己，而是因为别人要用它。&lt;/p&gt;&lt;p&gt;因此，仅仅创造一个解决方案，这并不够，&lt;br&gt;还得告诉别人，&lt;b&gt;该如何使用它，&lt;/b&gt;&lt;br&gt;&lt;b&gt;编程的艺术或许在于如何提供功能。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;这是一件很容易被忽视的事情，&lt;br&gt;解决方案的创造者，默认是会使用它的，所以很难体会用户的心情。&lt;br&gt;那种灵活到几乎做什么都行，却没有一种方法可行的感受。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;看似简单的事情&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;天才程序员写的代码库很简单，可重复使用，且功能强大。&lt;br&gt;我们写的代码库比较复杂，没有人知道该如何使用它。&lt;/p&gt;&lt;p&gt;这并不是一个巧合，&lt;br&gt;并不是我们刚好遇到了一件麻烦的事情，&lt;br&gt;而是&lt;b&gt;我们本来就不知道如何写出好用的代码，我们写不出来。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;我们知道漂亮的代码长什么样，知道如何使用它们，&lt;br&gt;并不意味着我们也可以写出这样的代码。&lt;br&gt;脍炙人口的文章人们都想写出来，可是却只有少数人能够办到。&lt;/p&gt;&lt;p&gt;这需要长期的训练以积累经验，需要仔细的斟酌，&lt;br&gt;需要&lt;b&gt;考虑如何提供一项功能&lt;/b&gt;，而不仅仅是实现它，&lt;br&gt;需要把自己当做对系统一无所知，然后再教会自己。&lt;/p&gt;&lt;p&gt;大部分人都不擅长这一点，&lt;br&gt;毕竟考虑功能该被如何使用，与考虑功能该被如何实现，是两件不同的事情。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;无微不至的软件服务&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;如果我们没办法写出那么好的代码，那就只能多提供一些帮助信息了。&lt;/p&gt;&lt;p&gt;我们不得不写上足够多的&lt;b&gt;注释&lt;/b&gt;和&lt;b&gt;文档&lt;/b&gt;，&lt;br&gt;解释我们为什么要这么做，以及软件的用法。&lt;br&gt;解释我们正在解决的问题，以及它存在的原因。&lt;br&gt;这些注释和文档还得与时俱进，随着代码的发展而更新。&lt;/p&gt;&lt;p&gt;我们觉得这些是多余的，是因为我们是代码的作者，&lt;br&gt;而用户如果没有它们，就寸步难行，&lt;br&gt;我们需要设计一条学习曲线，让用户慢慢的理解我们的意图。&lt;/p&gt;&lt;p&gt;商业级的软件服务需要&lt;b&gt;在编码之外做出很多额外的努力&lt;/b&gt;，&lt;br&gt;除了全面的测试之外，还要有详尽的注释和丰富的文档，&lt;br&gt;我想这才是和业余项目的根本区别吧。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/79166/apache-foundation-ceo-decades-views&quot;&gt;屋中的大象&lt;/a&gt;&lt;/p&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-06-26-37656839</guid>
<pubDate>Tue, 26 Jun 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>编程哲学（六）：从正确归因到个人影响力</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-06-22-37656537.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37656537&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;b&gt;归因问题&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-6fe64e4355dea168d4bafe593f0d5e18_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;542&quot; data-rawheight=&quot;324&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-6fe64e4355dea168d4bafe593f0d5e18&quot; data-watermark-src=&quot;v2-d90a5a68977b9787a05a631937d18708&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;b&gt;归因理论&lt;/b&gt;是社会心理学研究的理论之一，它描述了我们怎样解释人们的行为。&lt;/p&gt;&lt;p&gt;我们总是试图将某个人的行为或者某个结果，&lt;br&gt;归因于性格（内因）或情境（外因）。&lt;/p&gt;&lt;p&gt;我们无休止的分析和讨论&lt;b&gt;事情为什么发生&lt;/b&gt;，&lt;br&gt;特别是当我们经历一些消极事件或者预期之外的事件的时候。&lt;/p&gt;&lt;p&gt;归因理论的研究者发现，人们在归因时存在一个普遍性的问题，&lt;br&gt;当我们解释他人的行为时，会低估&lt;b&gt;环境&lt;/b&gt;造成的影响，而高估&lt;b&gt;个人的特质和态度&lt;/b&gt;所造成的影响。这种个体在归因时低估情境因素作用的倾向，被称为&lt;b&gt;基本归因错误&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;就像当我们看一个演员出演正面或反面角色时，&lt;br&gt;尽管我们知道这些都不是真实的，&lt;br&gt;但我们却很容易固执的认为这就是那个人本质的真实反映。&lt;/p&gt;&lt;p&gt;&lt;b&gt;人们习惯性的将自己的失误归因于环境，而将别人的失误归因于他们的内部秉性。&lt;/b&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;改变他人 vs 改变环境&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-376c76249fe7f30b58bb35ff1f571050_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;550&quot; data-rawheight=&quot;464&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-376c76249fe7f30b58bb35ff1f571050&quot; data-watermark-src=&quot;v2-ccb1dda6328405bdb18be57b1be9deed&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;想要改变他人，是人们表达对环境不适的正常反应。&lt;br&gt;然而，对每个人来说，本身也是自己所处环境的一部分。&lt;br&gt;因此，想要改变他人，也是人们缺乏行动力，没办法行动起来的正常反应。&lt;/p&gt;&lt;p&gt;不幸的是，&lt;b&gt;试图改变他人，其实就是互相伤害。&lt;/b&gt;&lt;br&gt;有意无意的想改变对方，是矛盾的根源。&lt;/p&gt;&lt;p&gt;改变别人是不可能的，况且&lt;b&gt;别人也不认为自己需要作出改变。&lt;/b&gt;&lt;br&gt;所以，如果对环境感到不适的时候，&lt;br&gt;应该着手从自己做起，做好想让别人去做的事情。&lt;/p&gt;&lt;p&gt;一旦行动起来，自身所处的局部环境就自然发生了改变。&lt;br&gt;局部环境改变了，才有可能通过环境&lt;b&gt;影响&lt;/b&gt;他人。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;从抱怨到合作&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-04ed55edb879971ba4ed21b11f2bdba2_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;663&quot; data-rawheight=&quot;442&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-04ed55edb879971ba4ed21b11f2bdba2&quot; data-watermark-src=&quot;v2-d5c8c89251ec202ea7fd5acf4cdaa2d1&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;不是别人没有把事情做好，而是我们这些人&lt;b&gt;都没有把事情做好&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;在软件开发中，人们经常为了完成更多的功能，不得已而降低软件的可维护性和可用性，&lt;br&gt;其表现形式就是代码缺少注释和文档。&lt;/p&gt;&lt;p&gt;那么应该由谁来完成这些注释和文档的编写工作呢？&lt;br&gt;很显然代码的作者很难逃避这个责任，&lt;br&gt;但我想说这并不是一个人的责任，相反，整个团队应该&lt;b&gt;共同担负&lt;/b&gt;这个责任。&lt;/p&gt;&lt;p&gt;因为不是一个人而是一个团队，交付了软件产品。&lt;br&gt;我们经常对别人能做而未做，自己也能做却不想做的事情，进行抱怨。&lt;/p&gt;&lt;p&gt;避免抱怨的最好方法就是，行动起来，&lt;br&gt;从自己能做的事情做起，与团队成员紧密的合作。&lt;/p&gt;&lt;p&gt;只有在竞争中才纠结谁对谁错，合作的时候，只看&lt;b&gt;共同的表现结果&lt;/b&gt;。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/1476651/&quot;&gt;社会心理学（第八版）- 戴维·迈尔斯&lt;/a&gt;&lt;/p&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-06-22-37656537</guid>
<pubDate>Fri, 22 Jun 2018 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
