<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>业余程序员的个人修养</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/</link>
<description></description>
<language>zh-cn</language>
<lastBuildDate>Sat, 14 Jul 2018 05:32:41 +0800</lastBuildDate>
<item>
<title>工程趣闻（三）：臣妾做不到</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-07-13-37669183.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37669183&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;b&gt;哥德尔不完备定理&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-9fd658624931175cc32be0039cebcc68_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;909&quot; data-rawheight=&quot;1327&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-9fd658624931175cc32be0039cebcc68&quot; data-watermark-src=&quot;v2-354786285ed9dd63e2637541cff3959e&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;b&gt;库尔特·哥德尔&lt;/b&gt;（Kurt Friedrich Gödel，1906年4月28日－1978年1月14日），&lt;br&gt;数学家、逻辑学家和哲学家，维也纳学派（维也纳小组）的成员。&lt;br&gt;其最杰出的贡献是哥德尔不完备定理和连续统假设的相对协调性证明。&lt;/p&gt;&lt;p&gt;哥德尔的数学天分极高，他在维也纳大学时本来修读理论物理和基础数学，&lt;br&gt;后来又在汉斯·哈恩的指导下研习数理逻辑、集合论。&lt;br&gt;二十四岁时，完成哥德尔完备性定理，并获得同校博士学位。&lt;/p&gt;&lt;p&gt;在数理逻辑中，哥德尔不完备定理是库尔特·哥德尔于1931年证明并发表的两条定理。&lt;/p&gt;&lt;p&gt;第一条&lt;b&gt;定理&lt;/b&gt;指出：&lt;br&gt;任何相容的形式系统，只要蕴涵皮亚诺算术公理，&lt;br&gt;就可以在其中构造在体系中不能被证明的真命题。&lt;/p&gt;&lt;p&gt;即，通过推演不能得到所有真命题（即体系是不完备的）。&lt;/p&gt;&lt;p&gt;第二条&lt;b&gt;定理&lt;/b&gt;指出：&lt;br&gt;任何相容的形式系统，只要蕴涵皮亚诺算术公理，&lt;br&gt;它就不能用于证明它本身的相容性。&lt;/p&gt;&lt;p&gt;这个结果破坏了数学中一个称为希尔伯特计划的哲学企图。&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-9b36fbaad1834d12671b13ddbb24b02c_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;592&quot; data-rawheight=&quot;189&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-9b36fbaad1834d12671b13ddbb24b02c&quot; data-watermark-src=&quot;v2-124694a4b679357363ee7675bd93e5a3&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;通常的形式系统中, 所有公理构成的集合都是&lt;b&gt;递归集&lt;/b&gt;。&lt;br&gt;而在一阶逻辑中, 所有定理构成的集合 &lt;equation&gt;P&lt;/equation&gt; 是一个递归可枚举集，不是递归集。&lt;/p&gt;&lt;p&gt;由于递归集当且仅当它和它的补集都是递归可枚举集，&lt;br&gt;所以 &lt;equation&gt;P&lt;/equation&gt; 的补集就不是递归可枚举集，否则就与 &lt;equation&gt;P&lt;/equation&gt; 不是递归集矛盾。&lt;/p&gt;&lt;p&gt;递归可枚举集，意味着存在一个算法判定元素&lt;b&gt;属于&lt;/b&gt;集合，&lt;br&gt;但&lt;b&gt;如果元素不属于集合则算法不终止&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;递归集，意味着存在一个&lt;b&gt;总是会终止&lt;/b&gt;的算法，判定元素&lt;b&gt;是否&lt;/b&gt;属于集合。&lt;/p&gt;&lt;p&gt;既然定理集 &lt;equation&gt;P&lt;/equation&gt; 的补集 &lt;equation&gt;P&#39;&lt;/equation&gt; 不是一个递归可枚举集，&lt;br&gt;那么对于一个不可证的命题，就不存在一个算法来判定它属于 &lt;equation&gt;P&#39;&lt;/equation&gt; 。&lt;br&gt;即，存在一个不可证的命题，但没有算法来判定它是不可证的。&lt;/p&gt;&lt;p&gt;然而，它又在 &lt;equation&gt;P&lt;/equation&gt; 之外，用于判定它是否属于P的算法不会终止。&lt;/p&gt;&lt;p&gt;因此，存在一个命题，找不到一个算法来判定它可证，&lt;br&gt;也找不到一个算法来判定它不可证。&lt;/p&gt;&lt;b&gt;&lt;hr&gt;&lt;/b&gt;&lt;h2&gt;&lt;b&gt;关注方法论&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-9b8c3605d505f51c99420e2a969f0e0e_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;400&quot; data-rawheight=&quot;408&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-9b8c3605d505f51c99420e2a969f0e0e&quot; data-watermark-src=&quot;v2-f828ce7b2a8f56df5df12460a4d0b0de&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;b&gt;Maura Thomas&lt;/b&gt;是一个屡获殊荣的国际演说家，&lt;br&gt;同时她还是对个人、企业生产力、注意力、效率方面的教练。&lt;br&gt;她曾指出相比工具而言，技能的重要性&lt;br&gt;——Until You Have Productivity Skills, Productivity Tools Are Useless。&lt;/p&gt;&lt;p&gt;生产力结合了技能和工具两个方面，但大多数情况下，工具只能起辅助作用，&lt;br&gt;&lt;b&gt;工具强化的是已经具备的技能&lt;/b&gt;。&lt;br&gt;如果本身不是一个棒球手，使用一支好的球棒也无济于事。&lt;/p&gt;&lt;p&gt;工匠们很容易犯下的错误就是，总是寄希望于制造工具来解决当前的问题。&lt;br&gt;可是，通常总是先有解决问题的方法，相应的工具才会被制造出来，而不是相反。&lt;br&gt;这个道理大家都知道，但一涉足到软件领域，人们就糊涂起来。&lt;/p&gt;&lt;p&gt;生搬硬套别人的解决方案或者自己造轮子，希望能解决当前的开发效率问题，&lt;br&gt;这不正是工匠们犯下的错误吗？&lt;br&gt;软件只能简化那些可以被自动化的部分，&lt;br&gt;对于那些还没想到解决方案的问题，软件也是无能为力的。&lt;/p&gt;&lt;blockquote&gt;你们看，这只手指节圆润，根有肉，心为虚，真可惜，如此天赋异禀，却任性妄为，流落江湖，终日与污泥相伴，实乃辜负天人，辜负皇恩。吴道玄，如今太上皇召你入宫，我不辞辛苦民间寻访，你却自立坟墓，埋的不是你的名声，而是你的神妙画技。苍天无眼哪，&lt;b&gt;如果我唐安州有幸，生出如此神妙之手，我定能登堂入室，名流千古！&lt;/b&gt;——《画圣》&lt;/blockquote&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-e0befffbc8527ee94d96ef56cec29171_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1240&quot; data-rawheight=&quot;174&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%BA%93%E5%B0%94%E7%89%B9%C2%B7%E5%93%A5%E5%BE%B7%E5%B0%94&quot;&gt;库尔特·哥德尔&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%93%A5%E5%BE%B7%E5%B0%94%E4%B8%8D%E5%AE%8C%E5%A4%87%E5%AE%9A%E7%90%86&quot;&gt;哥德尔不完备定理&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E4%BC%AF%E7%89%B9%E8%AE%A1%E5%88%92&quot;&gt;希尔伯特计划&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92%E5%8F%AF%E6%9E%9A%E4%B8%BE%E9%9B%86%E5%90%88&quot;&gt;递归可枚举集合&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92%E9%9B%86%E5%90%88&quot;&gt;递归集合&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/2364517/&quot;&gt;数理逻辑&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/1291204/&quot;&gt;哥德尔、艾舍尔、巴赫：集异璧之大成&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://hbr.org/2016/08/until-you-have-productivity-skills-productivity-tools-are-useless&quot;&gt;Until You Have Productivity Skills, Productivity Tools Are Useless&lt;/a&gt;&lt;/p&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-07-13-37669183</guid>
<pubDate>Fri, 13 Jul 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>工程趣闻（二）：检验假设</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-07-09-37668713.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37668713&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;b&gt;科学方法&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-22258c043521d21264720c056115cb59_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;306&quot; data-rawheight=&quot;432&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-22258c043521d21264720c056115cb59&quot; data-watermark-src=&quot;v2-98b2fe5b3e64ddea88410e56d5c3df13&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;科学方法是一种有系统地寻求知识的程序，涉及了以下几个步骤：&lt;br&gt;（1）细致的观察真实世界的特点，通常还要有精确的测量&lt;br&gt;（2）根据观察结果提出假设模型&lt;br&gt;（3）根据模型预测未来的事件&lt;br&gt;（4）继续观察&lt;b&gt;并核实预测的准确性&lt;/b&gt;&lt;br&gt;（5）如此反复直到确认预测和观察一致&lt;/p&gt;&lt;p&gt;科学方法的一条关键原则就是我们所设计的实验必须是&lt;b&gt;可重现的&lt;/b&gt;，&lt;br&gt;这样他人也可以自己验证假设的真实性。&lt;br&gt;所有的假设也必须是&lt;b&gt;可证伪的&lt;/b&gt;，&lt;br&gt;这样我们才能确认某个假设是错误的（并需要修正）。&lt;/p&gt;&lt;p&gt;正如爱因斯坦的一句名言所说：&lt;br&gt;“再多的实验也不一定能够证明我是对的，但只需要一个实验就能证明我是错的。”&lt;br&gt;我们永远也没法知道某个假设是否绝对正确，我们只能验证它和我们的观察的一致性。&lt;/p&gt;&lt;p&gt;不坚持科学方法的人们，容易在第（4）步误入歧途，&lt;br&gt;他们提出模型后不去检验，活在想象的世界中。&lt;/p&gt;&lt;p&gt;常有的表现是，“我推翻了XX理论”。&lt;br&gt;而本来“XX理论”就是一个&lt;b&gt;模型&lt;/b&gt;而已，&lt;b&gt;找到不适用性是迟早的事。&lt;/b&gt;&lt;br&gt;只是推翻以后，能否解释更多“XX理论”不可准确解释的现象才是重要的。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;相容性&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-289cd3b8124e17d87403c760b95bf168_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;449&quot; data-rawheight=&quot;327&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-289cd3b8124e17d87403c760b95bf168&quot; data-watermark-src=&quot;v2-e79b7be8e17f35a93f3b2f9edc25eb06&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;商业思想家&lt;b&gt;罗杰·马丁&lt;/b&gt;，曾采访过50多位成功的领导者，&lt;br&gt;最终发现，他们大都具有一个非同寻常的特征。&lt;/p&gt;&lt;p&gt;他们愿意而且能够同时接纳两种互相冲突的观点，&lt;br&gt;在碰到意见冲突时，他们既不慌张，也不是简单的进行非此即彼的取舍，&lt;br&gt;而是另辟蹊径，提出一个新思路，既包含了原先两种观点的内容，&lt;br&gt;又比原先两种观点胜出一筹。&lt;/p&gt;&lt;p&gt;罗杰·马丁把这种思考和综合的过程，称为&lt;b&gt;整合性思维&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;70多年前，美国小说家&lt;b&gt;斯科特·菲茨杰拉德&lt;/b&gt;也指出过，&lt;br&gt;真正智者的特点之一就是能同时容下两个相对立的想法，但仍然保持行动能力。&lt;/p&gt;&lt;p&gt;我国古代，三国时期魏国大臣，政治家，军事家&lt;b&gt;司马懿&lt;/b&gt;，&lt;br&gt;在教育孩子时，也曾说过：&lt;br&gt;“夫处世之道，亦即应变之术，岂可&lt;b&gt;偏执一端&lt;/b&gt;；用兵之道亦然如此，皆贵在&lt;b&gt;随机应变&lt;/b&gt;。”&lt;/p&gt;&lt;p&gt;以上例子表明，不能接受矛盾的想法是人之常情。&lt;br&gt;人们倾向于对同一件事情，只得到一种结论。&lt;/p&gt;&lt;p&gt;可是，如何成为智者，如何全面的看待问题呢？&lt;br&gt;科学方法表明，&lt;b&gt;我们需要检验这些想法的前提条件&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;大前研一曾经说过，&lt;br&gt;“解决问题的能力，就是为印证假设不辞劳苦的行动力”。&lt;br&gt;是啊，&lt;b&gt;真理不是陈述句，而是条件性为真的判断句&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;能相信未被证明的假设，会避开经验对我们的限制。&lt;br&gt;当别人表述某个论点的时候，很难同时携带着该论点的证明，&lt;br&gt;如果转而让他去证明这个论点，就会打断他的思路，证明完之后还要再跳回来。&lt;/p&gt;&lt;p&gt;不幸的是，现场的不充分的思考，根本不具备清晰证明某个论点的条件，&lt;br&gt;这也是为什么会议容易被无限延长的原因。&lt;/p&gt;&lt;p&gt;一个好的权衡之计就是，先让分享者把事情讲完，&lt;br&gt;哪怕其中包含了很多值得怀疑的论点，&lt;br&gt;我们先记录下来，最后大家一起，&lt;b&gt;用行动去检验它们&lt;/b&gt;。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%A7%91%E5%AD%A6%E6%96%B9%E6%B3%95&quot;&gt;科学方法&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%8F%AF%E8%AF%81%E4%BC%AA%E6%80%A7&quot;&gt;可证伪性&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/3138847/&quot;&gt;思考的技术&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://wenku.baidu.com/view/1d94574dfe4733687e21aa8b.html&quot;&gt;整合性思维：成功领导人的思考方式&lt;/a&gt;&lt;/p&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-07-09-37668713</guid>
<pubDate>Mon, 09 Jul 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>工程趣闻（一）：如何落子</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-07-06-37668452.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37668452&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;b&gt;未来是不可预测的&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-99253a83c221bc2419f45513f715f214_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;367&quot; data-rawheight=&quot;367&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-99253a83c221bc2419f45513f715f214&quot; data-watermark-src=&quot;v2-c7427e12654c3c2e0f13bfe2b81a1659&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;b&gt;定式&lt;/b&gt;，一般是指围棋中，经过棋手们长久以来的经验累积，&lt;br&gt;而形成在某些情况下双方都会依循的&lt;b&gt;固定下法&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;一般通常发生在布局阶段的角落地区，&lt;br&gt;但有些在中盘时的某些固定下法，也被称作中盘定式。&lt;br&gt;围棋定式的总数在一万种以上且仍不断增加中，但常用的仅约数百种，&lt;br&gt;而且随着各时代对围棋的见解不同，旧定式也有被修正的可能。&lt;/p&gt;&lt;p&gt;软件工程师每天的工作，像极了围棋比赛中的落子，&lt;br&gt;软件工程师们面对的都是自己目前不知道答案的问题，&lt;br&gt;他们只能凭经验得到大致的方向，&lt;br&gt;而且，&lt;b&gt;每次决定都会对以后的局势产生影响。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;然而，我们有什么理由相信历史经验的正确性，&lt;br&gt;过去的经验根本不适合现在这个从未被遇到过的问题啊，&lt;br&gt;贪心的选择目前看到的最优解，真的好吗？&lt;/p&gt;&lt;p&gt;也有不少人怪责前人挖坑后人遭殃，&lt;br&gt;那是站在现在的角度来看的。&lt;br&gt;无论采取什么办法，未来还是会有未料到的情况出现，&lt;br&gt;如果换做我们，该怎么做呢？&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;变化只能被适应&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-c4bfcdeed4a8222f14e2677ff2aeb6ca_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;338&quot; data-rawheight=&quot;350&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-c4bfcdeed4a8222f14e2677ff2aeb6ca&quot; data-watermark-src=&quot;v2-3b281edcc8fb552aec2e7d1197077087&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;b&gt;刻舟求剑&lt;/b&gt;是《吕氏春秋·察今》中记述的一则寓言。&lt;/p&gt;&lt;p&gt;说的是楚国有人坐船渡河时，不慎把剑掉入江中，&lt;br&gt;他在舟上刻下记号，说：“这是我把剑掉下的地方。”&lt;br&gt;当舟停驶时，他才沿着记号跳入河中找剑，遍寻不获。&lt;/p&gt;&lt;p&gt;该寓言劝勉为政者要明白世事在变，若不知改革，就无法治国，&lt;br&gt;后引申为不懂变通、&lt;b&gt;墨守成规&lt;/b&gt;之意。&lt;/p&gt;&lt;p&gt;软件工程师讨厌需求变更，&lt;b&gt;就好像需求不应该变更一样，&lt;/b&gt;&lt;br&gt;这是不切实际的，不符合瞬息万变的客观世界。&lt;/p&gt;&lt;p&gt;因此，极限编程的支持者们，认为软件需求的不断变化是&lt;b&gt;很自然的现象&lt;/b&gt;，&lt;br&gt;是软件项目开发中不可避免的，也是应该欣然接受的现象。&lt;br&gt;他们相信，和传统的在项目起始阶段定义好所有需求再费尽心思的控制变化的方法相比，&lt;br&gt;有能力在项目周期的任何阶段去&lt;b&gt;适应变化&lt;/b&gt;，将是更加现实更加有效的方法。&lt;/p&gt;&lt;p&gt;我们都想一劳永逸，软件发布之后，就再也不想动它了，&lt;br&gt;可能这种认识本身就有问题。&lt;br&gt;软件这种解决方案，能不断的与问题一起生长，可能这才是它的全貌吧。&lt;br&gt;刻在光盘上的，只是这个&lt;b&gt;生命体&lt;/b&gt;在某个瞬间的照片罢了。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%AE%9A%E5%BC%8F&quot;&gt;定式&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%B4%AA%E5%BF%83%E6%B3%95&quot;&gt;贪心法&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%88%BB%E8%88%9F%E6%B1%82%E5%8A%8D&quot;&gt;刻舟求剑&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%9E%81%E9%99%90%E7%BC%96%E7%A8%8B&quot;&gt;极限编程&lt;/a&gt;&lt;/p&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-07-06-37668452</guid>
<pubDate>Fri, 06 Jul 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>编程哲学（九）：让技能被使用</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-07-02-37657557.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37657557&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-585f8e8e7c060859e61937dc127d8e33_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;600&quot; data-rawheight=&quot;441&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-585f8e8e7c060859e61937dc127d8e33&quot; data-watermark-src=&quot;v2-a9a7983baacffe10c7d5bd5e28bd6546&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;随着信息化社会的发展，人们接触到的&lt;b&gt;信息呈爆炸式的增长&lt;/b&gt;，&lt;br&gt;我们获取知识的途径也越来越多了，网络中的知识更是取之不尽用之不竭。&lt;/p&gt;&lt;p&gt;我们每天都要学习，主动的或者被动的，但是人们的记忆力总是有限的。&lt;br&gt;人们常说，“我的脑袋实在装不下了”。&lt;br&gt;就好像我们记住了新知识，旧知识就不得不被忘掉一样。&lt;/p&gt;&lt;p&gt;难道不是吗？我们一直在学习新技术，&lt;br&gt;结果导致大脑超负荷运转，忘记了以前熟练掌握的内容，&lt;br&gt;自己非但没有进步，反而退步了。&lt;/p&gt;&lt;p&gt;其实不然，&lt;br&gt;因为学习不是遗忘旧知识的原因，&lt;b&gt;不再使用那些旧知识了&lt;/b&gt;才是。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;不要怕忘记&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-edaec699b6f1645b03090ce91386fbc8_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;312&quot; data-rawheight=&quot;220&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-edaec699b6f1645b03090ce91386fbc8&quot; data-watermark-src=&quot;v2-99a874788be4d9c6e70c2f2bd7deaad2&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;心理学家&lt;b&gt;赫尔曼·艾宾浩斯&lt;/b&gt;通过实验，得到了一条记忆曲线，称为&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%81%97%E5%BF%98%E6%9B%B2%E7%BA%BF&quot;&gt;遗忘曲线&lt;/a&gt;。&lt;br&gt;它表明了记忆的保持与时长之间的关系。&lt;/p&gt;&lt;p&gt;我们看到，即使不学习，旧知识也会被慢慢忘记的，&lt;br&gt;并不是新知识“排挤”出了旧知识，而是&lt;b&gt;旧知识被自然而然的忘记了&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;要想保持对旧知识的记忆，唯一的办法就是&lt;b&gt;复习&lt;/b&gt;。&lt;br&gt;我们需要经常性的回顾那些已经掌握了的，但是目前暂时不用的知识。&lt;br&gt;以免在用到的时候，它已经变得不可用了。&lt;/p&gt;&lt;p&gt;一个演奏家，应该在&lt;b&gt;平时&lt;/b&gt;进行多种训练，从而保证演出的品质，&lt;br&gt;&lt;b&gt;而不是把舞台当做训练场&lt;/b&gt;，用以巩固演奏技术。&lt;/p&gt;&lt;p&gt;程序员也是这样，日常工作并不会保证自己不忘记已经学会的编程技能，&lt;br&gt;经常进行一些恢复性的训练同样也是必要的。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;不要懒于实践&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-5deb5b39eb7b4b701e9aa41d3dde233a_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;520&quot; data-rawheight=&quot;181&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-5deb5b39eb7b4b701e9aa41d3dde233a&quot; data-watermark-src=&quot;v2-5fc514936f49a376b6b123a5f1c16376&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;有很多技能，我们学了很久了，但总是不能掌握它。&lt;br&gt;这是什么原因呢？&lt;/p&gt;&lt;p&gt;答案可能是，缺乏实践。&lt;br&gt;我以前看过很多篇文章提到过，“动手去实践”，都不以为然，&lt;br&gt;现在发现，“动手去实践”才是掌握一项新技能的秘诀。&lt;/p&gt;&lt;p&gt;新技术只有被不断的使用，我们才能学会&lt;b&gt;如何用它解决问题&lt;/b&gt;。&lt;br&gt;盯着它看，最终也只是&lt;b&gt;知道它可以解决问题&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;“知道可以解决问题”属于“了解”，而“能用它解决问题”就是“掌握”了，&lt;br&gt;如果你发现始终掌握不了一门新技术，很可能是因为你没有真正去使用过它。&lt;/p&gt;&lt;p&gt;要想掌握一门新技术，就要想办法去&lt;b&gt;用它&lt;/b&gt;。&lt;br&gt;编译原理，操作系统，计算机图形学以及数据库，人们戏称为“程序员的四大浪漫”，&lt;br&gt;他们很难被掌握，是因为普通程序员总是缺乏直接的使用场景。&lt;/p&gt;&lt;p&gt;我们不会经常性的去写一个编译器，或者实现一个操作系统，&lt;br&gt;只是看别人是怎么做的，就很难掌握它，&lt;br&gt;自己没有踩过的坑，就没有切身的体会，以后也无从避免再次进入陷阱。&lt;/p&gt;&lt;p&gt;因此，要想真的掌握一门技术，就得去使用它，&lt;br&gt;创造场景，&lt;b&gt;弄脏双手&lt;/b&gt;，义无反顾的去使用它。&lt;/p&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-07-02-37657557</guid>
<pubDate>Mon, 02 Jul 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>编程哲学（八）：偿还不起的技术债务</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-06-29-37657098.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37657098&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-160d7c20a4dd2c0a21621f86fb02d2de_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;506&quot; data-rawheight=&quot;317&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-160d7c20a4dd2c0a21621f86fb02d2de&quot; data-watermark-src=&quot;v2-8b11a4a63fab3515bcb1f104df46f49a&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;h2&gt;&lt;b&gt;修改代码的风险&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/4262627/&quot;&gt;重构&lt;/a&gt;，就是在&lt;b&gt;不改变外部行为&lt;/b&gt;的前提下，有条不紊地改善代码。&lt;br&gt;为了保障软件的外部行为，唯一的办法就是通过&lt;b&gt;测试&lt;/b&gt;。&lt;br&gt;因此，重构是建立在&lt;a href=&quot;https://book.douban.com/subject/1230036/&quot;&gt;完备的测试覆盖&lt;/a&gt;基础之上的。&lt;/p&gt;&lt;p&gt;如果我们不能保证修改后的代码还能提供相同的功能，&lt;br&gt;那么这种修改就是&lt;b&gt;错误的&lt;/b&gt;，会给用户带来极大的损失。&lt;br&gt;在有风险意识的团队中，不会同意发生&lt;a href=&quot;https://book.douban.com/subject/11614538/&quot;&gt;这样的修改&lt;/a&gt;。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;什么是所有的功能&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;一个涉及几百个页面的网站，多个角色处于不同状态的用户都可以访问它，&lt;br&gt;那么它总共提供了哪些功能？&lt;/p&gt;&lt;p&gt;页面之间的跳转，以及同一个网页为他们展示的不同功能，都是业务逻辑的细节表现。&lt;br&gt;没有人知道“&lt;b&gt;所有的功能&lt;/b&gt;”指的是什么，因为太复杂。&lt;/p&gt;&lt;p&gt;代码中的某个分支，看起来似乎用不到，但是可能就是有那百分之一的用户会使用它。&lt;br&gt;另外某处，为什么这里要向一个莫名的服务器发送请求，很可能必不可少。&lt;/p&gt;&lt;p&gt;某个类到底有没有人在使用它，我们只知道自己的依赖，很难知道谁依赖了我们。&lt;br&gt;如果不确定谁在以什么方式使用它，就&lt;b&gt;不能进行修改&lt;/b&gt;。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;偿还周期&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;哪怕我们已经有了完备的测试，如果重构所花费的时间周期太长，还是很危险，&lt;br&gt;我们不得不在这段时间内，同时应付&lt;b&gt;重构工作&lt;/b&gt;和&lt;b&gt;新功能的开发&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;框架迁移就是这样的一个典型例子，如果我们打算把旧框架的功能迁移到新框架，&lt;br&gt;那么几乎所有的功能，都不得不在新框架下重新开发并测试一遍，&lt;br&gt;新需求也不得不在旧框架中完成，并且最终还得再迁移过去。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;高利贷&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;我们很容易低估重构的成本，&lt;br&gt;假设框架迁移需要 &lt;equation&gt;n&lt;/equation&gt; 个“&lt;a href=&quot;https://book.douban.com/subject/2230248/&quot;&gt;人日&lt;/a&gt;”的工作量，团队中有 &lt;equation&gt;x&lt;/equation&gt; 人，需要 &lt;equation&gt;y&lt;/equation&gt; 天才能把事情做完，&lt;br&gt;则 &lt;equation&gt;n&lt;/equation&gt; 不等于 &lt;equation&gt;xy&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;因为这 &lt;equation&gt;y&lt;/equation&gt; 天中会有新功能要开发，这些新功能需要 &lt;equation&gt;xy&lt;/equation&gt; 人日的工作量，&lt;br&gt;于是，人们必须加班，假设人们比原来努力 &lt;equation&gt;t&lt;/equation&gt; 倍，&lt;br&gt;则， &lt;equation&gt;n+xy=txy&lt;/equation&gt; ，因此 &lt;equation&gt;xy=n/(t-1)&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;如果以前已经在加班了，那么我只能说，真是&lt;b&gt;太不幸了&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;如果框架迁移需要100人日，有5个人来完成它，他们都用1.5倍的努力进行工作，&lt;br&gt;则事实上需要40天才能完成，而不是20天，居然比原来估算的时间多了一倍。&lt;/p&gt;&lt;p&gt;这40天中，每人每天必须想办法比原来多做一半的事情，&lt;br&gt;我们知道，就算加班其实也很难达到这个目标。&lt;/p&gt;&lt;p&gt;这就是技术负债的利滚利效应，也是著名的&lt;a href=&quot;http://baike.baidu.com/item/%E7%89%9B%E9%A1%BF%E9%97%AE%E9%A2%98&quot;&gt;牛顿问题&lt;/a&gt;。&lt;br&gt;&lt;b&gt;偿还周期越长，所需偿还的债务总量就越多。&lt;/b&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;试错的代价&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;重构其实很难进行下去，即使进行下去了也做的很不彻底，&lt;br&gt;项目中混杂了各个时代的代码遗骸，战场从来没有干净过。&lt;/p&gt;&lt;p&gt;一开始就寄希望于用重构来逐渐解决问题，可能是有害的，&lt;br&gt;代码中会留下很多做到一半的事情，开发者必须小心谨慎的理解所有技术细节。&lt;/p&gt;&lt;p&gt;快速试错能反映出这种侥幸心理，虽然快速试错的目的是为了降低最终出错的代价，&lt;br&gt;但是&lt;b&gt;实际上很难承认自己的确是错了&lt;/b&gt;，人们会想尽办法弥补它，&lt;br&gt;于是，等我们看到失败时，再退出已经来不及了。&lt;/p&gt;&lt;p&gt;快速试错通常是一个借口，掩饰自己还没有想清楚它。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/4262627/&quot;&gt;重构：改善既有代码的设计&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/1230036/&quot;&gt;测试驱动开发&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/11614538/&quot;&gt;程序员的职业素养&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/2230248/&quot;&gt;人月神话&lt;/a&gt;&lt;/p&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-06-29-37657098</guid>
<pubDate>Fri, 29 Jun 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>编程哲学（七）：我写不出好代码</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-06-26-37656839.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37656839&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-a9fc4aa95a75e68340a32e7967b1ed56_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;499&quot; data-rawheight=&quot;313&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-a9fc4aa95a75e68340a32e7967b1ed56&quot; data-watermark-src=&quot;v2-bf599426cb467b86acde22905e7902af&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;h2&gt;&lt;b&gt;我们在为别人编程&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;编程，是一个解决问题的过程，&lt;br&gt;通过对问题本身进行分析，考虑目前可用的计算资源，&lt;br&gt;整合出一套自动化的解决问题的步骤，就是程序。&lt;/p&gt;&lt;p&gt;在这个过程中，我们需要发现规律，找到普适性，&lt;br&gt;以降低软件的成本，覆盖大部分场景，&lt;br&gt;这是我们每天要做的事情。&lt;/p&gt;&lt;p&gt;&lt;b&gt;我们很少为自己编程，&lt;/b&gt;&lt;br&gt;我们做软件，并不是为了解决自己的问题，而是帮用户，&lt;br&gt;我们提供了一个代码库，也不是为了自己，而是因为别人要用它。&lt;/p&gt;&lt;p&gt;因此，仅仅创造一个解决方案，这并不够，&lt;br&gt;还得告诉别人，&lt;b&gt;该如何使用它，&lt;/b&gt;&lt;br&gt;&lt;b&gt;编程的艺术或许在于如何提供功能。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;这是一件很容易被忽视的事情，&lt;br&gt;解决方案的创造者，默认是会使用它的，所以很难体会用户的心情。&lt;br&gt;那种灵活到几乎做什么都行，却没有一种方法可行的感受。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;看似简单的事情&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;天才程序员写的代码库很简单，可重复使用，且功能强大。&lt;br&gt;我们写的代码库比较复杂，没有人知道该如何使用它。&lt;/p&gt;&lt;p&gt;这并不是一个巧合，&lt;br&gt;并不是我们刚好遇到了一件麻烦的事情，&lt;br&gt;而是&lt;b&gt;我们本来就不知道如何写出好用的代码，我们写不出来。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;我们知道漂亮的代码长什么样，知道如何使用它们，&lt;br&gt;并不意味着我们也可以写出这样的代码。&lt;br&gt;脍炙人口的文章人们都想写出来，可是却只有少数人能够办到。&lt;/p&gt;&lt;p&gt;这需要长期的训练以积累经验，需要仔细的斟酌，&lt;br&gt;需要&lt;b&gt;考虑如何提供一项功能&lt;/b&gt;，而不仅仅是实现它，&lt;br&gt;需要把自己当做对系统一无所知，然后再教会自己。&lt;/p&gt;&lt;p&gt;大部分人都不擅长这一点，&lt;br&gt;毕竟考虑功能该被如何使用，与考虑功能该被如何实现，是两件不同的事情。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;无微不至的软件服务&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;如果我们没办法写出那么好的代码，那就只能多提供一些帮助信息了。&lt;/p&gt;&lt;p&gt;我们不得不写上足够多的&lt;b&gt;注释&lt;/b&gt;和&lt;b&gt;文档&lt;/b&gt;，&lt;br&gt;解释我们为什么要这么做，以及软件的用法。&lt;br&gt;解释我们正在解决的问题，以及它存在的原因。&lt;br&gt;这些注释和文档还得与时俱进，随着代码的发展而更新。&lt;/p&gt;&lt;p&gt;我们觉得这些是多余的，是因为我们是代码的作者，&lt;br&gt;而用户如果没有它们，就寸步难行，&lt;br&gt;我们需要设计一条学习曲线，让用户慢慢的理解我们的意图。&lt;/p&gt;&lt;p&gt;商业级的软件服务需要&lt;b&gt;在编码之外做出很多额外的努力&lt;/b&gt;，&lt;br&gt;除了全面的测试之外，还要有详尽的注释和丰富的文档，&lt;br&gt;我想这才是和业余项目的根本区别吧。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.oschina.net/news/79166/apache-foundation-ceo-decades-views&quot;&gt;屋中的大象&lt;/a&gt;&lt;/p&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-06-26-37656839</guid>
<pubDate>Tue, 26 Jun 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>编程哲学（六）：从正确归因到个人影响力</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-06-22-37656537.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37656537&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;b&gt;归因问题&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-6fe64e4355dea168d4bafe593f0d5e18_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;542&quot; data-rawheight=&quot;324&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-6fe64e4355dea168d4bafe593f0d5e18&quot; data-watermark-src=&quot;v2-d90a5a68977b9787a05a631937d18708&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;b&gt;归因理论&lt;/b&gt;是社会心理学研究的理论之一，它描述了我们怎样解释人们的行为。&lt;/p&gt;&lt;p&gt;我们总是试图将某个人的行为或者某个结果，&lt;br&gt;归因于性格（内因）或情境（外因）。&lt;/p&gt;&lt;p&gt;我们无休止的分析和讨论&lt;b&gt;事情为什么发生&lt;/b&gt;，&lt;br&gt;特别是当我们经历一些消极事件或者预期之外的事件的时候。&lt;/p&gt;&lt;p&gt;归因理论的研究者发现，人们在归因时存在一个普遍性的问题，&lt;br&gt;当我们解释他人的行为时，会低估&lt;b&gt;环境&lt;/b&gt;造成的影响，而高估&lt;b&gt;个人的特质和态度&lt;/b&gt;所造成的影响。这种个体在归因时低估情境因素作用的倾向，被称为&lt;b&gt;基本归因错误&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;就像当我们看一个演员出演正面或反面角色时，&lt;br&gt;尽管我们知道这些都不是真实的，&lt;br&gt;但我们却很容易固执的认为这就是那个人本质的真实反映。&lt;/p&gt;&lt;p&gt;&lt;b&gt;人们习惯性的将自己的失误归因于环境，而将别人的失误归因于他们的内部秉性。&lt;/b&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;改变他人 vs 改变环境&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-376c76249fe7f30b58bb35ff1f571050_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;550&quot; data-rawheight=&quot;464&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-376c76249fe7f30b58bb35ff1f571050&quot; data-watermark-src=&quot;v2-ccb1dda6328405bdb18be57b1be9deed&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;想要改变他人，是人们表达对环境不适的正常反应。&lt;br&gt;然而，对每个人来说，本身也是自己所处环境的一部分。&lt;br&gt;因此，想要改变他人，也是人们缺乏行动力，没办法行动起来的正常反应。&lt;/p&gt;&lt;p&gt;不幸的是，&lt;b&gt;试图改变他人，其实就是互相伤害。&lt;/b&gt;&lt;br&gt;有意无意的想改变对方，是矛盾的根源。&lt;/p&gt;&lt;p&gt;改变别人是不可能的，况且&lt;b&gt;别人也不认为自己需要作出改变。&lt;/b&gt;&lt;br&gt;所以，如果对环境感到不适的时候，&lt;br&gt;应该着手从自己做起，做好想让别人去做的事情。&lt;/p&gt;&lt;p&gt;一旦行动起来，自身所处的局部环境就自然发生了改变。&lt;br&gt;局部环境改变了，才有可能通过环境&lt;b&gt;影响&lt;/b&gt;他人。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;从抱怨到合作&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-04ed55edb879971ba4ed21b11f2bdba2_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;663&quot; data-rawheight=&quot;442&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-04ed55edb879971ba4ed21b11f2bdba2&quot; data-watermark-src=&quot;v2-d5c8c89251ec202ea7fd5acf4cdaa2d1&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;不是别人没有把事情做好，而是我们这些人&lt;b&gt;都没有把事情做好&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;在软件开发中，人们经常为了完成更多的功能，不得已而降低软件的可维护性和可用性，&lt;br&gt;其表现形式就是代码缺少注释和文档。&lt;/p&gt;&lt;p&gt;那么应该由谁来完成这些注释和文档的编写工作呢？&lt;br&gt;很显然代码的作者很难逃避这个责任，&lt;br&gt;但我想说这并不是一个人的责任，相反，整个团队应该&lt;b&gt;共同担负&lt;/b&gt;这个责任。&lt;/p&gt;&lt;p&gt;因为不是一个人而是一个团队，交付了软件产品。&lt;br&gt;我们经常对别人能做而未做，自己也能做却不想做的事情，进行抱怨。&lt;/p&gt;&lt;p&gt;避免抱怨的最好方法就是，行动起来，&lt;br&gt;从自己能做的事情做起，与团队成员紧密的合作。&lt;/p&gt;&lt;p&gt;只有在竞争中才纠结谁对谁错，合作的时候，只看&lt;b&gt;共同的表现结果&lt;/b&gt;。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/1476651/&quot;&gt;社会心理学（第八版）- 戴维·迈尔斯&lt;/a&gt;&lt;/p&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-06-22-37656537</guid>
<pubDate>Fri, 22 Jun 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>编程哲学（五）：未雨绸缪</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-06-19-37656145.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37656145&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;b&gt;备选方案&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-d243ceba53e0a64071a0f4c31de953d1_r.jpg&quot; data-rawwidth=&quot;269&quot; data-rawheight=&quot;188&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-d243ceba53e0a64071a0f4c31de953d1&quot; data-watermark-src=&quot;v2-2b26fb0642ec7c3eb7ade5335f341b2b&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;和优秀的人合作，很容易得到理解和体谅，&lt;br&gt;因为他们对问题本来就有很多种解决方案，也都明白&lt;b&gt;方案是灵活机变&lt;/b&gt;的。&lt;/p&gt;&lt;p&gt;因此，互相怀疑对方能力，不能理解对方的处境，绝不让步，&lt;br&gt;这些事永远都不会发生。&lt;/p&gt;&lt;p&gt;当我们面对困难的时候，如果我们除了仅有的一个选择之外别无它法，&lt;br&gt;这往往不是一个好的状态。&lt;br&gt;如果&lt;b&gt;没有权衡的余地&lt;/b&gt;，就只能被动的接受一切，也就没有办法处理任何突发状况。&lt;/p&gt;&lt;p&gt;编写代码也是如此，&lt;br&gt;如果我们一开始只有一种办法来实现功能，&lt;br&gt;那么这通常不是一个最优的选择。&lt;/p&gt;&lt;p&gt;实际上，我们应该不遗余力的寻找备选方案，未雨绸缪。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;有失才有得&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;我听过很多人都呐喊着想做出改变，&lt;br&gt;但是真正主动承受痛苦改变成功的却没有多少人。&lt;/p&gt;&lt;p&gt;究其原因是，仅仅想要做出改变，还远远不够。&lt;br&gt;&lt;b&gt;任何改变不可能只是带来利益，而不需要付出沉重的代价。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;所以，关键不在于人们是否愿意改变自己，&lt;br&gt;也不在于人们是否能够战胜自己的习惯。&lt;br&gt;而是在于愿不愿意为不确定的事情付出显而易见的&lt;b&gt;代价&lt;/b&gt;，是否有能力承担&lt;b&gt;风险&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;事情就是这样，我们会得到一些自己想要的，&lt;br&gt;却同时又会失去一些我们不想失去的。&lt;/p&gt;&lt;p&gt;&lt;b&gt;维持任何优雅的代码特征都是需要成本的，&lt;/b&gt;&lt;br&gt;我们都想追求可维护性，可读性，&lt;br&gt;又要保证性能和质量，还要按时完成，这几乎是不可能的。&lt;/p&gt;&lt;p&gt;我们需要考虑的是，&lt;br&gt;维持这些特性的成本是否值得投入，以及性价比有多大，&lt;br&gt;是否有更重要的事情要做。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;更上一层楼&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-069dc382e28a09cd69ca1de24d654715_r.jpg&quot; data-rawwidth=&quot;185&quot; data-rawheight=&quot;466&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;当我们视野不够的时候，总是容易表现得小肚鸡肠，对一些细枝末节斤斤计较。&lt;br&gt;所以，最好先看一下较远的地方，再低下头来审视当前工作的价值。&lt;/p&gt;&lt;p&gt;制定目标的时候也是如此，&lt;br&gt;先想一下未来的样子，&lt;br&gt;然后再&lt;b&gt;将长期计划截断为短期计划&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;在软件行业，新瓶装旧酒的技术方案受制于各种商业因素的影响，此起彼伏层出不穷。&lt;br&gt;如果看不清发展趋势，我们当前努力打造的代码堡垒，&lt;br&gt;会被潮流的更替瞬间击垮，凭添太多改造成本。&lt;/p&gt;&lt;p&gt;所以，保持忙碌很重要，&lt;br&gt;也要谨防忙碌的样子，&lt;br&gt;正确的做事很重要，也要胆识&lt;b&gt;做正确的事情&lt;/b&gt;。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;意料之外还是意料之中&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;没有明确的目的，会让我们很难进行取舍。&lt;/p&gt;&lt;p&gt;例如，保留一个已有的问题会节省时间，&lt;br&gt;但是可能会使这个问题以后更难被解决，该如何选择？&lt;br&gt;事实上，这取决于我们到底想节省时间，还是想避免以后的麻烦。&lt;/p&gt;&lt;p&gt;只有明确了目的，明确了某些做法是我们有意而为之，才会避免心理上的抵触。&lt;br&gt;&lt;b&gt;洁癖&lt;/b&gt;和&lt;b&gt;强迫症&lt;/b&gt;才不会干扰我们，世界才能清静下来。&lt;/p&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-06-19-37656145</guid>
<pubDate>Tue, 19 Jun 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>编程哲学（四）：把控间接性</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-06-15-37655447.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37655447&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;b&gt;间接性&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;计算机领域有句名言：&lt;br&gt;“计算机科学领域的任何问题都可以通过增加一个&lt;b&gt;间接的中间层&lt;/b&gt;来解决”。&lt;/p&gt;&lt;p&gt;但是&lt;b&gt;过多的间接性&lt;/b&gt;反而会造成不好的影响，所以人们进行了这样补充，&lt;/p&gt;&lt;blockquote&gt;...except for the problem of too many layers of indirection.[1]&lt;/blockquote&gt;&lt;p&gt;间接性指的是，为了达成某个目的，我们可以&lt;b&gt;先做另外一件事情&lt;/b&gt;，&lt;br&gt;然后再绕过来解决原始的问题。&lt;/p&gt;&lt;p&gt;间接性在编程工作中很常见，实际在不知不觉中，我们已经使用了它。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-cd50740c33993f7f63bf68ce68bf9cf6_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;500&quot; data-rawheight=&quot;492&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-cd50740c33993f7f63bf68ce68bf9cf6&quot; data-watermark-src=&quot;v2-072323a53c264cca74449ef5c70157f4&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;blockquote&gt;计算过程是存在于计算机里的一类抽象事物，在其演化进程中，这些过程会去操作一些被称为数据的抽象事物。人们创建出一些称为&lt;b&gt;程序&lt;/b&gt;的规则模式，以&lt;b&gt;指导&lt;/b&gt;这类过程的进行。从作用上看，就像是我们在通过自己的写作魔力去控制计算机里的精灵似的。[2]&lt;/blockquote&gt;&lt;p&gt;可见，&lt;b&gt;程序符号&lt;/b&gt;不同于它们所操纵的&lt;b&gt;计算过程&lt;/b&gt;，&lt;br&gt;编写程序是间接性的一种体现，&lt;br&gt;程序只是软件功能的一种&lt;b&gt;符号表示&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;我们应该选取合适的符号，用以描述目标系统的软件功能。&lt;/p&gt;&lt;p&gt;在数学史上，区分&lt;b&gt;符号&lt;/b&gt;以及对符号的&lt;b&gt;解释&lt;/b&gt;，却花费了很长时间。&lt;br&gt;人们总是&lt;b&gt;不由自主的&lt;/b&gt;把符号解释为日常生活中熟悉的概念。&lt;/p&gt;&lt;blockquote&gt;这是整个十九世纪数学的最深刻的教训之一。[3]&lt;/blockquote&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;表达能力&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;我们经常处于一种&lt;b&gt;表达能力受限而不自知&lt;/b&gt;的状态。&lt;/p&gt;&lt;p&gt;为了得到编程语言相关的种种商业好处，&lt;br&gt;经常把自己局限在&lt;b&gt;某个特定编程语言&lt;/b&gt;范围之内。&lt;/p&gt;&lt;p&gt;我们只用这种语言去“描述”心中想做的“事情”，&lt;br&gt;结果我们能“描述”的“事情”，&lt;br&gt;就慢慢局限在了该语言善于“描述”的“事情”范围之中了。&lt;/p&gt;&lt;p&gt;除此之外，写出易读的代码，显然和&lt;b&gt;写作水平&lt;/b&gt;有关，&lt;br&gt;好的表达方式，可以把长篇大论平白直叙的“流水账”，&lt;br&gt;改造成结构清晰发人深省的“文学作品”。&lt;/p&gt;&lt;p&gt;因此，我们应该多从文学作品中学习经验，&lt;br&gt;训练自己怎样把事情说清楚，&lt;br&gt;以及在每个层面上把问题展开成什么样的细节程度。&lt;/p&gt;&lt;p&gt;只有在这种情况下，&lt;b&gt;封装信息&lt;/b&gt;和&lt;b&gt;隐藏细节&lt;/b&gt;才突然有了意义。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;扁平化&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-dba26251fa18650ec432a84f71564982_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;477&quot; data-rawheight=&quot;317&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-dba26251fa18650ec432a84f71564982&quot; data-watermark-src=&quot;v2-1f4f9017a363697609f11db3f98f1009&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;b&gt;重复未必是有问题的&lt;/b&gt;，重复的描述细节才有问题。&lt;/p&gt;&lt;p&gt;某些代码显得无比冗余啰嗦，&lt;br&gt;我们才想到要把它们放在更为细节的层次上。&lt;/p&gt;&lt;p&gt;通常我们会先去构建一些粒度较大的“砖块”，&lt;br&gt;再用这些“砖块”去搭建主流程，&lt;b&gt;简化主流程的描述方式&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;然而，过多的细节&lt;b&gt;层次&lt;/b&gt;也是不恰当的，它增加了我们的&lt;b&gt;描述复杂度&lt;/b&gt;。&lt;br&gt;在大型项目中，这些“砖块”本身也会包含很多的细节，由更小的“砖块”组成。&lt;br&gt;阅读代码的人，必须经常&lt;b&gt;在不同的层次中上下跳跃&lt;/b&gt;，才能理解我们到底想要表达什么。&lt;/p&gt;&lt;p&gt;这时候，识别出可复用的代码才是关键。&lt;/p&gt;&lt;p&gt;通过分析问题本身的&lt;b&gt;数学结构&lt;/b&gt;，或者理解项目相关的&lt;b&gt;业务背景&lt;/b&gt;，&lt;br&gt;我们可以看到具有逻辑完整性的模式和工具。&lt;/p&gt;&lt;p&gt;把它们提取出去独立放在其他的地方，&lt;br&gt;可以帮助我们减少当前项目的描述层次，使之扁平化。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Indirection&quot;&gt;Indirection&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://book.douban.com/subject/1148282/&quot;&gt;计算机程序的构造与解释 - P1&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://book.douban.com/subject/1291204/&quot;&gt;哥德尔.艾舍尔.巴赫_集异璧之大成 - P117&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-06-15-37655447</guid>
<pubDate>Fri, 15 Jun 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>编程哲学（三）：是什么影响了我们的开发效率</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-06-13-37654697.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37654697&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;工作量是实际工作任务或可达工作任务，&lt;br&gt;而&lt;b&gt;工作效率&lt;/b&gt;，一般指工作投入与产出之比。&lt;/p&gt;&lt;p&gt;在进行某项任务时，工作效率是取得的成绩与所用时间、精力、金钱等的比值。&lt;br&gt;产出大于投入，就是正效率；产出小于投入，就是负效率。&lt;/p&gt;&lt;p&gt;软件是一个神奇的行业，&lt;br&gt;不同的工作方式，在工作效率上可能会产生&lt;a href=&quot;https://movie.douban.com/subject/6974319/&quot;&gt;15倍甚至100倍&lt;/a&gt;的差距。&lt;/p&gt;&lt;p&gt;因此延长工作时间，变成了一件不是特别重要的事情了，&lt;br&gt;人们更多考虑的是&lt;b&gt;如何在有限的时间内效率更高&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;在提高工作效率方面，每个人都有自己的办法。&lt;br&gt;“不要重复造轮子”就是其中一个，&lt;br&gt;它使我们看到了重复劳动，这在一定程度上确实提高了我们的工业水平。&lt;/p&gt;&lt;p&gt;然而，另外一些方面，就不是那么直观了。&lt;/p&gt;&lt;p&gt;我经常看到很多人在忙着写代码，却没有意识到，&lt;br&gt;我们确实有很多事情要做，但是却&lt;b&gt;未必有那么多代码要写&lt;/b&gt;。&lt;br&gt;更多的代码，意味着更高的开发成本，测试成本和维护成本。&lt;/p&gt;&lt;p&gt;因此，当我们需要动手实现很多功能的事情，&lt;br&gt;不妨问一下自己，&lt;b&gt;为什么我们不得不写这么多东西。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;难道我们真的走在了业界的前沿，做一些发明创造吗？&lt;br&gt;这个问题的答案通常是“否”。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;没有在专业性上保持谦逊&lt;/b&gt;&lt;/h2&gt;&lt;u&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-aa6b141028482f2bedf966ccc89b218b_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;500&quot; data-rawheight=&quot;384&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-aa6b141028482f2bedf966ccc89b218b&quot; data-watermark-src=&quot;v2-19f77ed2f2371058a441fa13a01a9816&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;/u&gt;&lt;p&gt;某个领域的专家，会更倾向于喜爱自己所在的领域，&lt;br&gt;认可自身领域专业性的价值，否则当初就难以成为专家了。&lt;/p&gt;&lt;p&gt;这是一件利弊参半的事，&lt;br&gt;&lt;b&gt;专业性使得一些工作被巧妙的解决掉，也使得一些工作被解决的过于勉强&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;软件也是如此，&lt;br&gt;只有极少数情况下，用户是不得不需要软件的，&lt;br&gt;虽然我们听到和感受到的都是他们的确需要。&lt;/p&gt;&lt;p&gt;商业软件要解决的问题，通常在于缓解当前已有的工作压力，&lt;br&gt;或者说&lt;b&gt;对现有方案做出改善&lt;/b&gt;，&lt;br&gt;却很少创造出全新的解决方案，虽然我们不是这么宣传的。&lt;/p&gt;&lt;p&gt;因此，带着专业领域的自豪感，我们很容易绑架用户，&lt;br&gt;或者帮用户做太多只能由他们做的事情。&lt;br&gt;这会在不经意间给用户带来新的负担，还会极大的增加软件的功能范围和复杂度。&lt;/p&gt;&lt;p&gt;所以，我理解的专业性，并不是在专业领域给用户寻找方案，&lt;br&gt;而是&lt;b&gt;专业性的给用户寻找方案&lt;/b&gt;，结果可能是用户并不需要我们做那么多事情。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;没有把自己变成信息源&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-a823234059256268be764f31ea104f30_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;484&quot; data-rawheight=&quot;300&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-a823234059256268be764f31ea104f30&quot; data-watermark-src=&quot;v2-5f78ce4bd4c861b37fd791a42ebb680b&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;人们对工程师的认识可能带有成见，&lt;br&gt;认为工程师一定是内向的，不善言辞的，&lt;br&gt;因为他们觉得只有这样才会显得更专注。&lt;/p&gt;&lt;p&gt;然而，别人这么认为，并不代表着这样做就是好的，&lt;br&gt;仅仅代表着如果这么做会给自己带来较小的阻力。&lt;/p&gt;&lt;p&gt;事实上我们应该反思一下，&lt;br&gt;&lt;b&gt;内向和不善言辞是不是真的有助于自己把工作做好。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;沟通问题在任何行业都会存在，并不是软件行业所独有的。&lt;br&gt;缺乏沟通，人们都被动的接受信息，会降低团队的工作效率。&lt;/p&gt;&lt;p&gt;这件事大家都是知道的，&lt;br&gt;然而却很少有人肯站出来，主动汇报自己的工作，变成&lt;b&gt;信息源&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;人们腼腆的不分享自己的成功案例，这可能算是一种谦虚，&lt;br&gt;但是因为没有机会得到反馈，而坚持自己的错误就很难被定义为谦虚了。&lt;/p&gt;&lt;p&gt;软件工程师需要主动得到工作反馈，确认待解决问题的动向，&lt;br&gt;向团队汇报自己的工作内容，向显然已经知道答案的同事学习经验。&lt;/p&gt;&lt;p&gt;&lt;b&gt;不要自己扛下所有的事情，不要自己研究。&lt;/b&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;没有吃自己的狗粮&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-bcd32577e84af3fe424fece8b5086435_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;400&quot; data-rawheight=&quot;300&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-bcd32577e84af3fe424fece8b5086435&quot; data-watermark-src=&quot;v2-ff5362baec9a6eec639d3436cb5ff694&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Eating your own dog food，直译为“吃你自家的狗粮”，也称为dogfooding，&lt;br&gt;是一句英语俚语，常用于描述公司（尤指软件公司）使用自己生产的产品这一情况。&lt;/p&gt;&lt;p&gt;好的工匠常常拥有自己的&lt;b&gt;工具箱&lt;/b&gt;，&lt;br&gt;工程师也会思考如何利用团队的产出反哺团队自身。&lt;/p&gt;&lt;p&gt;我们有哪些工具是完成业务目标之外的副产品？&lt;br&gt;哪些副产品可以在后期当做产品来发布的？&lt;br&gt;我们做事情的方式是不是可以总结下来？&lt;/p&gt;&lt;p&gt;这是产生&lt;b&gt;技术产品&lt;/b&gt;的一个有效办法，&lt;br&gt;而那些立志于只产出技术产品的团队，却往往难以存活下来，&lt;br&gt;因为他们&lt;b&gt;并不用自己的产品&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;吃自己的狗粮，让我们把一部分注意力放到了&lt;b&gt;副产品&lt;/b&gt;和&lt;b&gt;历史积累&lt;/b&gt;上面。&lt;br&gt;这些积累才是一个团队赖以生存的根基，&lt;br&gt;也是工作效率不可能被新团队取代的根本保障。&lt;/p&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-06-13-37654697</guid>
<pubDate>Wed, 13 Jun 2018 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
