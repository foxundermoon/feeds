<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>业余程序员的个人修养</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/</link>
<description></description>
<language>zh-cn</language>
<lastBuildDate>Sat, 11 Aug 2018 06:44:46 +0800</lastBuildDate>
<item>
<title>工程趣闻（十）：最有价值的产品</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-08-10-37672403.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37672403&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;b&gt;安身立命之本&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-11c94ecc1d17ba0b710a0e4192a1acc4_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;365&quot; data-rawheight=&quot;198&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-11c94ecc1d17ba0b710a0e4192a1acc4&quot; data-watermark-src=&quot;v2-75290af4a1b8b29738a261d96a950e97&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;总有人讨论，到底是“技术带动业务”，还是“业务带动技术”。&lt;br&gt;这确实是一个有争议的问题。&lt;br&gt;但是在这之前，我们需要知道，&lt;b&gt;到底什么是“业务”&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;维基百科上，对“业务”是这样解释的，&lt;/p&gt;&lt;blockquote&gt;企业运用科学方法和生产工艺，生产出可交付用户使用的产品与服务，&lt;br&gt;并以此为企业带来利益的行为。&lt;/blockquote&gt;&lt;p&gt;所以，追求业务发展，是一个&lt;b&gt;商业问题&lt;/b&gt;。&lt;br&gt;企业如果不获利，就不可能活下来，&lt;b&gt;盈利&lt;/b&gt;才是企业正常运转的前提。&lt;/p&gt;&lt;p&gt;那么就是“业务带动技术”了吧？&lt;br&gt;并不尽然。&lt;/p&gt;&lt;p&gt;一些高科技公司，企业的产品就是技术，通过销售技术方案而盈利。&lt;br&gt;对他们来说，&lt;b&gt;技术进步是业务发展的唯一办法&lt;/b&gt;，&lt;br&gt;不得不通过“技术带动业务”。&lt;/p&gt;&lt;p&gt;因此，当人们向我们矫正，一定要用“业务带动技术”时，&lt;br&gt;这实际上就是承认了技术革新并不是企业当前发展的瓶颈。&lt;br&gt;这也没什么错，每个公司都有自己的战略计划。&lt;/p&gt;&lt;p&gt;然而，对于工程师来说，能用自己的技术能力满足业务需求，&lt;br&gt;是在岗位工作而不被辞退的最低要求，无论这个业务具体是什么。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;交付能力&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-3d6ecb5e069abf46f91db2da4bdd847e_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;300&quot; data-rawheight=&quot;168&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-3d6ecb5e069abf46f91db2da4bdd847e&quot; data-watermark-src=&quot;v2-a6146ef5133ae786a97044beca3d3d38&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;团队也是如此，团队满足了业务发展的需求，就有能力存活下来，&lt;br&gt;如果没有能力交付，就有可能被解散。&lt;/p&gt;&lt;p&gt;然而，团队交付的项目，并不是最有价值的产品，&lt;b&gt;团队本身&lt;/b&gt;才是。&lt;br&gt;团队内部进行了有效积累，之后才能以更好更快的方式交付新项目。&lt;/p&gt;&lt;p&gt;因此，找到适合团队自身的工程实践，并不是一个好的目标，&lt;br&gt;这种静态的观点很容易把团队带入误区，&lt;b&gt;认为找到最佳实践就万事大吉了&lt;/b&gt;。&lt;br&gt;而实际上，持续不断的思考，高效的执行，才是最重要的。&lt;/p&gt;&lt;p&gt;从副产品的丰富程度，可以衡量团队是否有意识的进行了&lt;b&gt;积累&lt;/b&gt;，&lt;br&gt;有没有梳理出项目相关的文档或规范，有没有总结出跨项目通用的开发过程，&lt;br&gt;有没有提取出可复用的类库或组件，有没有考虑团队的影响力和品牌，等等。&lt;/p&gt;&lt;p&gt;只有不断进步的团队，才能应对变化，&lt;br&gt;只有不断修正自身，不断成长，才能活得更好。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;凝聚力&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-3b28c7892b260c7abd8709eeb9f81fa0_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;282&quot; data-rawheight=&quot;187&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-3b28c7892b260c7abd8709eeb9f81fa0&quot; data-watermark-src=&quot;v2-62a4d5584b81a6531b177227ddcf8e62&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;如果我们可以对比不同的团队，就会发现&lt;b&gt;技术方案并不全是由业务场景而决定的&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;虽然不同的业务场景，会导致人们选择不同的技术，&lt;br&gt;但是同样的业务场景，由于人员构成不同，仍然会导致不同的结果。&lt;/p&gt;&lt;p&gt;因此，&lt;b&gt;是“人员”决定了“事情”怎样被解决&lt;/b&gt;，而不是反之。&lt;br&gt;有些事情，离开了那些人，根本就无法完成。&lt;/p&gt;&lt;p&gt;此外，团队成员中进行合作需要寻找平衡点，&lt;br&gt;两个人有两个人的平衡，多个人有多个人的平衡，&lt;br&gt;只有互相试探，不断斟酌，才能打磨出更好的合作方式。&lt;/p&gt;&lt;p&gt;因此，好的团队，总是把成员能力培养和沟通合作看做重中之重，&lt;br&gt;只有团队成员技术水平强大了，&lt;b&gt;才能保证好的解决方案不断出现&lt;/b&gt;，&lt;br&gt;只有团队成员之间合作顺畅了，&lt;b&gt;才能保证高效的工作状态持续发生&lt;/b&gt;。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;形成团队需要时间，团队成员也需要首先建立关系。他们需要学习如何互相协作，需要了解彼此的癖好、强项、弱项，最终才能凝聚成团队。团队比项目更难构建，专业的开发组织会把项目分配给已形成凝聚力的团队，而不会围绕项目来组建团队。 &lt;br&gt;—— &lt;a href=&quot;https://book.douban.com/subject/11614538/&quot;&gt;程序员的职业素养&lt;/a&gt;&lt;br&gt;&lt;br&gt;Don&#39;t base your venture on a plan. Instead base it on a strategic foundation. &lt;br&gt;You can have a plan, but know that it will change, probably a lot. &lt;br&gt;The plan is fluid, the foundation is stable. &lt;br&gt;—— &lt;a href=&quot;https://book.douban.com/subject/26008422/&quot;&gt;How Google Works&lt;/a&gt;&lt;/blockquote&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-08-10-37672403</guid>
<pubDate>Fri, 10 Aug 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>工程趣闻（九）：柔性设计</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-08-06-37671823.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37671823&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;b&gt;生物的适应性&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-2cfee0c07ee51ca435fd874fd7b648fd_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;600&quot; data-rawheight=&quot;442&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-2cfee0c07ee51ca435fd874fd7b648fd&quot; data-watermark-src=&quot;v2-f30a6e1d2ea58bde10ce4f1aab4cc9cd&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;b&gt;适应&lt;/b&gt;可以指&lt;b&gt;生物族群&lt;/b&gt;经过演化而得到的为了在环境生存的特征，&lt;br&gt;或&lt;b&gt;个体&lt;/b&gt;长时间曝露后经由性状的可塑性提高其适应度。&lt;br&gt;在英语里，前者称&lt;b&gt;adaptation&lt;/b&gt;，后者称&lt;b&gt;acclimatization&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;adaptation是指生物个体的生理或行为特征，经过了长时间的天择作用之后，&lt;br&gt;在某个环境下能够顺利的繁衍，并增加数量，发生在&lt;b&gt;族群&lt;/b&gt;的层次。&lt;/p&gt;&lt;p&gt;acclimatization发生在&lt;b&gt;个体&lt;/b&gt;内。&lt;br&gt;例如，平地人到高山住一段时间后，红血球数会提高。&lt;br&gt;养鱼的人帮鱼换水时会一次换一部分，就是为了配合鱼适应不同水质的所需的时间。&lt;/p&gt;&lt;p&gt;在编写软件时，几乎每增加一个功能，都会降低它的应变性，让它以后更难被修改。&lt;br&gt;因此，以怎样的方式给既有软件添加功能，变成了一件需要仔细考虑的事情。&lt;/p&gt;&lt;p&gt;程序员的&lt;b&gt;设计决策&lt;/b&gt;，严重影响了维持特定软件规模所需的&lt;b&gt;心智复杂度&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;我们不妨进行这样的类比，把软件看做在其生命周期内的一个&lt;b&gt;活的生命体&lt;/b&gt;。&lt;br&gt;在成长过程中，它经历了各种环境变更，但必须想办法活下来。&lt;br&gt;而编写软件，就好像在持续&lt;b&gt;培植&lt;/b&gt;一个这样的生命。&lt;/p&gt;&lt;p&gt;这样思考给我们带来很多启发，&lt;br&gt;我们应该怎样设计软件才能使它更具有适应性呢？&lt;br&gt;我们应该以怎样的开发模式，才能更快的响应环境的变更呢？&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;柔性和敏捷&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-36dc16d72ac82de72ce71da56535d878_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;323&quot; data-rawheight=&quot;220&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-36dc16d72ac82de72ce71da56535d878&quot; data-watermark-src=&quot;v2-ba989032f77c41b659eff093bb7ebe13&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/25884108/&quot;&gt;Steve Yegge&lt;/a&gt;在讨论Google平台时，将Google+与Facebook进行了对比。&lt;br&gt;他认为Google+团队错误的以为Facebook之所以成功是因为人家做了一个好产品，&lt;br&gt;而实际上是因为Facebook通过让其他人参与进来的方式，搭建起一整套各异的产品。&lt;/p&gt;&lt;p&gt;Facebook上有成百上千种消磨时间的好去处，所以才能满足所有人。&lt;br&gt;而Google+团队看到这个后说：&lt;br&gt;“天哪，看来我们也需要游戏。我们去找人来帮我们写游戏吧。”&lt;/p&gt;&lt;p&gt;问题就在于Google+在&lt;b&gt;试图预测人们想要什么，然后再实现它&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;或许我们真的&lt;b&gt;不该去预测需求将如何变更&lt;/b&gt;，&lt;br&gt;或许我们该思考，怎样设计可以让软件更容易应对变更，&lt;br&gt;怎样设计便于让其他开发者参与进来。&lt;/p&gt;&lt;p&gt;这并不是一个新的想法，&lt;br&gt;为了使项目能够随着开发工作的进行加速前进，而不会由于它自己的老化停滞不前，&lt;br&gt;设计必须要让人们乐于使用，而且易于做出修改，这就是&lt;b&gt;柔性设计&lt;/b&gt;（supple design）。&lt;/p&gt;&lt;p&gt;早期设计版本通常达不到柔性设计的要求，&lt;br&gt;由于项目的时间限制和预算的缘故，很多设计一直就是僵化的。&lt;/p&gt;&lt;p&gt;但是，当复杂性阻碍了项目的前进时，就需要仔细修改最关键、最复杂的地方，&lt;br&gt;使之变成柔性设计，这样才能突破复杂性带给我们的限制，&lt;br&gt;而不会陷入遗留代码维护的麻烦中。&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-071c4f17298503f461db8f959b13fcb7_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;621&quot; data-rawheight=&quot;347&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-071c4f17298503f461db8f959b13fcb7&quot; data-watermark-src=&quot;v2-d98970225dc432d474766ec5095f1565&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;为了应对快速变化的需求，&lt;br&gt;从1990年代开始逐渐引起广泛关注的一些新型软件开发方法——敏捷开发。&lt;/p&gt;&lt;p&gt;相对于“非敏捷”，它更强调程序员团队与业务专家之间的紧密协作、&lt;br&gt;面对面的沟通、频繁交付新的软件版本、紧凑而自我组织型的团队、&lt;br&gt;能够很好地适应需求变化的代码编写和团队组织方法，也更注重&lt;b&gt;软件开发过程中人的作用&lt;/b&gt;。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;锻炼设计能力&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-3a35bc397eec0f1b2d3c2aca841254f3_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;612&quot; data-rawheight=&quot;320&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-3a35bc397eec0f1b2d3c2aca841254f3&quot; data-watermark-src=&quot;v2-5d009da187d24e539bf26998aaa7d031&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;和其他行业一样，软件工程师的水平也是参差不齐，&lt;br&gt;有些人可能还不胜任软件的设计工作。&lt;/p&gt;&lt;p&gt;于是，很多团队进行了这样的划分，&lt;br&gt;让一些专家程序员去开发可复用的组件或框架，&lt;br&gt;然后&lt;b&gt;让那些暂不胜任的程序员们“傻瓜式”的使用它们&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;不幸的是，这种态度可能会导致失败，因为严重低估了应用程序开发的难度，&lt;br&gt;开发软件是一个&lt;b&gt;处处需要设计&lt;/b&gt;的工作。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/1629512/&quot;&gt;Eric Evans&lt;/a&gt;指出，如果这些人在设计方面不够聪明，&lt;b&gt;就不应该让他们来开发软件&lt;/b&gt;。&lt;br&gt;如果他们足够聪明，那么用“傻瓜式”的框架来应付他们只会为他们造成&lt;b&gt;障碍&lt;/b&gt;，&lt;br&gt;使他们得不到所需的工具。&lt;/p&gt;&lt;p&gt;因此，我们应该把精力放在设计上面。&lt;br&gt;如果还不胜任设计的工作，最紧急的应该是去学习如何进行设计。&lt;br&gt;毕竟，在一条错误的路上走的越远，以后纠正起来就越困难。&lt;/p&gt;&lt;blockquote&gt;Mark Zuckerberg：对于招聘，我创立公司的时候只有19岁，所以我不可能觉得经验是个非常重要的事情，不然我就会怀疑自己了。所以，我们在那些我们认为有天分的人身上做投资，哪怕他们毫无经验。我觉得最重要的是，不要觉得只有有过经验的人才能把某件事情做好。&lt;/blockquote&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%81%A9%E6%87%89&quot;&gt;适应&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%95%8F%E6%8D%B7%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91&quot;&gt;敏捷软件开发&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/1629512/&quot;&gt;领域驱动设计 - 不要编写“傻瓜式”的框架 - P344&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/25884108/&quot;&gt;程序员的呐喊 - 吐槽Google平台 - P184&lt;/a&gt;&lt;/p&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-08-06-37671823</guid>
<pubDate>Mon, 06 Aug 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>业余程序员的个人修养 - 总诀式</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-08-03-41179053.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/41179053&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;b&gt;1. 柯里化的前生今世&lt;/b&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34060802&quot;&gt;函数面面观&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34063576&quot;&gt;括号神教&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34063805&quot;&gt;语言和同像性&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34064164&quot;&gt;编译器与解释器&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34064286&quot;&gt;动态作用域&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34064446&quot;&gt;词法作用域和闭包&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34064549&quot;&gt;first-class continuation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34064655&quot;&gt;尾调用与CPS&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34199018&quot;&gt;For Great Good&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34200056&quot;&gt;类型和类型系统&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34200898&quot;&gt;Pure and Lazy&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34201651&quot;&gt;多态性&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34201756&quot;&gt;Weak head normal form&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;&lt;b&gt;2. Emacs之魂&lt;/b&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34106024&quot;&gt;开篇&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34106092&quot;&gt;一分钟学会人界用法&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34106188&quot;&gt;列表，引用和求值策略&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34106283&quot;&gt;标识符，符号和变量&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34106367&quot;&gt;变量的“指针”语义&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34106430&quot;&gt;宏与元编程&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34106490&quot;&gt;变量捕获与卫生宏&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34106584&quot;&gt;反引用与嵌套反引用&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34106631&quot;&gt;读取器宏&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;&lt;b&gt;3. 递归函数&lt;/b&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34287397&quot;&gt;开篇&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34287414&quot;&gt;编写递归函数的思路和技巧&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34287668&quot;&gt;归纳原理&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34425726&quot;&gt;全函数与计算的可终止性&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34447250&quot;&gt;递归集与递归可枚举集&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34484014&quot;&gt;最多有多少个程序&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34526779&quot;&gt;不动点算子&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34576092&quot;&gt;偏序结构&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34604220&quot;&gt;最小不动点定理&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;&lt;b&gt;4. 你好，类型&lt;/b&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34669807&quot;&gt;开篇&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34679052&quot;&gt;Lambda calculus&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34699469&quot;&gt;Combinatory logic&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34727603&quot;&gt;Propositional logic&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34779520&quot;&gt;Predicate logic&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34815896&quot;&gt;Simply typed lambda calculus&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34861374&quot;&gt;Recursive type&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34887359&quot;&gt;Subtype&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34915143&quot;&gt;Let polymorphism&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34936637&quot;&gt;Parametric polymorphism&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;&lt;b&gt;5. 语言背后的代数学&lt;/b&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34977830&quot;&gt;语义解释&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/35017879&quot;&gt;初等代数&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/35059714&quot;&gt;语义模型&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/35102039&quot;&gt;哥德尔定理&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/35142819&quot;&gt;Σ代数&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/35170799&quot;&gt;Henkin模型&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/35196235&quot;&gt;数学结构&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/35237925&quot;&gt;范畴&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/35281476&quot;&gt;笛卡尔闭范畴&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/35322455&quot;&gt;Curry-Howard-Lambek correspondance&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;&lt;b&gt;6. 编程哲学&lt;/b&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/37653499&quot;&gt;愚者无疑，智者多虑&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/37653890&quot;&gt;让我们想个办法&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/37654697&quot;&gt;是什么影响了我们的开发效率&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/37655447&quot;&gt;把控间接性&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/37656145&quot;&gt;未雨绸缪&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/37656537&quot;&gt;从正确归因到个人影响力&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/37656839&quot;&gt;我写不出好代码&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/37657098&quot;&gt;偿还不起的技术债务&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/37657557&quot;&gt;让技能被使用&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;&lt;b&gt;7. 工程趣闻&lt;/b&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/37668452&quot;&gt;如何落子&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/37668713&quot;&gt;检验假设&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/37669183&quot;&gt;臣妾做不到&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/37669640&quot;&gt;不要制造问题&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/37670015&quot;&gt;小步快跑&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/37670453&quot;&gt;历史不可修改&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/37670926&quot;&gt;不责于人&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/37671342&quot;&gt;不要一拥而上&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-08-03-41179053</guid>
<pubDate>Fri, 03 Aug 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>工程趣闻（八）：不要一拥而上</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-08-03-37671342.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37671342&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;b&gt;分工&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-e07d959b485a1d1fe40f1d6fdee2c43a_r.jpg&quot; data-rawwidth=&quot;620&quot; data-rawheight=&quot;125&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-e07d959b485a1d1fe40f1d6fdee2c43a&quot; data-watermark-src=&quot;v2-8430e9ec85f2e260c8df625954b153af&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;1776年3月，亚当·斯密的《国富论》中第一次提出了劳动分工的观点，&lt;br&gt;并系统全面地阐述了&lt;b&gt;劳动分工&lt;/b&gt;对提高劳动生产率和增进国民财富的巨大作用。&lt;/p&gt;&lt;p&gt;一个没有受过专门训练的劳动者，&lt;br&gt;无论如何努力，一天也生产不了20枚扣针，&lt;br&gt;但有了分工之后，经过前后18道工序，每人每天可以生产4800枚扣针。&lt;/p&gt;&lt;p&gt;社会生活也同样进行了分工，&lt;br&gt;裁缝不想制作他自己的鞋子，而向鞋匠购买；&lt;br&gt;鞋匠不想制作他自己的衣服，而雇裁缝制作；&lt;br&gt;农民不想缝衣，也不想制鞋，而宁愿请不同的工匠去做。&lt;/p&gt;&lt;p&gt;大家各尽所能，各取所需。&lt;/p&gt;&lt;p&gt;在软件项目中，分工也很常见。&lt;br&gt;市场，需求，设计，开发，测试，运维，运营，等等各个岗位都有专业的人来完成。&lt;br&gt;让一个人胜任所有的这些岗位，在当今社会，几乎是不可能的。&lt;br&gt;人们只能&lt;b&gt;各司其职，紧密合作&lt;/b&gt;。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;信息爆炸&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-d25383b500da9588bed4258c568e77eb_r.jpg&quot; data-rawwidth=&quot;372&quot; data-rawheight=&quot;156&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-d25383b500da9588bed4258c568e77eb&quot; data-watermark-src=&quot;v2-6abaf9f2308fdc43dbaf2f1beae03e99&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;然而，分工的神话，可能真的要止于软件的开发环节了。&lt;/p&gt;&lt;p&gt;与工业生产的重复性劳动不同，软件开发恰恰是一个消除重复的过程，&lt;br&gt;它更像是一种智力活动。&lt;br&gt;所以，与其说工程师们在合力建造一座大厦，不如说他们在&lt;b&gt;合写一部著作&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;沟通变成了关键，分工产生的信息不对称，会在合作的时候迸发出来。&lt;/p&gt;&lt;p&gt;如果将100位世界级的音乐家组成一个乐队而没有指挥，&lt;br&gt;简直无法想象这个世界级的乐队会奏出怎样的音乐。&lt;/p&gt;&lt;p&gt;让这些音乐家们发挥他们的最佳水平不如让他们知道&lt;b&gt;何时应该大声何时应该轻柔&lt;/b&gt;来得重要，&lt;br&gt;这样的乐队简直是在&lt;b&gt;浪费人才&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;相同的人才浪费在软件开发方面也很常见，&lt;br&gt;优秀的团队，专业的开发人员，&lt;br&gt;采用最新的开发实践，但还是无法达成项目计划目标的要求。&lt;/p&gt;&lt;p&gt;回想一下，软件开发过程中的大部分时间，&lt;br&gt;都是在滚动屏幕，试着查找和理解代码，&lt;br&gt;而真正进行代码编写的时间比例是非常小的。&lt;/p&gt;&lt;p&gt;最坏的情况是，团队中每个人都要对这些陈旧代码自学一遍，&lt;br&gt;并且对它们进行的任何修改，其他人还要再重新学习。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-6edf6d883e82fed6c7a0cf3ad6ad9c11_r.jpg&quot; data-rawwidth=&quot;253&quot; data-rawheight=&quot;184&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-6edf6d883e82fed6c7a0cf3ad6ad9c11&quot; data-watermark-src=&quot;v2-05402bc270a0fba59f47b72156641324&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;这些沟通成本是巨大的，&lt;br&gt;即便是最称职的工程师，大多数时间考虑的也通常不是怎样实现一个功能，&lt;br&gt;而是在&lt;b&gt;研究以前别人是怎么做的&lt;/b&gt;，&lt;br&gt;而且这个『以前』可能并不会太早，这个『别人』也可能是过去的自己。&lt;/p&gt;&lt;p&gt;因此，越是代码有大量产出的团队，&lt;br&gt;&lt;b&gt;阅读障碍&lt;/b&gt;越是明显，阻碍了团队效率的进一步提高。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;团队效率&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-289b8600cc100de8111d530ebd701bf2_r.jpg&quot; data-rawwidth=&quot;640&quot; data-rawheight=&quot;359&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-289b8600cc100de8111d530ebd701bf2&quot; data-watermark-src=&quot;v2-cc8b1271343c5d1eea5cd96586bfbb52&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;生活中多数东西，最好与普通之间的差距不超过两倍。&lt;/p&gt;&lt;p&gt;比如出租车司机，最棒的司机与普通司机之间的差距大概是30%，&lt;br&gt;最好的与普通之间的差距有多大呢？20%？&lt;br&gt;最好的CD机与普通CD机的差距有多大？20%？&lt;br&gt;这种差距很少超过两倍。&lt;/p&gt;&lt;p&gt;乔布斯在《遗失的访谈》中指出，&lt;br&gt;在软件行业，还有硬件行业，这种差距有可能超过15倍，&lt;b&gt;甚至100倍&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;在一项相关研究中，Sackman、Erikson和Grand曾对一组具有经验的程序员进行测量。&lt;br&gt;在该小组中，最好的和最差的表现在生产率上平均为10:1；&lt;br&gt;在运行速度和空间上具有5:1的惊人差异。&lt;/p&gt;&lt;p&gt;简而言之，20,000/年的程序员的生产率可能是10,000/年程序员的&lt;b&gt;10倍&lt;/b&gt;，&lt;br&gt;数据还显示&lt;b&gt;经验和实际的表现没有直接联系&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;考虑到工程师们在效率方面的差异，&lt;br&gt;Harlan Mills提供了一个崭新的、创造性的解决方案。&lt;/p&gt;&lt;p&gt;Mills建议大型项目的每一个部分由一个团队解决，&lt;br&gt;但是该队伍以类似&lt;b&gt;外科手术&lt;/b&gt;的方式组建，而并非一拥而上。&lt;br&gt;也就是说，同每个成员截取问题某个部分的做法相反，&lt;br&gt;&lt;b&gt;由一个人来进行问题的分解，其他人给予他所需要的支持&lt;/b&gt;，以提高效率和生产力。&lt;/p&gt;&lt;p&gt;有些软件公司已经采用了类似的工作方式：&lt;/p&gt;&lt;blockquote&gt;Facebook的工程师们不分前端和后端，只分product和infrastructure。做product的通常都是全栈工程师，不需要对特定的技术非常精通，但要求学习能力和灵活性足够好，不能只做自己舒适区以内的事情。infrastructure拥有更多各个领域的specialist，前端只是其中之一。infrastructure的客户就是product，要做的事情就是让product开发实际产品时效率更高。&lt;/blockquote&gt;&lt;p&gt;可见，效率问题应该始终围绕着瓶颈展开，不能怀有侥幸心理。&lt;br&gt;最大化并行程度，并不是一个永远适用的方法，&lt;br&gt;&lt;b&gt;也要看问题本身是否具有可并行处理的属性。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;一个人20秒可以跑完100米，可是20个人1秒却不可能跑完全程。&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-cd68d7bbb99aa8205da4b82b0c41a55e_r.jpg&quot; data-rawwidth=&quot;500&quot; data-rawheight=&quot;308&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-cd68d7bbb99aa8205da4b82b0c41a55e&quot; data-watermark-src=&quot;v2-b5656b345e0fbea53d04891c8f15c86b&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://wiki.mbalib.com/wiki/%E6%96%AF%E5%AF%86%E7%9A%84%E5%88%86%E5%B7%A5%E7%90%86%E8%AE%BA&quot;&gt;斯密的分工理论&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/1007738/&quot;&gt;快速软件开发&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/1102259/&quot;&gt;人月神话&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/question/28207685/answer/39974928&quot;&gt;Web 前后端分离的意义大吗？&lt;/a&gt;&lt;/p&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-08-03-37671342</guid>
<pubDate>Fri, 03 Aug 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>工程趣闻（七）：不责于人</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-07-30-37670926.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37670926&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;b&gt;让技术活下来&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-4c151caa19a0a96ccdc4c7829dd02ef8_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;852&quot; data-rawheight=&quot;357&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-4c151caa19a0a96ccdc4c7829dd02ef8&quot; data-watermark-src=&quot;v2-e0811a9c2a9812660a0a815bb3416c87&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;有这样一种观点，认为设计优良的框架，&lt;br&gt;细致考虑并精巧实现的架构自然会被人们重复利用。&lt;/p&gt;&lt;p&gt;事实上，即便是最精美，最优雅的框架，可复用性最高的系统，&lt;br&gt;也必须满足下面的条件才可能被&lt;b&gt;复用&lt;/b&gt;：&lt;br&gt;（1）大家知道它们存在&lt;br&gt;（2）大家知道如何使用它们&lt;br&gt;（3）大家认识到利用已有资源好过自己动手&lt;/p&gt;&lt;p&gt;如果大家找不到可复用的资源，或者不知道如何使用这些资源，&lt;br&gt;人的天性就会发挥作用，他们就会自己动手实现。&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-8af642befae2a5da9b65b617745d33c7_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;848&quot; data-rawheight=&quot;356&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-8af642befae2a5da9b65b617745d33c7&quot; data-watermark-src=&quot;v2-b36cb59465e37efe9ffd341066e7bcc3&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;“是金子总会发光”的想法在软件领域可能行不通，&lt;br&gt;那些时髦的框架之所以被推到了浪潮之巅，是因为有人在营销它们，&lt;br&gt;不得不承认商业规律已经融入到了技术方案中。&lt;/p&gt;&lt;p&gt;当然，这并不总是好的，&lt;br&gt;方案本身很容易绑架用户，吞噬着使用者的理智。&lt;/p&gt;&lt;p&gt;在享有种种表面上便利的同时，我们似乎看到了它们伪善的一面，&lt;br&gt;“买它吧，用它吧，它能给你带来快乐……”。&lt;/p&gt;&lt;p&gt;技术出身的工程师们，很容易对这件事嗤之以鼻，&lt;br&gt;把全部精力放到了设计和架构本身，追求极致，&lt;br&gt;但是忽略了技术究竟该怎样被别人使用。&lt;/p&gt;&lt;p&gt;这些&lt;b&gt;理想主义者&lt;/b&gt;的假设，会加速技术的灭亡，在残酷的市场竞争中被淘汰。&lt;br&gt;人们并不会为优雅的设计买单，他们只相信价值和利润，&lt;b&gt;活下去才是第一要务&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;这就是为什么很多企业追求技术推动业务、技术与实践结合的原因了，&lt;br&gt;因为不得不这么做，&lt;br&gt;毕竟，工具只有被使用才有价值。&lt;/p&gt;&lt;blockquote&gt;Reuse is about people and education, not just architecture.&lt;/blockquote&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;帮团队看清问题&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;我们可能感受到了，在项目实践中去推广一门技术，是多么的困难。&lt;br&gt;让别人做一件事情，影响团队的决策，个体是多么的无力。&lt;/p&gt;&lt;p&gt;每个成员都只会从自身角度出发，按个人收益进行决策，并不会顺利听从安排，&lt;br&gt;也不容易受到别人的鼓动。&lt;/p&gt;&lt;p&gt;虽然同事们不会因为使用这些工具而付钱，&lt;br&gt;但是会付出时间，精力甚至牺牲尊严，&lt;br&gt;这是产生抗拒心理的根本原因。&lt;/p&gt;&lt;p&gt;一上来就推销我们的工具和技术，显然是不可行的。&lt;/p&gt;&lt;p&gt;反观自己，当我们发现了解决方案为之高兴的时候，&lt;br&gt;很容易忽略我们的&lt;b&gt;目的是为了解决问题&lt;/b&gt;。&lt;br&gt;而且大多数问题，往往都不止有一个解决方案。&lt;/p&gt;&lt;p&gt;当我们说服别人不希望人家固执己见之时，自己也要保持开放态度，&lt;br&gt;如果自己偏爱的方案无法改变，就无法接受更好的方案。&lt;/p&gt;&lt;p&gt;因此，不要告诉人家他们现在的这个选择“不对”，&lt;br&gt;&lt;b&gt;不要就好像人家误入歧途一样跟人家谈话。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;因为我们是在尝试解决问题，而不是推行方案。&lt;br&gt;我们需要做的是帮团队看清问题的本质，&lt;br&gt;然后让适用的方案有机会出现。&lt;/p&gt;&lt;p&gt;只有确定真的有问题，才能弄清楚是什么问题，以及这个问题是否值得解决。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;不要力挽狂澜&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-e3feca2fe1d4a07898dcb1e4f4997dec_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;850&quot; data-rawheight=&quot;352&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-e3feca2fe1d4a07898dcb1e4f4997dec&quot; data-watermark-src=&quot;v2-116bf60b1d8dd536f52bb141a2508a91&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;无论是在生活还是工程实践中，&lt;br&gt;人们很容易看到事物的现状，但是&lt;b&gt;发展规律&lt;/b&gt;就不容易看清了。&lt;/p&gt;&lt;p&gt;当人们对现状不满时，直觉上的反应就是要改变它，&lt;br&gt;但是又忽略了导致现状的原因。&lt;/p&gt;&lt;p&gt;因此，这样的改变通常是不能凑效的，&lt;br&gt;并不会因为我们想要改变它，而产生改变，&lt;br&gt;事物有其自身的发展趋势。&lt;/p&gt;&lt;p&gt;看到了事物发展的趋势，就能运用它，&lt;br&gt;人们会不由自主的向着趋势行动，趋利避害和从众心理是本能反应。&lt;br&gt;高明的领导者，甚至会&lt;b&gt;营造趋势&lt;/b&gt;制造条件，引导人们行进的方向。&lt;/p&gt;&lt;p&gt;先把河道疏通，再开闸放水，河水就会自然的流动。&lt;/p&gt;&lt;p&gt;看不到趋势而强行改变，会遭遇很大的抵触，把精力用到了内耗中。&lt;br&gt;力挽狂澜的个人英雄主义，往往并不凑效。&lt;br&gt;顺水推舟顺势而为，才是明智之举。&lt;/p&gt;&lt;p&gt;那么如何营造这种趋势呢？&lt;br&gt;我们需要做的是吸引，就好像鲜花吸引蜜蜂一样，&lt;br&gt;营造人们对现状的不适感，让趋势对人们有利。&lt;/p&gt;&lt;p&gt;同时，相信团队的能力，把责任委派出去，鼓励对趋势有利的行为。&lt;br&gt;人们就会主动尝试，为解决这种不适向着趋势前进。&lt;br&gt;不要限制人们的想象力，让计划持续可变，关注现状与目标之间的距离。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://so.gushiwen.org/guwen/bookv_43.aspx&quot;&gt;孙子兵法：兵势篇&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/6990284/&quot;&gt;布道之道&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/26008422/&quot;&gt;How Google Works&lt;/a&gt;&lt;/p&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-07-30-37670926</guid>
<pubDate>Mon, 30 Jul 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>工程趣闻（六）：历史不可修改</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-07-27-37670453.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37670453&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;b&gt;沉没成本&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-61c50ec8a26b146424569e3be3df0a73_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;444&quot; data-rawheight=&quot;445&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-61c50ec8a26b146424569e3be3df0a73&quot; data-watermark-src=&quot;v2-a8c151865791bf4fa669a388b19cf64b&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;人们在决定是否做一件事情的时候，不仅要看这件事对自己有没有好处，&lt;br&gt;而且还要看过去是不是已经在这件事情上有过投入。&lt;/p&gt;&lt;p&gt;我们把这些已经发生的，不可收回的支出，&lt;br&gt;如时间、金钱、精力等称为“&lt;b&gt;沉没成本&lt;/b&gt;”（Sunk Cost）。&lt;/p&gt;&lt;p&gt;在微观经济学理论中，做&lt;b&gt;决策&lt;/b&gt;时仅需要考虑&lt;b&gt;可变成本&lt;/b&gt;。&lt;br&gt;如果同时考虑到沉没成本，那结论就不是纯粹基于事物的价值作出来的了。&lt;/p&gt;&lt;p&gt;如果你预订了一张电影票，已经付了钱且假设不能退票。&lt;br&gt;此时你付的价钱已经不能收回，就算你不看电影钱也收不回来，&lt;br&gt;电影票的价钱就是你的沉没成本。&lt;/p&gt;&lt;p&gt;大多数经济学家们认为，如果你是理性的，那就&lt;b&gt;不该在做决策时考虑沉没成本&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;比如在前面提到的看电影的例子中，会有两种可能结果：&lt;br&gt;付钱后发觉电影不好看，但忍受着看完；&lt;br&gt;付钱后发觉电影不好看，退场去做别的事情。&lt;/p&gt;&lt;p&gt;两种情况下你都已经付钱，所以应该不考虑这件事情。&lt;br&gt;如果你后悔买票了，那么你当前的决定应该是基于你是否想继续看这部电影，&lt;br&gt;而不是你为这部电影付了多少钱。&lt;/p&gt;&lt;p&gt;此时的决定不应该考虑到买票的事，而应该以看免费电影的心态来作判断。&lt;/p&gt;&lt;p&gt;经济学家们往往建议选择后者，这样你只是花了点冤枉钱，&lt;br&gt;还可以&lt;b&gt;通过腾出时间来做其他更有意义的事来降低机会成本&lt;/b&gt;，&lt;br&gt;而选择前者你还要继续受冤枉罪。&lt;/p&gt;&lt;p&gt;在编写软件过程中，人们受制于沉没成本束缚的案例也屡见不鲜。&lt;/p&gt;&lt;p&gt;我们花费了很多精力开发了一套软件，就很难接受它不被别人使用的结局，&lt;br&gt;会尝试花更大的精力推广它，总想把它用到那些本不适用的场景中。&lt;/p&gt;&lt;p&gt;这和赌徒的心态并无二致，&lt;br&gt;以前投入过的巨额赌资，会变成无形压力，&lt;br&gt;让他们继续赌下去。&lt;/p&gt;&lt;p&gt;因此，我们不如把已经写好的软件看做一个免费的开源工具，&lt;br&gt;很不幸，是否使用它，要取决于现在看来它是否还是适用的，&lt;br&gt;是否继续维护，也要再衡量它是否有维护的价值。&lt;/p&gt;&lt;p&gt;这种判断最好在软件编写的过程中，时时刻刻在发生。&lt;/p&gt;&lt;b&gt;&lt;hr&gt;&lt;/b&gt;&lt;h2&gt;&lt;b&gt;兼容性&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-a0715423ad92759b73137aa9361a69d3_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;298&quot; data-rawheight=&quot;206&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-a0715423ad92759b73137aa9361a69d3&quot; data-watermark-src=&quot;v2-4bbcd2eec0146fefad7f8bb4a00d59d8&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;b&gt;DLL地狱&lt;/b&gt;（DLL Hell）指在Microsoft Windows系统中，&lt;br&gt;因为动态链接库（DLL）的版本或兼容性的问题而造成程序无法正常运行。 &lt;/p&gt;&lt;p&gt;Windows早期并没有很严谨的DLL版本管理机制，&lt;br&gt;以致经常发生安装了某软件后，因为其覆盖了系统上原有的同一个DLL档，&lt;br&gt;而导致原有可运行的程序无法运行。&lt;/p&gt;&lt;p&gt;可是，还原回原有的DLL档之后，新安装的软件就无法运行。&lt;/p&gt;&lt;p&gt;Linux 系统中也遇到共享库（Shared Library）的&lt;b&gt;兼容问题&lt;/b&gt;，&lt;br&gt;共享库的开发者会不停的更改共享库的版本，&lt;br&gt;以修正原有的Bug，增加新的功能或改进性能等。&lt;/p&gt;&lt;p&gt;由于动态链接的灵活性，使得程序本身和程序所依赖的共享库可以分别独立开发和更新，&lt;br&gt;但是共享库版本的更新可能会导致接口的更改或删除，&lt;br&gt;这可能导致依赖于该共享库的程序无法正常运行。（&lt;a href=&quot;https://en.wikipedia.org/wiki/Soname&quot;&gt;soname&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;兼容性是应该被事先考虑的问题&lt;/b&gt;，&lt;br&gt;我们的软件一旦被使用，就埋下了祸根。&lt;/p&gt;&lt;p&gt;软件各个模块之间的依赖关系，实际上反映了在编写时被依赖模块的特性，&lt;br&gt;而不是反映在被使用时的当前特性。&lt;/p&gt;&lt;p&gt;在需求变更的压力下，软件的对外表现不得不发生变更，&lt;br&gt;接口也就不得不进行调整，&lt;br&gt;这就引发了一系列不可避免的兼容性问题。&lt;/p&gt;&lt;p&gt;虽然追求优雅的设计在一定程度上可以缓解它，但也不是万能的，&lt;br&gt;而且担心接口变更会带来麻烦从而裹足不前也是不恰当的。&lt;br&gt;这极大的限制了软件演进的速度，也限制了解决方案对问题的及时响应。&lt;/p&gt;&lt;blockquote&gt;我们应该把代码看成有3-5年的半生命周期，因此应该定期进行更新。&lt;br&gt;——Eliot Horowitz&lt;/blockquote&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%B2%89%E6%B2%A1%E6%88%90%E6%9C%AC&quot;&gt;沉没成本&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/DLL%E5%9C%B0%E7%8D%84&quot;&gt;DLL地狱&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/3652388/&quot;&gt;程序员的自我修养&lt;/a&gt;&lt;/p&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-07-27-37670453</guid>
<pubDate>Fri, 27 Jul 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>工程趣闻（五）：小步快跑</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-07-21-37670015.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37670015&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;b&gt;利特尔法则&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-4922c4ed32f948101fa0f788ee27fa2a_r.jpg&quot; data-rawwidth=&quot;399&quot; data-rawheight=&quot;304&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-4922c4ed32f948101fa0f788ee27fa2a&quot; data-watermark-src=&quot;v2-96e263c49fec2a37f8aded498b2b5b8d&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;一个商场在一段时间内会有人进入也会有人离开，&lt;br&gt;如果平均滞留人数保持恒定，就可以看做是稳定的系统（stable system），&lt;br&gt;系统的&lt;b&gt;吞吐率&lt;/b&gt;就是单位时间内进入或离开的人数。&lt;/p&gt;&lt;p&gt;假设商场中平均滞留人数为 &lt;equation&gt;L&lt;/equation&gt; ，吞吐率为 &lt;equation&gt;\lambda&lt;/equation&gt; ，&lt;br&gt;则每个人的&lt;b&gt;平均等待时间&lt;/b&gt;就是 &lt;equation&gt;W=L/\lambda&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;要想缩短平均等待时间，只能增加吞吐率 &lt;equation&gt;\lambda&lt;/equation&gt; 或减少平均滞留人数 &lt;equation&gt;L&lt;/equation&gt; 来实现。&lt;br&gt;其中， &lt;equation&gt;W=L/\lambda&lt;/equation&gt; 称为&lt;b&gt;利特尔法则&lt;/b&gt;。&lt;/p&gt;&lt;blockquote&gt;The long-term average number of customers in a stable system L is equal to the long-term average effective arrival rate, λ, multiplied by the average time a customer spends in the system, W; or expressed algebraically: L = λW.&lt;/blockquote&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;翻转硬币游戏&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-567bc4f2e7a81b9e1c761f6664dd3d7f_r.jpg&quot; data-rawwidth=&quot;437&quot; data-rawheight=&quot;321&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-567bc4f2e7a81b9e1c761f6664dd3d7f&quot; data-watermark-src=&quot;v2-abedb84533182c6c46c291cf57cee151&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;假设有20枚硬币，还有4个人A，B，C，D，&lt;br&gt;每个人都要把硬币翻转才能传递给下一个人。&lt;/p&gt;&lt;p&gt;假设将一枚硬币进行翻转需要1s，&lt;br&gt;我们采用以下不同的策略，看看对任务完成的时间有什么影响。&lt;/p&gt;&lt;p&gt;（1）翻转20枚硬币后传递：&lt;br&gt;A需要20s，B需要20s，C需要20s，D需要20s。&lt;br&gt;第一枚硬币到达需要80s，最后一枚硬币到达需要80s。&lt;/p&gt;&lt;p&gt;（2）翻转5枚硬币后传递：&lt;br&gt;A需要5s×4，B需要5s×4，C需要5s×4，D需要5s×4。&lt;br&gt;第一枚硬币到达需要20s，最后一枚硬币到达需要35s。&lt;/p&gt;&lt;p&gt;（3）翻转1枚硬币后传递：&lt;br&gt;A需要1s×20，B需要1s×20，C需要1s×20，D需要1s×20。&lt;br&gt;第一枚硬币到达需要4s，最后一枚硬币到达需要23s。&lt;/p&gt;&lt;p&gt;因此，&lt;b&gt;减小在制品数量可以有效的缩短工期。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;注：&lt;br&gt;WIP的意思即为Work In Process ，也就是在制品的意思。&lt;br&gt;&lt;b&gt;在制品&lt;/b&gt;指的是正在加工，尚未完成的产品。&lt;br&gt;广义的包括正在加工的产品和准备进一步加工的半成品；&lt;br&gt;狭义的仅指正在加工的产品。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;看板&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-7659a52d879d47732e60e13e8054b9c3_r.jpg&quot; data-rawwidth=&quot;992&quot; data-rawheight=&quot;366&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-7659a52d879d47732e60e13e8054b9c3&quot; data-watermark-src=&quot;v2-03d47cb72995916f1875be1430b56620&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;看板（Kanban）一词来自日文，本义是&lt;b&gt;可视化卡片&lt;/b&gt;，&lt;br&gt;它源于&lt;b&gt;精益制造&lt;/b&gt;——上世纪50年代由丰田公司创造的生产管理方法。&lt;/p&gt;&lt;p&gt;看板工具的实质是：后道工序在需要时，通过看板向前道工序发出信号，&lt;br&gt;前道工序只会根据看板按需生产。&lt;/p&gt;&lt;p&gt;看板信号&lt;b&gt;由下游向上游传递，拉动上游的生产活动&lt;/b&gt;，使产品向下游流动。&lt;br&gt;拉动的源头是最下游的客户价值，也就是客户订单或需求。&lt;/p&gt;&lt;p&gt;看板开发方法是看板方法在软件工程中的应用，&lt;br&gt;越来越多的案例表明，它能够改善协作、优化管理，显著提高交付速度、质量和灵活性。&lt;/p&gt;&lt;p&gt;价值、&lt;b&gt;价值流&lt;/b&gt;，以及&lt;b&gt;问题和瓶颈的可视化&lt;/b&gt;，&lt;br&gt;是改善价值的前提，也是其它看板实践的基础。&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-7c67f376f3fecb02c5ec0b9ca793bfe6_r.jpg&quot; data-rawwidth=&quot;1240&quot; data-rawheight=&quot;595&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-7c67f376f3fecb02c5ec0b9ca793bfe6&quot; data-watermark-src=&quot;v2-f7c0e8b53beb11f6a5ba590bf09d9d05&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;blockquote&gt;任何非瓶颈资源究竟能使系统赚多少钱，不是由它自己的潜能所决定，而是由系统中的其他制约因素所决定。——艾利·高德拉特&lt;/blockquote&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Little%27s_law&quot;&gt;Little&#39;s law&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/26729634/&quot;&gt;看板实战&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.woshipm.com/pd/54968.html&quot;&gt;解析精益产品开发（一）—— 看板开发方法&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/1464593/&quot;&gt;目标：简单而有效的常识管理&lt;/a&gt;&lt;/p&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-07-21-37670015</guid>
<pubDate>Sat, 21 Jul 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>工程趣闻（四）：不要制造问题</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-07-16-37669640.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37669640&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;b&gt;XY问题&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-278fb2bc7f11a3ad58a044c4a6d22569_r.jpg&quot; data-rawwidth=&quot;440&quot; data-rawheight=&quot;298&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-278fb2bc7f11a3ad58a044c4a6d22569&quot; data-watermark-src=&quot;v2-95d00e0f158ee2c853cfb4c18676246a&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;这个问题，最早是在&lt;a href=&quot;http://coolshell.cn/articles/10804.html&quot;&gt;酷壳：X-Y Problem&lt;/a&gt;中看到的。&lt;/p&gt;&lt;p&gt;对于X-Y Problem的意思如下：&lt;br&gt;1）有人想解决问题X&lt;br&gt;2）他觉得Y可能是解决X问题的方法&lt;br&gt;3）但是他不知道Y应该怎么做&lt;br&gt;4）于是他去问别人Y应该怎么做？&lt;br&gt;简而言之，没有去问怎么解决问题X，而是&lt;b&gt;去问&lt;/b&gt;解决方案Y应该怎么去实现和操作。&lt;/p&gt;&lt;p&gt;&lt;b&gt;于是乎：&lt;/b&gt;&lt;br&gt;1）热心的人们帮助并告诉这个人Y应该怎么搞，但是大家都觉得Y这个方案有点怪异。&lt;br&gt;2）在经过大量地讨论和浪费了大量的时间后，热心的人终于明白了原始问题X是怎么一回事。&lt;br&gt;3）于是大家都发现，Y根本就不是用来解决X的合适的方案。&lt;/p&gt;&lt;p&gt;X-Y Problem最大的严重的问题就是：&lt;br&gt;&lt;b&gt;在一个根本错误的方向上浪费他人大量的时间和精力！&lt;/b&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;Accidental complexity&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;Neal Ford&lt;/b&gt;指出，&lt;br&gt;&lt;b&gt;Essential complexity&lt;/b&gt;指的是问题与生俱来的，无法避免的困难。&lt;br&gt;&lt;b&gt;Accidental complexity&lt;/b&gt;，是人们解决Essential complexity的过程中衍生的。&lt;/p&gt;&lt;p&gt;系统设计的初衷是解决Essential complexity，&lt;br&gt;但是解决方案本身带来了新的问题。&lt;/p&gt;&lt;p&gt;许多软件框架和厂商提供的“解决方案”都表现出Accidental complexity的症状。&lt;br&gt;解决特定问题的框架很管用，&lt;br&gt;但&lt;b&gt;设计过度的框架&lt;/b&gt;增加的复杂性反而超过了它应该缓解的复杂性。&lt;/p&gt;&lt;p&gt;在大型软件项目中，关注Essential complexity，消除Accidental complexity，&lt;br&gt;抽丝剥茧制订解决方案，才是真正的挑战。&lt;/p&gt;&lt;blockquote&gt;It&#39;s the duty of the architect to solve the problems inherent in essential complexity without introducing accidental complexity.&lt;/blockquote&gt;&lt;p&gt;注：&lt;br&gt;就英语：accidental的这个字眼而言，并不是指偶然发生的意思，&lt;br&gt;也不是意外不幸的意思，而是比较接近&lt;b&gt;伴随的&lt;/b&gt;或次要的意思。&lt;/p&gt;&lt;b&gt;&lt;hr&gt;&lt;/b&gt;&lt;h2&gt;&lt;b&gt;关注难点&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-0687103524cfe50bcb5d6e1f332181bb_r.jpg&quot; data-rawwidth=&quot;460&quot; data-rawheight=&quot;460&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-0687103524cfe50bcb5d6e1f332181bb&quot; data-watermark-src=&quot;v2-c4d0521f7621d8e084ddbd074a59b915&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;b&gt;Frederick P. Brooks&lt;/b&gt;在论文&lt;a href=&quot;http://worrydream.com/refs/Brooks-NoSilverBullet.pdf&quot;&gt;No Silver Bullet&lt;/a&gt;中将软件开发的困难分为两类：&lt;br&gt;（1）&lt;b&gt;Essential Difficulties：&lt;/b&gt;打造由抽象软件实体构成的复杂概念结构&lt;br&gt;（2）&lt;b&gt;Accidental Difficulties：&lt;/b&gt;使用编程语言表达这些抽象实体，在空间和时间限制内将它们映射成机器语言&lt;/p&gt;&lt;p&gt;软件开发真正的困难，是在于这种&lt;b&gt;概念构造&lt;/b&gt;的规格制定、设计和测试。&lt;br&gt;而并非在孜孜矻矻于它的呈现方式，以及测试该呈现方式的精确程度。&lt;/p&gt;&lt;p&gt;Accidental Difficulties会随着工具的改善而逐渐淡化，&lt;br&gt;反而是Essential Difficulties最难以解决，&lt;br&gt;因为大部分的活动是发生在人们的&lt;b&gt;脑海里&lt;/b&gt;，缺乏有效的辅助工具。&lt;/p&gt;&lt;p&gt;Brooks认为现在是关注软件任务中的必要活动的时候了，&lt;br&gt;也就是那些和构造异常复杂的&lt;b&gt;抽象概念&lt;/b&gt;结构有关的部分。&lt;/p&gt;&lt;p&gt;他提出了几个建议：&lt;br&gt;（1）仔细地进行市场调研，避免开发已上市的产品，&lt;br&gt;构建软件最可能的彻底解决方案是&lt;b&gt;不开发任何软件&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;（2）在获取和制订软件需求时，将快速原型开发作为迭代计划的一部分。&lt;br&gt;因为，开发软件系统的过程中，最困难的部分是&lt;b&gt;确切地决定搭建什么样的系统&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;（3）增量开发——增长，而非搭建系统。&lt;br&gt;有机地更新软件，随着系统的运行、使用和测试，&lt;b&gt;逐渐添加&lt;/b&gt;越来越多的功能。&lt;/p&gt;&lt;p&gt;（4）不断挑选和培养杰出的概念设计人员，&lt;br&gt;软件行业的核心，一如既往的是&lt;b&gt;人员&lt;/b&gt;。&lt;/p&gt;&lt;blockquote&gt;Good programmers spend much of the other 90% thinking, researching, and experimenting to find the best design. Bad programmers spend much of that 90% debugging code by randomly making changes and seeing if they work.&lt;/blockquote&gt;&lt;b&gt;&lt;hr&gt;&lt;/b&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://xyproblem.info/&quot;&gt;The XY Problem&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/4745287/&quot;&gt;软件架构师应该知道的97件事&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/1102259/&quot;&gt;人月神话&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%B2%A1%E6%9C%89%E9%93%B6%E5%BC%B9&quot;&gt;没有银弹&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://automagical.rationalmind.net/2010/08/17/some-lesser-known-truths-about-programming/&quot;&gt;Some lesser known truths about programming&lt;/a&gt;&lt;/p&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-07-16-37669640</guid>
<pubDate>Mon, 16 Jul 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>工程趣闻（三）：臣妾做不到</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-07-13-37669183.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37669183&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;b&gt;哥德尔不完备定理&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-9fd658624931175cc32be0039cebcc68_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;909&quot; data-rawheight=&quot;1327&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-9fd658624931175cc32be0039cebcc68&quot; data-watermark-src=&quot;v2-354786285ed9dd63e2637541cff3959e&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;b&gt;库尔特·哥德尔&lt;/b&gt;（Kurt Friedrich Gödel，1906年4月28日－1978年1月14日），&lt;br&gt;数学家、逻辑学家和哲学家，维也纳学派（维也纳小组）的成员。&lt;br&gt;其最杰出的贡献是哥德尔不完备定理和连续统假设的相对协调性证明。&lt;/p&gt;&lt;p&gt;哥德尔的数学天分极高，他在维也纳大学时本来修读理论物理和基础数学，&lt;br&gt;后来又在汉斯·哈恩的指导下研习数理逻辑、集合论。&lt;br&gt;二十四岁时，完成哥德尔完备性定理，并获得同校博士学位。&lt;/p&gt;&lt;p&gt;在数理逻辑中，哥德尔不完备定理是库尔特·哥德尔于1931年证明并发表的两条定理。&lt;/p&gt;&lt;p&gt;第一条&lt;b&gt;定理&lt;/b&gt;指出：&lt;br&gt;任何相容的形式系统，只要蕴涵皮亚诺算术公理，&lt;br&gt;就可以在其中构造在体系中不能被证明的真命题。&lt;/p&gt;&lt;p&gt;即，通过推演不能得到所有真命题（即体系是不完备的）。&lt;/p&gt;&lt;p&gt;第二条&lt;b&gt;定理&lt;/b&gt;指出：&lt;br&gt;任何相容的形式系统，只要蕴涵皮亚诺算术公理，&lt;br&gt;它就不能用于证明它本身的相容性。&lt;/p&gt;&lt;p&gt;这个结果破坏了数学中一个称为希尔伯特计划的哲学企图。&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-9b36fbaad1834d12671b13ddbb24b02c_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;592&quot; data-rawheight=&quot;189&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-9b36fbaad1834d12671b13ddbb24b02c&quot; data-watermark-src=&quot;v2-124694a4b679357363ee7675bd93e5a3&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;通常的形式系统中, 所有公理构成的集合都是&lt;b&gt;递归集&lt;/b&gt;。&lt;br&gt;而在一阶逻辑中, 所有定理构成的集合 &lt;equation&gt;P&lt;/equation&gt; 是一个递归可枚举集，不是递归集。&lt;/p&gt;&lt;p&gt;由于递归集当且仅当它和它的补集都是递归可枚举集，&lt;br&gt;所以 &lt;equation&gt;P&lt;/equation&gt; 的补集就不是递归可枚举集，否则就与 &lt;equation&gt;P&lt;/equation&gt; 不是递归集矛盾。&lt;/p&gt;&lt;p&gt;递归可枚举集，意味着存在一个算法判定元素&lt;b&gt;属于&lt;/b&gt;集合，&lt;br&gt;但&lt;b&gt;如果元素不属于集合则算法不终止&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;递归集，意味着存在一个&lt;b&gt;总是会终止&lt;/b&gt;的算法，判定元素&lt;b&gt;是否&lt;/b&gt;属于集合。&lt;/p&gt;&lt;p&gt;既然定理集 &lt;equation&gt;P&lt;/equation&gt; 的补集 &lt;equation&gt;P&#39;&lt;/equation&gt; 不是一个递归可枚举集，&lt;br&gt;那么对于一个不可证的命题，就不存在一个算法来判定它属于 &lt;equation&gt;P&#39;&lt;/equation&gt; 。&lt;br&gt;即，存在一个不可证的命题，但没有算法来判定它是不可证的。&lt;/p&gt;&lt;p&gt;然而，它又在 &lt;equation&gt;P&lt;/equation&gt; 之外，用于判定它是否属于P的算法不会终止。&lt;/p&gt;&lt;p&gt;因此，存在一个命题，找不到一个算法来判定它可证，&lt;br&gt;也找不到一个算法来判定它不可证。&lt;/p&gt;&lt;b&gt;&lt;hr&gt;&lt;/b&gt;&lt;h2&gt;&lt;b&gt;关注方法论&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-9b8c3605d505f51c99420e2a969f0e0e_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;400&quot; data-rawheight=&quot;408&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-9b8c3605d505f51c99420e2a969f0e0e&quot; data-watermark-src=&quot;v2-f828ce7b2a8f56df5df12460a4d0b0de&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;b&gt;Maura Thomas&lt;/b&gt;是一个屡获殊荣的国际演说家，&lt;br&gt;同时她还是对个人、企业生产力、注意力、效率方面的教练。&lt;br&gt;她曾指出相比工具而言，技能的重要性&lt;br&gt;——Until You Have Productivity Skills, Productivity Tools Are Useless。&lt;/p&gt;&lt;p&gt;生产力结合了技能和工具两个方面，但大多数情况下，工具只能起辅助作用，&lt;br&gt;&lt;b&gt;工具强化的是已经具备的技能&lt;/b&gt;。&lt;br&gt;如果本身不是一个棒球手，使用一支好的球棒也无济于事。&lt;/p&gt;&lt;p&gt;工匠们很容易犯下的错误就是，总是寄希望于制造工具来解决当前的问题。&lt;br&gt;可是，通常总是先有解决问题的方法，相应的工具才会被制造出来，而不是相反。&lt;br&gt;这个道理大家都知道，但一涉足到软件领域，人们就糊涂起来。&lt;/p&gt;&lt;p&gt;生搬硬套别人的解决方案或者自己造轮子，希望能解决当前的开发效率问题，&lt;br&gt;这不正是工匠们犯下的错误吗？&lt;br&gt;软件只能简化那些可以被自动化的部分，&lt;br&gt;对于那些还没想到解决方案的问题，软件也是无能为力的。&lt;/p&gt;&lt;blockquote&gt;你们看，这只手指节圆润，根有肉，心为虚，真可惜，如此天赋异禀，却任性妄为，流落江湖，终日与污泥相伴，实乃辜负天人，辜负皇恩。吴道玄，如今太上皇召你入宫，我不辞辛苦民间寻访，你却自立坟墓，埋的不是你的名声，而是你的神妙画技。苍天无眼哪，&lt;b&gt;如果我唐安州有幸，生出如此神妙之手，我定能登堂入室，名流千古！&lt;/b&gt;——《画圣》&lt;/blockquote&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-e0befffbc8527ee94d96ef56cec29171_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1240&quot; data-rawheight=&quot;174&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%BA%93%E5%B0%94%E7%89%B9%C2%B7%E5%93%A5%E5%BE%B7%E5%B0%94&quot;&gt;库尔特·哥德尔&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%93%A5%E5%BE%B7%E5%B0%94%E4%B8%8D%E5%AE%8C%E5%A4%87%E5%AE%9A%E7%90%86&quot;&gt;哥德尔不完备定理&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E4%BC%AF%E7%89%B9%E8%AE%A1%E5%88%92&quot;&gt;希尔伯特计划&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92%E5%8F%AF%E6%9E%9A%E4%B8%BE%E9%9B%86%E5%90%88&quot;&gt;递归可枚举集合&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92%E9%9B%86%E5%90%88&quot;&gt;递归集合&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/2364517/&quot;&gt;数理逻辑&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/1291204/&quot;&gt;哥德尔、艾舍尔、巴赫：集异璧之大成&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://hbr.org/2016/08/until-you-have-productivity-skills-productivity-tools-are-useless&quot;&gt;Until You Have Productivity Skills, Productivity Tools Are Useless&lt;/a&gt;&lt;/p&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-07-13-37669183</guid>
<pubDate>Fri, 13 Jul 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>工程趣闻（二）：检验假设</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-07-09-37668713.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37668713&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;b&gt;科学方法&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-22258c043521d21264720c056115cb59_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;306&quot; data-rawheight=&quot;432&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-22258c043521d21264720c056115cb59&quot; data-watermark-src=&quot;v2-98b2fe5b3e64ddea88410e56d5c3df13&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;科学方法是一种有系统地寻求知识的程序，涉及了以下几个步骤：&lt;br&gt;（1）细致的观察真实世界的特点，通常还要有精确的测量&lt;br&gt;（2）根据观察结果提出假设模型&lt;br&gt;（3）根据模型预测未来的事件&lt;br&gt;（4）继续观察&lt;b&gt;并核实预测的准确性&lt;/b&gt;&lt;br&gt;（5）如此反复直到确认预测和观察一致&lt;/p&gt;&lt;p&gt;科学方法的一条关键原则就是我们所设计的实验必须是&lt;b&gt;可重现的&lt;/b&gt;，&lt;br&gt;这样他人也可以自己验证假设的真实性。&lt;br&gt;所有的假设也必须是&lt;b&gt;可证伪的&lt;/b&gt;，&lt;br&gt;这样我们才能确认某个假设是错误的（并需要修正）。&lt;/p&gt;&lt;p&gt;正如爱因斯坦的一句名言所说：&lt;br&gt;“再多的实验也不一定能够证明我是对的，但只需要一个实验就能证明我是错的。”&lt;br&gt;我们永远也没法知道某个假设是否绝对正确，我们只能验证它和我们的观察的一致性。&lt;/p&gt;&lt;p&gt;不坚持科学方法的人们，容易在第（4）步误入歧途，&lt;br&gt;他们提出模型后不去检验，活在想象的世界中。&lt;/p&gt;&lt;p&gt;常有的表现是，“我推翻了XX理论”。&lt;br&gt;而本来“XX理论”就是一个&lt;b&gt;模型&lt;/b&gt;而已，&lt;b&gt;找到不适用性是迟早的事。&lt;/b&gt;&lt;br&gt;只是推翻以后，能否解释更多“XX理论”不可准确解释的现象才是重要的。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;相容性&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-289cd3b8124e17d87403c760b95bf168_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;449&quot; data-rawheight=&quot;327&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-289cd3b8124e17d87403c760b95bf168&quot; data-watermark-src=&quot;v2-e79b7be8e17f35a93f3b2f9edc25eb06&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;商业思想家&lt;b&gt;罗杰·马丁&lt;/b&gt;，曾采访过50多位成功的领导者，&lt;br&gt;最终发现，他们大都具有一个非同寻常的特征。&lt;/p&gt;&lt;p&gt;他们愿意而且能够同时接纳两种互相冲突的观点，&lt;br&gt;在碰到意见冲突时，他们既不慌张，也不是简单的进行非此即彼的取舍，&lt;br&gt;而是另辟蹊径，提出一个新思路，既包含了原先两种观点的内容，&lt;br&gt;又比原先两种观点胜出一筹。&lt;/p&gt;&lt;p&gt;罗杰·马丁把这种思考和综合的过程，称为&lt;b&gt;整合性思维&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;70多年前，美国小说家&lt;b&gt;斯科特·菲茨杰拉德&lt;/b&gt;也指出过，&lt;br&gt;真正智者的特点之一就是能同时容下两个相对立的想法，但仍然保持行动能力。&lt;/p&gt;&lt;p&gt;我国古代，三国时期魏国大臣，政治家，军事家&lt;b&gt;司马懿&lt;/b&gt;，&lt;br&gt;在教育孩子时，也曾说过：&lt;br&gt;“夫处世之道，亦即应变之术，岂可&lt;b&gt;偏执一端&lt;/b&gt;；用兵之道亦然如此，皆贵在&lt;b&gt;随机应变&lt;/b&gt;。”&lt;/p&gt;&lt;p&gt;以上例子表明，不能接受矛盾的想法是人之常情。&lt;br&gt;人们倾向于对同一件事情，只得到一种结论。&lt;/p&gt;&lt;p&gt;可是，如何成为智者，如何全面的看待问题呢？&lt;br&gt;科学方法表明，&lt;b&gt;我们需要检验这些想法的前提条件&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;大前研一曾经说过，&lt;br&gt;“解决问题的能力，就是为印证假设不辞劳苦的行动力”。&lt;br&gt;是啊，&lt;b&gt;真理不是陈述句，而是条件性为真的判断句&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;能相信未被证明的假设，会避开经验对我们的限制。&lt;br&gt;当别人表述某个论点的时候，很难同时携带着该论点的证明，&lt;br&gt;如果转而让他去证明这个论点，就会打断他的思路，证明完之后还要再跳回来。&lt;/p&gt;&lt;p&gt;不幸的是，现场的不充分的思考，根本不具备清晰证明某个论点的条件，&lt;br&gt;这也是为什么会议容易被无限延长的原因。&lt;/p&gt;&lt;p&gt;一个好的权衡之计就是，先让分享者把事情讲完，&lt;br&gt;哪怕其中包含了很多值得怀疑的论点，&lt;br&gt;我们先记录下来，最后大家一起，&lt;b&gt;用行动去检验它们&lt;/b&gt;。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%A7%91%E5%AD%A6%E6%96%B9%E6%B3%95&quot;&gt;科学方法&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%8F%AF%E8%AF%81%E4%BC%AA%E6%80%A7&quot;&gt;可证伪性&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/3138847/&quot;&gt;思考的技术&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://wenku.baidu.com/view/1d94574dfe4733687e21aa8b.html&quot;&gt;整合性思维：成功领导人的思考方式&lt;/a&gt;&lt;/p&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-07-09-37668713</guid>
<pubDate>Mon, 09 Jul 2018 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
