<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>业余程序员的个人修养</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/</link>
<description></description>
<language>zh-cn</language>
<lastBuildDate>Mon, 27 Aug 2018 13:40:45 +0800</lastBuildDate>
<item>
<title>设计模式奏鸣曲（五）：领域知识的本体模型</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-08-27-38871295.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/38871295&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-9b149ed3f88bb7fcaaeb983226a32543_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1920&quot; data-rawheight=&quot;1280&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-9b149ed3f88bb7fcaaeb983226a32543&quot; data-watermark-src=&quot;v2-6225176ca89c3777c54cea5f967b813e&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;h2&gt;&lt;b&gt;1. 数学模型和本体模型&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;1.1 物理学所用的建模方法&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%9F%A5%E8%AF%86%E8%AE%BA&quot;&gt;物理学&lt;/a&gt;是一门实验科学，它采用&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%A7%91%E5%AD%A6%E6%96%B9%E6%B3%95&quot;&gt;科学方法&lt;/a&gt;研究自然界的基本规律。&lt;/p&gt;&lt;p&gt;其中，科学方法是一种有系统地寻求知识的程序，涉及了以下三个步骤，&lt;br&gt;（1）问题的认知与表述&lt;br&gt;（2）实验数据的收集&lt;br&gt;（3）假说的构成与测试&lt;/p&gt;&lt;p&gt;“假说”通常也被称为“&lt;b&gt;物理理论&lt;/b&gt;”，它必须是可证伪的。&lt;/p&gt;&lt;p&gt;在物理学中，物理理论几乎无一例外是借助&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%A6%E6%A8%A1%E5%9E%8B&quot;&gt;数学模型&lt;/a&gt;来表示的，&lt;br&gt;它们使用数学中的概念和语言，对系统进行描述。&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-b026c66766018e39cab01d9103a32e5e_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;336&quot; data-rawheight=&quot;258&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-b026c66766018e39cab01d9103a32e5e&quot; data-watermark-src=&quot;v2-cc6e9c6f4c2c2749af8af9e1e159e32a&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;如图，人们通过对大自然中的&lt;b&gt;可观测量&lt;/b&gt;进行分析，产生了对大自然的&lt;b&gt;认知&lt;/b&gt;，&lt;br&gt;然后提出数学模型，并不断的修正它，检验它与大自然本身的&lt;b&gt;同构性&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;因此，物理学的研究过程中，不可避免的涉及了&lt;a href=&quot;https://zh.wikipedia.org/zh-hans/%E6%9C%AC%E4%BD%93%E8%AE%BA_(%E5%93%B2%E5%AD%A6)&quot;&gt;本体论&lt;/a&gt;，&lt;br&gt;它是哲学中&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%BD%A2%E4%B8%8A%E5%AD%B8&quot;&gt;形而上学&lt;/a&gt;的一个分支。&lt;/p&gt;&lt;p&gt;&lt;b&gt;本体论&lt;/b&gt;又称存在论，是探究&lt;b&gt;存在本身&lt;/b&gt;的一种学问。&lt;br&gt;在物理学的例子中，我们认为&lt;b&gt;大自然本身&lt;/b&gt;与它所表现出来的&lt;b&gt;现象&lt;/b&gt;（可观测量）是不同的，&lt;br&gt;现象所刻画出来的那个大自然实体，称为&lt;b&gt;本体&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;例如，物理学认为，我们看到的树木，其实并不是树木本身，&lt;br&gt;而只是它反射出来的光线而已。&lt;/p&gt;&lt;p&gt;&lt;b&gt;1.2 知识表示中的本体建模&lt;/b&gt;&lt;/p&gt;&lt;p&gt;20世纪90年，人们将&lt;b&gt;本体论观点&lt;/b&gt;引入到了人工智能领域，&lt;br&gt;用于知识表示和知识组织，相应的，&lt;b&gt;本体&lt;/b&gt;的概念和内涵也发生了变化。&lt;/p&gt;&lt;p&gt;现在，如果在计算机科学或信息科学中，人们提到了&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%9C%AC%E4%BD%93_(%E4%BF%A1%E6%81%AF%E7%A7%91%E5%AD%A6)&quot;&gt;本体&lt;/a&gt;，那么它指的是，&lt;/p&gt;&lt;blockquote&gt;对于共享概念体系明确而又详细的形式化说明。&lt;/blockquote&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-fcc3508682c297317bf752069eb17469_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;612&quot; data-rawheight=&quot;292&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-fcc3508682c297317bf752069eb17469&quot; data-watermark-src=&quot;v2-99e4d6dc13a613172a3c28514c83a71c&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;我们看到，这个图与物理学的研究过程十分相似，&lt;br&gt;“知识”，相当于物理学所研究的“自然界”，它们都是&lt;b&gt;哲学意义上的&lt;/b&gt;本体，&lt;br&gt;而人们对知识的理解——“概念”，则相当于物理学中人们对大自然的“认知”。&lt;/p&gt;&lt;p&gt;图中的“&lt;b&gt;本体模型&lt;/b&gt;”，相当于物理学中的“数学模型”，&lt;br&gt;只不过本体模型必须是形式化的，&lt;br&gt;因为其构建的&lt;b&gt;动机&lt;/b&gt;是便于计算机进行自动化的处理。&lt;/p&gt;&lt;p&gt;人们预期本体模型与知识之间，也要达成&lt;b&gt;同构关系&lt;/b&gt;。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;2. 领域模型&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;理解了&lt;b&gt;知识&lt;/b&gt;与&lt;b&gt;本体模型&lt;/b&gt;之后，再理解“领域知识”和“领域建模”就不难了。&lt;/p&gt;&lt;blockquote&gt;&lt;a href=&quot;https://zh.wikipedia.org/zh-cn/%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B&quot;&gt;领域模型&lt;/a&gt;（domain model）可以被看作是一个系统的概念模型，用于以可视化的形式描述系统中的各个实体及其之间的关系。&lt;/blockquote&gt;&lt;p&gt;例如，常见的&lt;a href=&quot;https://zh.wikipedia.org/zh-hans/%E6%9C%AC%E4%BD%93%E6%9E%84%E6%88%90%E8%A6%81%E7%B4%A0&quot;&gt;本体构成要素&lt;/a&gt;包括：个体，类，属性，关系，&lt;br&gt;这些要素体现了各本体在&lt;b&gt;结构&lt;/b&gt;上的相似性。&lt;br&gt;而&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80&quot;&gt;UML&lt;/a&gt;正是反映这些构成要素的一种图形化表示。&lt;/p&gt;&lt;p&gt;在《&lt;a href=&quot;https://book.douban.com/subject/26819666/&quot;&gt;领域驱动设计&lt;/a&gt;》中，作者提到，&lt;br&gt;软件的核心是其为用户解决&lt;b&gt;领域相关&lt;/b&gt;的问题的能力。&lt;/p&gt;&lt;p&gt;所以，为了对&lt;b&gt;领域知识&lt;/b&gt;有更深入的理解，就势必涉及这些知识的&lt;b&gt;表示&lt;/b&gt;问题。&lt;br&gt;不过，和本体建模不同的是，我们不需要&lt;b&gt;形式化的&lt;/b&gt;描述领域模型，&lt;br&gt;因为领域建模的目的&lt;b&gt;不是&lt;/b&gt;为了对知识进行自动化处理。&lt;/p&gt;&lt;p&gt;而是建立起&lt;b&gt;程序世界&lt;/b&gt;与&lt;b&gt;领域知识&lt;/b&gt;之间的桥梁。&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-73ec052e08de50c57ac2615ce6a34ac1_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;392&quot; data-rawheight=&quot;376&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-73ec052e08de50c57ac2615ce6a34ac1&quot; data-watermark-src=&quot;v2-6aa751b8532ce92788bb3a030720564b&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;blockquote&gt;面向对象设计和语言能够缩小软件构件和我们所设想的领域模型之间的差距，&lt;br&gt;即实现低表示差异（lower representational gap）。&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;3. 形式理论和语义模型&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;上文中我们提到了很多种&lt;b&gt;模型&lt;/b&gt;，&lt;br&gt;但是至于究竟什么是模型，我们的理解还是模糊不清的。&lt;br&gt;因此，这里尝试从&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%A8%A1%E5%9E%8B%E8%AE%BA&quot;&gt;模型论&lt;/a&gt;角度给出模型的定义。&lt;/p&gt;&lt;p&gt;很多人所理解的模型，是一种对客观事物的&lt;b&gt;抽象解释&lt;/b&gt;，&lt;br&gt;是将人们不关注的细节去掉而形成的。&lt;br&gt;例如，物理学中所研究的数学模型，是对大自然的一种简化描述，&lt;br&gt;它可以用来解释大自然中发生的现象。&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-ecadb86cbbf4a4ada5ce6966a6383b24_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;348&quot; data-rawheight=&quot;96&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-ecadb86cbbf4a4ada5ce6966a6383b24&quot; data-watermark-src=&quot;v2-5dd9dbf7bef28761dc149ce1a698f622&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;但是在模型论中，&lt;br&gt;所谓的&lt;b&gt;模型&lt;/b&gt;，实际上指的是对&lt;b&gt;形式理论&lt;/b&gt;所选择的&lt;b&gt;语义解释&lt;/b&gt;。&lt;/p&gt;&lt;blockquote&gt;设 Γ 是一阶语言 L 的有穷或可数无穷的语句集合，&lt;br&gt;如果 Γ 协调，则称 Γ 是一阶语言的形式理论，简称&lt;b&gt;形式理论&lt;/b&gt;。&lt;/blockquote&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-76d9fbbfdad014494c1180c5933c274d_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;366&quot; data-rawheight=&quot;252&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-76d9fbbfdad014494c1180c5933c274d&quot; data-watermark-src=&quot;v2-df5e9c0825f627c7a8094cc7a2aa4d55&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;这样定义的语义模型，为形式理论中的每条语句给出了&lt;b&gt;唯一确定的&lt;/b&gt;语义。&lt;/p&gt;&lt;p&gt;这样理解的话，以上提到的数学模型，本体模型，领域模型，&lt;br&gt;只是模型论中的&lt;b&gt;理论部分&lt;/b&gt;，&lt;br&gt;而相应的研究对象——大自然，知识，领域知识，就成为了这些理论的&lt;b&gt;语义解释&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;理论必须是协调的（一致的），在形式推导过程中不能出现矛盾，&lt;br&gt;理论还必须是&lt;b&gt;可靠的&lt;/b&gt;，即可证的结论，其解释也必然为真。&lt;/p&gt;&lt;p&gt;将理论与模型混为一谈，会造成很多困扰，&lt;br&gt;这是整个19世纪数学的最深刻的&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%9D%9E%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E5%87%A0%E4%BD%95&quot;&gt;教训&lt;/a&gt;之一。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;结语&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;本文联系了物理学，哲学，逻辑学三个学科，讨论了&lt;b&gt;模型方法&lt;/b&gt;的意义，&lt;br&gt;把&lt;b&gt;领域模型&lt;/b&gt;理解为，对&lt;b&gt;领域知识&lt;/b&gt;的一种&lt;b&gt;本体建模&lt;/b&gt;结果。&lt;/p&gt;&lt;p&gt;不可否认，任何研究方法都是为其&lt;b&gt;目的&lt;/b&gt;服务的，因此有人说，&lt;/p&gt;&lt;blockquote&gt;All models are wrong, but some are useful.&lt;/blockquote&gt;&lt;p&gt;模型方法可以看做是一种人类创造的&lt;b&gt;心智手段&lt;/b&gt;，&lt;br&gt;通过&lt;b&gt;解释映射&lt;/b&gt;，建立起理论与待研究对象之间的&lt;b&gt;同构关系&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;从而我们可以&lt;b&gt;间接的&lt;/b&gt;找出理论的推论，&lt;br&gt;来&lt;b&gt;预测&lt;/b&gt;研究对象所应当满足的性质。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/zh-cn/%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B&quot;&gt;领域模型&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/zh-hans/%E6%9C%AC%E4%BD%93%E8%AE%BA_(%E5%93%B2%E5%AD%A6)&quot;&gt;本体论&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%9C%AC%E4%BD%93_(%E4%BF%A1%E6%81%AF%E7%A7%91%E5%AD%A6)&quot;&gt;本体 (信息科学)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/1230487/&quot;&gt;人工智能：一种现代方法&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/3061966/&quot;&gt;语义网基础教程&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/26819666/&quot;&gt;领域驱动设计&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/1291204/&quot;&gt;哥德尔、艾舍尔、巴赫：集异璧之大成&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/2364517/&quot;&gt;数理逻辑&lt;/a&gt;&lt;/p&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-08-27-38871295</guid>
<pubDate>Mon, 27 Aug 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>设计模式奏鸣曲（四）：可配置化与领域特定语言</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-08-24-38637315.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/38637315&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-75e143d489da7f3868b15af2d84ebd0d_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1595&quot; data-rawheight=&quot;900&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-75e143d489da7f3868b15af2d84ebd0d&quot; data-watermark-src=&quot;v2-94f0f95a75186f4260363dff8dc3acb8&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;h2&gt;&lt;b&gt;1. 通用图灵机&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;代码&lt;/b&gt;可以看做储存在磁盘上的，一种特殊类型的&lt;b&gt;数据&lt;/b&gt;，&lt;br&gt;计算机读取到这些代码之后，就会模拟代码所描述的行为，&lt;br&gt;再针对不同的输入完成不同的动作。&lt;/p&gt;&lt;p&gt;这一过程的理论模型，称为&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E5%9C%96%E9%9D%88%E6%A9%9F&quot;&gt;通用图灵机&lt;/a&gt;。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-f6d3de05c5484e0cbd33c65f70130bb5_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;410&quot; data-rawheight=&quot;429&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-f6d3de05c5484e0cbd33c65f70130bb5&quot; data-watermark-src=&quot;v2-afc3d01562b27b4881c6e590dd9e54ab&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;和&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%9B%BE%E7%81%B5%E6%9C%BA&quot;&gt;图灵机&lt;/a&gt;不同的是，&lt;/p&gt;&lt;p&gt;图灵机，是一台&lt;b&gt;固定的&lt;/b&gt;计算机器，根据输入计算结果，&lt;br&gt;而&lt;b&gt;通用图灵机&lt;/b&gt;，则可用来模拟不同的图灵机，因此它有两个输入。&lt;/p&gt;&lt;p&gt;一个是被模拟的图灵机计算过程之&lt;b&gt;编码&lt;/b&gt;，另一个则是被模拟图灵机的&lt;b&gt;原始输入&lt;/b&gt;，&lt;br&gt;最终，通用图灵机会得到被模拟图灵机的计算结果。&lt;/p&gt;&lt;p&gt;因此，代码可以被当做数据来看待。&lt;br&gt;反之亦然。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Interpreter_pattern&quot;&gt;解释器模式&lt;/a&gt;就是这种思想的一个应用，&lt;br&gt;实际工程中，我们会对配置信息或&lt;a href=&quot;https://zh.wikipedia.org/zh-hans/%E9%A2%86%E5%9F%9F%E7%89%B9%E5%AE%9A%E8%AF%AD%E8%A8%80&quot;&gt;DSL&lt;/a&gt;进行解析，&lt;br&gt;还原出它们所描述的计算行为。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;2. 描述层次&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;对于大部分编程语言的代码而言，有一个比较好的性质，&lt;br&gt;那就是，我们有一定的活动空间，对代码进行&lt;b&gt;重新组织&lt;/b&gt;，&lt;br&gt;却不会改变它们（被关心）的外部行为。&lt;/p&gt;&lt;p&gt;这正是&lt;a href=&quot;https://zh.wikipedia.org/zh-hans/%E4%BB%A3%E7%A0%81%E9%87%8D%E6%9E%84&quot;&gt;代码重构&lt;/a&gt;的可行性基础。&lt;/p&gt;&lt;p&gt;在代码的组织方式上，不同人会有不同的办法，&lt;br&gt;但区分出不同的&lt;b&gt;描述层次&lt;/b&gt;，应当会是一项良好的编程实践，&lt;br&gt;提升描述层次的过程，在计算机科学中，通常被称为&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E5%8C%96_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)&quot;&gt;抽象&lt;/a&gt;。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-9df090cf50960f3072a1d18ebd81ce35_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;500&quot; data-rawheight=&quot;360&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-9df090cf50960f3072a1d18ebd81ce35&quot; data-watermark-src=&quot;v2-4a7ab78d1395f9c62b1bbe32869690aa&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;blockquote&gt;管理计算机系统复杂性的关键是通过一些定义明确的接口把计算机系统分成不同的抽象层次。&lt;br&gt;抽象层次允许忽略或简化系统设计的底层实现细节，从而简化高层组件的设计。&lt;br&gt;—— 《&lt;a href=&quot;https://book.douban.com/subject/3611865/&quot;&gt;虚拟机-系统与进程的通用平台&lt;/a&gt;》&lt;/blockquote&gt;&lt;p&gt;实际操作中，接口也是用编程语言来书写的，&lt;br&gt;因此，程序员首先面对的是&lt;b&gt;语言&lt;/b&gt;，其次是理解语言背后被描述的下一层事实。&lt;/p&gt;&lt;p&gt;&lt;b&gt;配置&lt;/b&gt;也是一种语言形式，只不过它很少提供&lt;b&gt;抽象机制&lt;/b&gt;。&lt;br&gt;这样的话，我们就很难对配置信息进行&lt;b&gt;指代&lt;/b&gt;，不利于控制复杂度。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;3. 不可判定性&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.w3.org/2001/tag/doc/leastPower&quot;&gt;The Rule of Least Power&lt;/a&gt;指出了与编程语言相关的一项原则，&lt;/p&gt;&lt;blockquote&gt;Powerful languages inhibit information reuse.&lt;/blockquote&gt;&lt;p&gt;对于&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%9C%96%E9%9D%88%E5%AE%8C%E5%82%99%E6%80%A7&quot;&gt;图灵完备&lt;/a&gt;的计算模型，&lt;br&gt;其结果是&lt;a href=&quot;https://zh.wikipedia.org/zh-hans/%E5%8F%AF%E5%88%A4%E5%AE%9A%E6%80%A7&quot;&gt;不可判定&lt;/a&gt;的，&lt;br&gt;得到结果的唯一的办法，是将它运行一遍。&lt;/p&gt;&lt;p&gt;一种&lt;a href=&quot;https://zh.wikipedia.org/zh-hans/%E8%AE%A1%E7%AE%97%E6%A8%A1%E5%9E%8B&quot;&gt;计算模型&lt;/a&gt;越强大，就越难&lt;b&gt;预测&lt;/b&gt;它的行为。&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-7c734c358842ded3d665993bbd34ed50_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;548&quot; data-rawheight=&quot;426&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-7c734c358842ded3d665993bbd34ed50&quot; data-watermark-src=&quot;v2-c7fad5bc4f4a54641bbe5df44ca45a14&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;如果我们&lt;b&gt;有幸&lt;/b&gt;发明了一种足够强大的&lt;a href=&quot;https://zh.wikipedia.org/zh-hans/%E9%A2%86%E5%9F%9F%E7%89%B9%E5%AE%9A%E8%AF%AD%E8%A8%80&quot;&gt;领域特定语言&lt;/a&gt;，&lt;br&gt;那么在判定它的运行时特征时，就会遇到麻烦，&lt;br&gt;如果没有完整的测试用例来保障，部分错误就不得不&lt;b&gt;在用户使用时&lt;/b&gt;才显现出来。&lt;/p&gt;&lt;p&gt;因此，在决定设计DSL之前，不妨先考虑一下，&lt;br&gt;我们可以对它进行哪些&lt;b&gt;静态检查&lt;/b&gt;以避免用户犯错。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;4. 新语言问题&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;随着用户需要的&lt;b&gt;语言特性&lt;/b&gt;被不断添加，&lt;br&gt;语言障碍会变得越来越明显，称为&lt;a href=&quot;http://www.yinwang.org/blog-cn/2017/05/25/dsl&quot;&gt;新语言问题&lt;/a&gt;，&lt;br&gt;极大的增加了用户的&lt;b&gt;学习成本&lt;/b&gt;。&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-7630846cdf1ecfaa62422919ca5242e4_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;600&quot; data-rawheight=&quot;400&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-7630846cdf1ecfaa62422919ca5242e4&quot; data-watermark-src=&quot;v2-b3cc10c892141ac2b186fc4099a4109d&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;b&gt;灵活是要有代价的。&lt;/b&gt;&lt;/p&gt;&lt;blockquote&gt;就像一个平衡游标，一端是只有单一用途的软件，而且工作得很好，但很难或根本无法改变它的行为。&lt;br&gt;然而另一端则是编程语言，你可以用它编写游戏，应用服务器或股票管理系统，这就是灵活性。&lt;br&gt;显然，大多数软件都在两点之间，而不是这两端点中的任何一个。&lt;br&gt;—— 《&lt;a href=&quot;https://book.douban.com/subject/6862062/&quot;&gt;持续交付&lt;/a&gt;》&lt;/blockquote&gt;&lt;p&gt;况且，用户可能并不需要&lt;b&gt;灵活性&lt;/b&gt;，而是不想受到不该有的&lt;b&gt;限制&lt;/b&gt;，&lt;br&gt;用户也不想写配置文件，更不想用DSL进行编程，他们想要的是&lt;b&gt;功能&lt;/b&gt;，&lt;br&gt;因此我们还是将&lt;b&gt;键盘&lt;/b&gt;从用户那里拿回来吧。&lt;/p&gt;&lt;p&gt;也许只有当我们自己写配置文件的时候才会发现，&lt;br&gt;它们与一些&lt;b&gt;难以维护&lt;/b&gt;的晦涩代码，并没什么太大区别。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;5. 傻瓜式框架&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;让系统可配的另一个动机是，让无法胜任&lt;b&gt;设计&lt;/b&gt;工作的人员，也有能力进行开发。&lt;/p&gt;&lt;p&gt;然而，《&lt;a href=&quot;https://book.douban.com/subject/5344973/&quot;&gt;领域驱动设计&lt;/a&gt;》一书中这样强调，&lt;/p&gt;&lt;blockquote&gt;如果这些人在设计方面不够聪明，就不应该让他们来开发软件。&lt;br&gt;如果他们足够聪明，那么用『傻瓜式』的框架来应付他们只会为他们造成障碍，使他们得不到所需的工具。&lt;/blockquote&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-13d34e35301b69a7800c8f393045572d_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;302&quot; data-rawheight=&quot;339&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-13d34e35301b69a7800c8f393045572d&quot; data-watermark-src=&quot;v2-95081944fc2b769931482f19ea1934b3&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;b&gt;消除重复劳动&lt;/b&gt;的软件开发宗旨，会终结在傻瓜式框架的边界上。&lt;br&gt;因为未经良好构思的框架，并没有仔细考虑&lt;b&gt;如何解决用户的重复操作问题&lt;/b&gt;，&lt;br&gt;所以，本可避免的重复劳动，就这样转移到了&lt;b&gt;框架用户&lt;/b&gt;的日常工作之中，&lt;b&gt;制造了重复劳动&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;这样做到底划不划算，值得深思。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;结语&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;让系统可配置，或者采用领域特定语言，是一种很好的实践，&lt;br&gt;但是一旦构思不当，所&lt;b&gt;带来的问题&lt;/b&gt;就会比它要解决的问题还要多。&lt;/p&gt;&lt;p&gt;其主要原因在于，未经深思熟虑的配置以及DSL，&lt;b&gt;会限制用户的表达能力&lt;/b&gt;，&lt;br&gt;这也是另外一个从模式的&lt;b&gt;使用者&lt;/b&gt;角度评判设计优劣的例子。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.w3.org/2001/tag/doc/leastPower&quot;&gt;The Rule of Least Power&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/4262627/&quot;&gt;重构：改善既有代码的设计&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/1052241/&quot;&gt;设计模式&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/6862062/&quot;&gt;持续交付&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/5344973/&quot;&gt;领域驱动设计&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/1310925/&quot;&gt;可计算性与计算复杂度导引&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/2179488/&quot;&gt;形式语言与自动机理论&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/3611865/&quot;&gt;虚拟机-系统与进程的通用平台&lt;/a&gt;&lt;/p&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-08-24-38637315</guid>
<pubDate>Fri, 24 Aug 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>设计模式奏鸣曲（三）：系统边界处的异常处理</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-08-20-38637143.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/38637143&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d600018a0749b2de5d93d09e8fbb9820_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1000&quot; data-rawheight=&quot;618&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-d600018a0749b2de5d93d09e8fbb9820&quot; data-watermark-src=&quot;v2-677cd7735b5ff22fa55fe7a23fccb1b4&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;h2&gt;&lt;b&gt;1. 异常流程&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;在确定产品功能的时候，人们提到更多的是，该产品应该怎样表现，&lt;br&gt;而实际上，产品所涉及的&lt;b&gt;异常流程&lt;/b&gt;是否清晰，&lt;br&gt;才是提高功能&lt;b&gt;可靠性&lt;/b&gt;的关键。&lt;/p&gt;&lt;p&gt;考虑如下一个简单的功能，&lt;br&gt;点击页面中的按钮，发起一个ajax请求，后端读取数据库返回相应的查询结果。&lt;/p&gt;&lt;p&gt;我们可以把它划分为三个环节，&lt;br&gt;（1）前端发起ajax请求给后端&lt;br&gt;（2）后端接受到请求，调用数据库查询服务&lt;br&gt;（3）查询数据库，返回相应的查询结果&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-0dba081d3818be3c05c898c6c0ffde6b_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;532&quot; data-rawheight=&quot;298&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-0dba081d3818be3c05c898c6c0ffde6b&quot; data-watermark-src=&quot;v2-d4d83f73441032ac76d2e55c0371f3ae&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;blockquote&gt;线性系统的可靠性是每个系统组件的可靠性的乘积。&lt;br&gt;——《&lt;a href=&quot;https://book.douban.com/subject/2580604/&quot;&gt;持续集成&lt;/a&gt;》&lt;/blockquote&gt;&lt;p&gt;因此，假设以上每个环节的可靠性是 90%，那么整个系统的可靠性，则将只有 72.9%。&lt;br&gt;如果整个系统包含 100 个环节呢？可靠性就只剩下 0.0027% 了！！&lt;/p&gt;&lt;p&gt;因此，如果在系统层面承诺具有高可靠性，就得在每个环节上下足功夫。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;2. 异常在所难免&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;在计算机科学中，&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%81%A5%E5%A3%AE%E6%80%A7_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)&quot;&gt;健壮性&lt;/a&gt;（robustness）指的是，&lt;br&gt;一个计算机系统在执行过程中处理错误，&lt;br&gt;以及算法在遭遇输入、运算等异常时继续正常运行的能力。&lt;/p&gt;&lt;p&gt;要想提高代码的健壮性，我认为首先应该改变我们对&lt;b&gt;错误&lt;/b&gt;的认知习惯。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-edd86dc28bf4ad2327ffb179cf87f64c_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;266&quot; data-rawheight=&quot;190&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-edd86dc28bf4ad2327ffb179cf87f64c&quot; data-watermark-src=&quot;v2-d35d5a5473a60465a46d2dfe062a4be4&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;我们应该认为，&lt;b&gt;异常是在所难免的&lt;/b&gt;，&lt;br&gt;而剩下的问题是，都有哪些异常，以及如何处理它们。&lt;/p&gt;&lt;p&gt;有一个类似相同的论断，来自于《&lt;a href=&quot;https://book.douban.com/subject/25870212/&quot;&gt;Reactive Design Patterns&lt;/a&gt;》&lt;/p&gt;&lt;blockquote&gt;The question therefore is not if a failure occurs but only when or how often.&lt;/blockquote&gt;&lt;p&gt;我们在这个基础上考虑问题。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;3. 如何提供可靠的服务&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;人们通常认为，提供可靠的服务，就是不发生错误，&lt;br&gt;我认为这是不太恰当的。&lt;/p&gt;&lt;p&gt;因为作为底层服务，在出现某些错误的情况下，我们实在&lt;b&gt;不应该替用户拿主意&lt;/b&gt;。&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-ce3fe0307eccf6022192d76879438c2f_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;398&quot; data-rawheight=&quot;336&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-ce3fe0307eccf6022192d76879438c2f&quot; data-watermark-src=&quot;v2-768cfbb820bd085aacd83176053344fe&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;因此重要的事情，不是吞掉异常让服务看起来可靠，&lt;br&gt;而是，考虑用何种方式&lt;b&gt;将错误呈现给用户&lt;/b&gt;，&lt;br&gt;这需要我们站在用户的角度考虑问题。&lt;/p&gt;&lt;p&gt;当考虑了异常之后，接口所传递的&lt;b&gt;知识&lt;/b&gt;就在无形中被扩充了，&lt;br&gt;接口实际上包含了在不同情况下（正常/异常），应该返回什么结果。&lt;/p&gt;&lt;p&gt;&lt;b&gt;3.1 反模式：出错消息&lt;/b&gt;&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-ff7064264d096b248174873956be7e9a_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;312&quot; data-rawheight=&quot;180&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-ff7064264d096b248174873956be7e9a&quot; data-watermark-src=&quot;v2-e6cb499b47e73cec15180a5949233b45&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;返回一段出错消息，是一种最常见的不为用户考虑的&lt;b&gt;反模式&lt;/b&gt;，&lt;br&gt;因为用户不得不解析这段消息来确定究竟发生了什么错误。&lt;/p&gt;&lt;p&gt;这种情况用户一般也不会解析它，&lt;br&gt;而反馈给更上层的用户也是不合理的，&lt;br&gt;因此，这种消息最多保留到了日志中，或者干脆被直接忽略了。&lt;/p&gt;&lt;p&gt;为了让消息无歧义，更好的办法是返回错误的类型（或者是错误的统一编码），&lt;br&gt;它们会作为接口文档的一部分提供给用户，&lt;br&gt;并由用户决定处理方式。&lt;/p&gt;&lt;p&gt;&lt;b&gt;3.2 反模式：不一致&lt;/b&gt;&lt;/p&gt;&lt;p&gt;比无法区分错误类型更好一点，但是同样有问题的报错方式就是，不一致的展示错误，&lt;br&gt;某些接口通过抛异常来报错，&lt;br&gt;另外一些接口统一捕获了异常，通过一个错误标志位来报错。&lt;/p&gt;&lt;p&gt;无疑这在某种程度上加大了用户代码的复杂度，&lt;br&gt;而且对于用户来说，他们也无法区分一个异常到底是接口的编写者&lt;b&gt;已知的&lt;/b&gt;还是&lt;b&gt;未知的&lt;/b&gt;。&lt;br&gt;用户无法确认一个使用错误标志位来报错的接口，会不会抛异常。&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-7d410b501259a7a65cca7f05596e06d1_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;556&quot; data-rawheight=&quot;360&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-7d410b501259a7a65cca7f05596e06d1&quot; data-watermark-src=&quot;v2-a5842e78663dc6e23640fa350b4c82cb&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;人们的确痛恨不一致性，但是却没有找到问题的症结所在，&lt;br&gt;让接口表现一致，是一种经常被推进，但实际上是一种过于理想化的解决方案。&lt;br&gt;在这一点上，我认为问题的症结在于&lt;b&gt;知识没有被明确的传达给用户&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;例如，如果我们在某个地方明确表明，“通过错误标志位来报错的接口一定不会抛异常”，&lt;br&gt;那么即使某些接口采用了不一致的报错方式，&lt;br&gt;我们仍然可以从容的处理了。&lt;/p&gt;&lt;p&gt;因此，不一致并没有问题，有问题的是&lt;b&gt;歧义性&lt;/b&gt;。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;4. 传递知识&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;经过上文的例证，我们看到接口所传递的&lt;b&gt;知识&lt;/b&gt;比接口所提供的功能一样重要。&lt;br&gt;为了提供健壮的接口，那就得从一开始告诉用户，&lt;b&gt;不能这样使用&lt;/b&gt;。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-0126a04bc769b6a379379e962c2b063f_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;272&quot; data-rawheight=&quot;250&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-0126a04bc769b6a379379e962c2b063f&quot; data-watermark-src=&quot;v2-fcb2da2149c749768939de19ee5a53d7&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;当然，寄希望于用户不会这样使用是没作用的。&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%91%A9%E8%8F%B2%E5%AE%9A%E7%90%86&quot;&gt;墨菲定律&lt;/a&gt;表明，&lt;b&gt;凡是可能出错的事，迟早会出错。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;因此，除了上文讨论如何提供功能之外，&lt;br&gt;我们还要对&lt;b&gt;用户&lt;/b&gt;，以及我们的&lt;b&gt;依赖方&lt;/b&gt;进行管理。&lt;/p&gt;&lt;p&gt;&lt;b&gt;4.1 用户管理&lt;/b&gt;&lt;/p&gt;&lt;p&gt;至少应该在某个地方明确表明，接口总共包含了哪些使用方式，&lt;br&gt;每一种使用方式，&lt;b&gt;预期&lt;/b&gt;会得到怎样的结果，&lt;br&gt;越&lt;b&gt;明确&lt;/b&gt;越好。&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-583e0a29c0e41c609df57a67dd1994b8_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;259&quot; data-rawheight=&quot;194&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-583e0a29c0e41c609df57a67dd1994b8&quot; data-watermark-src=&quot;v2-933434153738de01eb3182538caac765&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;什么时候会出现异常，接口会以什么形式反馈出来。&lt;br&gt;例如，如果用户传入的参数不符合业务逻辑上的约束，接口会怎样表现，&lt;br&gt;接口在调用它的依赖方时出现了错误，应该如何处理。&lt;/p&gt;&lt;p&gt;这些都应该&lt;b&gt;明确&lt;/b&gt;的向用户表明，&lt;br&gt;而不是，让用户&lt;b&gt;假定&lt;/b&gt;接口应当采用何种处理方式。&lt;/p&gt;&lt;p&gt;&lt;b&gt;4.2 依赖管理&lt;/b&gt;&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-f3ab1a772f7f3cffc307449d87260e89_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;270&quot; data-rawheight=&quot;270&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-f3ab1a772f7f3cffc307449d87260e89&quot; data-watermark-src=&quot;v2-daed46542c2d1b83a5539361c05e9aee&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;我们要知道有哪些依赖，然后再仔细挖掘被依赖方所隐藏的信息，&lt;br&gt;被依赖方所采用的报错方式，可能并不是我们所期望的，&lt;br&gt;这其实并没有问题，问题是我们要有能力&lt;b&gt;区分&lt;/b&gt;它们。&lt;/p&gt;&lt;p&gt;上文我们也看到了，很多项目都在“&lt;b&gt;让依赖方进行修改&lt;/b&gt;”方面做出了无谓的努力，&lt;br&gt;这可能意味着我们在依赖管理方面做的还不够友好。&lt;/p&gt;&lt;p&gt;实际上，我们并不需要一个“&lt;b&gt;规范&lt;/b&gt;的”接口，&lt;br&gt;但是我们需要一个具有“&lt;b&gt;明确&lt;/b&gt;含义”的接口。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;结语&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;我们来感受一下异常作为一种&lt;b&gt;知识&lt;/b&gt;，是如何通过接口来传递的，&lt;br&gt;它如同接口的正常返回值一样。&lt;/p&gt;&lt;p&gt;可靠性的关键可能不在于表面上它不会出现错误，&lt;br&gt;而是在于，每一种可能出现的错误，都被&lt;b&gt;恰当的责任人&lt;/b&gt;进行了处理。&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-ac5e0852a1bd3b669456d6a591021824_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;432&quot; data-rawheight=&quot;288&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-ac5e0852a1bd3b669456d6a591021824&quot; data-watermark-src=&quot;v2-fb1e08e6f9e4d71a3303c0f617553d88&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;当我们调用一个接口，它并没有抛异常，而是返回了一个&lt;code class=&quot;inline&quot;&gt;Null&lt;/code&gt;，&lt;br&gt;而且在多种不同的情况下，它都返回&lt;code class=&quot;inline&quot;&gt;Null&lt;/code&gt;，&lt;br&gt;这种接口简直是&lt;b&gt;可笑的&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;我们不得不联系接口的设计者，请他帮忙看看，到底发生了什么事情。&lt;br&gt;这真是一种极大的资源浪费。&lt;/p&gt;&lt;p&gt;这只是不良接口的一种表现形式而已，&lt;br&gt;所以重要的还是对异常流程，以及异常中所隐藏的&lt;b&gt;知识&lt;/b&gt;有所察觉。&lt;/p&gt;&lt;blockquote&gt;梁惠王曰：“寡人之于国也，尽心焉耳矣。河内凶，则移其民于河东，移其粟于河内。河东凶亦然。察邻国之政，无如寡人之用心者。邻国之民不加少，寡人之民不加多，何也？”&lt;br&gt;孟子对曰：“王好战，请以战喻。填然鼓之，兵刃既接，弃甲曳兵而走，或百步而后止，或五十步而后止。以五十步笑百步，则何如？”&lt;br&gt;曰：“不可。直不百步耳，是亦走也。”&lt;br&gt;曰：“王如知此，则无望民之多于邻国也。“&lt;/blockquote&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-08-20-38637143</guid>
<pubDate>Mon, 20 Aug 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>设计模式奏鸣曲（二）：描述与外在表现</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-08-17-38636042.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/38636042&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-79173bd6ff292eff5964692ee6ceb70a_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;700&quot; data-rawheight=&quot;437&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-79173bd6ff292eff5964692ee6ceb70a&quot; data-watermark-src=&quot;v2-b9b2a64e2cf1ca5a555436f8228e0a59&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;我们一般习惯从两个角度观察一个优雅的设计，&lt;br&gt;&lt;b&gt;内在的&lt;/b&gt;，它的&lt;b&gt;结构&lt;/b&gt;是否精巧，麻雀虽小五脏俱全，&lt;br&gt;&lt;b&gt;外在的&lt;/b&gt;，它是怎样去周围的环境交互的，如何&lt;b&gt;被使用&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;大部分介绍设计模式的文章，倾向于从&lt;b&gt;实现角度&lt;/b&gt;介绍模式，&lt;br&gt;这是没有问题的。&lt;/p&gt;&lt;p&gt;但是，一篇文章一旦被写出来，就不得不为其写作目的服务，&lt;br&gt;要想鲜明的表达观点，就必须&lt;b&gt;有所强调&lt;/b&gt;，&lt;br&gt;所以，注重模式&lt;b&gt;内在表现&lt;/b&gt;的文章，对于&lt;b&gt;外在表现&lt;/b&gt;的阐述就不够了。&lt;/p&gt;&lt;p&gt;本文就试着消除这一盲区，从外在角度介绍一下设计模式。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;字符描述&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;提到外在角度，大多数人可能还是比较陌生的，&lt;br&gt;因为程序员更容易站在&lt;b&gt;代码作者&lt;/b&gt;的角度看待问题，&lt;br&gt;而不擅于考虑所提供的功能&lt;b&gt;如何被使用&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;实际上，就像《&lt;a href=&quot;https://book.douban.com/subject/1148282/&quot;&gt;计算机程序的构造与解释&lt;/a&gt;》所指明的那样，&lt;br&gt;&lt;b&gt;代码只是计算过程的字符编码。&lt;/b&gt;&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-0e64d9d395998cb1f7d43a0881dc6fcc_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;560&quot; data-rawheight=&quot;448&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-0e64d9d395998cb1f7d43a0881dc6fcc&quot; data-watermark-src=&quot;v2-dfb1ffa38bfca3e2eacc08b1b808787e&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;我们使用字符序列，&lt;b&gt;描述&lt;/b&gt;了计算机内的运算过程，&lt;br&gt;继而，为了让这种描述方式更&lt;b&gt;可靠&lt;/b&gt;，&lt;br&gt;我们期望不同的运算过程，用不同的字符序列来表示。&lt;/p&gt;&lt;p&gt;字符序列与运算过程之前建立一种映射关系。&lt;br&gt;我们称，全体字符序列，构成了用来描述运算过程的&lt;b&gt;语言&lt;/b&gt;，&lt;br&gt;这些运算过程，给出了相应字符序列的&lt;b&gt;解释&lt;/b&gt;或&lt;b&gt;语义&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;学习程序语言，就是学习语言&lt;b&gt;语法&lt;/b&gt;和&lt;b&gt;语义&lt;/b&gt;的过程，&lt;br&gt;其中，语法指的是，构成语言的字符序列所满足的规则。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;封装与接口&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;和硬件一样，软件系统也会将它的用户不关心之接口&lt;b&gt;隐藏&lt;/b&gt;起来，&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/zh-hans/%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99&quot;&gt;接口隔离原则&lt;/a&gt;就是这种思想的一种表现形式。&lt;/p&gt;&lt;p&gt;通过封装，于其内，减少了外部依赖和&lt;b&gt;影响因素&lt;/b&gt;，内部就可以具有更大的灵活性更稳定，&lt;br&gt;于其外，减少了使用者的&lt;b&gt;心智负担&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;这对外的表现，不经常被人提及。&lt;br&gt;只有把功能和功能的使用者放到一起才会看到这一点。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-a20d3ec760691ab5a3798074710f2fb9_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;402&quot; data-rawheight=&quot;278&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-a20d3ec760691ab5a3798074710f2fb9&quot; data-watermark-src=&quot;v2-a361d9dc4ba1fcd1e89faaaf544d66e8&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;b&gt;我们只是提供了功能，这没有价值，是有用户来使用它，才产生了价值。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;因此，我们以后提到设计的时候，应该至少转换一个角度，&lt;br&gt;可以选择性的&lt;b&gt;更多的&lt;/b&gt;关注用户的感受，以及用户与系统之间的交互过程，&lt;br&gt;这个用户，当然不一定是人，也可能是其他软件系统。&lt;/p&gt;&lt;p&gt;我们会发现，当我们从&lt;b&gt;外在表现&lt;/b&gt;来审视一些设计模式的时候，&lt;br&gt;事情就会突然变得&lt;b&gt;简单&lt;/b&gt;了很多。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;设计模式的外在表现&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;让我们打开Gang of Four的经典教科书《&lt;a href=&quot;https://book.douban.com/subject/1052241/&quot;&gt;设计模式&lt;/a&gt;》来看看，&lt;br&gt;先看第一个模式&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82&quot;&gt;抽象工厂模式&lt;/a&gt;。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-36638607f2c75a8a0df3523c8951ecf1_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;350&quot; data-rawheight=&quot;331&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-36638607f2c75a8a0df3523c8951ecf1&quot; data-watermark-src=&quot;v2-dac8f621182f3d640382c5097c246fec&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;该书采用了自己的一套对设计模式的描述方式，&lt;br&gt;每个模式都要介绍它的名字，意图，动机，适用性，结构，参与者，效果，实现，应用，等等方面。&lt;br&gt;我认为这是极好的，是一种&lt;b&gt;系统化的思维方式&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;但是每个模式都这样介绍，就略显枯燥了。&lt;br&gt;我们应该学习的是这种系统化的思维方式，而不是具体它是怎么表述的。&lt;/p&gt;&lt;p&gt;另一方面，我想很多人一开始阅读也是很吃力，&lt;br&gt;这是因为，在书中很难直接找到某个设计模式的&lt;b&gt;用例&lt;/b&gt;，&lt;br&gt;对设计者来说，关心的更多是内部结构，但是对用户而言，则关心更多的是&lt;b&gt;用例&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;让我们试着找出&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82&quot;&gt;抽象工厂模式&lt;/a&gt;的用例吧，&lt;/p&gt;&lt;code lang=&quot;cpp&quot;&gt;MazeGame game;
BombedMazeFactory factory;

game.CreateMaze(factory);&lt;/code&gt;&lt;p&gt;&lt;b&gt;就这么简短。&lt;/b&gt;&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-74529fa4c9fce8e3ed86b1bef366cd26_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;396&quot; data-rawheight=&quot;350&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-74529fa4c9fce8e3ed86b1bef366cd26&quot; data-watermark-src=&quot;v2-dbf2c7330a966cc75389fb879c9c099f&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;其中，&lt;code class=&quot;inline&quot;&gt;CreateMaze&lt;/code&gt;接受一个&lt;code class=&quot;inline&quot;&gt;MazeFactory&lt;/code&gt;类的引用作为参数，&lt;br&gt;而&lt;code class=&quot;inline&quot;&gt;BombedMazeFactory&lt;/code&gt;是&lt;code class=&quot;inline&quot;&gt;MazeFactory&lt;/code&gt;类的子类。&lt;/p&gt;&lt;p&gt;所以，可想而知，&lt;code class=&quot;inline&quot;&gt;CreateMaze&lt;/code&gt;并不知道传入的是哪个具体的&lt;code class=&quot;inline&quot;&gt;factory&lt;/code&gt;，&lt;br&gt;但是仍然可以使用&lt;code class=&quot;inline&quot;&gt;MazeFactory&lt;/code&gt;中定义的那些方法，来创建迷宫（create maze）。&lt;/p&gt;&lt;p&gt;这就是抽象工厂的一个用例。&lt;br&gt;利用了面向对象编程中子类的多态性，增强了&lt;code class=&quot;inline&quot;&gt;CreateMaze&lt;/code&gt;的灵活性，&lt;br&gt;解耦了&lt;code class=&quot;inline&quot;&gt;CreateMaze&lt;/code&gt;与具体&lt;code class=&quot;inline&quot;&gt;factory&lt;/code&gt;的依赖关系。&lt;/p&gt;&lt;p&gt;从用例角度来看，是不是更容易理解呢？&lt;br&gt;该书其他模式的&lt;b&gt;外在表现&lt;/b&gt;（用例），感兴趣的朋友也可以试着找一下。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;结语&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;本文从设计模式的&lt;b&gt;外在表现&lt;/b&gt;（用例）这一角度，重新看待了模式问题，&lt;br&gt;并非想表达其内在结构是不重要的，&lt;br&gt;只是想转换一下角度看待问题。&lt;/p&gt;&lt;p&gt;电工在布线的时候，虽然讲究内部精巧，&lt;br&gt;但一到布线完成，墙壁粉刷之后，人们看到的将只会是线缆暴露出来的插台。&lt;br&gt;一座楼房，在建造之初，一定要稳定结构，打好地基，&lt;br&gt;但一到盖完之后，人们更多的只会在意它的外观，以及是否舒适。&lt;/p&gt;&lt;p&gt;确实是这个道理。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-aa3619813f8b5f0af292fbc74cfc5ef5_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;498&quot; data-rawheight=&quot;374&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-aa3619813f8b5f0af292fbc74cfc5ef5&quot; data-watermark-src=&quot;v2-ee90018f85e0019486a61d04279a63f8&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;具有依存关系的两件事物，不可独立来看待。&lt;/p&gt;&lt;blockquote&gt;以销售为例，只有你一个人是不可能做成买卖的，必须得有另一个人&lt;b&gt;购买&lt;/b&gt;你所推销的东西。&lt;br&gt;—— 《&lt;a href=&quot;https://book.douban.com/subject/6801742/&quot;&gt;人生定位&lt;/a&gt;》&lt;/blockquote&gt;&lt;p&gt;即便是最精美，最优雅的框架，可复用性最高的系统，&lt;br&gt;也必须有人来使用，才可能被复用。&lt;/p&gt;&lt;p&gt;所以，复用的关键是&lt;b&gt;教学&lt;/b&gt;，而不是&lt;b&gt;架构&lt;/b&gt;。&lt;/p&gt;&lt;blockquote&gt;Reuse is about people and education, not just architect.&lt;br&gt;—— 《&lt;a href=&quot;https://book.douban.com/subject/4745287/&quot;&gt;软件架构师应该知道的97件事&lt;/a&gt;》&lt;/blockquote&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/1148282/&quot;&gt;计算机程序的构造与解释&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/2364517/&quot;&gt;数理逻辑&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/4114998/&quot;&gt;计算机语言的形式语义&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/26704160/&quot;&gt;定位：争夺用户心智的战争&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/6801742/&quot;&gt;人生定位&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/4745287/&quot;&gt;软件架构师应该知道的97件事&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/1052241/&quot;&gt;设计模式&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/25735501/&quot;&gt;测试驱动开发&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/4262627/&quot;&gt;重构：改善既有代码的设计&lt;/a&gt;&lt;/p&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-08-17-38636042</guid>
<pubDate>Fri, 17 Aug 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>设计模式奏鸣曲（一）：开篇</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-08-13-38635888.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/38635888&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-3664fb48501daef1331d6849dcdeafb2_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;600&quot; data-rawheight=&quot;400&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-3664fb48501daef1331d6849dcdeafb2&quot; data-watermark-src=&quot;v2-eefef9d283e6f48f1d7d70d286a0a0b2&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/1052241/&quot;&gt;奏鸣曲&lt;/a&gt;是一种专为某种乐器而写的音乐，&lt;br&gt;除了钢琴奏鸣曲以外，大多数的奏鸣曲都有钢琴伴奏。&lt;/p&gt;&lt;p&gt;在这里，我们将&lt;b&gt;设计模式&lt;/b&gt;比喻成了这一单独乐器，&lt;br&gt;而将与设计模式息息相关的&lt;b&gt;背景内容&lt;/b&gt;，喻指钢琴伴奏。&lt;/p&gt;&lt;p&gt;设计模式并不是一个独立的概念，它必须被放置到合适的背景中。&lt;/p&gt;&lt;hr&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-185923ba18030978f25eeb5d9dc39e56_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;420&quot; data-rawheight=&quot;273&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-185923ba18030978f25eeb5d9dc39e56&quot; data-watermark-src=&quot;v2-ff6fc86ad9a667248ef5c38772f8cc1d&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;适当的设计模式，也必须仔细斟酌&lt;b&gt;人为因素&lt;/b&gt;。&lt;br&gt;这是为什么呢？&lt;/p&gt;&lt;p&gt;维基百科中这样写道，&lt;/p&gt;&lt;blockquote&gt;设计模式，描述了在各种不同情况下，解决问题的一种方案。&lt;/blockquote&gt;&lt;p&gt;什么才是真正的&lt;b&gt;问题&lt;/b&gt;，它是如何产生的，&lt;br&gt;有哪些&lt;b&gt;解决方案&lt;/b&gt;，我们如何达成&lt;b&gt;共识&lt;/b&gt;，&lt;br&gt;针对方案，我们用什么&lt;b&gt;语言&lt;/b&gt;进行描述，&lt;b&gt;知识&lt;/b&gt;是如何传递的。&lt;/p&gt;&lt;p&gt;在诸多因素中，&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/24530471/&quot;&gt;利益相关者&lt;/a&gt;是我们不得不考虑的重要方面，&lt;br&gt;因此，不考虑清&lt;b&gt;人员的组织结构&lt;/b&gt;，设计模式就将不接地气。&lt;/p&gt;&lt;hr&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-70d1d2c049ccbde0b58bca2af70ef76a_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;526&quot; data-rawheight=&quot;334&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-70d1d2c049ccbde0b58bca2af70ef76a&quot; data-watermark-src=&quot;v2-4926f6f5e82de6356d738f2143f98dea&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;另一方面，软件系统所解决的&lt;b&gt;问题域&lt;/b&gt;也越来越复杂了，&lt;br&gt;但软件系统本身的复杂度，却不是复杂度的核心所在，&lt;br&gt;真正的复杂来源于业务领域，以及如何表示、理解、沟通那些随之而来的&lt;b&gt;抽象概念&lt;/b&gt;。&lt;/p&gt;&lt;blockquote&gt;很多应用程序最主要的复杂性，并不在技术上，而是来自领域本身、用户的活动或业务。&lt;br&gt;当这种领域复杂性在设计中没有得到解决时，基础技术的构思再好也是无济于事。&lt;br&gt;—— 《&lt;a href=&quot;https://book.douban.com/subject/26819666/&quot;&gt;领域驱动设计&lt;/a&gt;》&lt;/blockquote&gt;&lt;p&gt;没有一个清晰的&lt;b&gt;业务架构&lt;/b&gt;，则软件架构也不可能清晰。&lt;/p&gt;&lt;hr&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-1f448f92047fe17e6bda8704e266a632_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;320&quot; data-rawheight=&quot;440&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-1f448f92047fe17e6bda8704e266a632&quot; data-watermark-src=&quot;v2-156189d0131aec044080050b4694eda6&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;大部分设计模式相关的文章都有所侧重，甚至只是侧重&lt;b&gt;模式的描述方式&lt;/b&gt;，&lt;br&gt;我想说这可能是不太恰当的。&lt;/p&gt;&lt;p&gt;因为好的描述，不应当是乐谱本身，而应当是&lt;b&gt;奏鸣曲&lt;/b&gt;。&lt;br&gt;听众通过音乐这一&lt;b&gt;媒介&lt;/b&gt;进入作者塑造的精神世界。&lt;/p&gt;&lt;p&gt;下面我们就准备由外及内，由表及里，&lt;br&gt;探索这一神奇的&lt;b&gt;模式世界&lt;/b&gt;吧。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/1052241/&quot;&gt;设计模式&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/24530471/&quot;&gt;软件系统架构&lt;/a&gt;&lt;/p&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-08-13-38635888</guid>
<pubDate>Mon, 13 Aug 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>工程趣闻（十）：最有价值的产品</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-08-10-37672403.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37672403&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;b&gt;安身立命之本&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-11c94ecc1d17ba0b710a0e4192a1acc4_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;365&quot; data-rawheight=&quot;198&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-11c94ecc1d17ba0b710a0e4192a1acc4&quot; data-watermark-src=&quot;v2-75290af4a1b8b29738a261d96a950e97&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;总有人讨论，到底是“技术带动业务”，还是“业务带动技术”。&lt;br&gt;这确实是一个有争议的问题。&lt;br&gt;但是在这之前，我们需要知道，&lt;b&gt;到底什么是“业务”&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;维基百科上，对“业务”是这样解释的，&lt;/p&gt;&lt;blockquote&gt;企业运用科学方法和生产工艺，生产出可交付用户使用的产品与服务，&lt;br&gt;并以此为企业带来利益的行为。&lt;/blockquote&gt;&lt;p&gt;所以，追求业务发展，是一个&lt;b&gt;商业问题&lt;/b&gt;。&lt;br&gt;企业如果不获利，就不可能活下来，&lt;b&gt;盈利&lt;/b&gt;才是企业正常运转的前提。&lt;/p&gt;&lt;p&gt;那么就是“业务带动技术”了吧？&lt;br&gt;并不尽然。&lt;/p&gt;&lt;p&gt;一些高科技公司，企业的产品就是技术，通过销售技术方案而盈利。&lt;br&gt;对他们来说，&lt;b&gt;技术进步是业务发展的唯一办法&lt;/b&gt;，&lt;br&gt;不得不通过“技术带动业务”。&lt;/p&gt;&lt;p&gt;因此，当人们向我们矫正，一定要用“业务带动技术”时，&lt;br&gt;这实际上就是承认了技术革新并不是企业当前发展的瓶颈。&lt;br&gt;这也没什么错，每个公司都有自己的战略计划。&lt;/p&gt;&lt;p&gt;然而，对于工程师来说，能用自己的技术能力满足业务需求，&lt;br&gt;是在岗位工作而不被辞退的最低要求，无论这个业务具体是什么。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;交付能力&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-3d6ecb5e069abf46f91db2da4bdd847e_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;300&quot; data-rawheight=&quot;168&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-3d6ecb5e069abf46f91db2da4bdd847e&quot; data-watermark-src=&quot;v2-a6146ef5133ae786a97044beca3d3d38&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;团队也是如此，团队满足了业务发展的需求，就有能力存活下来，&lt;br&gt;如果没有能力交付，就有可能被解散。&lt;/p&gt;&lt;p&gt;然而，团队交付的项目，并不是最有价值的产品，&lt;b&gt;团队本身&lt;/b&gt;才是。&lt;br&gt;团队内部进行了有效积累，之后才能以更好更快的方式交付新项目。&lt;/p&gt;&lt;p&gt;因此，找到适合团队自身的工程实践，并不是一个好的目标，&lt;br&gt;这种静态的观点很容易把团队带入误区，&lt;b&gt;认为找到最佳实践就万事大吉了&lt;/b&gt;。&lt;br&gt;而实际上，持续不断的思考，高效的执行，才是最重要的。&lt;/p&gt;&lt;p&gt;从副产品的丰富程度，可以衡量团队是否有意识的进行了&lt;b&gt;积累&lt;/b&gt;，&lt;br&gt;有没有梳理出项目相关的文档或规范，有没有总结出跨项目通用的开发过程，&lt;br&gt;有没有提取出可复用的类库或组件，有没有考虑团队的影响力和品牌，等等。&lt;/p&gt;&lt;p&gt;只有不断进步的团队，才能应对变化，&lt;br&gt;只有不断修正自身，不断成长，才能活得更好。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;凝聚力&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-3b28c7892b260c7abd8709eeb9f81fa0_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;282&quot; data-rawheight=&quot;187&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-3b28c7892b260c7abd8709eeb9f81fa0&quot; data-watermark-src=&quot;v2-62a4d5584b81a6531b177227ddcf8e62&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;如果我们可以对比不同的团队，就会发现&lt;b&gt;技术方案并不全是由业务场景而决定的&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;虽然不同的业务场景，会导致人们选择不同的技术，&lt;br&gt;但是同样的业务场景，由于人员构成不同，仍然会导致不同的结果。&lt;/p&gt;&lt;p&gt;因此，&lt;b&gt;是“人员”决定了“事情”怎样被解决&lt;/b&gt;，而不是反之。&lt;br&gt;有些事情，离开了那些人，根本就无法完成。&lt;/p&gt;&lt;p&gt;此外，团队成员中进行合作需要寻找平衡点，&lt;br&gt;两个人有两个人的平衡，多个人有多个人的平衡，&lt;br&gt;只有互相试探，不断斟酌，才能打磨出更好的合作方式。&lt;/p&gt;&lt;p&gt;因此，好的团队，总是把成员能力培养和沟通合作看做重中之重，&lt;br&gt;只有团队成员技术水平强大了，&lt;b&gt;才能保证好的解决方案不断出现&lt;/b&gt;，&lt;br&gt;只有团队成员之间合作顺畅了，&lt;b&gt;才能保证高效的工作状态持续发生&lt;/b&gt;。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;形成团队需要时间，团队成员也需要首先建立关系。他们需要学习如何互相协作，需要了解彼此的癖好、强项、弱项，最终才能凝聚成团队。团队比项目更难构建，专业的开发组织会把项目分配给已形成凝聚力的团队，而不会围绕项目来组建团队。 &lt;br&gt;—— &lt;a href=&quot;https://book.douban.com/subject/11614538/&quot;&gt;程序员的职业素养&lt;/a&gt;&lt;br&gt;&lt;br&gt;Don&#39;t base your venture on a plan. Instead base it on a strategic foundation. &lt;br&gt;You can have a plan, but know that it will change, probably a lot. &lt;br&gt;The plan is fluid, the foundation is stable. &lt;br&gt;—— &lt;a href=&quot;https://book.douban.com/subject/26008422/&quot;&gt;How Google Works&lt;/a&gt;&lt;/blockquote&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-08-10-37672403</guid>
<pubDate>Fri, 10 Aug 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>工程趣闻（九）：柔性设计</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-08-06-37671823.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37671823&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;b&gt;生物的适应性&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-2cfee0c07ee51ca435fd874fd7b648fd_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;600&quot; data-rawheight=&quot;442&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-2cfee0c07ee51ca435fd874fd7b648fd&quot; data-watermark-src=&quot;v2-f30a6e1d2ea58bde10ce4f1aab4cc9cd&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;b&gt;适应&lt;/b&gt;可以指&lt;b&gt;生物族群&lt;/b&gt;经过演化而得到的为了在环境生存的特征，&lt;br&gt;或&lt;b&gt;个体&lt;/b&gt;长时间曝露后经由性状的可塑性提高其适应度。&lt;br&gt;在英语里，前者称&lt;b&gt;adaptation&lt;/b&gt;，后者称&lt;b&gt;acclimatization&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;adaptation是指生物个体的生理或行为特征，经过了长时间的天择作用之后，&lt;br&gt;在某个环境下能够顺利的繁衍，并增加数量，发生在&lt;b&gt;族群&lt;/b&gt;的层次。&lt;/p&gt;&lt;p&gt;acclimatization发生在&lt;b&gt;个体&lt;/b&gt;内。&lt;br&gt;例如，平地人到高山住一段时间后，红血球数会提高。&lt;br&gt;养鱼的人帮鱼换水时会一次换一部分，就是为了配合鱼适应不同水质的所需的时间。&lt;/p&gt;&lt;p&gt;在编写软件时，几乎每增加一个功能，都会降低它的应变性，让它以后更难被修改。&lt;br&gt;因此，以怎样的方式给既有软件添加功能，变成了一件需要仔细考虑的事情。&lt;/p&gt;&lt;p&gt;程序员的&lt;b&gt;设计决策&lt;/b&gt;，严重影响了维持特定软件规模所需的&lt;b&gt;心智复杂度&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;我们不妨进行这样的类比，把软件看做在其生命周期内的一个&lt;b&gt;活的生命体&lt;/b&gt;。&lt;br&gt;在成长过程中，它经历了各种环境变更，但必须想办法活下来。&lt;br&gt;而编写软件，就好像在持续&lt;b&gt;培植&lt;/b&gt;一个这样的生命。&lt;/p&gt;&lt;p&gt;这样思考给我们带来很多启发，&lt;br&gt;我们应该怎样设计软件才能使它更具有适应性呢？&lt;br&gt;我们应该以怎样的开发模式，才能更快的响应环境的变更呢？&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;柔性和敏捷&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-36dc16d72ac82de72ce71da56535d878_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;323&quot; data-rawheight=&quot;220&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-36dc16d72ac82de72ce71da56535d878&quot; data-watermark-src=&quot;v2-ba989032f77c41b659eff093bb7ebe13&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/25884108/&quot;&gt;Steve Yegge&lt;/a&gt;在讨论Google平台时，将Google+与Facebook进行了对比。&lt;br&gt;他认为Google+团队错误的以为Facebook之所以成功是因为人家做了一个好产品，&lt;br&gt;而实际上是因为Facebook通过让其他人参与进来的方式，搭建起一整套各异的产品。&lt;/p&gt;&lt;p&gt;Facebook上有成百上千种消磨时间的好去处，所以才能满足所有人。&lt;br&gt;而Google+团队看到这个后说：&lt;br&gt;“天哪，看来我们也需要游戏。我们去找人来帮我们写游戏吧。”&lt;/p&gt;&lt;p&gt;问题就在于Google+在&lt;b&gt;试图预测人们想要什么，然后再实现它&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;或许我们真的&lt;b&gt;不该去预测需求将如何变更&lt;/b&gt;，&lt;br&gt;或许我们该思考，怎样设计可以让软件更容易应对变更，&lt;br&gt;怎样设计便于让其他开发者参与进来。&lt;/p&gt;&lt;p&gt;这并不是一个新的想法，&lt;br&gt;为了使项目能够随着开发工作的进行加速前进，而不会由于它自己的老化停滞不前，&lt;br&gt;设计必须要让人们乐于使用，而且易于做出修改，这就是&lt;b&gt;柔性设计&lt;/b&gt;（supple design）。&lt;/p&gt;&lt;p&gt;早期设计版本通常达不到柔性设计的要求，&lt;br&gt;由于项目的时间限制和预算的缘故，很多设计一直就是僵化的。&lt;/p&gt;&lt;p&gt;但是，当复杂性阻碍了项目的前进时，就需要仔细修改最关键、最复杂的地方，&lt;br&gt;使之变成柔性设计，这样才能突破复杂性带给我们的限制，&lt;br&gt;而不会陷入遗留代码维护的麻烦中。&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-071c4f17298503f461db8f959b13fcb7_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;621&quot; data-rawheight=&quot;347&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-071c4f17298503f461db8f959b13fcb7&quot; data-watermark-src=&quot;v2-d98970225dc432d474766ec5095f1565&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;为了应对快速变化的需求，&lt;br&gt;从1990年代开始逐渐引起广泛关注的一些新型软件开发方法——敏捷开发。&lt;/p&gt;&lt;p&gt;相对于“非敏捷”，它更强调程序员团队与业务专家之间的紧密协作、&lt;br&gt;面对面的沟通、频繁交付新的软件版本、紧凑而自我组织型的团队、&lt;br&gt;能够很好地适应需求变化的代码编写和团队组织方法，也更注重&lt;b&gt;软件开发过程中人的作用&lt;/b&gt;。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;锻炼设计能力&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-3a35bc397eec0f1b2d3c2aca841254f3_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;612&quot; data-rawheight=&quot;320&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-3a35bc397eec0f1b2d3c2aca841254f3&quot; data-watermark-src=&quot;v2-5d009da187d24e539bf26998aaa7d031&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;和其他行业一样，软件工程师的水平也是参差不齐，&lt;br&gt;有些人可能还不胜任软件的设计工作。&lt;/p&gt;&lt;p&gt;于是，很多团队进行了这样的划分，&lt;br&gt;让一些专家程序员去开发可复用的组件或框架，&lt;br&gt;然后&lt;b&gt;让那些暂不胜任的程序员们“傻瓜式”的使用它们&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;不幸的是，这种态度可能会导致失败，因为严重低估了应用程序开发的难度，&lt;br&gt;开发软件是一个&lt;b&gt;处处需要设计&lt;/b&gt;的工作。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/1629512/&quot;&gt;Eric Evans&lt;/a&gt;指出，如果这些人在设计方面不够聪明，&lt;b&gt;就不应该让他们来开发软件&lt;/b&gt;。&lt;br&gt;如果他们足够聪明，那么用“傻瓜式”的框架来应付他们只会为他们造成&lt;b&gt;障碍&lt;/b&gt;，&lt;br&gt;使他们得不到所需的工具。&lt;/p&gt;&lt;p&gt;因此，我们应该把精力放在设计上面。&lt;br&gt;如果还不胜任设计的工作，最紧急的应该是去学习如何进行设计。&lt;br&gt;毕竟，在一条错误的路上走的越远，以后纠正起来就越困难。&lt;/p&gt;&lt;blockquote&gt;Mark Zuckerberg：对于招聘，我创立公司的时候只有19岁，所以我不可能觉得经验是个非常重要的事情，不然我就会怀疑自己了。所以，我们在那些我们认为有天分的人身上做投资，哪怕他们毫无经验。我觉得最重要的是，不要觉得只有有过经验的人才能把某件事情做好。&lt;/blockquote&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%81%A9%E6%87%89&quot;&gt;适应&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%95%8F%E6%8D%B7%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91&quot;&gt;敏捷软件开发&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/1629512/&quot;&gt;领域驱动设计 - 不要编写“傻瓜式”的框架 - P344&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/25884108/&quot;&gt;程序员的呐喊 - 吐槽Google平台 - P184&lt;/a&gt;&lt;/p&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-08-06-37671823</guid>
<pubDate>Mon, 06 Aug 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>业余程序员的个人修养 - 总诀式</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-08-03-41179053.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/41179053&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;b&gt;1. 柯里化的前生今世&lt;/b&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34060802&quot;&gt;函数面面观&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34063576&quot;&gt;括号神教&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34063805&quot;&gt;语言和同像性&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34064164&quot;&gt;编译器与解释器&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34064286&quot;&gt;动态作用域&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34064446&quot;&gt;词法作用域和闭包&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34064549&quot;&gt;first-class continuation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34064655&quot;&gt;尾调用与CPS&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34199018&quot;&gt;For Great Good&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34200056&quot;&gt;类型和类型系统&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34200898&quot;&gt;Pure and Lazy&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34201651&quot;&gt;多态性&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34201756&quot;&gt;Weak head normal form&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;&lt;b&gt;2. Emacs之魂&lt;/b&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34106024&quot;&gt;开篇&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34106092&quot;&gt;一分钟学会人界用法&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34106188&quot;&gt;列表，引用和求值策略&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34106283&quot;&gt;标识符，符号和变量&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34106367&quot;&gt;变量的“指针”语义&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34106430&quot;&gt;宏与元编程&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34106490&quot;&gt;变量捕获与卫生宏&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34106584&quot;&gt;反引用与嵌套反引用&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34106631&quot;&gt;读取器宏&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;&lt;b&gt;3. 递归函数&lt;/b&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34287397&quot;&gt;开篇&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34287414&quot;&gt;编写递归函数的思路和技巧&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34287668&quot;&gt;归纳原理&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34425726&quot;&gt;全函数与计算的可终止性&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34447250&quot;&gt;递归集与递归可枚举集&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34484014&quot;&gt;最多有多少个程序&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34526779&quot;&gt;不动点算子&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34576092&quot;&gt;偏序结构&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34604220&quot;&gt;最小不动点定理&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;&lt;b&gt;4. 你好，类型&lt;/b&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34669807&quot;&gt;开篇&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34679052&quot;&gt;Lambda calculus&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34699469&quot;&gt;Combinatory logic&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34727603&quot;&gt;Propositional logic&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34779520&quot;&gt;Predicate logic&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34815896&quot;&gt;Simply typed lambda calculus&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34861374&quot;&gt;Recursive type&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34887359&quot;&gt;Subtype&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34915143&quot;&gt;Let polymorphism&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34936637&quot;&gt;Parametric polymorphism&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;&lt;b&gt;5. 语言背后的代数学&lt;/b&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/34977830&quot;&gt;语义解释&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/35017879&quot;&gt;初等代数&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/35059714&quot;&gt;语义模型&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/35102039&quot;&gt;哥德尔定理&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/35142819&quot;&gt;Σ代数&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/35170799&quot;&gt;Henkin模型&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/35196235&quot;&gt;数学结构&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/35237925&quot;&gt;范畴&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/35281476&quot;&gt;笛卡尔闭范畴&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/35322455&quot;&gt;Curry-Howard-Lambek correspondance&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;&lt;b&gt;6. 编程哲学&lt;/b&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/37653499&quot;&gt;愚者无疑，智者多虑&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/37653890&quot;&gt;让我们想个办法&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/37654697&quot;&gt;是什么影响了我们的开发效率&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/37655447&quot;&gt;把控间接性&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/37656145&quot;&gt;未雨绸缪&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/37656537&quot;&gt;从正确归因到个人影响力&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/37656839&quot;&gt;我写不出好代码&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/37657098&quot;&gt;偿还不起的技术债务&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/37657557&quot;&gt;让技能被使用&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;&lt;b&gt;7. 工程趣闻&lt;/b&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/37668452&quot;&gt;如何落子&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/37668713&quot;&gt;检验假设&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/37669183&quot;&gt;臣妾做不到&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/37669640&quot;&gt;不要制造问题&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/37670015&quot;&gt;小步快跑&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/37670453&quot;&gt;历史不可修改&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/37670926&quot;&gt;不责于人&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/p/37671342&quot;&gt;不要一拥而上&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-08-03-41179053</guid>
<pubDate>Fri, 03 Aug 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>工程趣闻（八）：不要一拥而上</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-08-03-37671342.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37671342&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;b&gt;分工&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-e07d959b485a1d1fe40f1d6fdee2c43a_r.jpg&quot; data-rawwidth=&quot;620&quot; data-rawheight=&quot;125&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-e07d959b485a1d1fe40f1d6fdee2c43a&quot; data-watermark-src=&quot;v2-8430e9ec85f2e260c8df625954b153af&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;1776年3月，亚当·斯密的《国富论》中第一次提出了劳动分工的观点，&lt;br&gt;并系统全面地阐述了&lt;b&gt;劳动分工&lt;/b&gt;对提高劳动生产率和增进国民财富的巨大作用。&lt;/p&gt;&lt;p&gt;一个没有受过专门训练的劳动者，&lt;br&gt;无论如何努力，一天也生产不了20枚扣针，&lt;br&gt;但有了分工之后，经过前后18道工序，每人每天可以生产4800枚扣针。&lt;/p&gt;&lt;p&gt;社会生活也同样进行了分工，&lt;br&gt;裁缝不想制作他自己的鞋子，而向鞋匠购买；&lt;br&gt;鞋匠不想制作他自己的衣服，而雇裁缝制作；&lt;br&gt;农民不想缝衣，也不想制鞋，而宁愿请不同的工匠去做。&lt;/p&gt;&lt;p&gt;大家各尽所能，各取所需。&lt;/p&gt;&lt;p&gt;在软件项目中，分工也很常见。&lt;br&gt;市场，需求，设计，开发，测试，运维，运营，等等各个岗位都有专业的人来完成。&lt;br&gt;让一个人胜任所有的这些岗位，在当今社会，几乎是不可能的。&lt;br&gt;人们只能&lt;b&gt;各司其职，紧密合作&lt;/b&gt;。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;信息爆炸&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-d25383b500da9588bed4258c568e77eb_r.jpg&quot; data-rawwidth=&quot;372&quot; data-rawheight=&quot;156&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-d25383b500da9588bed4258c568e77eb&quot; data-watermark-src=&quot;v2-6abaf9f2308fdc43dbaf2f1beae03e99&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;然而，分工的神话，可能真的要止于软件的开发环节了。&lt;/p&gt;&lt;p&gt;与工业生产的重复性劳动不同，软件开发恰恰是一个消除重复的过程，&lt;br&gt;它更像是一种智力活动。&lt;br&gt;所以，与其说工程师们在合力建造一座大厦，不如说他们在&lt;b&gt;合写一部著作&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;沟通变成了关键，分工产生的信息不对称，会在合作的时候迸发出来。&lt;/p&gt;&lt;p&gt;如果将100位世界级的音乐家组成一个乐队而没有指挥，&lt;br&gt;简直无法想象这个世界级的乐队会奏出怎样的音乐。&lt;/p&gt;&lt;p&gt;让这些音乐家们发挥他们的最佳水平不如让他们知道&lt;b&gt;何时应该大声何时应该轻柔&lt;/b&gt;来得重要，&lt;br&gt;这样的乐队简直是在&lt;b&gt;浪费人才&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;相同的人才浪费在软件开发方面也很常见，&lt;br&gt;优秀的团队，专业的开发人员，&lt;br&gt;采用最新的开发实践，但还是无法达成项目计划目标的要求。&lt;/p&gt;&lt;p&gt;回想一下，软件开发过程中的大部分时间，&lt;br&gt;都是在滚动屏幕，试着查找和理解代码，&lt;br&gt;而真正进行代码编写的时间比例是非常小的。&lt;/p&gt;&lt;p&gt;最坏的情况是，团队中每个人都要对这些陈旧代码自学一遍，&lt;br&gt;并且对它们进行的任何修改，其他人还要再重新学习。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-6edf6d883e82fed6c7a0cf3ad6ad9c11_r.jpg&quot; data-rawwidth=&quot;253&quot; data-rawheight=&quot;184&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-6edf6d883e82fed6c7a0cf3ad6ad9c11&quot; data-watermark-src=&quot;v2-05402bc270a0fba59f47b72156641324&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;这些沟通成本是巨大的，&lt;br&gt;即便是最称职的工程师，大多数时间考虑的也通常不是怎样实现一个功能，&lt;br&gt;而是在&lt;b&gt;研究以前别人是怎么做的&lt;/b&gt;，&lt;br&gt;而且这个『以前』可能并不会太早，这个『别人』也可能是过去的自己。&lt;/p&gt;&lt;p&gt;因此，越是代码有大量产出的团队，&lt;br&gt;&lt;b&gt;阅读障碍&lt;/b&gt;越是明显，阻碍了团队效率的进一步提高。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;团队效率&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-289b8600cc100de8111d530ebd701bf2_r.jpg&quot; data-rawwidth=&quot;640&quot; data-rawheight=&quot;359&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-289b8600cc100de8111d530ebd701bf2&quot; data-watermark-src=&quot;v2-cc8b1271343c5d1eea5cd96586bfbb52&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;生活中多数东西，最好与普通之间的差距不超过两倍。&lt;/p&gt;&lt;p&gt;比如出租车司机，最棒的司机与普通司机之间的差距大概是30%，&lt;br&gt;最好的与普通之间的差距有多大呢？20%？&lt;br&gt;最好的CD机与普通CD机的差距有多大？20%？&lt;br&gt;这种差距很少超过两倍。&lt;/p&gt;&lt;p&gt;乔布斯在《遗失的访谈》中指出，&lt;br&gt;在软件行业，还有硬件行业，这种差距有可能超过15倍，&lt;b&gt;甚至100倍&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;在一项相关研究中，Sackman、Erikson和Grand曾对一组具有经验的程序员进行测量。&lt;br&gt;在该小组中，最好的和最差的表现在生产率上平均为10:1；&lt;br&gt;在运行速度和空间上具有5:1的惊人差异。&lt;/p&gt;&lt;p&gt;简而言之，20,000/年的程序员的生产率可能是10,000/年程序员的&lt;b&gt;10倍&lt;/b&gt;，&lt;br&gt;数据还显示&lt;b&gt;经验和实际的表现没有直接联系&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;考虑到工程师们在效率方面的差异，&lt;br&gt;Harlan Mills提供了一个崭新的、创造性的解决方案。&lt;/p&gt;&lt;p&gt;Mills建议大型项目的每一个部分由一个团队解决，&lt;br&gt;但是该队伍以类似&lt;b&gt;外科手术&lt;/b&gt;的方式组建，而并非一拥而上。&lt;br&gt;也就是说，同每个成员截取问题某个部分的做法相反，&lt;br&gt;&lt;b&gt;由一个人来进行问题的分解，其他人给予他所需要的支持&lt;/b&gt;，以提高效率和生产力。&lt;/p&gt;&lt;p&gt;有些软件公司已经采用了类似的工作方式：&lt;/p&gt;&lt;blockquote&gt;Facebook的工程师们不分前端和后端，只分product和infrastructure。做product的通常都是全栈工程师，不需要对特定的技术非常精通，但要求学习能力和灵活性足够好，不能只做自己舒适区以内的事情。infrastructure拥有更多各个领域的specialist，前端只是其中之一。infrastructure的客户就是product，要做的事情就是让product开发实际产品时效率更高。&lt;/blockquote&gt;&lt;p&gt;可见，效率问题应该始终围绕着瓶颈展开，不能怀有侥幸心理。&lt;br&gt;最大化并行程度，并不是一个永远适用的方法，&lt;br&gt;&lt;b&gt;也要看问题本身是否具有可并行处理的属性。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;一个人20秒可以跑完100米，可是20个人1秒却不可能跑完全程。&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-cd68d7bbb99aa8205da4b82b0c41a55e_r.jpg&quot; data-rawwidth=&quot;500&quot; data-rawheight=&quot;308&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-cd68d7bbb99aa8205da4b82b0c41a55e&quot; data-watermark-src=&quot;v2-b5656b345e0fbea53d04891c8f15c86b&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://wiki.mbalib.com/wiki/%E6%96%AF%E5%AF%86%E7%9A%84%E5%88%86%E5%B7%A5%E7%90%86%E8%AE%BA&quot;&gt;斯密的分工理论&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/1007738/&quot;&gt;快速软件开发&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/1102259/&quot;&gt;人月神话&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/question/28207685/answer/39974928&quot;&gt;Web 前后端分离的意义大吗？&lt;/a&gt;&lt;/p&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-08-03-37671342</guid>
<pubDate>Fri, 03 Aug 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>工程趣闻（七）：不责于人</title>
<link>https://henix.github.io/feeds/zhuanlan.self-discipline/2018-07-30-37670926.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/37670926&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;b&gt;让技术活下来&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-4c151caa19a0a96ccdc4c7829dd02ef8_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;852&quot; data-rawheight=&quot;357&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-4c151caa19a0a96ccdc4c7829dd02ef8&quot; data-watermark-src=&quot;v2-e0811a9c2a9812660a0a815bb3416c87&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;有这样一种观点，认为设计优良的框架，&lt;br&gt;细致考虑并精巧实现的架构自然会被人们重复利用。&lt;/p&gt;&lt;p&gt;事实上，即便是最精美，最优雅的框架，可复用性最高的系统，&lt;br&gt;也必须满足下面的条件才可能被&lt;b&gt;复用&lt;/b&gt;：&lt;br&gt;（1）大家知道它们存在&lt;br&gt;（2）大家知道如何使用它们&lt;br&gt;（3）大家认识到利用已有资源好过自己动手&lt;/p&gt;&lt;p&gt;如果大家找不到可复用的资源，或者不知道如何使用这些资源，&lt;br&gt;人的天性就会发挥作用，他们就会自己动手实现。&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-8af642befae2a5da9b65b617745d33c7_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;848&quot; data-rawheight=&quot;356&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-8af642befae2a5da9b65b617745d33c7&quot; data-watermark-src=&quot;v2-b36cb59465e37efe9ffd341066e7bcc3&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;“是金子总会发光”的想法在软件领域可能行不通，&lt;br&gt;那些时髦的框架之所以被推到了浪潮之巅，是因为有人在营销它们，&lt;br&gt;不得不承认商业规律已经融入到了技术方案中。&lt;/p&gt;&lt;p&gt;当然，这并不总是好的，&lt;br&gt;方案本身很容易绑架用户，吞噬着使用者的理智。&lt;/p&gt;&lt;p&gt;在享有种种表面上便利的同时，我们似乎看到了它们伪善的一面，&lt;br&gt;“买它吧，用它吧，它能给你带来快乐……”。&lt;/p&gt;&lt;p&gt;技术出身的工程师们，很容易对这件事嗤之以鼻，&lt;br&gt;把全部精力放到了设计和架构本身，追求极致，&lt;br&gt;但是忽略了技术究竟该怎样被别人使用。&lt;/p&gt;&lt;p&gt;这些&lt;b&gt;理想主义者&lt;/b&gt;的假设，会加速技术的灭亡，在残酷的市场竞争中被淘汰。&lt;br&gt;人们并不会为优雅的设计买单，他们只相信价值和利润，&lt;b&gt;活下去才是第一要务&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;这就是为什么很多企业追求技术推动业务、技术与实践结合的原因了，&lt;br&gt;因为不得不这么做，&lt;br&gt;毕竟，工具只有被使用才有价值。&lt;/p&gt;&lt;blockquote&gt;Reuse is about people and education, not just architecture.&lt;/blockquote&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;帮团队看清问题&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;我们可能感受到了，在项目实践中去推广一门技术，是多么的困难。&lt;br&gt;让别人做一件事情，影响团队的决策，个体是多么的无力。&lt;/p&gt;&lt;p&gt;每个成员都只会从自身角度出发，按个人收益进行决策，并不会顺利听从安排，&lt;br&gt;也不容易受到别人的鼓动。&lt;/p&gt;&lt;p&gt;虽然同事们不会因为使用这些工具而付钱，&lt;br&gt;但是会付出时间，精力甚至牺牲尊严，&lt;br&gt;这是产生抗拒心理的根本原因。&lt;/p&gt;&lt;p&gt;一上来就推销我们的工具和技术，显然是不可行的。&lt;/p&gt;&lt;p&gt;反观自己，当我们发现了解决方案为之高兴的时候，&lt;br&gt;很容易忽略我们的&lt;b&gt;目的是为了解决问题&lt;/b&gt;。&lt;br&gt;而且大多数问题，往往都不止有一个解决方案。&lt;/p&gt;&lt;p&gt;当我们说服别人不希望人家固执己见之时，自己也要保持开放态度，&lt;br&gt;如果自己偏爱的方案无法改变，就无法接受更好的方案。&lt;/p&gt;&lt;p&gt;因此，不要告诉人家他们现在的这个选择“不对”，&lt;br&gt;&lt;b&gt;不要就好像人家误入歧途一样跟人家谈话。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;因为我们是在尝试解决问题，而不是推行方案。&lt;br&gt;我们需要做的是帮团队看清问题的本质，&lt;br&gt;然后让适用的方案有机会出现。&lt;/p&gt;&lt;p&gt;只有确定真的有问题，才能弄清楚是什么问题，以及这个问题是否值得解决。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;不要力挽狂澜&lt;/b&gt;&lt;/h2&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-e3feca2fe1d4a07898dcb1e4f4997dec_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;850&quot; data-rawheight=&quot;352&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-e3feca2fe1d4a07898dcb1e4f4997dec&quot; data-watermark-src=&quot;v2-116bf60b1d8dd536f52bb141a2508a91&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;无论是在生活还是工程实践中，&lt;br&gt;人们很容易看到事物的现状，但是&lt;b&gt;发展规律&lt;/b&gt;就不容易看清了。&lt;/p&gt;&lt;p&gt;当人们对现状不满时，直觉上的反应就是要改变它，&lt;br&gt;但是又忽略了导致现状的原因。&lt;/p&gt;&lt;p&gt;因此，这样的改变通常是不能凑效的，&lt;br&gt;并不会因为我们想要改变它，而产生改变，&lt;br&gt;事物有其自身的发展趋势。&lt;/p&gt;&lt;p&gt;看到了事物发展的趋势，就能运用它，&lt;br&gt;人们会不由自主的向着趋势行动，趋利避害和从众心理是本能反应。&lt;br&gt;高明的领导者，甚至会&lt;b&gt;营造趋势&lt;/b&gt;制造条件，引导人们行进的方向。&lt;/p&gt;&lt;p&gt;先把河道疏通，再开闸放水，河水就会自然的流动。&lt;/p&gt;&lt;p&gt;看不到趋势而强行改变，会遭遇很大的抵触，把精力用到了内耗中。&lt;br&gt;力挽狂澜的个人英雄主义，往往并不凑效。&lt;br&gt;顺水推舟顺势而为，才是明智之举。&lt;/p&gt;&lt;p&gt;那么如何营造这种趋势呢？&lt;br&gt;我们需要做的是吸引，就好像鲜花吸引蜜蜂一样，&lt;br&gt;营造人们对现状的不适感，让趋势对人们有利。&lt;/p&gt;&lt;p&gt;同时，相信团队的能力，把责任委派出去，鼓励对趋势有利的行为。&lt;br&gt;人们就会主动尝试，为解决这种不适向着趋势前进。&lt;br&gt;不要限制人们的想象力，让计划持续可变，关注现状与目标之间的距离。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;参考&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://so.gushiwen.org/guwen/bookv_43.aspx&quot;&gt;孙子兵法：兵势篇&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/6990284/&quot;&gt;布道之道&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://book.douban.com/subject/26008422/&quot;&gt;How Google Works&lt;/a&gt;&lt;/p&gt;</description>
<author>何幻</author>
<guid isPermaLink="false">2018-07-30-37670926</guid>
<pubDate>Mon, 30 Jul 2018 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
