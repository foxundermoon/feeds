<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>全同态加密与区块链</title>
<link>https://henix.github.io/feeds/zhuanlan.fhe-blockchain/</link>
<description>全同态加密具有神奇的功能，在不解密的情况下能够对密文进行任意计算。区块链能够在去中心化的环境下，保证数据的不可篡改、可追溯等。区块链+全同态加密=让我的数据属于我掌控。</description>
<language>zh-cn</language>
<lastBuildDate>Thu, 27 Sep 2018 17:02:06 +0800</lastBuildDate>
<item>
<title>zkSNARK零知识证明(未完待续)</title>
<link>https://henix.github.io/feeds/zhuanlan.fhe-blockchain/2018-09-24-45038515.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/45038515&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;证明有一个多元多项式的解。&lt;/p&gt;&lt;h2&gt;同态隐藏Homomorphic Hidings(HH)&lt;/h2&gt;&lt;p&gt;函数 &lt;equation&gt;E(x)&lt;/equation&gt; 如果满足以下条件:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;知道 &lt;equation&gt;E(x)&lt;/equation&gt; ,几乎不可能解出 &lt;equation&gt;x&lt;/equation&gt; &lt;/li&gt;&lt;li&gt;如果 &lt;equation&gt;x \neq y&lt;/equation&gt; ,则 &lt;equation&gt;E(x)\neq E(y)&lt;/equation&gt; &lt;/li&gt;&lt;li&gt;如果知道 &lt;equation&gt;E(x),E(y)&lt;/equation&gt; ，可以推算出 &lt;equation&gt;E(x+y)&lt;/equation&gt; 等&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;则 &lt;equation&gt;E(x)&lt;/equation&gt; 为 &lt;equation&gt;x&lt;/equation&gt; 的Homomorphic Hidings(HH)&lt;/p&gt;&lt;p&gt;例如Alice想向Bob证明自己有 &lt;equation&gt;x+y=7&lt;/equation&gt; 的可行解：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Alice计算 &lt;equation&gt;E(x),E(y)&lt;/equation&gt; ,然后发给Bob&lt;/li&gt;&lt;li&gt;Bob通过 &lt;equation&gt;E(x),E(y)&lt;/equation&gt; 计算出 &lt;equation&gt;E(x+y)&lt;/equation&gt; &lt;/li&gt;&lt;li&gt;Bob检查是否满足 &lt;equation&gt;E(x+y)=E(7)&lt;/equation&gt; ,如果等式成立，那么Bob接收Alice有 &lt;equation&gt;x+y=7&lt;/equation&gt; 的解&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;通过这个过程，Alice并没有暴露可行解，但又可以向Bob证明自己有可行解&lt;/p&gt;&lt;h2&gt;Blind evaluation of a polynomial&lt;/h2&gt;&lt;p&gt;在 &lt;equation&gt;\mathbb{F}_p&lt;/equation&gt; 上的d次多项式 &lt;equation&gt;P&lt;/equation&gt; :&lt;/p&gt;&lt;p&gt;&lt;equation&gt;P(X)=a_0+a_1\cdot X +a_2\cdot X^2 + a_3\cdot X^3+...+a_d\cdot X^d, \text{其中}a_0,...a_d\in \mathbb{F}_p&lt;/equation&gt; &lt;/p&gt;&lt;p&gt;我们想用 &lt;equation&gt;s\in \mathbb{F}_p&lt;/equation&gt; 隐藏起来，例如这里我们用HH函数 &lt;equation&gt;E(x)=g^x&lt;/equation&gt; ，则有:&lt;/p&gt;&lt;p&gt;&lt;equation&gt;E(ax+by)=g^{ax+by}=g^{ax}\cdot g^{by}=E(x)^a\cdot E(y)^b&lt;/equation&gt; &lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;可以看到 &lt;equation&gt;x,y&lt;/equation&gt; 线性组合的同态隐藏可以通过 &lt;equation&gt;E(x),E(y)&lt;/equation&gt;算出来，那么：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;P(s)=a_0+a_1\cdot s + a_2\cdot s^2+...+a_d\cdot s^d &lt;/equation&gt; &lt;equation&gt; 因为P(s)是s^1,...,s^d的线性组合，所以E(P(s))\text{可以通过}E(s),E(s^2),...E(s^d)算出来&lt;/equation&gt; &lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;我们得到以下协议：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Bob选出 &lt;equation&gt;s\in \mathbb{F}_p&lt;/equation&gt; 并计算出 &lt;equation&gt;E(s),E(s^2),...E(s^d)&lt;/equation&gt; ，发给Alice&lt;/li&gt;&lt;li&gt;Alice通过 &lt;equation&gt;E(s),E(s^2),...E(s^d)&lt;/equation&gt; 计算出 &lt;equation&gt;E(P(s))&lt;/equation&gt; &lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这里的多项式盲求值（Blind evaluation of a polynomial），表现在Alice不需要知道 &lt;equation&gt;s&lt;/equation&gt; 就可以计算 &lt;equation&gt;P(s)&lt;/equation&gt; 的同态隐藏&lt;/p&gt;&lt;p&gt;但现在出现了一个问题，Alice可以随意发一个并不是 &lt;equation&gt;E(P(s))&lt;/equation&gt; 的结果。在这种情况下Bob怎么检查Alice发的确实是 &lt;equation&gt;E(P(s))&lt;/equation&gt; 呢？&lt;/p&gt;&lt;h2&gt;Verifiable blind evaluation of a polynomial&lt;/h2&gt;&lt;p&gt;先看case1:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Bob发给Alice, &lt;equation&gt;(a,b)&lt;/equation&gt; ,其中 &lt;equation&gt;b=\alpha\cdot a&lt;/equation&gt; &lt;/li&gt;&lt;li&gt;Alice需要计算并发送 &lt;equation&gt;(a&#39;,b&#39;)&lt;/equation&gt; 给Bob，必须满足 &lt;equation&gt;b&#39;=\alpha\cdot a&#39;&lt;/equation&gt; &lt;/li&gt;&lt;/ol&gt;&lt;p&gt;因为Bob推算不出 &lt;equation&gt;\alpha&lt;/equation&gt; ,所以只能取 &lt;equation&gt;a&#39;=\gamma\cdot a, b&#39;=\gamma\cdot b&lt;/equation&gt; ,才能满足要求&lt;/p&gt;&lt;p&gt;再看case2:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Bob发送 &lt;equation&gt;(a_1, b_1),(a_2, b_2),\ b_1=\alpha\cdot a_1,b_2=\alpha\cdot a_2,&lt;/equation&gt; 给Alice&lt;/li&gt;&lt;li&gt;Alice需要计算并发送 &lt;equation&gt;(a&#39;,b&#39;)&lt;/equation&gt; 给Bob，必须满足 &lt;equation&gt;b&#39;=\alpha\cdot a&#39;&lt;/equation&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这种情况下,Alice可以选择 &lt;equation&gt;a&#39;=c_1\cdot a_1 + c_2\cdot a_2,\  b&#39; = c_1\cdot b_1 + c_2\cdot b_2&lt;/equation&gt; &lt;/p&gt;&lt;p&gt;可以看到只要Bob只要检查 &lt;equation&gt;b&#39;=\alpha\cdot a&#39;&lt;/equation&gt; 可以保证 &lt;equation&gt;a&#39;&lt;/equation&gt; 是 &lt;equation&gt;a&lt;/equation&gt; 的线性组合&lt;/p&gt;&lt;p&gt;case3:&lt;/p&gt;&lt;p&gt;再回到多项式的情况,&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Bob发送 &lt;equation&gt;(E(s),  E(\alpha\cdot s)), (E(s^2),  E(\alpha\cdot s^2)),...,(E(s^d), E(\alpha\cdot s^d)),  &lt;/equation&gt; 给Alice,设 &lt;equation&gt;E(x)=x\cdot g&lt;/equation&gt; ,也就是 &lt;equation&gt;(s\cdot g,s^2\cdot g,...,s^d\cdot g), (\alpha s\cdot g,\alpha s^2\cdot g,...,\alpha s^d\cdot g)&lt;/equation&gt;&lt;/li&gt;&lt;li&gt;Alice选择 &lt;equation&gt;a&#39;=\sum_{i=0}^{d}{c_i s^i\cdot g}=P(s)\cdot g=\sum_{i=0}^{d}{c_i E(s^i)},&lt;/equation&gt;&lt;equation&gt; b&#39;=\sum_{i=0}^{d}{c_i \alpha s^i\cdot g}=\alpha P(s)\cdot g=\sum_{i=0}^{d}{c_i \alpha E(s^i)},&lt;/equation&gt; 发给bob&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Bob检查 &lt;equation&gt;b&#39;=\alpha\cdot a&#39;&lt;/equation&gt; 后，可以认定 &lt;equation&gt;a&#39;=E(P(s)), &lt;/equation&gt; 其中 &lt;equation&gt;P(s)=c_0+c_1\cdot s + c_2\cdot s^2+...+c_d\cdot s^d &lt;/equation&gt; &lt;/p&gt;&lt;p&gt;也就是Bob可以验证Alice发过来的是之前Bob发给Alice的同态隐藏的线性组合的同态隐藏&lt;/p&gt;&lt;h2&gt;Quadratic Arithmetic Program(QAP)&lt;/h2&gt;&lt;p&gt;设一个QAP为 &lt;equation&gt;Q&lt;/equation&gt; ，size为m, degree为d，包含 &lt;equation&gt;L_1,L_2,L_3,...,L_m,\ R_1,R_2,R_3,...,R_m,\ O_1,O_2,O_3,...,O_m,\text{和一个d次目标多项式}T&lt;/equation&gt; &lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;一组 &lt;equation&gt;\{c_0, c_1, c_2,...,c_m\}&lt;/equation&gt; 如果满足:&lt;/p&gt;&lt;p&gt;&lt;equation&gt;L=\sum_{i=1}^{m}{c_i\cdot L_i},\  R=\sum_{i=1}^{m}{c_i\cdot R_i},\  O=\sum_{i=1}^{m}{c_i\cdot O_i}, \text{和 }P:=L\cdot R - O, \text{并且有}T\text{ 整除}P   &lt;/equation&gt; &lt;/p&gt;&lt;p&gt;则称这组 &lt;equation&gt;\{c_0, c_1, c_2,...,c_m\}&lt;/equation&gt;满足 &lt;equation&gt;Q&lt;/equation&gt; &lt;/p&gt;&lt;h2&gt;Pinocchio协议&lt;/h2&gt;&lt;p&gt;如果Alice有满足 &lt;equation&gt;Q&lt;/equation&gt; 的一组解，那么一定有d次多项式 &lt;equation&gt;H&lt;/equation&gt; 满足:&lt;/p&gt;&lt;p&gt;&lt;equation&gt;P = H\cdot T\text{ 等价于：对于}\forall s \in \mathbb{F}_p\text{有}P(s)=H(s)\cdot T(s)&lt;/equation&gt; &lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;我们看一下Alice怎么向Bob证明自己有满足 &lt;equation&gt;Q&lt;/equation&gt; 的解&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Alice算出满足 &lt;equation&gt;Q&lt;/equation&gt; 的 &lt;equation&gt;L,R,O,H&lt;/equation&gt; &lt;/li&gt;&lt;li&gt;Bob选择 &lt;equation&gt;s \in \mathbb{F}_p&lt;/equation&gt; ,计算出 &lt;equation&gt;E(T(s))&lt;/equation&gt; &lt;/li&gt;&lt;li&gt;Alice计算出 &lt;equation&gt;E(L(s)),E(R(s)),E(O(s)),E(H(s))&lt;/equation&gt; 发给Bob&lt;/li&gt;&lt;li&gt;Bob检查 &lt;equation&gt;E(L(s)\cdot R(s)-O(s))=E(H(s)\cdot T(s))&lt;/equation&gt; &lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这里的&lt;b&gt;第一个问题&lt;/b&gt;是:只检查 &lt;equation&gt;s&lt;/equation&gt; 一个点，会不会有问题？&lt;/p&gt;&lt;p&gt;两个不同的 &lt;equation&gt;2d&lt;/equation&gt; 次多项式，不可能超过 &lt;equation&gt;2d&lt;/equation&gt; 个点相同，所以只要 &lt;equation&gt;\mathbb{F}_p&lt;/equation&gt; 的size比 &lt;equation&gt;2d&lt;/equation&gt; 大很多就没有问题，取到相同点的概率非常的小&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;这里会有&lt;b&gt;第二个个问题&lt;/b&gt;: Alice可以随意构造出 &lt;equation&gt;L,R,O,H&lt;/equation&gt; 满足 &lt;equation&gt;L\cdot R-O =T\cdot H&lt;/equation&gt; ,但是并不能满足 &lt;equation&gt;L=\sum_{i=1}^{m}{c_i\cdot L_i},\  R=\sum_{i=1}^{m}{c_i\cdot R_i},\  O=\sum_{i=1}^{m}{c_i\cdot O_i}&lt;/equation&gt; 。我们可以想一个办法把这个限制条件也加进去:&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;利用Verifiable blind evaluation of a polynomial，直观的方法是对于 &lt;equation&gt;L_i&lt;/equation&gt; ：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Bob计算并发送 &lt;equation&gt;(E(L_0(s)), \alpha\cdot E(L_0(s))), (E(L_1(s)), \alpha\cdot E(L_1(s))),...,(E(L_m(s)), \alpha\cdot E(L_m(s))),  &lt;/equation&gt; &lt;/li&gt;&lt;li&gt;Alice &lt;equation&gt;a&#39;=\sum_{i=0}^{m}{c_i E(L_i(s))}, b&#39;=\sum_{i=0}^{m}{c_i \alpha E(L_i(s))}&lt;/equation&gt; ,其中 &lt;equation&gt;a&#39;=\sum_{i=0}^{m}{c_i\ E(L_i(s))}=E(L(s))&lt;/equation&gt; &lt;/li&gt;&lt;li&gt;Bob接收到之后检查是否满足 &lt;equation&gt;b&#39;=\alpha\cdot a&#39;&lt;/equation&gt; ,同时检查 &lt;equation&gt;a&#39;=E(L(s))&lt;/equation&gt; &lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这样可以确保 &lt;equation&gt;L,&lt;/equation&gt; 是 &lt;equation&gt;L_0,L_1,...,L_m&lt;/equation&gt; 的线性组合。&lt;/p&gt;&lt;p&gt;同样对于 &lt;equation&gt;R_i,O_i&lt;/equation&gt; 也是一样&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;这样弄完之后，还会有问题: &lt;equation&gt;L,R,O&lt;/equation&gt; 用的 &lt;equation&gt;c_0,c_1,...,c_m&lt;/equation&gt; 不是一组。用下面的方法解决:&lt;/p&gt;&lt;p&gt;令&lt;equation&gt;F=L+X^{d+1}\cdot R + X^{2(d+1)}\cdot O&lt;/equation&gt; &lt;/p&gt;&lt;p&gt;&lt;equation&gt;F_i=L_i+X^{d+1}\cdot R_i + X^{2(d+1)}\cdot O_i&lt;/equation&gt; &lt;/p&gt;&lt;p&gt;证明 &lt;equation&gt;F&lt;/equation&gt; 是 &lt;equation&gt;F_i&lt;/equation&gt; 的线性组合(这样肯定用的是一组 &lt;equation&gt;c_0,c_1,...,c_m&lt;/equation&gt; )，并且 &lt;equation&gt;E(F(s))=E(L(s)+s^{d+1}\cdot R(s) + s^{2(d+1)}\cdot O(s))&lt;/equation&gt; ,到此问题二彻底解决&lt;/p&gt;&lt;h2&gt;Elliptic Curves Pairings(椭圆曲线配对)&lt;/h2&gt;&lt;p&gt;我看到我们需要处理乘法的情况,例如证明 &lt;equation&gt;E(L(s)\cdot R(s)-O(s))=E(H(s)\cdot T(s))&lt;/equation&gt; 和 &lt;equation&gt;E(F(s))=E(L(s)+s^{d+1}\cdot R(s) + s^{2(d+1)}\cdot O(s))&lt;/equation&gt; 的时候，需要把 &lt;equation&gt;E(x\cdot y)&lt;/equation&gt; 拆成 &lt;equation&gt;E(x),E(y)&lt;/equation&gt; ，而我们现在只有 &lt;equation&gt;E(x+ y)&lt;/equation&gt; 可以拆成 &lt;equation&gt;E(x),E(y)&lt;/equation&gt;。&lt;/p&gt;&lt;p&gt;这里我们除了借助cyclic group来处理加法的情况，还需要借助Elliptic Curves Pairing来处理乘法的情况。Elliptic Curves Pairings本身涉及比较复杂的数学证明，后面会专门开篇写。这里只需要知道Elliptic Curves Pairing其中的Tate Pairing的一个结论就行了：&lt;/p&gt;&lt;p&gt;&lt;equation&gt; Tate: \mathbb{G}_{1} \times \mathbb{G}_{2} \rightarrow \mathbb{G}_{T}&lt;/equation&gt; &lt;/p&gt;&lt;p&gt;&lt;equation&gt;Tate(g,h)=g_{T}&lt;/equation&gt; ,其中 &lt;equation&gt;g\in \mathbb{G_1},h\in \mathbb{G_2},g_T \in \mathbb{G}_T&lt;/equation&gt; , &lt;equation&gt;g,h,g_T,&lt;/equation&gt; 分别是这几个group的生成器&lt;/p&gt;&lt;p&gt;&lt;equation&gt;Tate(a\cdot g, b\cdot h)={g_T}^{ab}&lt;/equation&gt; &lt;/p&gt;&lt;p&gt;有了这个工具之后 &lt;equation&gt;E(xy)={g_T}^{xy}=Tate(x\cdot g,y\cdot h )=Tate(E_1(x),E_2(y))&lt;/equation&gt; ,这样我们就找到了乘法的同态隐藏的方法。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;未完待续。。。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>Caprice</author>
<guid isPermaLink="false">2018-09-24-45038515</guid>
<pubDate>Mon, 24 Sep 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>黎曼猜想是否会对密码学的安全产生影响</title>
<link>https://henix.github.io/feeds/zhuanlan.fhe-blockchain/2018-09-23-45186127.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/45186127&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-50e3aa3d36cec7d4a5dc149e502e4846_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;黎曼猜想是否会对密码学的安全产生影响&lt;/b&gt; &lt;/p&gt;&lt;p&gt;&lt;b&gt;致远博士&lt;/b&gt; &lt;/p&gt;&lt;p&gt;最近由于黎曼猜想可能会被证明，网上充满了讨论，甚至波及到了区块链。有新闻说如果黎曼猜想被证实的话，将危及公钥密码学的安全。由于互联网上使用的都是公钥密码，所以互联网也都不安全了。&lt;/p&gt;&lt;p&gt;更具体的猜测是，由于黎曼猜想和素数有关，所以RSA密码体质将会被攻破。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-b92c72c22f2438d3b9454ffe39793ed9_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1058&quot; data-rawheight=&quot;981&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-b92c72c22f2438d3b9454ffe39793ed9&quot; data-watermark-src=&quot;v2-21d0339de0986ecdacccb98dbbb24eb1&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;以上猜测搞得人心惶惶，皆因大家的好奇心，说来也是好事。一个数学界的新闻能让大家如此关注。我也查了国外一些网站的说法。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-eb40a9c79baa851a943d27c0c22d8fff_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1375&quot; data-rawheight=&quot;818&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-eb40a9c79baa851a943d27c0c22d8fff&quot; data-watermark-src=&quot;v2-12bbdf59fdfb4c1002d4938e2db3f93d&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;由于我是搞密码学的，又涉足区块链界，所以有些群友不断在问我。为此我以我的理解及所查的资料，对以上说法进行正本清源。&lt;/p&gt;&lt;p&gt;&lt;b&gt;1.&lt;/b&gt; &lt;b&gt;首先我说结论。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;第一，黎曼猜想早在1859年就提出，而我们用的公钥密码是在70年代末提出的。所以，如果黎曼猜想会对破解RSA加密算法有什么帮助的话，一定会早有论文提出。然而，至今为止也没有看到有相关论文显示黎曼猜想会对破解RSA有什么直接效果。&lt;/p&gt;&lt;p&gt;第二，区块链上用的密码算法只有两个：哈希函数和数字签名。哈希函数和素数没有关系，所以和黎曼猜想没有关系。数字签名使用的是椭圆曲线上的方案，所以与大整数分解没有关系，从而和黎曼猜想也没有关系。&lt;/p&gt;&lt;p&gt;所以，黎曼猜想对公钥密码没有直接的任何威胁。对区块链的安全也没有任何影响。&lt;/p&gt;&lt;p&gt;为了让大家更好地理解上述结论，我们先来解释一下什么是黎曼猜想。&lt;/p&gt;&lt;p&gt;&lt;b&gt;2.&lt;/b&gt; &lt;b&gt;什么是黎曼猜想&lt;/b&gt;&lt;/p&gt;&lt;p&gt;要说清黎曼猜想，首先得说素数。素数在自然数中是一种特别的数，它只能被1和自己整除。说白了，素数没有因子，就像一个人没有后代（比喻略显不恰当）。素数的这种孤零零的特性，使得它是整个自然数的“基石”。因为它不能再被分解了，所以只能去构造其他数。&lt;/p&gt;&lt;p&gt;因此有个结论，每个自然数都可以唯一地分解成有限个素数的乘积。而且素数的个数是无限的。&lt;/p&gt;&lt;p&gt;素数如此特别，数学家们试图搞清楚如何判断一个数是素数。给你一个小的数，例如7，你很容易判断它是素数。但是当给你一个很大的数字时，判断一个数是否为素数，是需要方法的。由此产生了素数判定的算法。&lt;/p&gt;&lt;p&gt;为了更好地理解素数，数学家们在 19 世纪便不再尝试预测素数的精确位置，转而将素数的现象视为一个整体。这种分析的方法就是黎曼所擅长的，他著名的猜想也由此得出。&lt;/p&gt;&lt;p&gt;为了理解素数是如何分布的，高斯给出了一个素数计数函数 π(x) ，它能够给出某个数之前的素数的数量（即有多少个素数）。&lt;/p&gt;&lt;p&gt;随后，高斯（和勒让德独立地）提出了&lt;b&gt;素数定理&lt;/b&gt;：当x增长到无穷大时，素数计数函数 π(x) 会近似于 x/ln(x) 函数。这意味着前x个整数中连续素数之间的平均间隙约为 ln(x)。换句话说可以用x/ln(x)近似π(x)。&lt;/p&gt;&lt;p&gt;然后又出现了对数积分函数 Li(x)，数学家发现 Li(x)能够比x/ln(x)更好的近似π(x)。说明 Li(x) 能够更好的刻画素数的个数。&lt;/p&gt;&lt;p&gt;然而，素数定理所预测的分布规律与实际仍然有所偏差，而且时大时小。这一切引起了黎曼的注意。&lt;/p&gt;&lt;p&gt;1859年，年仅33岁的黎曼发表了论文《论小于已知数的素数个数》。在该文章中，黎曼定义了一个函数：黎曼 zeta 函数。在论文中黎曼给出了一个推测：黎曼 zeta 函数的所有非平凡零点可能都全部位于实部等于1/2的直线上。&lt;/p&gt;&lt;p&gt;具体内容各位可以忽略。那么黎曼 zeta 函数的非平凡零点有什么用呢？&lt;/p&gt;&lt;p&gt;&lt;b&gt;黎曼用 Li(x)以及zeta 函数的非平凡零点，给出了自己的素数定理，即更准确地估计数字 x 以内有多少个素数。&lt;/b&gt;&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-76bd4bc386a9b0badb92e199765b640e_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1394&quot; data-rawheight=&quot;216&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;这一精确的刻画素数个数的定理，让黎曼大放光彩。上述公式中的第二项，x 的 ρ 次幂的ρ就是&lt;i&gt;黎曼 zeta 函数非平凡零点。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;这就是黎曼 zeta 函数非平凡零点的意义所在！这就是黎曼 zeta 函数非平凡零点的意义所在！&lt;/i&gt;&lt;/p&gt;&lt;p&gt;到此为止，我们说了黎曼猜想是什么？&lt;/p&gt;&lt;p&gt;&lt;b&gt;简而言之，就是给出了数字 x 以内更精确的素数个数的公式。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;3.&lt;/b&gt; &lt;b&gt;RSA基于的困难问题&lt;/b&gt;&lt;/p&gt;&lt;p&gt;RSA所基于的困难问题是“大整数分解困难问题”。即给你一个大的整数，对其分解为素数之积是困难的。这是RSA加密算法的安全性基础。&lt;/p&gt;&lt;p&gt;目前对大整数分解用的方法主要是数域筛法，但是这些方法都不能有效的分解大整数。&lt;/p&gt;&lt;p&gt;黎曼猜想是宏观上对素数的分布有个判断，它不能直接求素数，也不能对一个整数进行素数分解。目前根据文献，黎曼猜想对于生成素数，例如RSA中的密钥生成算法，是有帮助的。但是对于整数分解算法并没有直接的提升。所以不会对RSA加密体质有任何影响。&lt;/p&gt;&lt;p&gt;大家一定要区分&lt;b&gt;素数检测&lt;/b&gt;和&lt;b&gt;整数分解&lt;/b&gt;是两回事。很多人都认为是一回事，这是产生错误的根源。&lt;/p&gt;&lt;p&gt;对于黎曼猜想的证明，大家更多的认为可能会对数域的结构有个更好的认知。从某些方面，可能会对密码学有所启示。&lt;/p&gt;&lt;p&gt;文章首发在微信公众号：btc201800&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//weixin.qq.com/r/GC8UDDjEjmXxrXxv93oK&quot;&gt;http://weixin.qq.com/r/GC8UDDjEjmXxrXxv93oK&lt;/a&gt; (二维码自动识别) &lt;/p&gt;</description>
<author>致远</author>
<guid isPermaLink="false">2018-09-23-45186127</guid>
<pubDate>Sun, 23 Sep 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>“黎曼猜想”推翻区块链加密算法？</title>
<link>https://henix.github.io/feeds/zhuanlan.fhe-blockchain/2018-09-21-45117702.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/45117702&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-c06cbf207468df606ac3d773e1455040_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-435222c94a894aadbee409875279c9dd_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;534&quot; data-rawheight=&quot;277&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-435222c94a894aadbee409875279c9dd&quot; data-watermark-src=&quot;v2-631dabf14230ea7266c7a4c71b20b91a&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;菲尔兹和阿贝尔奖双料得主迈克尔·阿蒂亚爵士宣称自己证明了黎曼猜想，要在9月24日海德堡获奖者论坛上宣讲。最近有些人啊，见得风，就是雨。Atiyah 已经证明了Riemann猜想，一场风暴已经在酝酿之中，所有加密算法已经危如累卵，区块链行业迟早要完，赶快收拾细软准备跑路吧，注意，一定要是细软哦。Riemann 猜想声称zeta函数的非平凡零点的实部都是1/2。可是这和区块链又有什么关系呢？&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-3b9a42ca96e7fa24ae29cc732d010c30_r.jpg&quot; data-caption=&quot;某媒体这样说&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;494&quot; data-rawheight=&quot;486&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-3b9a42ca96e7fa24ae29cc732d010c30&quot; data-watermark-src=&quot;v2-6a40ca6be07fd29209002cc4ddc41b05&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-80057a4a3961935abbf914c52581778c_r.jpg&quot; data-caption=&quot;看到这个消息&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;494&quot; data-rawheight=&quot;245&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-80057a4a3961935abbf914c52581778c&quot; data-watermark-src=&quot;v2-81187530ae816f63143e6db2fc467d2e&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-58cbc5f1c81ccd54831337afccbb8fa5_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;750&quot; data-rawheight=&quot;75&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;这一次或许你的朋友圈已经被震惊了，可是数学圈还没有。敢于质疑权威并不是你想像中的一个科学家所具有的稀有宝贵品质，而是一个科学家应该具有的基本素质。像 Atiyah 这样的活着的荣膺数学界两大桂冠Fields，Abel奖项的权威并不多见，他在指标定理，K理论和规范理论方面所作出的贡献是有目共睹了，&lt;b&gt;但是数学界还是大多持怀疑态度&lt;/b&gt;。毕竟这是一个人人都可以上arXiv上宣布自己证明了 Riemann 猜想的年代。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-0d763a68ae20a96f12ef6d8e98762533_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;725&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-0d763a68ae20a96f12ef6d8e98762533&quot; data-watermark-src=&quot;v2-dcbc8bf44062d7162ecf123cbc1b59a6&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;据我所知，他本人在数论上的贡献并不能和上述领域比肩，要知道Atiyah现在已经89岁了，早已不是Hardy说的创造力旺盛的年轻人。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Atiyah 本人也已经&lt;b&gt;不是第一次差点搞个大新闻&lt;/b&gt;了，之前Atiyah在arXiv上发表了一篇预印文章&lt;a href=&quot;https://arxiv.org/abs/1610.09366&quot;&gt;The Non-Existent Complex 6-Sphere&lt;/a&gt; ，然而这篇文章的证明&lt;b&gt;&lt;a href=&quot;https://mathoverflow.net/questions/263301/what-is-the-current-understanding-regarding-complex-structures-on-the-6-sphere&quot;&gt;并不被专家认可&lt;/a&gt;&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-b1b9fead83861b0bc0c2d0cf1124eb20_r.jpg&quot; data-caption=&quot;尴尬而不失礼貌的微笑&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;1097&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-b1b9fead83861b0bc0c2d0cf1124eb20&quot; data-watermark-src=&quot;v2-b77bf5bc9ade821cf1e0238eddb01901&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;其实我的说法已经过于委婉，&lt;a href=&quot;https://twitter.com/johncarlosbaez/status/1042609961216335874&quot;&gt;John Baez甚至在Twitter上这样说&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-febc4d6fcf34048bd9d16b81d1d80cea_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;910&quot; data-rawheight=&quot;550&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-febc4d6fcf34048bd9d16b81d1d80cea&quot; data-watermark-src=&quot;v2-e6fcc1621c9396d8330c4959beb4c438&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-445f56d4bc924512b2a479d307a05e04_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;750&quot; data-rawheight=&quot;75&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;即使我们相信一个Atiyah是老骥伏历，可是Riemann猜想的证明真的能给网络安全致命一击吗？&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;让我们从Diffie和Hellman的1976年的革命性论文 &lt;a href=&quot;https://ee.stanford.edu/~hellman/publications/24.pdf&quot;&gt;New Directions in Cryptography&lt;/a&gt; 谈起。为了实现信息加密，Diffe和Hellman 在这篇文章中给了一个比较通用的方法去寻找一个&lt;b&gt;单方向的函数&lt;/b&gt;。由于这个函数是单方向的，我们加密操作比较容易执行，而解密操作难于实现。Diffe和Hellman认为在某些代数结构上求离散指数是很容易实现的，而求离散对数却通常不是那么容易。如果某个特殊的信息(也就是我们现在所熟知的加密密钥)可以让我们比较容易求解离散对数，那我们就可以实现对信息的加解密。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;一年之后，Rivest，Shamir 和 Adleman 在离散整数模n群上给出了这样一个单向函数，这就是广为人知的&lt;a href=&quot;https://people.csail.mit.edu/rivest/Rsapaper.pdf&quot;&gt;RSA算法&lt;/a&gt;。如上所述，&lt;b&gt;RSA算法本质上是离散整数环上难于求解离散对数&lt;/b&gt;，而求指数的过程就是加密过程，求对数的过程就是解密过程，这并不容易实现，所以我们的信息可以不被人窃取。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-1d97d20ae466c26c2799752c9f3d2be0_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;236&quot; data-rawheight=&quot;170&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-1d97d20ae466c26c2799752c9f3d2be0&quot; data-watermark-src=&quot;v2-26e7979cc12ec2bdee8653b59756e00c&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;正是这里，Hardy所希望没有什么用处的数论大显身手。我们上面说的能够帮助解密的特殊信息，&lt;b&gt;在RSA算法里就是把n分解成两个大素数的积&lt;/b&gt;。如果我们知道这两个素数，利用Fermat小定理，我们可以比较容易地求出离散模n整数环的离散对数。这样就实现了信息的解密。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;所以如果能够在多项式时间内分解质因数，RSA加密算法就能被快速破解，这种算法事实上确实存在，但是问题是这个算法Shor&#39;s algorithm依赖于量子计算机。由于各种问题(比如量子退相干)，&lt;b&gt;量子计算机距离真正落地还有很长的路要走&lt;/b&gt;。而且一个能够破解RSA算法的量子计算机&lt;b&gt;&lt;a href=&quot;https://www.esat.kuleuven.be/cosic/elliptic-curves-are-quantum-dead-long-live-elliptic-curves/&quot;&gt;需要很多量子比特&lt;/a&gt;&lt;/b&gt;，人类离制造出这样一个计算机还很遥远，所以我们完全可以认为&lt;b&gt;在可预见的将来RSA算法还是安全&lt;/b&gt;的。具体可参见&lt;a href=&quot;https://crypto.stackexchange.com/questions/1978/how-big-an-rsa-key-is-considered-secure-today/1982&quot;&gt;How big an RSA key is considered secure today?&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-32395c18d79648dae613598d9954b28f_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;750&quot; data-rawheight=&quot;75&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;回到正题，如果Riemann猜想已经被证明了，&lt;b&gt;地球还安全吗&lt;/b&gt;？证明黎曼猜想能够给素数分布提供很多启示，比方说我们可以用Riemann猜想来估计了素数定理的误差项，我们可以用Riemann猜想来估计相邻素数之间的间隙，我们可以用Riemann猜想来证明数论的一万个大定理，但是黎曼猜想被证明后可以分分钟&lt;b&gt;破解RSA算法那就是痴人说梦&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;即使我们可以通过Riemann猜想来得知所谓的素数公式(我想当那些见得风就是雨的自媒体在谈论素数公式的时候，他们在谈论一个&lt;b&gt;稍微有点数学修养的人都不会相信其存在性的素数通项公式&lt;/b&gt;)，我们也没法用知道的可以所有素数这个事实来快速破解RSA算法。为了破解RSA算法，&lt;b&gt;我们需要的不是素数公式，我们需要分解质因数&lt;/b&gt;。现在业界常用的RSA算法的加密密钥的大小是2048位，根据素数定理，这个大小范围内素数大约占了所有整数的几千分之一。我们或许可以用知道的这个区间内的所有来给破解RSA的算法提速数以万倍，但是这个数字很容易就被4096位的密钥是提高的安全性矮化，因为当从密钥长度2048增加到从4096位，&lt;a href=&quot;https://en.wikipedia.org/wiki/General_number_field_sieve&quot;&gt;General number field sieve&lt;/a&gt;解密的复杂度提高了&lt;b&gt;将近一千亿倍&lt;/b&gt;，具体计算见&lt;a href=&quot;http://www.wolframalpha.com/input/?i=(Log2(Exp%5B(64%2F9+*+Log%5B2%5E4096%5D)%5E(1%2F3)+*+(Log%5BLog%5B2%5E4096%5D%5D)%5E(2%2F3)%5D)+%2F+(Log2(Exp%5B(64%2F9+*+Log%5B2%5E2048%5D)%5E(1%2F3)+*+(Log%5BLog%5B2%5E2048%5D%5D)%5E(2%2F3)%5D))&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d1871205456725d70657dda28a1dd8cc_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;360&quot; data-rawheight=&quot;264&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-d1871205456725d70657dda28a1dd8cc&quot; data-watermark-src=&quot;v2-50d937b04b5a2f4b1255c459d7234ef3&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;各位看官，看到这儿，你是不是心宽了很多。但是请注意，我们现在说的所有，还只不过是一种比较流行的加密算法。如果这个算法真的失效，我们完全可以选择另外一种更加安全的算法。加密解密这个猎和老鼠的游戏里没有永远的赢家和永远的输家。有时候有一条腿可能走得快一些，有时候另外一条腿走得快一些，但是如果某一条腿完全停了下来，另一条腿还能继续走下去吗？&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;后量子时代的密码学&lt;a href=&quot;https://en.wikipedia.org/wiki/Post-quantum_cryptography&quot;&gt;Post Quantum Cryptology&lt;/a&gt;这门新的学科已经展现出了强大的生命力。我们对于普通人加密解密安全性的担忧有点过于&lt;b&gt;杞人忧天&lt;/b&gt;了。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;最后，星际比特在此提前祝大家中秋快乐！&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-99653f491ce5bfe6ec25b3e1bc33223d_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;1920&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-99653f491ce5bfe6ec25b3e1bc33223d&quot; data-watermark-src=&quot;v2-9a9583fdf05fd5fe9d037b9547f7eb82&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>泰泰泰可爱</author>
<guid isPermaLink="false">2018-09-21-45117702</guid>
<pubDate>Fri, 21 Sep 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>最清晰的比特币白皮书解析4－网络</title>
<link>https://henix.github.io/feeds/zhuanlan.fhe-blockchain/2018-09-08-44050389.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/44050389&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d77484395746a6d77e841733fb50dcd3_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;5. 网络&lt;/b&gt;&lt;/p&gt;&lt;p&gt;白皮书前面说了，为了构造一个分布式时间戳，需要对一个区块去求解满足要求的哈希值。求解哈希值时，唯一可以调整的参数是随机数（nounce）。交易就存放在这个区块里。那么问题就来了，各个节点是如何收到交易的呢？如何把交易放到区块里呢？所有这一切都是依赖于互联网的。这节就讲了交易如何在网络中的传播以及如何形成区块。&lt;/p&gt;&lt;p&gt;白皮书第一段如下：&lt;/p&gt;&lt;p&gt;The steps to run the network are as follows: &lt;/p&gt;&lt;p&gt;. 1)  New transactions are broadcast to all nodes.  &lt;/p&gt;&lt;p&gt;. 2)  Each node collects new transactions into a block.  &lt;/p&gt;&lt;p&gt;. 3)  Each node works on finding a difficult proof-of-work for its block.  &lt;/p&gt;&lt;p&gt;. 4)  When a node finds a proof-of-work, it broadcasts the block to all nodes.  &lt;/p&gt;&lt;p&gt;. 5)  Nodes accept the block only if all transactions in it are valid and not already spent.  &lt;/p&gt;&lt;p&gt;. 6)  Nodes express their acceptance of the block by working on creating the next block in the  chain, using the hash of the accepted block as the previous hash.  &lt;/p&gt;&lt;p&gt; 比特币网络运行的步骤如下： &lt;/p&gt;&lt;p&gt;1) 新的交易通过全网向所有节点广播； &lt;/p&gt;&lt;p&gt;2) 每一个节点将收到的新的交易信息放入一个区块中； &lt;/p&gt;&lt;p&gt;3) 每个节点都为自己的区块执行工作量证明，以发现一个满足难度要求的哈希值；&lt;/p&gt;&lt;p&gt;4) 当一个节点发现了一个满足难度要求的哈希值，它就向全网进行广播该区块； &lt;/p&gt;&lt;p&gt;5) 当且仅当包含在该区块中的所有交易都是有效的且之前没有双花过，其他节点才接受承认该区块； &lt;/p&gt;&lt;p&gt;. 6) 其他节点接受该区块后，就在该区块之后制造新的区块以延长该链条。并将被接受区块的哈希值写入新区块中前一区块哈希值（previous hash  &lt;/p&gt;&lt;p&gt;）的位置。 &lt;/p&gt;&lt;p&gt;上述过程把交易的传播和块的形成，描述的非常简洁和清楚。由于网络的传播是有时延的，如果两个节点同时广播自己的区块，那么有些节点可能收到的是这个区块，另外节点可能收到的是另一个区块，那么就会造成链的分叉，如何处理呢？&lt;/p&gt;&lt;p&gt;白皮书紧接着说&lt;/p&gt;&lt;p&gt;Nodes always consider the longest chain to be the correct one and will keep working on extending it. If two nodes broadcast different versions of the next block simultaneously, some nodes may receive one or the other first. In that case, they work on the first one they received, but save the other branch in case it becomes longer. The tie will be broken when the next proof- of-work is found and one branch becomes longer; the nodes that were working on the other branch will then switch to the longer one. &lt;/p&gt;&lt;p&gt;所有节点都将最长的链条视为正确的链条，并在最长的链条上继续工作从而延长它。如果有两个节点同时广播了不同的新区块，那么先收到哪个新区块，对于有些节点是有差异的。在此情况下，节点将在自己收到的第一个新区块上进行工作，但也会保留另外一个产生分叉的链，以防后者变成最长的链。当下一个新区块诞生后，其中一个链将会被延长，从而分叉的局面被打破。而在另一条链上的节点将转移到最长链上工作。&lt;/p&gt;&lt;p&gt;到这里有个问题，原本以为节点不知道除了自己工作的链以外还有其它的分支链。但是从上面的叙述可知，当出现分叉的时候，节点会知道有分叉出现的，而且还会保存另外的分叉链，以备将来转换。&lt;/p&gt;&lt;p&gt;交易在网络中的广播，是不是必须所有节点都收到后才可能被装入到新区块中（注意新区块诞生的方法）？同样，新区块的广播是不是所有节点都必须收到才可以，如果新区块在传播过程中丢失了，有的节点没收到怎么办？白皮书下面说了这个问题。&lt;/p&gt;&lt;p&gt;New transaction broadcasts do not necessarily need to reach all nodes. As long as they reach many nodes, they will get into a block before long. Block broadcasts are also tolerant of dropped messages. If a node does not receive a block, it will request it when it receives the next block and realizes it missed one. &lt;/p&gt;&lt;p&gt;新交易在广播过程中，未必需要到达全部的节点。只要它们能够到达大多数的节点，那么这些新交易很快会出现在链上的一个新区块中。为什么呢？因为大多数节点收到了新交易，那么节点挖出区块的概率也会以极大的可能落到大多数节点中的某个节点。所以很快该新交易就会出现在链上。如果挖出区块的节点碰巧不在这些大多数节点中，那么该新交易就不会出现在链上的新区块中。但是同样以极大的概率出现在下一个新区块中。&lt;/p&gt;&lt;p&gt;而区块的广播对于传播过程中丢失区块也具有容错能力。如果一个节点没有收到新区块，那么该节点在收到新区块之后的区块到来时，将会发现自己缺少前一个区块，从而会请求接收那个缺少的区块。&lt;/p&gt;&lt;p&gt;以上给出了交易和区块在网络中广播可能出现的一些情况及对策。但是细节并没有讲到，只是给出了大致的框架。如果学过计算机网络原理，对以上的过程就不会陌生。根据一些资料显示，比特币网络采用的是P2P网络架构，节点之间连接使用的是TCP协议。TCP协议是一种面向连接的可靠协议，它具有处理网络丢包，重传，校验等功能。&lt;/p&gt;&lt;p&gt;文章首发在微信公众号：btc201800&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//weixin.qq.com/r/GC8UDDjEjmXxrXxv93oK&quot;&gt;http://weixin.qq.com/r/GC8UDDjEjmXxrXxv93oK&lt;/a&gt; (二维码自动识别)&lt;/p&gt;&lt;p&gt;相应的音频，已发布到喜马拉雅“解读区块链白皮书”上，欢迎收听。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//m.ximalaya.com/42927243/sound/119777482&quot;&gt;http://m.ximalaya.com/42927243/sound/119777482&lt;/a&gt;(二维码自动识别) &lt;/p&gt;</description>
<author>致远</author>
<guid isPermaLink="false">2018-09-08-44050389</guid>
<pubDate>Sat, 08 Sep 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>最清晰的比特币白皮书解析3-工作量证明</title>
<link>https://henix.github.io/feeds/zhuanlan.fhe-blockchain/2018-09-08-44050124.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/44050124&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d77484395746a6d77e841733fb50dcd3_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;4. 工作量证明&lt;/b&gt;&lt;/p&gt;&lt;p&gt;先看本节要讲什么。白皮书第一句话就点明了该节的目的。&lt;/p&gt;&lt;p&gt;To implement a distributed timestamp server on a peer-to-peer basis, we will need to use a proof- of-work system similar to Adam Back&#39;s Hashcash [6], rather than newspaper or Usenet posts. &lt;/p&gt;&lt;p&gt;为了在点对点的去中心化环境下实现分布式时间戳服务，我们使用类似于Adam在Hashcash中提出的一个工作量证明系统，而不是使用报纸或者新闻组这样的方法。&lt;/p&gt;&lt;p&gt;所以本节全部围绕着如何具体实现上节的时间戳。由于是在点对点的环境下，所以该时间戳是一个分布式时间戳。本节讨论的就是分布式时间戳实现的方法，是对上节时间戳概念的落实。（为什么要实现时间戳呢？因为要解决双花问题。时间戳为什么能够解决双花问题呢？因为要形成一个唯一的不可更改的交易记录账本）&lt;/p&gt;&lt;p&gt;注意Hashcash也是一个电子现金系统，是由Adam提出的。中本聪受到该系统的启发，并且在白皮书中引用了该论文。此外，上面说了不使用在上节说的报纸或者新闻组来实现时间戳。那么通过什么方法来实现呢？白皮书上说了，通过一个叫“工作量证明”的方法。什么是工作量证明呢？紧接着白皮书给出了说明。&lt;/p&gt;&lt;p&gt;The proof-of-work involves scanning for a value that when hashed, such as with SHA-256, the hash begins with a number of zero bits. The average work required is exponential in the number of zero bits required and can be verified by executing a single hash. &lt;/p&gt;&lt;p&gt;工作量证明就是求解一个哈希值（例如通过SHA-256求解哈希值），要求该哈希值的最高位含有若干个0。平均情况下，该工作量与0的个数呈指数级关系，即哈希值中0的个数的增加将会让求解工作量呈指数级增长。而验证该哈希值的正确性可以通过执行哈希函数来进行。&lt;/p&gt;&lt;p&gt;上面说明了工作量证明的难度，即求解满足要求的哈希值所花费的时间，与哈希值的最高位含有多少个0有直接关系。这样就把工作量证明与时间挂上了钩。那么具体如何实现工作量证明呢？白皮书紧接着说了。&lt;/p&gt;&lt;p&gt;For our timestamp network, we implement the proof-of-work by incrementing a nonce in the block until a value is found that gives the block&#39;s hash the required zero bits. Once the CPU effort has been expended to make it satisfy the proof-of-work, the block cannot be changed without redoing the work. As later blocks are chained after it, the work to change the block would include redoing all the blocks after it. &lt;/p&gt;&lt;p&gt;为了构建我们的时间戳网络，我们需要实现工作量证明机制，而该机制是通过不断递增一个区块中的随机数，直到发现一个满足要求的区块哈希值。所以工作量证明就是不断的取一个随机数去求解区块的哈希值，没有捷径可言，就是不断的尝试，不断的计算。一旦CPU的算力用于完成了工作量证明，即发现了一个满足要求的哈希值，也就是找到了放到区块中的那个随机数，则如果想改变该区块中的数据的话，必须再做同样的事情，即花费CPU的算力去完成工作量证明。如果该区块后面又有新的区块，则改变该区块中的数据所花费的工作量将包括后面的所有区块，所以工作量大大增加。&lt;/p&gt;&lt;p&gt;看到这里，是不是想到了时间戳服务那节所说的：如果想篡改某一个区块的时间戳，必须篡改其后的所有时间戳才可以。而这里恰好通过工作量证明机制实现了时间戳服务。至此，你清楚了吗？工作量证明机制是干吗的。&lt;/p&gt;&lt;p&gt;工作量证明机制还有另外一个特性，紧接着白皮书说到：&lt;/p&gt;&lt;p&gt;The proof-of-work also solves the problem of determining representation in majority decision making. If the majority were based on one-IP-address-one-vote, it could be subverted by anyone able to allocate many IPs. Proof-of-work is essentially one-CPU-one-vote. The majority decision is represented by the longest chain, which has the greatest proof-of-work effort invested in it. If a majority of CPU power is controlled by honest nodes, the honest chain will grow the fastest and outpace any competing chains. To modify a past block, an attacker would have to redo the proof-of-work of the block and all blocks after it and then catch up with and surpass the work of the honest nodes. We will show later that the probability of a slower attacker catching up diminishes exponentially as subsequent blocks are added. &lt;/p&gt;&lt;p&gt;工作量证明机制还解决了谁是大多数的问题。如果决定大多数的方式是基于IP地址的，即一IP地址一票，则该机制将被能够分配大量IP地址的人所破坏。而工作量证明机制的本质则是一CPU一票。大多数人的决定被表达为最长的链，因为最长的链包含了最大的工作量。如果大多数的CPU为诚实的节点控制，那么诚实的链条将以最快的速度延长，并超越其他的竞争链条。如果想要对以往的区块进行修改，攻击者必须完成该区块以及其后所有区块的工作量证明，然后才能赶上和超越诚实节点的工作量。我们将在后面说明，当随后的块不断增加时，一个较慢的攻击者追赶上的概率将呈指数级递减。&lt;/p&gt;&lt;p&gt;To compensate for increasing hardware speed and varying interest in running nodes over time, the proof-of-work difficulty is determined by a moving average targeting an average number of blocks per hour. If they&#39;re generated too fast, the difficulty increases. &lt;/p&gt;&lt;p&gt;随着时间的推移，为了应对硬件速度的日益增长以及网络中各个节点参与的不同利益，工作量证明的难度以平均每小时出块数作为波动平均值。如果每小时的出块数太快，将增加工作量证明的难度。&lt;/p&gt;&lt;p&gt;文章首发在微信公众号：btc201800&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//weixin.qq.com/r/GC8UDDjEjmXxrXxv93oK&quot;&gt;http://weixin.qq.com/r/GC8UDDjEjmXxrXxv93oK&lt;/a&gt; (二维码自动识别)&lt;/p&gt;&lt;p&gt;相应的音频，已发布到喜马拉雅“解读区块链白皮书”上，欢迎收听。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//m.ximalaya.com/42927243/sound/119777482&quot;&gt;http://m.ximalaya.com/42927243/sound/119777482&lt;/a&gt;(二维码自动识别)&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>致远</author>
<guid isPermaLink="false">2018-09-08-44050124</guid>
<pubDate>Sat, 08 Sep 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>解读中本聪：创建比特币的用途何在？</title>
<link>https://henix.github.io/feeds/zhuanlan.fhe-blockchain/2018-09-05-43781036.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/43781036&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-3d731304d231385f4ffb9ff3b63c8769_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-0683b2dd066f93e4e859028a0e3d092b_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;621&quot; data-rawheight=&quot;361&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-0683b2dd066f93e4e859028a0e3d092b&quot; data-watermark-src=&quot;v2-fa228b0a1013619c5f59000b7c04c944&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;b&gt;中本聪，英文名为Satoshi Nakamoto&lt;/b&gt;&lt;br&gt;&lt;b&gt;自称日裔美国人&lt;/b&gt;&lt;br&gt;&lt;b&gt;比特币创始人，当之无愧的币圈巨巨！&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;中本聪&lt;/b&gt;于2008年发表了一篇名为&lt;b&gt;《比特币：一种点对点式的电子现金系统》&lt;/b&gt;（Bitcoin: A Peer-to-Peer Electronic Cash System）的论文，描述了一种被他称为“比特币”的数字货币及其算法；&lt;br&gt;&lt;br&gt;2009年他为该系统建立了一个开放源代码项目 (open source project)，&lt;br&gt;正式宣告了比特币的诞生！&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-6c7c11e903934045584a116a92c28b7e_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;640&quot; data-rawheight=&quot;430&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-6c7c11e903934045584a116a92c28b7e&quot; data-watermark-src=&quot;v2-e6bf370f113dda1c52604e7455e7d0b8&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-247fc84450805579d73e07db5838dab9_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;300&quot; data-rawheight=&quot;70&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-247fc84450805579d73e07db5838dab9&quot; data-watermark-src=&quot;v2-dee9c72c31289af6a6edc9097ab1d68a&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt; &lt;b&gt;比特币&lt;/b&gt;是一种通过点对点传输的数字货币&lt;br&gt;比特币不依靠特定货币机构发行&lt;br&gt;根据特定算法，通过大量的计算产生&lt;br&gt;运用区块链底层技术来确认并记录所有的交易行为&lt;br&gt;并使用密码学的设计来确保货币流通各个环节安全性&lt;br&gt;数字货币的去中心化特性与加密算法&lt;br&gt;确保无法通过大量制造比特币来人为操控币值&lt;br&gt;比特币的出现，催生了区块链技术的应用&lt;br&gt;中本聪留下的个人信息极少&lt;br&gt;&lt;br&gt;只知道他曾是密码朋克的成员之一&lt;br&gt;拥有惊人的密码学、计算机、数学与经济知识&lt;br&gt;关于他的真实身份，传闻里众纷云说，似是而非&lt;br&gt;每每有人宣称发现了中本聪本尊&lt;br&gt;&lt;br&gt;到最后的结果，也不过是令中本聪变得更加神秘&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-43ae4edad1e74c456e6aec3485f48a02_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;1262&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-43ae4edad1e74c456e6aec3485f48a02&quot; data-watermark-src=&quot;v2-5ab2edc05d52809430acfd3c808e7b03&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;b&gt;（图片来源：懵币哥）&lt;/b&gt;&lt;br&gt;&lt;br&gt;中本聪与任何人交流都使用PGP加密和Tor网络&lt;br&gt;&lt;br&gt;他甚至在白皮书和社区发言中&lt;br&gt;刻意制造一些身份信息与个性化特征&lt;br&gt;误导错误的猜测&lt;br&gt;中本聪有可能是一个人，也有可能是一群人&lt;br&gt;他们是和平主义的泄密者&lt;br&gt;希望挑战旧秩序，建立更公平、平等的社会！&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-fc5fd7f3bcc9bc162fddcd04ae60a19b_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;347&quot; data-rawheight=&quot;469&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-fc5fd7f3bcc9bc162fddcd04ae60a19b&quot; data-watermark-src=&quot;v2-a06534f326d59aaebc081dbcd75ad556&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;b&gt;（图片来源：懵币哥）&lt;/b&gt;&lt;br&gt;&lt;br&gt; &lt;b&gt;说到中本聪，就不得不聊一聊比特币！&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-247fc84450805579d73e07db5838dab9_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;300&quot; data-rawheight=&quot;70&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-247fc84450805579d73e07db5838dab9&quot; data-watermark-src=&quot;v2-dee9c72c31289af6a6edc9097ab1d68a&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;比特币曾经是一夜暴富代名词。从最初的3美分每个，到最高炒至2万美元左右，折合人民币约13.6万。&lt;br&gt;&lt;br&gt;2010年5月22日，美国佛州程序员拉斯洛 ·豪涅茨（Laszlo Hanyecz）用了1万个比特币成功支付2个总售价为25美元的“棒！约翰”披萨，随后在网上发帖炫耀。这是比特币、以及数字货币有史以来的首次商业交易，这一天在之后被称为“比特币披萨日”(Bitcoin Pizza Day)。&lt;br&gt;&lt;br&gt;当时程序猿小哥用来支付的比特币每个价格仅为0.003美分，而现在价格比特币在7千美元左右，即使不参照比特币以往的最高值来计算，涨幅也是翻上天了。&lt;br&gt;&lt;br&gt;这件事在币圈被冠上“亿元披萨”的戏称，吃瓜群众种种猜想程序猿小哥如何悔不当初。&lt;br&gt;&lt;br&gt;事实上，拉斯洛依旧保持着宅男程序猿们一贯的良好心态。&lt;br&gt;&lt;br&gt;在今年的2月25日，拉斯洛再次用比特币购买了2个披萨，并把照片分享到网上，照片里两个孩子的衣服上，一个印着“我爱披萨”，另一个印着“我爱比特币”，这一次他只消费了0.00649个比特币。&lt;br&gt; &lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-67efa7016ba69859f10d94c80e8bebf7_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;895&quot; data-rawheight=&quot;459&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-67efa7016ba69859f10d94c80e8bebf7&quot; data-watermark-src=&quot;v2-339c4cbcaa93c68cccff1d0eaeb6c08c&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;这8年里，拉斯洛娶妻生子，生活美满，同时见证了比特币的成长。&lt;br&gt;&lt;br&gt;拉斯洛其实是最早一波比特币爱好者，首个采用GPU挖矿，一天挖几千枚比特币是常态，并且十分随性地随挖随卖，当初8万个比特币也是早早换钱，也是很任性了。&lt;br&gt;&lt;br&gt;也许拉斯洛一直在努力验证中本聪构建比特币的最初梦想，他想向世界传递一种理念：&lt;b&gt;比特币是用来支付的，而不是用来炒的&lt;/b&gt;。&lt;br&gt;&lt;b&gt;这也是GA一直坚持的初心：&lt;/b&gt;&lt;br&gt;&lt;b&gt;数字货币的价值在于流通&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;只有将数字货币真正用于日常支付交易，才能真正意义上实现通证经济的发展，为实体企业二次开发注入新动力，GA谋和战略对标伙伴，也一直以此核心经营理念作为合作基础。&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-4ee7352b3e61a5917d49ad814e8a38af_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;620&quot; data-rawheight=&quot;412&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-4ee7352b3e61a5917d49ad814e8a38af&quot; data-watermark-src=&quot;v2-3664656f383835a7e269af11301e4887&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt; 中本聪的过人之处不止在于他发明了比特币&lt;br&gt;他的比特币钱包有一百万个比特币&lt;br&gt;&lt;b&gt;以现今的价格算，价值上千亿！&lt;/b&gt;&lt;br&gt;但这惊人的财富却分毫未动&lt;br&gt;由此可见，显然中本聪志不在于名望与财富&lt;br&gt;也许他真正想要构建的&lt;br&gt;是一个接近透明、平等的世界！&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-91f3c14226af03d2e9354fb10559576b_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;708&quot; data-rawheight=&quot;536&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-91f3c14226af03d2e9354fb10559576b&quot; data-watermark-src=&quot;v2-9f8c5966f9a664af5d53432d58fb8b1f&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;b&gt;（图片来源：懵币哥）&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-fc5fd7f3bcc9bc162fddcd04ae60a19b_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;347&quot; data-rawheight=&quot;469&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-fc5fd7f3bcc9bc162fddcd04ae60a19b&quot; data-watermark-src=&quot;v2-a06534f326d59aaebc081dbcd75ad556&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;b&gt;中本聪近年来的行动踪迹&lt;/b&gt;&lt;br&gt;&lt;b&gt;2008年：&lt;/b&gt;中本聪在互联网上一个讨论信息加密的邮件组中发表了一篇文章，构造了比特币系统的基本框架。11月，他将发明的比特币协议发表在密码学邮件列表上。&lt;br&gt;&lt;b&gt;2009年：&lt;/b&gt;发布了比特币客户端的第一个版本，并且和邮件列表的其他用户共同参与了比特币项目的开发。&lt;br&gt;&lt;br&gt;&lt;b&gt;2010年底：&lt;/b&gt;逐渐淡出了比特币社区。&lt;br&gt;&lt;br&gt;&lt;b&gt;2011年春：&lt;/b&gt;他留下了这样一句话：“我开始干别的事了”。&lt;br&gt;&lt;br&gt;&lt;b&gt;2013年：&lt;/b&gt;他写下“I am not Dorian Nakamoto”（我不是中本多利安）后，消失无踪。&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-fbf56c45fdd9fa3a0050d2ecbddf8eb2_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;91&quot; data-rawheight=&quot;48&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;中本聪随机在全天不同的时间段上线发言&lt;br&gt;刻意隐藏自己的身份&lt;br&gt;他和比特币开源社区成员并肩工作&lt;br&gt;&lt;b&gt;但他的个人信息却始终成谜！&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-e39f0855d293f1de22be7bd5b7dea72e_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;300&quot; data-rawheight=&quot;399&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-e39f0855d293f1de22be7bd5b7dea72e&quot; data-watermark-src=&quot;v2-b9cbfcdf15e98bbc6b9b4ba1db840e66&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt; &lt;/p&gt;</description>
<author>林子</author>
<guid isPermaLink="false">2018-09-05-43781036</guid>
<pubDate>Wed, 05 Sep 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>最清晰的比特币白皮书解析2-时间戳服务</title>
<link>https://henix.github.io/feeds/zhuanlan.fhe-blockchain/2018-09-03-43589810.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/43589810&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d77484395746a6d77e841733fb50dcd3_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;3. 时间戳服务&lt;/b&gt;&lt;/p&gt;&lt;p&gt;通过上节知道，解决双花问题成为了去中心化点对点系统的核心问题。上一节指出为了解决双花问题，需要系统能够对交易的先后顺序达成一致共识。但是如何做并没有说。显然顺序和时间有关，那么在系统内如何体现时间呢？&lt;/p&gt;&lt;p&gt;首先要清楚什么是时间戳。时间戳就是为某个文档的时间提供证明。在某些商务场合很重要，例如签合同，时间是具有法律意义的。在电子文档环境下要提供时间戳，需要保证两件事情：&lt;/p&gt;&lt;p&gt;一是文档没有被修改；&lt;/p&gt;&lt;p&gt;二是为该文档添加的时间戳具有信用背书。也就是需要一个可信的第三方机构来发布时间戳。&lt;/p&gt;&lt;p&gt;第一点可以通过对文档的哈希来解决，第二点如果在可以有中心化的场景，可以通过专业的可信第三方提供时间戳服务。但是现在是点对点的去中心化环境，如何提供时间戳呢？&lt;/p&gt;&lt;p&gt; 所以白皮书的第一句话，就说为了提出解决方案，我们先从时间戳服务说起。&lt;/p&gt;&lt;p&gt;The solution we propose begins with a timestamp server. &lt;/p&gt;&lt;p&gt; 紧接着白皮书解释了如何提供时间戳。&lt;/p&gt;&lt;p&gt;A timestamp server works by taking a hash of a block of items to be timestamped and widely publishing the hash, such as in a newspaper or Usenet post [2-5]. &lt;/p&gt;&lt;p&gt; 时间戳服务可以通过计算区块数据的哈希值，并且广而告之该哈希值，例如刊登在报纸或者其它媒体上来提供。&lt;/p&gt;&lt;p&gt;上述方法通过哈希解决了数据的不可篡改性，通过报纸等媒体解决了时间性。因为报纸等媒体是按照时间发行，具有时间特征的。而且哈希值一旦在报纸等公开媒体发布，其时间和哈希值就牢牢绑定无法更改了，被永远记录在媒体上。从而实现了分布式时间戳的目的（即不需要一个可信的机构来发布时间戳）。&lt;/p&gt;&lt;p&gt;所以白皮书紧接着说&lt;/p&gt;&lt;p&gt;The timestamp proves that the data must have existed at the time, obviously, in order to get into the hash. Each timestamp includes the previous timestamp in its hash, forming a chain, with each additional timestamp reinforcing the ones before it. &lt;/p&gt;&lt;p&gt;显然通过计算区块数据的哈希值来提供时间戳服务，该时间戳证明了区块数据在某个时间的存在性。在计算区块的哈希时，包含了前一区块的时间戳，从而形成了一个链条，即每一个区块的时间戳都包含了它之前区块的时间戳。通俗的讲，前面所有区块的特征都被遗传到了后面的时间戳中。如果想篡改某一个区块的时间戳，必须篡改其后的所有时间戳才可以。这是一个非常好的特性，使得时间戳链条越长，安全性越好。&lt;/p&gt;&lt;p&gt;从而时间戳链条越长，就越能增强前面时间戳的不可篡改性。因为要花更大的代价去篡改其后的所有时间戳。这就是这句话的本质含义Each timestamp includes the previous timestamp in its hash, forming a chain, with each additional timestamp reinforcing the ones before it. 目前的中文版都没有对背后的意思进行解读，这是需要功力的。如果不对比特币系统有深入的理解，很难读懂其白皮书。&lt;/p&gt;&lt;p&gt; 整个白皮书一环套一环，很紧凑，很简洁，但是也造成了理解上的困难。相信经过我们这样的深入解析，会让您豁然开朗。&lt;/p&gt;&lt;p&gt;到此，上述论述的时间戳本质上就是一个哈希链，而且每个哈希值都被打了时间戳的一个链。要在点对点的分布式环境下，实现该时间戳是需要一种新机制的。&lt;/p&gt;&lt;p&gt;这里存在一个问题，哈希只是解决了数据不可篡改的目的，如何和时间挂上钩呢？可以通过可信的第三方来提供时间戳服务，也可以把哈希值记录在报纸等公开的媒体上。但是现在是一个点对点的网络，即不存在中心化的第三方。那么如何体现可信时间这个概念呢？&lt;/p&gt;&lt;p&gt;由于是点对点的网络，所以时间必须是随机的由网络中的某个节点提供。如果不是随机的，就不能体现点对点网络的去中心化特征，时间就可能被提供者控制。有些人可能会想，那就由随机选定的节点提供时间就可以了。这样做不能保证时间的真实性（因为可能会被篡改），因为不能保证每个节点都是诚实的。那么既要保证时间提供者的随机性，又不能让提供者直接提供时间，这不是矛盾吗？如何解决呢？&lt;/p&gt;&lt;p&gt;办法总是人想出来了的。中本聪想的办法是通过事件来体现时间，即把事件和时间关联起来。就像把哈希值记录在报纸上一样。只要事件是随机的，那么完成该事件就意味着在某个时间完成了该事件，从而体现了时间。关键是体现了交易的先后顺序。&lt;/p&gt;&lt;p&gt;文章首发在微信公众号：btc201800&lt;/p&gt;&lt;p&gt;http://weixin.qq.com/r/GC8UDDjEjmXxrXxv93oK (二维码自动识别)&lt;/p&gt;&lt;p&gt;相应的音频，已发布到喜马拉雅“解读区块链白皮书”上，欢迎收听。&lt;/p&gt;&lt;p&gt;http://m.ximalaya.com/42927243/sound/119777482 (二维码自动识别)&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>致远</author>
<guid isPermaLink="false">2018-09-03-43589810</guid>
<pubDate>Mon, 03 Sep 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>最清晰的比特币白皮书解析—交易</title>
<link>https://henix.github.io/feeds/zhuanlan.fhe-blockchain/2018-09-01-43483805.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/43483805&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d77484395746a6d77e841733fb50dcd3_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;       前面给大家解析了摘要和引言，今天给大家解析白皮书的下一部分：交易。&lt;/p&gt;&lt;p&gt;&lt;b&gt;2. 交易&lt;/b&gt;&lt;/p&gt;&lt;p&gt;        第一句话，We define an electronic coin as a chain of digital signatures.目前的中文版都翻译错了。 &lt;/p&gt;&lt;p&gt;       这句话的意思是：在比特币系统中，一个数字货币被看作是由数字签名构成的链。而数字签名是干什么的？是用于对交易的签名。所以一个数字货币被看作是由交易构成的链。&lt;/p&gt;&lt;p&gt;       注意比特币系统是一个点对点的数字货币系统，所以在该系统中“币”是一个非常重要的概念。如何在系统中体现币呢？&lt;/p&gt;&lt;p&gt;       事实上，币是在交易中流动的。每一次交易，币就从一个人的手中转移到另外一个人的手中，不断循环流动。根据上面的定义，在比特币系统中，一个数字货币被看作是一个由交易构成的链，该链反映了该币的每一次交易。注意，这里的链与区块链不是一个意思。&lt;/p&gt;&lt;p&gt;       这就是为什么经常说，比特币里面没有币，而只有交易的原因。在比特币系统中，所有体现币的地方，都用该币的最近一次交易来代替说明。&lt;/p&gt;&lt;p&gt;        那么这里的数字签名是干什么的？这需要知道数字签名的功能是什么？&lt;/p&gt;&lt;p&gt;       数字签名功能有三个：&lt;/p&gt;&lt;p&gt;第一，证明该消息来自于发送者，该功能称为认证；&lt;/p&gt;&lt;p&gt;第二，发送者不能否认自己发过该消息，该功能称为不可抵赖；&lt;/p&gt;&lt;p&gt;第三，发送的消息在传输的过程中没有改变，该功能称为消息的完整性。&lt;/p&gt;&lt;p&gt;      那么交易的内容是什么呢？交易的内容就是：付款人将该币支付给收款人。 &lt;/p&gt;&lt;p&gt;      为了证明付款人能够将该币支付给收款人，必须说明四个问题：&lt;/p&gt;&lt;p&gt;第一， 该币属于付款人；&lt;/p&gt;&lt;p&gt;第二， 付款人同意将该币支付给收款人；&lt;/p&gt;&lt;p&gt;第三， 付款地址必须是收款人的地址；&lt;/p&gt;&lt;p&gt;第四， 该币没有被双花。&lt;/p&gt;&lt;p&gt;       那么如何保证上面的前三点的呢？白皮书紧接着说：&lt;/p&gt;&lt;p&gt;Each owner transfers the coin to the next by digitally signing a hash of the previous transaction and the public key of the next owner and adding these to the end of the coin. &lt;/p&gt;&lt;p&gt;       就是付款人（数字货币的所属人）通过将上一笔交易以及收款人的公钥（即收款地址）进行哈希函数计算，然后对该哈希值进行数字签名，最后将签名附在该币的后面，以达到证明付款人能够将该币支付给收款人的目的。&lt;/p&gt;&lt;p&gt;       为什么付款人要对上一笔交易签名呢？因为要保证该币属于付款人（币的所属权）。由于比特币系统中，币是由交易体现的，所以该币应该是之前由某人支付给了当前付款人（即产生了一笔交易），也就是追溯币的来源，从而说明该币属于付款人。如果不能追溯到该币的上一笔交易，则无法说明该币属于当前付款人。&lt;/p&gt;&lt;p&gt;       公钥在这里代表收款人的地址。对上一笔交易和公钥进行哈希计算，是为了缩短签名内容的长度。&lt;/p&gt;&lt;p&gt;       紧接着白皮书说：&lt;/p&gt;&lt;p&gt;A payee can verify the signatures to verify the chain of ownership. &lt;/p&gt;&lt;p&gt;       即收款人通过验证数字签名来达到验证币的所属权的目的。&lt;/p&gt;&lt;p&gt;       紧接着白皮书说：&lt;/p&gt;&lt;p&gt;The problem of course is the payee can&#39;t verify that one of the owners did not double-spend the coin. &lt;/p&gt;&lt;p&gt;       前面说了，为了证明付款人能够将该币支付给收款人，必须说明四个问题，前三个问题都有了着落，而第四个问题“该币没有被双花”却没有说如何解决。即收款人无法验证在这些交易中，该币没有被双花。&lt;/p&gt;&lt;p&gt;A common solution is to introduce a trusted central authority, or mint, that checks every transaction for double spending. After each transaction, the coin must be returned to the mint to issue a new coin, and only coins issued directly from the mint are trusted not to be double-spent. The problem with this solution is that the fate of the entire money system depends on the company running the mint, with every transaction having to go through them, just like a bank. &lt;/p&gt;&lt;p&gt;        解决双花问题的一个通常解决办法是引入一个可信的中心，或者货币发行方，通过它们检查每一笔交易。每次交易完后，货币发行方从付款人那里减掉相应的货币，并且从收款人那里增加相应的新币。只有通过货币发行方发行的货币才被认为没有被双花的。显然这种解决方法使得整个货币系统依赖于一个中心，即货币发行方，就像我们现在的银行，每一笔交易都是由它来处理。&lt;/p&gt;&lt;p&gt;We need a way for the payee to know that the previous owners did not sign any earlier transactions. For our purposes, the earliest transaction is the one that counts, so we don&#39;t care about later attempts to double-spend. The only way to confirm the absence of a transaction is to be aware of all transactions. In the mint based model, the mint was aware of all transactions and decided which arrived first. To accomplish this without a trusted party, transactions must be publicly announced [1], and we need a system for participants to agree on a single history of the order in which they were received. The payee needs proof that at the time of each transaction, the majority of nodes agreed it was the first received. &lt;/p&gt;&lt;p&gt;       所以我们需要一种方法让收款人知道，在此之前该币并没有被双花过。双花什么意思？就是该币被当前付款人使用后，又被付款人第二次使用。从交易角度来说，对当前付款人该币产生了2笔交易，这两币交易是有先后顺序的。第一笔交易是合法的，而第2笔交易就是双花，是非法的。理解到这个层次，才能对白皮书中的这句话理解：For our purposes, the earliest transaction is the one that counts, so we don&#39;t care about later attempts to double-spend. 即对当前付款人来说，该币产生的第一次交易（最早的一笔交易）才是我们关注的，因为这笔交易是合法交易。而对于该币产生的后面交易都属于双花，所以并不需要关注（因为这些双花交易都是要被废掉的）。注意这里的语境都是对当前付款人来说的，即该币的所属人。很多翻译都是直接按照字面意思翻译，读者会读起来感到莫名其妙，前词不达后语。&lt;/p&gt;&lt;p&gt;       为此，我们必须知道交易的先后顺序，这样才能确定每一笔交易是否合法或者双花，从而把不该存在的交易剔除。就是这句话的含义：The only way to confirm the absence of a transaction is to be aware of all transactions. 这句话很多人不能够理解。确实单从字面上很难理解其含义。&lt;/p&gt;&lt;p&gt;       紧接着白皮书对比了中心化系统下采用的方法。在基于中心化的货币发行方的模型下，货币发行方知道所有的交易，从而可以判断交易的先后顺序，故而避免双花。&lt;/p&gt;&lt;p&gt;       而在去中心化环境下，由于没有中心，如何形成一个唯一的且交易具有先后顺序 的账本呢？方法是交易在系统内公开广播，从而让所有参与者都知道交易。光是知道交易是不够的，关键是对交易的顺序达成一致共识。因此需要构建一个系统，让系统内的所有参与者能够对交易的先后顺序达成共识（注意这里再次说明交易的先后顺序是多么重要。为什么重要？因为可以解决双花。为什么能够解决双花？因为可以确定该币的第一笔交易。），即系统内每个参与者手上都具有唯一的相同的交易链（避免了交易链的不一致）。&lt;/p&gt;&lt;p&gt;      收款人需要证实他收到的每一笔交易都是系统内大多数节点认可的不是双花的交易，即在此之前对该收款人来说，该币没有被花费过，即第一笔交易。所有这一切都是为了解决双花问题。注意上面只是提出了需求（因此需要构建一个系统……），并没有给出如何做到对交易顺序达成一致共识的方法。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;     本文首发在微信公众号：btc201800&lt;/p&gt;&lt;p&gt;http://weixin.qq.com/r/GC8UDDjEjmXxrXxv93oK (二维码自动识别)&lt;/p&gt;&lt;p&gt;     该文章的音频，发在喜马拉雅“区块链杂谈”节目中。&lt;/p&gt;&lt;p&gt;http://m.ximalaya.com/42927243/sound/119777482 (二维码自动识别)&lt;/p&gt;</description>
<author>致远</author>
<guid isPermaLink="false">2018-09-01-43483805</guid>
<pubDate>Sat, 01 Sep 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>全同态加密释疑（四）：转折点：LWE上全同态加密的诞生</title>
<link>https://henix.github.io/feeds/zhuanlan.fhe-blockchain/2017-03-29-26078068.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/26078068&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Gentry构造全同态加密方案的思想是非常“规则”的，是按照数学的思维来考虑问题的，就是围绕理想这一概念，因为只有这样才能产生密文的加法和乘法算。Gentry第一个全同态加密方案是基于理想格构造的。方案所选择的代数结构是理想格，是因为在格里解密操作比较简单，绝大多数都是矩阵向量乘或是内积，它们都属于NC1，具有低的解密电路复杂度，此外理想格像格一样具有加法结构，同时它还具有乘法结构的特性，可以说两全其美。&lt;/p&gt;&lt;p&gt;所有后面沿着Gentry的构造思路都是按照这个思想来的。直到LWE上的全同态加密方案的出现。&lt;/p&gt;&lt;p&gt;Gentry构造全同态加密方案的思想可以抽象概述为：首先在环R上构造一个线性纠错码&lt;em&gt;C&lt;/em&gt;，“线性”意味着保证加法同态性，“纠错”意味着码字中存在错误，如果该错误在一定范围内就可以纠错。而且&lt;em&gt;C&lt;/em&gt;是环上的一个理想，其基有两种表示，一种是“好”的表示，用来做密钥，可以对大的错误进行纠错（相当于解密），当错误超过上限后将无法纠错（即无法解密）。另外一种表示是“坏”的表示，用来做公钥，可以产生随机的码字，用于加密。由于线性纠错码&lt;em&gt;C&lt;/em&gt;的线性特性决定了其具有加法同态特性，另外&lt;em&gt;C&lt;/em&gt;是环上的一个理想，所以其乘法也具有同态特性，然而由于错误存在上限，因此仅对有限次的乘法计算保持其同态特性。该思想形成的方案就是部分（Somewhat）同态加密方案，由于密文计算中错误增长的原因，该方案只能对密文进行有限次的运算。最初的方案都可以用这种思想解释。&lt;/p&gt;&lt;p&gt;上述构造思想中的环结构保证了乘法计算，但是对于LWE（环LWE）上的加密方案由于没有环结构，所以无法提供密文向量的乘法，一度成为LWE（环LWE）上构造全同态加密的最大障碍。Brakerski在论文Bv11中引入了再线性化技术与维数模约减技术，成功的解决了在没有环结构的方案中进行密文乘积的问题。后来在BGV方案中经过改进形成了密钥交换技术和模交换技术。&lt;/p&gt;&lt;p&gt;在基于LWE（环LWE）的全同态加密方案中，密文乘积定义为两个密文&lt;strong&gt;&lt;em&gt;c&lt;/em&gt;&lt;/strong&gt;1和&lt;strong&gt;&lt;em&gt;c&lt;/em&gt;&lt;/strong&gt;2的张量&lt;strong&gt;&lt;em&gt;c&lt;/em&gt;&lt;/strong&gt;1&lt;strong&gt;&lt;em&gt;c&lt;/em&gt;&lt;/strong&gt;2，对应的密钥为&lt;strong&gt;&lt;em&gt;s.  &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;按照这种形式的乘法定义，一方面，密文乘积将导致密文维数的膨胀，只能进行常数次的密文乘法计算；另一方面，同样面临着噪音在乘法中急剧增长的问题。解决这些问题，一方面通过使用密钥交换技术，可以将密文的维数还原到原来的维数，因此可以进行下一次密文的乘积；另一方面使用模交换技术，可以将增长的噪音约减回原来的噪音大小上。因此，不需要启动就可以获得层次型全同态加密方案(可以执行任意多项式深度的电路)，所以不再需要稀疏子集和问题假设和循环安全假设，这是全同态加密思想上的一次飞跃，打破了原有的Gentry构造框架，效率上也得到了极大地提升。目前效率最高的环-LWE上的BGV方案使用的就是这种构造方法&lt;/p&gt;</description>
<author>致远</author>
<guid isPermaLink="false">2017-03-29-26078068</guid>
<pubDate>Wed, 29 Mar 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>全同态加密释疑（三）：为什么不能运行自己的解密电路</title>
<link>https://henix.github.io/feeds/zhuanlan.fhe-blockchain/2017-03-10-25678103.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/25678103&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;前面说过，要想降低密文计算带来的噪音，可以通过同态解密的方式得到一个新的密文，这个新密文的噪音是恒定的，所以使得我们可以进行下一次计算，每次计算后都通过同态解密约减噪音，就能够获得全同态加密了。然而同态解密是需要Evaluate算法能够运行自己的解密函数的，在早期的全同态加密方案中（Gentry09，DGHV），包括BV11方案如果最后一步不使用模维数约减的话，Evaluate都不能够运行自己的解密函数。&lt;/p&gt;&lt;p&gt;很多同学学到这里的时候，都很纳闷，解密函数不就是一些加法乘法模运算么，为什么计算不了，难道还有计算不了的函数？这个问题是问我的人最多的，今天给大家好好解释一下。&lt;/p&gt;&lt;p&gt;所谓的运行不了自己的解密函数，是有语境的，准确的说是“Evaluate算法不能够运行自己的解密函数”，而Evaluate算法的输入是什么？同态解密时，Evaluate算法输入的是解密电路，还有往解密电路里输入的一些密文，这些密文是由密钥和密文的每一位加密而成的，上次博文详细说过这事。那么Evaluate算法做的工作是什么呢？&lt;/p&gt;&lt;p&gt;Evaluate算法做的工作就是让这些密文在解密电路里计算，是密文的计算，记住了！由于密文计算过程会产生噪音，所以密文只能够进行有限次的计算，超过这个界就会产生解密的错误。所以如果&lt;strong&gt;解密电路的深度小于方案所允许计算的深度&lt;/strong&gt;（这里方案所允许计算的深度指的是Somewhat同态方案的计算能力），那么就可以完成同态解密的工作。但是如果解密电路的深度大于方案所允许计算的深度，那么就悲催了，我们就不能够使用同态解密这个方法去降低密文的噪音。怎么办？&lt;/p&gt;&lt;p&gt;Gentry在他的论文里发明了一种方法叫“压缩解密电路”，就是把解密电路的深度降低，从而满足“解密电路的深度小于方案所允许计算的深度”，这样就可以使用同态解密技术了，方案就可以启动了！压缩解密电路是要付出代价的，同时需要一个假设“稀疏子集和问题”，该问题没有被很好的研究过，所以是假设。不过目前的方案已经不需要压缩解密电路了，例如BGV方案，Bra12方案，这些方案都能够运行自己的解密电路，所以不需要压缩的方法了。&lt;/p&gt;&lt;p&gt;同态解密的技术成就了全同态加密的诞生，然而其效率却非常低，所以后面诞生了模交换技术。至于什么是模交换技术，下回分解。&lt;/p&gt;</description>
<author>致远</author>
<guid isPermaLink="false">2017-03-10-25678103</guid>
<pubDate>Fri, 10 Mar 2017 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
