<code lang="text">   NB. 一直写不好八皇后问题，因为代码写起来很麻烦
   NB. 看了曾老师的答案，感觉这个问题在J语言里有一种比较直观的解法
   NB. 其实就是把这个问题分解成两个问题
   NB. 1) 生成全排列，这样每条横线，每条竖线上都只有一个皇后
   NB. 2) 检查每条斜线上是否最多只有一个皇后

   NB. 生成全排列很简单
   (i.!3)A.i.3
0 1 2
0 2 1
1 0 2
1 2 0
2 0 1
2 1 0
   NB. 0表示空，1表示皇后
   #:2^(i.!3)A.i.3
0 0 1
0 1 0
1 0 0

0 0 1
1 0 0
0 1 0

0 1 0
0 0 1
1 0 0

0 1 0
1 0 0
0 0 1

1 0 0
0 0 1
0 1 0

1 0 0
0 1 0
0 0 1

   NB. 沿从右上往左下的斜线相加
   +//."2 #:2^(i.!3)A.i.3
0 0 3 0 0
0 1 1 1 0
0 1 1 1 0
0 2 0 0 1
1 0 0 2 0
1 0 1 0 1

   NB. 判断是否大于1
   1 &lt; +//."2 #:2^(i.!3)A.i.3
0 0 1 0 0
0 0 0 0 0
0 0 0 0 0
0 1 0 0 0
0 0 0 1 0
0 0 0 0 0

   NB. 因为是从上到下算下去的，得转一下
   |: 1 &lt; +//."2 #:2^(i.!3)A.i.3
0 0 0 0 0 0
0 0 0 1 0 0
1 0 0 0 0 0
0 0 0 0 1 0
0 0 0 0 0 0

   NB. 按竖行分别取或
   +./ |: 1 &lt; +//."2 #:2^(i.!3)A.i.3
1 0 0 1 1 0

   NB. 取反
   -. +./ |: 1 &lt; +//."2 #:2^(i.!3)A.i.3
0 1 1 0 0 1

   NB. 定义d，是否在从右上往左下的斜线上皇后数小于等于1
   d=:3 :'-.+./|:1&lt;+//."2 y'
   d #:2^(i.!3)A.i.3
0 1 1 0 0 1

   NB. 取出对应的矩阵
   (d#]) #:2^(i.!3)A.i.3
0 0 1
1 0 0
0 1 0

0 1 0
0 0 1
1 0 0

1 0 0
0 1 0
0 0 1

   NB. 把矩阵沿竖直方向翻转，这样找出左上往右下的斜线上皇后数小于等于1的
   (|.@d#]) #:2^(i.!3)A.i.3
0 0 1
0 1 0
1 0 0

0 1 0
1 0 0
0 0 1

1 0 0
0 0 1
0 1 0

   NB. 定义q，用来找出所有N皇后矩阵
   q=:3 :'((d*.|.@d)#])#:2^(i.!y)A.i.y'
   # q 8
92
   q 4
0 0 1 0
1 0 0 0
0 0 0 1
0 1 0 0

0 1 0 0
0 0 0 1
1 0 0 0
0 0 1 0
   q 6
0 0 0 0 1 0
0 0 1 0 0 0
1 0 0 0 0 0
0 0 0 0 0 1
0 0 0 1 0 0
0 1 0 0 0 0

0 0 0 1 0 0
1 0 0 0 0 0
0 0 0 0 1 0
0 1 0 0 0 0
0 0 0 0 0 1
0 0 1 0 0 0

0 0 1 0 0 0
0 0 0 0 0 1
0 1 0 0 0 0
0 0 0 0 1 0
1 0 0 0 0 0
0 0 0 1 0 0

0 1 0 0 0 0
0 0 0 1 0 0
0 0 0 0 0 1
1 0 0 0 0 0
0 0 1 0 0 0
0 0 0 0 1 0

   NB. 太棒了，不到80个字符就已经能解出八皇后问题了
   d=:3 :'-.+./|:1&lt;+//."2 y'
   q=:3 :'((d*.|.@d)#])#:2^(i.!y)A.i.y'</code>