<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>时光与精神小屋</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/</link>
<description>编程、读书、学习、境界提升</description>
<language>zh-cn</language>
<lastBuildDate>Mon, 07 Jan 2019 02:52:36 +0800</lastBuildDate>
<item>
<title>「Rust日报」2019每周精选 • 第一期</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-01-06-54196508.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/54196508&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-23599072636a1820bba7b49b9d586092_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;前言：&lt;br&gt;从2018年开始，我每天会花1个小时关注Rust社区动态，并且在&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//rust.cc/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust.CC论坛&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//t.me/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;tg channel&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//steemit.com/%40blackanger&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Steemit&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/RustStudy/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.yuque.com/chaosbot/rustnews&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;语雀订阅&lt;/a&gt;都开通了Rust日报，分享我每天的见闻，偶尔也夹杂了一些个人的观点。新的一年过去了，Rust每日新闻已经成为了Rust社区群大家每天必看的内容。每周也会精选几篇Rust社区中的动态，和大家分享。分享的内容就不按时间排序了。&lt;br&gt;2019-01-06&lt;/blockquote&gt;&lt;hr&gt;&lt;h2&gt;「通告」&lt;/h2&gt;&lt;p&gt;微店《Rust编程之道》签名版已发货，请注意查收。没有发货的，等待下一批吧，就这一两天内发。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;官方新闻&lt;/h2&gt;&lt;h2&gt;Mozilla招人了&lt;/h2&gt;&lt;p&gt;很多岗位，包括Rust实习生。在美国的朋友有福了。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//careers.mozilla.org/position/gh/1480831/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;社区新闻&lt;/h2&gt;&lt;h2&gt;「社区」关注Async动态&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//areweasyncyet.rs/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;are we async yet?&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「区块链」 Holochain: 进展&lt;/h2&gt;&lt;blockquote&gt; Holochain是一个采用DHT(分布式哈希表)技术的创新项目，借助BitTorrent 的并行性，为分布式应用（DAPP）提供动力，它是分布式应用程序的数据完整性引擎。它可以将具有用户自主权的分布式 Web 直接构建到其架构和协议中。Holochain和区块链是针对截然不同的应用场景而构建的。对于维持绝对的全球共识的系统来说，区块链相对有优势。在需要弱共识（大多数情况下）的情况下，Holochain 比区块链要好得多：它更快，更高效，更具可扩展性，适应性强和可扩展性。分布式账本技术（DLT）可互换的分支分别是有向无环图（DAG）、Swirlds的哈希图Hashgraph、Holoochain 的分布式散列表（DHT）、区块链，四者是并列关系。&lt;br&gt; &lt;/blockquote&gt;&lt;p&gt;Holochain用Rust重新实现了之前Go写的核心框架。目前正在准备完善的P2P网络。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//www.genesisfor.com/life1/show/338.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Holochain深度介绍&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/holochain/holochain-rust&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;holochain-rust&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//medium.com/holochain/establishing-tech-stack-foundation-and-preparing-for-full-p2p-networking-46ababdb6e44&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「博文」GitHub Actions第一印象&lt;/h2&gt;&lt;p&gt;作者（mgattozzi）最近尝试了GitHub Action的测试版。本文实现了一个类似于Rust项目机器人（比如Rust源码仓库中的机器人bors）的容器来介绍GitHub Action的用法。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/mgattozzi/github-rs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;github-rs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//mgattozzi.com/github-actions-an-introductory-look-and-first-impressions/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「博文」Rust重写Python项目心得&lt;/h2&gt;&lt;p&gt;作者用Rust重写了一个Python项目，性能提升了9倍，内存占用少了一半。本文记录了他重写过程中的心得。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//alantrick.ca/writings/programming/python_to_rust/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「博文」Cpp、Rust和D分别实现Pythagorean三元组的性能比较&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//atilanevesoncode.wordpress.com/2018/12/31/comparing-pythagorean-triples-in-c-d-and-rust/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;经验报告：从Rustacean的角度来看Swift&lt;/h2&gt;&lt;p&gt;同时喜欢Swift的可以关注下&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//blog.waffles.space/2018/12/31/swift-experience-report/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;2018俄罗斯AI杯挑战赛&lt;/h2&gt;&lt;p&gt;俄罗斯AI杯 - 由&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//Mail.Ru&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;Mail.Ru&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt; Group和Codeforces组织的年度IT导向竞赛计划。今年的比赛叫做CodeBall。参与者编写代码使他们的机器人将球击入对手的网中。用Rust和WASM编写AI策略。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//blog.kuviman.com/2019/01/01/russian-ai-cup-2018.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//russianaicup.ru/p/quick&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Quick Start&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//russianaicup.ru/play&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;在线试玩&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「博文」2019期望：使用Rust制作和使用C兼容的库&lt;/h2&gt;&lt;p&gt;目前构建和安装共享库比较困难，尤其是在多个平台上。Cargo的能力目前还待扩展，Rust的ABI也未稳定，所以需要使用兼容C-ABI来和其他语言沟通。但是现在如果你的库想提供一个C绑定接口，目前还没有一个完美的解决方案。作者罗列了现存的问题，并且他计划在2019年尝试提供一些解决方案。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//blogs.gentoo.org/lu_zero/2018/12/30/making-and-using-c-compatible-libraries-in-rust-present-and-future/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「学术论文」利用Rust类型进行模块化规范和验证&lt;/h2&gt;&lt;p&gt;论文的四个作者均来自于瑞士苏黎世联邦理工学院计算机科学系。文中声称利用了一种新的验证技术，利用Rust类型系统来简化Rust程序的规范和验证。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.research-collection.ethz.ch/handle/20.500.11850/311092&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Google出品的最节能的语言数据统计&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//sites.google.com/view/energy-efficiency-languages/results&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;学习资源&lt;/h2&gt;&lt;h2&gt;趣图分享&lt;/h2&gt;&lt;p&gt;我在刚学Rust的时候，这俩类型搞的我很懵。今天做这俩图，方便帮助初学者理解。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-19ae242723e14ac230de65e1cf6dad13_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;478&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic4.zhimg.com/v2-19ae242723e14ac230de65e1cf6dad13_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-19ae242723e14ac230de65e1cf6dad13_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;478&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic4.zhimg.com/v2-19ae242723e14ac230de65e1cf6dad13_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-19ae242723e14ac230de65e1cf6dad13_b.jpg&quot;&gt;&lt;/figure&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-88bdb0b9325d1794693ec324884f6f09_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;379&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;690&quot; data-original=&quot;https://pic2.zhimg.com/v2-88bdb0b9325d1794693ec324884f6f09_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-88bdb0b9325d1794693ec324884f6f09_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;379&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;690&quot; data-original=&quot;https://pic2.zhimg.com/v2-88bdb0b9325d1794693ec324884f6f09_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-88bdb0b9325d1794693ec324884f6f09_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;「视频」使用Rust构建高性能并发数据库&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/acucrs/rust_at_speed_building_a_fast_concurrent_database/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.reddit.com/r/rust/comments/acucrs/rust_at_speed_building_a_fast_concurrent_database/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reddit 讨论贴&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「嵌入式Rust」树莓派3裸机编程指南&lt;/h2&gt;&lt;blockquote&gt; 目标受众是对此硬件不熟悉的业余操作系统开发人员。它将为您提供有关如何执行常见操作系统任务的示例，例如写入串行控制台，从中读取击键或使用各种外围设备（如硬件支持的随机数生成器）。但是，它不是如何编写完整操作系统的教程。我不会涉及高级内存管理和虚拟文件系统等主题，或者如何实现多任务处理。&lt;br&gt; &lt;/blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/rust-embedded/rust-raspi3-tutorial&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「嵌入式Rust」设置Arduino UNO版和Mac的开发环境&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//treesandrobots.com/2018/12/rustduino-pt-1-setting-up-development-environment.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「博文」使用过程宏派生trait&lt;/h2&gt;&lt;p&gt;作者以扩展askama模板为例，介绍了过程宏的使用。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//naftuli.wtf/2019/01/02/rust-derive-macros/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「博文」对Rust中错误传播的思考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//people.gnome.org/%7Efederico/blog/propagating-errors.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「流媒体技术」构建MPD索引&lt;/h2&gt;&lt;p&gt;MPD(Media Present Description)可以非常简洁——只需要短短的几行表述就可以构建一个很大的媒体列表。&lt;/p&gt;&lt;p&gt;作者一般从SoundCloud下载音乐进行播放，但是过程很麻烦：必须浏览SoundCloud，下载一个看起来很有趣的曲目，将其上传到音乐服务器，让MPD将其编入索引，然后播放。所以作者用Rust制作了SoundClound音乐索引，文章记录了他的做法。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//polyfloyd.net/post/soundcloud-fuse-mpd/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/polyfloyd/soundcloud-fs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;源码：soundcloud-fs&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;hackerman: 用Rust编写的16位Hack机器语言的汇编程序&lt;/h2&gt;&lt;p&gt;基于nom实现，可当学习之用。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/onatm/hackerman&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;hackerman&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;项目、框架、工具与库&lt;/h2&gt;&lt;h2&gt;Reducer 1.0发布&lt;/h2&gt;&lt;p&gt;号称用Rust实现了Flux模式的可预测性(Predictable)响应式框架。受js的Redux库影响很大。可用于管理任何类型的应用程序的状态。 尤其是GUI。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/brunocodutra/reducer&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;reducer&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「小项目」[PoC]使用WASM、async/await和Futures0.3构建项目模板&lt;/h2&gt;&lt;p&gt;这是对rust-webpack-template库的改装，支持了wasm、async/await和futures 0.3。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/SillyFreak/Rust-WASM-Async-Example&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust-WASM-Async-Example&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Piet：2D图形抽象&lt;/h2&gt;&lt;p&gt;包含了一些用于2D图形绘制的API。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/linebender/piet&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;piet&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;r64emu： Rust实现的任天堂N64模拟器&lt;/h2&gt;&lt;p&gt;目前完成度很低，还不能玩任何游戏。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/rasky/r64emu&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;r64emu&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;rust-rocksdb: rocksdb的Rust绑定&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/rust-rocksdb/rust-rocksdb&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rust-rocksdb&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;console_log: 支持在浏览器控制台中打印Rust的日志信息&lt;/h2&gt;&lt;p&gt;基于wasm-bindgen实现&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/iamcodemaker/console_log&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;console_log&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「图形处理」meshlite: 3D网格生成和处理&lt;/h2&gt;&lt;p&gt;状态：WIP&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/huxingyi/meshlite&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;meshlite&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;vec_tree: 提供了安全的树结构&lt;/h2&gt;&lt;p&gt;基于generational-arena，避免了ABA问题。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//docs.rs/vec-tree/0.1.0/vec_tree/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;vec_tree&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/fitzgen/generational-arena&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;generational-arena&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;pyoxidizer: Rust编写的Python应用分发工具&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/indygreg/pyoxidizer&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;pyoxidizer&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Ropey发布1.0版&lt;/h2&gt;&lt;p&gt;Ropey是一个文本rope数据结构的实现，旨在成为文本编辑器等应用程序的后备文本缓冲区。&lt;/p&gt;&lt;p&gt;Rope一个二叉查找树。优势：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Rope不需要连续的内存空间，不像数组&lt;/li&gt;&lt;li&gt;Rope在字符串中进行插入和删除更快O（logn）。而在字符串数组中需要O（n）。&lt;/li&gt;&lt;li&gt;在进行数据copy时。Rope不需要额外的O（n）内存空间。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;缺点&lt;/p&gt;&lt;ul&gt;&lt;li&gt;需要更多的内存空间，需要维护父节点。&lt;/li&gt;&lt;li&gt;增加代码的复杂度。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/cessen/ropey&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ropey&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;regex-automata: 使用DFA的正则表达式库&lt;/h2&gt;&lt;p&gt;支持no_std环境。与regex库的区别是：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;regex是通用的正则表达式引擎，对编译时间、搜索和内存使用有一个均匀的平衡，还提供了方便的API。&lt;/li&gt;&lt;li&gt;regex-automata，则提供了更加底层的接口，可能对于用户来说不太方便，但它提供对内存使用和搜索时间更明确的控制。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/BurntSushi/regex-automata&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;regex-automata&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;strength_reduce: 快速整数除法和模数运算&lt;/h2&gt;&lt;p&gt;支持no_std环境。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/ejmahler/strength_reduce&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;strength_reduce&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;umeboshi: Rust实现的交互式shell&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/masahiko-ofgp/umeboshi&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;umeboshi&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;rust-unic: Unicode和I18n库发布0.8版&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/open-i18n/rust-unic/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rust-unic/&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;kurbo：处理曲线的库&lt;/h2&gt;&lt;p&gt;包含曲线和矢量路径的数据结构和算法。 它可能最适合创作工具，但它足够通用，可能对其他应用程序有用。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/linebender/kurbo&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;kurbo&lt;/a&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-01-06-54196508</guid>
<pubDate>Sun, 06 Jan 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>《Rust编程之道》出版了，但我却遭遇了人心险恶</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-01-06-54153985.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/54153985&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-c87c71291210a7dbc848021b3441ea13_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;后续：&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;我被人算计了。&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-b05614e1a81bd3494d5f89dc0c70dbdf_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;697&quot; data-rawheight=&quot;502&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;697&quot; data-original=&quot;https://pic4.zhimg.com/v2-b05614e1a81bd3494d5f89dc0c70dbdf_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-b05614e1a81bd3494d5f89dc0c70dbdf_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;697&quot; data-rawheight=&quot;502&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;697&quot; data-original=&quot;https://pic4.zhimg.com/v2-b05614e1a81bd3494d5f89dc0c70dbdf_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-b05614e1a81bd3494d5f89dc0c70dbdf_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;然后我想起发生在去年的一件事，一个叫尹名杨的家伙，假装公司培训，想骗取我的书稿，被我识破了。可能就是这样得罪了他。故意想拉仇恨。是我被小人给利用了。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;在这里跟 《深入浅出Rust》作者和机械工业出版社的杨编辑、高编辑郑重道歉。是我自己得罪了小人，牵连了你们，对不起！我相信这个世界上善意多于恶意，也相信邪不压正。但我没想到有这么邪恶阴险的人存在。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;今天我来讲一个暗箭伤人的故事。&lt;/p&gt;&lt;p&gt;最近《Rust编程之道》正式出版了，同时启动了预售，各大平台都在紧锣密鼓地铺货。也有很多人购买我的签名版。这本是一个非常令人高兴的事情。对不对？&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;全网第一条差评&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;可是，昨天上午，也就是1月5号上午，我在豆瓣读书里看到《Rust编程之道》的书评里出现了一条差评。同时也是全网第一条且迄今为止唯一一条差评。&lt;/p&gt;&lt;p&gt;是这样的：&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-1b7500062386d94a8f14d4eae55da60f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1728&quot; data-rawheight=&quot;1504&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1728&quot; data-original=&quot;https://pic4.zhimg.com/v2-1b7500062386d94a8f14d4eae55da60f_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-1b7500062386d94a8f14d4eae55da60f_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1728&quot; data-rawheight=&quot;1504&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1728&quot; data-original=&quot;https://pic4.zhimg.com/v2-1b7500062386d94a8f14d4eae55da60f_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-1b7500062386d94a8f14d4eae55da60f_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;刚开始，我以为只是一条普通的差评。毕竟，每一本书，都不可能照顾到所有人群，总会有些差评的。我也没有在意。只是有点奇怪，大家都在等着京东或天猫发货，怎么他就看完了呢？&lt;/p&gt;&lt;p&gt;但是后来我注意到了这个帖子的发表日期，大家注意，是1月3号。这引起了我的警觉。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;那么，1月3号发生了什么？&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;1月3号晚上18点08，我在豆瓣发现，《Rust编程之道》的豆瓣书评链接已经创建好了。有图为证，是和编辑的聊天记录。&lt;/b&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-c1439e2439f9a0a8c724b974516d78da_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;676&quot; data-rawheight=&quot;783&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;676&quot; data-original=&quot;https://pic3.zhimg.com/v2-c1439e2439f9a0a8c724b974516d78da_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-c1439e2439f9a0a8c724b974516d78da_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;676&quot; data-rawheight=&quot;783&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;676&quot; data-original=&quot;https://pic3.zhimg.com/v2-c1439e2439f9a0a8c724b974516d78da_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-c1439e2439f9a0a8c724b974516d78da_b.jpg&quot;&gt;&lt;figcaption&gt;1.3周四18:08&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;得到这个消息我很兴奋，因为我写书，是冲着豆瓣9.0+分的目标来完成的。于是我在QQ群、微信群、Rust日报的TgChannel里都发了通告。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;1月3号晚上18点12&lt;/b&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d52f8e77e14a55fceabdfc4cc0aa78f0_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;752&quot; data-rawheight=&quot;910&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;752&quot; data-original=&quot;https://pic1.zhimg.com/v2-d52f8e77e14a55fceabdfc4cc0aa78f0_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d52f8e77e14a55fceabdfc4cc0aa78f0_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;752&quot; data-rawheight=&quot;910&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;752&quot; data-original=&quot;https://pic1.zhimg.com/v2-d52f8e77e14a55fceabdfc4cc0aa78f0_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-d52f8e77e14a55fceabdfc4cc0aa78f0_b.jpg&quot;&gt;&lt;figcaption&gt;1.3在qq群 18:12&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;b&gt;1月3号晚上18点13&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-d80a2acefd824e2a1453003dd634f19d_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;1382&quot; data-rawheight=&quot;1218&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1382&quot; data-original=&quot;https://pic2.zhimg.com/v2-d80a2acefd824e2a1453003dd634f19d_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-d80a2acefd824e2a1453003dd634f19d_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;1382&quot; data-rawheight=&quot;1218&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1382&quot; data-original=&quot;https://pic2.zhimg.com/v2-d80a2acefd824e2a1453003dd634f19d_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-d80a2acefd824e2a1453003dd634f19d_b.jpg&quot;&gt;&lt;figcaption&gt;星期四，也就是1月3号，在微信群，18:13&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;1月3号晚上18点17&lt;/b&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-a29edda2a0d2d3c7776742f27b00b209_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1764&quot; data-rawheight=&quot;356&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1764&quot; data-original=&quot;https://pic2.zhimg.com/v2-a29edda2a0d2d3c7776742f27b00b209_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-a29edda2a0d2d3c7776742f27b00b209_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1764&quot; data-rawheight=&quot;356&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1764&quot; data-original=&quot;https://pic2.zhimg.com/v2-a29edda2a0d2d3c7776742f27b00b209_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-a29edda2a0d2d3c7776742f27b00b209_b.jpg&quot;&gt;&lt;figcaption&gt;1月3号 18:17 在tg channel&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;1月3号晚上19点09，全网第一条差评就出现了。更加诡异的是，1月3号，还没有一个人拿得到书，包括我自己。而这个人就看完了。神奇不？可能是我1月3号在家不小心放了个P得罪了哪个小气神仙，故意来这报复我？&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;是不是神仙不知道，但一定是个鬼&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;我们来分析一下豆瓣书评里的内容。上来第一句就是《深入浅出Rust》，后面还跟了个《Programming Rust》。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;而且还特意说明了，「他通读了这四本书（包括我这本），总结出一条：你们学习Rust，有深入浅出就够了」（事后已经知道，这是我得罪的那个小人，故意为之。恐怕这几本书他都没看过。）&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;「如果有不错的C++背景」&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;请问，不错的C++背景你能找出几个？C++学的不好，或者不会C++就特么不能学Rust了吗？&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;「这本“道”书，作者看似对于编程语言有所了解，但实际上内容苦于无着力点，写的比较软」&lt;/b&gt;&lt;/p&gt;&lt;p&gt;唉，大家看看这是个啥人。&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-18cc4c784cb7ef6a1d7e5a502cadb468_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1478&quot; data-rawheight=&quot;790&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1478&quot; data-original=&quot;https://pic1.zhimg.com/v2-18cc4c784cb7ef6a1d7e5a502cadb468_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-18cc4c784cb7ef6a1d7e5a502cadb468_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1478&quot; data-rawheight=&quot;790&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1478&quot; data-original=&quot;https://pic1.zhimg.com/v2-18cc4c784cb7ef6a1d7e5a502cadb468_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-18cc4c784cb7ef6a1d7e5a502cadb468_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;我真的无力吐槽这货了。我特别想跟这货说：&lt;b&gt;“不管你是个人行为，还是背后还有谁在支持，或者你是为了舔谁而当舔狗，你办事就不能办的漂亮一点吗？”&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;什么样的评价最有价值&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;我很欣慰，还是有认真读书，给我反馈的人。这才叫真实。人无完人，书无完美。&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-48797c6281c343c7dce7538253db4fb0_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2366&quot; data-rawheight=&quot;2438&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2366&quot; data-original=&quot;https://pic1.zhimg.com/v2-48797c6281c343c7dce7538253db4fb0_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-48797c6281c343c7dce7538253db4fb0_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2366&quot; data-rawheight=&quot;2438&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2366&quot; data-original=&quot;https://pic1.zhimg.com/v2-48797c6281c343c7dce7538253db4fb0_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-48797c6281c343c7dce7538253db4fb0_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;我学习Rust三年，从Rust语言那里学到了社区的重要性。Rust语言是社区的，而我这本书，同样，也是社区的。通过社区不断的反馈，我不断的修正，我相信我这本书会成为经典。&lt;/p&gt;&lt;p&gt;有人跟我说，“写本书确实不容易，我支持你”。我真的很感谢他。感谢支持！&lt;/p&gt;&lt;p&gt;不过，&lt;b&gt;「不容易」不是我想要的安慰&lt;/b&gt;。大家看的时候有什么问题及时反馈，看完以后去豆瓣给个完整公正客观的评价是对我最大的支持。&lt;/p&gt;&lt;p&gt;写书，本质是作者和读者的一种交流。请认真读完它，再做出客观公正的反馈，对你，对别人，都是一种尊重和负责。作为读者，如果你连别人的话都没有听完整或看完整，你不理解别人的意思，你TM有什么资格评价或者质疑呢？&lt;/p&gt;&lt;p&gt;&lt;b&gt;不过，有些人生来只会吸收书中的毒素。我也没法强求他去寻找书中的美好。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;我写这篇文章不是因为担心书的评价好与坏，我自己写的书，我当然是有信心的，书写的是否用心，大家的眼睛也是雪亮的。而是因为有些人和事，实在是让我恶心到不吐不快。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;就这样吧，公道自在人心。&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-01-06-54153985</guid>
<pubDate>Sun, 06 Jan 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>《Rust编程之道》预售开启</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2019-01-04-53527737.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/53527737&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-c583a5daf6085325fb01402f7ab246b5_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;感谢大家一直以来对这本书的关注，《Rust编程之道》今天终于开始预售了。&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;&lt;b&gt;《Rust编程之道》介绍&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;本书跟进&lt;b&gt;Rust 2018 Edition。&lt;/b&gt;本书的特色：&lt;/p&gt;&lt;blockquote&gt;从设计哲学出发，探索Rust语言内在一致性 ；从源码分析入手，探索Rust地道的编程风格 ；从工程角度着手，探索Rust对健壮性的支持 ；从底层原理开始，探索Rust内存安全的本质&lt;/blockquote&gt;&lt;p&gt;更多关于本书的介绍，大家可以参考这篇文章：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/47179483&quot; class=&quot;internal&quot;&gt;张汉东：《Rust编程之道》完整目录公布&lt;/a&gt; 。&lt;/p&gt;&lt;p&gt;&lt;b&gt;为大家提供了样章下载：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;链接: &lt;a href=&quot;http://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1wWU9zPnMi1zz4JA_MTjDVQ&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;pan.baidu.com/s/1wWU9zP&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;nMi1zz4JA_MTjDVQ&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;    提取码:    yuey &lt;/p&gt;&lt;p&gt;&lt;b&gt;可以关注随书源码：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;GitHub:  &lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/ZhangHanDong/tao-of-rust-codes&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ZhangHanDong/tao-of-rust-codes&lt;/a&gt; &lt;/p&gt;&lt;p&gt;随书源码也提供在线文档，包含了随书示例，一键跳转到Playgroud。&lt;/p&gt;&lt;p&gt;欢迎大家提交勘误issues。&lt;/p&gt;&lt;p&gt;&lt;b&gt;电子版说明：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;暂时没有电子版发行，不过有发行计划，具体情况我也不清楚，对电子版感兴趣的可以到时候关注我的通告。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;加群交流&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;如果你想和我交流，可以加我的微信群，通过私聊方式获取我的微信号，到时候邀请进群。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;电子工业出版社预售地址：&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//item.jd.com/12479415.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《Rust编程之道》(张汉东)【摘要 书评 试读】- 京东图书&lt;/a&gt; &lt;/p&gt;&lt;p&gt;八四折，优惠力度还可以。&lt;b&gt;官方预售大概是2019年1月7号开始发货。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;作者签名版&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;更新： 名额已满，暂不接受签名版购买。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;想买我签名版的朋友可以关注我的微信小店：&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//weidian.com/s/1165436513%3Fwfr%3Dc%26ifr%3Dshopdetail%26source%3Dshop%26sfr%3Dapp&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;混沌小店&lt;/a&gt;&lt;b&gt;，也可以通过扫描下图二维码来进入店铺。&lt;/b&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-d6e32de80c9b89fbe222f4d63b712992_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;2250&quot; data-rawheight=&quot;3750&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2250&quot; data-original=&quot;https://pic3.zhimg.com/v2-d6e32de80c9b89fbe222f4d63b712992_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-d6e32de80c9b89fbe222f4d63b712992_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;2250&quot; data-rawheight=&quot;3750&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2250&quot; data-original=&quot;https://pic3.zhimg.com/v2-d6e32de80c9b89fbe222f4d63b712992_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-d6e32de80c9b89fbe222f4d63b712992_b.jpg&quot;&gt;&lt;figcaption&gt;混沌小店-《Rust编程之道》签名版&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;小店里提供了50份价值15元的优惠卷，相当于是九折优惠，包邮。因为我不是经销商，无法给大家提供更多的优惠了。如果你想要更便宜的价格，可以关注电子工业出版社官方店铺的八四折优惠。&lt;b&gt;签名版发货比官方多等一到两周。&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;样书照片&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;说明：封面上有白色条纹，那是印刷质感，不是磨损。&lt;/b&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-2afdb224bc26f926ec80e009b9cc2c50_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2976&quot; data-rawheight=&quot;3968&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2976&quot; data-original=&quot;https://pic1.zhimg.com/v2-2afdb224bc26f926ec80e009b9cc2c50_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-2afdb224bc26f926ec80e009b9cc2c50_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2976&quot; data-rawheight=&quot;3968&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2976&quot; data-original=&quot;https://pic1.zhimg.com/v2-2afdb224bc26f926ec80e009b9cc2c50_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-2afdb224bc26f926ec80e009b9cc2c50_b.jpg&quot;&gt;&lt;/figure&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-8ebc7919eb3ef19619f2505186cdb8c2_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2976&quot; data-rawheight=&quot;3968&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2976&quot; data-original=&quot;https://pic3.zhimg.com/v2-8ebc7919eb3ef19619f2505186cdb8c2_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-8ebc7919eb3ef19619f2505186cdb8c2_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2976&quot; data-rawheight=&quot;3968&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2976&quot; data-original=&quot;https://pic3.zhimg.com/v2-8ebc7919eb3ef19619f2505186cdb8c2_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-8ebc7919eb3ef19619f2505186cdb8c2_b.jpg&quot;&gt;&lt;/figure&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-fb8b02ff2ccf630992e095eb30ce7255_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2976&quot; data-rawheight=&quot;3968&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2976&quot; data-original=&quot;https://pic2.zhimg.com/v2-fb8b02ff2ccf630992e095eb30ce7255_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-fb8b02ff2ccf630992e095eb30ce7255_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2976&quot; data-rawheight=&quot;3968&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2976&quot; data-original=&quot;https://pic2.zhimg.com/v2-fb8b02ff2ccf630992e095eb30ce7255_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-fb8b02ff2ccf630992e095eb30ce7255_b.jpg&quot;&gt;&lt;/figure&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-903043d2154b08d4920723111baa51ba_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;3968&quot; data-rawheight=&quot;2976&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;3968&quot; data-original=&quot;https://pic3.zhimg.com/v2-903043d2154b08d4920723111baa51ba_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-903043d2154b08d4920723111baa51ba_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;3968&quot; data-rawheight=&quot;2976&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;3968&quot; data-original=&quot;https://pic3.zhimg.com/v2-903043d2154b08d4920723111baa51ba_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-903043d2154b08d4920723111baa51ba_b.jpg&quot;&gt;&lt;/figure&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-c78fde0114da9dbb5eb2120dfe97d9c5_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;3968&quot; data-rawheight=&quot;2976&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;3968&quot; data-original=&quot;https://pic2.zhimg.com/v2-c78fde0114da9dbb5eb2120dfe97d9c5_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-c78fde0114da9dbb5eb2120dfe97d9c5_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;3968&quot; data-rawheight=&quot;2976&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;3968&quot; data-original=&quot;https://pic2.zhimg.com/v2-c78fde0114da9dbb5eb2120dfe97d9c5_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-c78fde0114da9dbb5eb2120dfe97d9c5_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2019-01-04-53527737</guid>
<pubDate>Fri, 04 Jan 2019 00:00:00 +0800</pubDate>
</item>
<item>
<title>「Rust每日新闻」2018年度盘点</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-30-53666773.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/53666773&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-0f4eb60f30389c55a33e2da72ba1b15e_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;前言：&lt;br&gt;&lt;br&gt; 从2018年开始，我每天会花1个小时关注Rust社区动态，并且在&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//rust.cc&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;rust.cc&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;/a&gt;论坛、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//t.me/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;tg channel&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//steemit.com/%40blackanger&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Steemit&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/RustStudy/rust_daily_news&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub&lt;/a&gt;、&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.yuque.com/chaosbot/rustnews&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;语雀&lt;/a&gt;都开通了Rust每日新闻，分享我每天的见闻，偶尔也夹杂了一些个人的观点。在2018年，Rust每日新闻已经成为了Rust社区群大家每天必看的内容。&lt;br&gt;&lt;br&gt;时间即将要迈入2019年了，今天我抽空对今年Rust社区的动态做了一次简单的盘点。2018.12.30&lt;/blockquote&gt;&lt;hr&gt;&lt;h2&gt;&lt;br&gt;&lt;b&gt;「通告」2019年起「Rust每日新闻」将改名为「Rust日报」&lt;/b&gt;&lt;br&gt;&lt;/h2&gt;&lt;p&gt;因为「Rust每日新闻」这个名字太长了，尽量缩短一些，也符合Rust的调性。&lt;/p&gt;&lt;p&gt;&lt;br&gt; 今年我坚持每天不间断地了解、梳理、总结我所看到的Rust社区中的信息，并通过此频道分享给大家，于我个人而言，是完成了一次自我挑战。所带来的收获有很多，这个只有我自己才能体会。同时，希望大家也能在2019年跟我一样，每天能坚持自己感兴趣的事。&lt;br&gt;&lt;br&gt;到年底，我的书&lt;a href=&quot;https://zhuanlan.zhihu.com/p/53527737&quot; class=&quot;internal&quot;&gt;《Rust编程之道》也总算出版了&lt;/a&gt;，感谢大家一直以来的关注。现在最希望的就是收到大家的阅读评价，无论好坏，我自己是尽心了，希望可以为Rust在国内的推广做出一点微薄的贡献。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;官方大事记&lt;/b&gt;&lt;br&gt;&lt;br&gt;Rust 2018 关键字：&lt;b&gt;生产&lt;/b&gt;（Production）&lt;br&gt;&lt;br&gt;&lt;b&gt;盘点：&lt;/b&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;Rust 2018 edition发布，Rust 1.31.0 是Rust 2018 edition的首个稳定版。标志着现在完全可以在生产环境使用Rust稳定版了。&lt;/li&gt;&lt;li&gt;Rust 1.30标志着嵌入式Rust开发迎来的第一个稳定版本。你可以在不依赖unstable功能的情况下构建出完整可用的嵌入式程序。并且官方也为嵌入式开发者提供了充足的文档和生态链工具。&lt;/li&gt;&lt;li&gt;经过官方网络工作组调查报告，2018年在Web方面，流行的框架是Rocket和Actix，分别占比27%和24%。也有其他框架的选择，但是有20%的人不选择任何框架，而是在hyper上自行搭建服务。&lt;/li&gt;&lt;li&gt;官方web框架Tide也启动了开发，旨在为Web异步开发建立统一标准。&lt;/li&gt;&lt;li&gt;Rust和WebAssembly用于扩充JavaScript，而不是替换它。这个核心价值观推动了2018年Rust在WebAssembly领域的发展。生产链工具wasm-bindgen和wasm-pack已然成熟。&lt;/li&gt;&lt;li&gt;万众瞩目的异步支持虽然还未稳定，但基本的前奏工作也即将就绪，预计在2019年中旬可以稳定。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;br&gt;&lt;b&gt;社区大事记&lt;/b&gt;&lt;br&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;数据库领域：&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;ul&gt;&lt;li&gt;国内PingCAP公司基于Rust实现的开源分布式事务键值数据库TiKV，进入了云原生计算基金会（CNCF）Sandbox， 用于早期和持续发展的云原生项目。&lt;/li&gt;&lt;li&gt;Rust编写的现代嵌入式数据库sled已发布到0.16版。&lt;/li&gt;&lt;li&gt;Rust编写的图数据库indradb，已发布到0.21版。&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Rust在游戏领域也有了十足的成长。&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;ul&gt;&lt;li&gt;Amethyst游戏引擎基金会成立。&lt;/li&gt;&lt;li&gt;Specs倡导的ECS模式，在Rust社区颇受欢迎。并且Specs也有了继承者nitric，会为开发者提供更好的体验。&lt;/li&gt;&lt;li&gt;曾开发 《战神：奥林匹斯之链》 和《 战神：斯巴达之魂》 的业界大厂 Ready at Dawn Studios 全面拥抱Rust。其CTO亲自动手实现了一个用于测试2D渲染的Playground库modulator_play。&lt;/li&gt;&lt;li&gt;前EA首席设计官成立的新独立游戏工作室Embark宣布使用Rust为主要语言。&lt;/li&gt;&lt;li&gt;各种轻量级游戏框架或库出现：比如轻量级2D游戏框架ggez、纯Rust实现的2D和3D物理引擎nphysics、2D和3D的碰撞检测库ncollide等&lt;/li&gt;&lt;li&gt;Rust和WASM结合应用于游戏也有不少例子，最有意思的是这个开源的基于浏览器的流沙游戏：MaxBittker/sandspiel&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;GUI和图形图像处理。&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;ul&gt;&lt;li&gt;gfx-rs/gfx ，高性能无绑定的图形库，支持：Vulkan/ DirectX 12 /Metal /OpenGL 2.1+/ES2+等，Fifrefox的WebRender组件也用到了该库。到年底也发布了gfx-hal库，是对硬件的直接抽象层。&lt;/li&gt;&lt;li&gt;MaikKlein/rlsl，是支持Rust编译到SPIR-V的库，SPIR-V是一种用于GPU通用计算和图形学的中间语言。&lt;/li&gt;&lt;li&gt;GUI框架Azul：面向IMGUI的免费功能性GUI框架，支持用Rust编写桌面软件，基于Mozilla WebRender渲染引擎。&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Web前端（WASM）和后端框架：&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;ul&gt;&lt;li&gt;yew: 最早的基于Rust和WASM的前端框架，灵感来自于Elm和ReactJS，支持创建多线程前端App。&lt;/li&gt;&lt;li&gt;seed: Rust+WebAssembly 前端框架，基于wasm-bindgen和js-sys创建。创建应用时需要依赖web-sys。&lt;/li&gt;&lt;li&gt;Ruukh是一个前端Web框架，受到VueJS和ReactJS的启发，基于Rust和WASM。&lt;/li&gt;&lt;li&gt;「Rust前端框架」Draco：利用Rust和Wasm编写前端代码。灵感来自于React和Elm。使用了虚拟Dom。&lt;/li&gt;&lt;li&gt;「Web框架」Rocket v0.4发布，预计下个版本，将可以应用于Rust稳定版本。&lt;/li&gt;&lt;li&gt;目前社区流行的Web框架：actix-web和rocket。Tower作者和Hyper作者正在联合实现Warp框架，而Rust官方在完善Tide框架，在Tide框架标准完善之后，社区的其他框架应该会统一配合官方来完成变更，比如支持统一的中间件协议、async/await语法支持等。&lt;/li&gt;&lt;li&gt;目前最成熟的ORM框架还是Diesel。&lt;/li&gt;&lt;li&gt;Graphql框架比较成熟的是juniper。&lt;/li&gt;&lt;li&gt;全文搜索工具tantivy-search/tantivy，对标Apache Lucene。&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;解析工具：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;nom、combain、pest三足鼎立。也有人写了一本书，提供了一些文档和示例，帮助你选择适合使用场景的解析工具。&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//freemasen.github.io/parsers_presentation/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Rust在区块链领域发展：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Zcash、Parity、秘猿、IBM超级账本等公司，都使用Rust构建自己的区块链生态。尤其是Parity的polkadot项目，将使用Rust构建异构区块链互联网。社区也发布了很多Rust编写的算法、零知识证明库等。&lt;/p&gt;&lt;p&gt;&lt;b&gt;操作系统&lt;/b&gt;：&lt;/p&gt;&lt;p&gt;下一代操作系统Redox、嵌入式物联网操作系统TockOS和Google新的号称替代Fuchsia操作系统，都全部或部分使用了Rust。斯坦福大学、清华大学也开始使用Rust语言尝试进行操作系统的教学。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;机器学习：&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;ul&gt;&lt;li&gt;Juice是一个开放的机器学习框架，之前的名字叫leaf，用于构建经典，深度或混合机器学习应用程序。 它受到TensorFlow，Torch，Caffe，Rust和众多研究论文背后的杰出人士的启发，并为深度学习带来了模块化，性能和便携性。&lt;/li&gt;&lt;li&gt;第三方服务Machine Box将最先进的机器学习功能置于Docker容器中，因此像您这样的开发人员可以很快地将自然语言处理，面部检测，对象识别等功能轻松纳入您自己的应用程序中。提供了Rust SDK。&lt;/li&gt;&lt;li&gt;Rust极有可能成为构建世界级机器学习工具的语言，但它目前缺少一些重要的数学基础设施BFGS，在今年有人专门建立了一个开源项目paulkernfeld/bfgs来填补此空白。&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;云计算相关&lt;/b&gt;：&lt;/p&gt;&lt;ul&gt;&lt;ul&gt;&lt;li&gt;亚马逊AWS开源Firecracker。Firecracker是一种开源虚拟化技术，专门用于创建和管理安全，多租户容器和基于功能的服务，提供无服务器操作模型。 Firecracker在轻量级虚拟机中运行工作负载，称为microVM，它将硬件虚拟化技术提供的安全性和隔离性与容器的速度和灵活性相结合。&lt;/li&gt;&lt;li&gt;ASW Lambda Serverless全面支持Rust。&lt;/li&gt;&lt;li&gt;红帽开源Stratis。Stratis为桌面Linux用户提供了一系列强大的高级存储功能，并且易于使用，基于Rust实现，Stratis也是是卷管理文件系统（VMF），比如ZFS和Btrfs。它始于存储“池”的核心思想，这与VMF和LVM等独立卷管理思想一致。&lt;/li&gt;&lt;li&gt;Dropbox开源了Rust实现的新的并发矢量化压缩算法DivANS，可以编译成WASM以在浏览器和服务器上进行高密度压缩。&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Rust也用于安全领域，社区中也陆续出现了一些Rust实现的安全工具&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;比如：&lt;/p&gt;&lt;ul&gt;&lt;ul&gt;&lt;li&gt;网络实时入侵检测(IDS)、嵌入式入侵防御(IPS)和网络安全监控(NSM)的引擎Suricata&lt;/li&gt;&lt;li&gt;web服务批量扫描工具lachesis。&lt;/li&gt;&lt;li&gt;一款Android应用程序分析工具SUPER，可以检测潜在的安全漏洞并创建漂亮的报告。&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;今年基于Rust实现的CLI App，也颇受瞩目。&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;ul&gt;&lt;li&gt;bat，Rust实现的类cat工具，最流行。&lt;/li&gt;&lt;li&gt;exa，Rust实现的类ls工具&lt;/li&gt;&lt;li&gt;ripgrep，支持正则语法的文本搜索工具&lt;/li&gt;&lt;li&gt;tui-rs，一个强大的终端Dashborad工具&lt;/li&gt;&lt;li&gt;mcfly，更智能展示你shell历史的工具，自带小型神经网络（mall neural network）&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;基于Rust实现的编程语言：&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;deno，Node作者的新语言，基于V8的TypeScript运行时，基于Rust实现（代码量24.2%），在今年颇受关注。&lt;/b&gt;&lt;/li&gt;&lt;li&gt;Gluon是函数式语言，借鉴了 F#, OCaml 和 Haskell语言，静态类型，并支持类型推断。它的目标应该是类似于Lua语言，可以嵌入在Rust语言中，也可以直接调用Rust函数，和Rust无缝集成。&lt;/li&gt;&lt;li&gt;Dyon是Piston游戏引擎组织实现的动态类型脚本语言，专门为游戏引擎和交互式应用程序而创建，其对象模型和javascript类似，但不存在null，支持类似Go的协程等。也可以和Rust无缝集成。&lt;/li&gt;&lt;li&gt;Formality，可用于写智能合约，可用于定理证明，兼容EVM（可运行以太坊合约），兼容GPU。&lt;/li&gt;&lt;li&gt;使用Rust编写语言vm系列文章：&lt;a href=&quot;http://link.zhihu.com/?target=http%3A//blog.subnetzero.io/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;blog.subnetzero.io&lt;/a&gt; 。该作者写了33篇博文，并且制作了一个寄存器式VM，源码在GitHub的subnetzero/iridium&lt;/li&gt;&lt;li&gt;根据《 Writing an Interpreter in Go》写的Rust版本的monkey-rust语言。&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&lt;b&gt;小结&lt;/b&gt;&lt;br&gt;&lt;br&gt;Rust社区欣欣向荣，以上盘点也只是冰山一角，最好还是能亲自加入社区体验和成长。&lt;br&gt;&lt;br&gt;现在正是开始学习Rust的时候。Rust作为一种通用型语言，不管你的方向是前端、还是后端，亦或是编写嵌入式应用、还是写操作系统、网络服务等，都可以使用Rust。如果你是学生，可以尝试开始学习Rust，提升自己的竞争力。如果你是在职人员，也不妨学习一下Rust，因为它是新时代的语言。&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-30-53666773</guid>
<pubDate>Sun, 30 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>Rust Quiz 解读：Quiz 22</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-29-53599961.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/53599961&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;来自于RustFest 2018 大会上Alex Crichton 和 David Tolnay两位大佬的轻演讲主题：Rust Quiz&lt;br&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/dtolnay/rust-quiz&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rust-quiz源码&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//dtolnay.github.io/rust-quiz/18&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;在线练习和解答&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3DQtDj9R6vtA8%26index%3D6%26list%3DPLgC1L0fKd7UlpVTHVfLYVtudVx8CzbSxW%26t%3D0s&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;视频&lt;/a&gt;&lt;br&gt;不得不说，两位大佬出的题非常具有迷惑性，一不留神就落入了陷阱。&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;Quiz  22:&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;下面这段代码输出什么？&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;macro_rules&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$a&lt;/span&gt;:&lt;span class=&quot;nc&quot;&gt;tt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$a&lt;/span&gt;:&lt;span class=&quot;nc&quot;&gt;tt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$b&lt;/span&gt;:&lt;span class=&quot;nc&quot;&gt;tt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$a&lt;/span&gt;:&lt;span class=&quot;nc&quot;&gt;tt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$b&lt;/span&gt;:&lt;span class=&quot;nc&quot;&gt;tt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$c&lt;/span&gt;:&lt;span class=&quot;nc&quot;&gt;tt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$a&lt;/span&gt;:&lt;span class=&quot;nc&quot;&gt;tt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$b&lt;/span&gt;:&lt;span class=&quot;nc&quot;&gt;tt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$c&lt;/span&gt;:&lt;span class=&quot;nc&quot;&gt;tt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$d&lt;/span&gt;:&lt;span class=&quot;nc&quot;&gt;tt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$a&lt;/span&gt;:&lt;span class=&quot;nc&quot;&gt;tt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$b&lt;/span&gt;:&lt;span class=&quot;nc&quot;&gt;tt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$c&lt;/span&gt;:&lt;span class=&quot;nc&quot;&gt;tt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$d&lt;/span&gt;:&lt;span class=&quot;nc&quot;&gt;tt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$e&lt;/span&gt;:&lt;span class=&quot;nc&quot;&gt;tt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$a&lt;/span&gt;:&lt;span class=&quot;nc&quot;&gt;tt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$b&lt;/span&gt;:&lt;span class=&quot;nc&quot;&gt;tt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$c&lt;/span&gt;:&lt;span class=&quot;nc&quot;&gt;tt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$d&lt;/span&gt;:&lt;span class=&quot;nc&quot;&gt;tt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$e&lt;/span&gt;:&lt;span class=&quot;nc&quot;&gt;tt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$f&lt;/span&gt;:&lt;span class=&quot;nc&quot;&gt;tt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;6&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$a&lt;/span&gt;:&lt;span class=&quot;nc&quot;&gt;tt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$b&lt;/span&gt;:&lt;span class=&quot;nc&quot;&gt;tt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$c&lt;/span&gt;:&lt;span class=&quot;nc&quot;&gt;tt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$d&lt;/span&gt;:&lt;span class=&quot;nc&quot;&gt;tt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$e&lt;/span&gt;:&lt;span class=&quot;nc&quot;&gt;tt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$f&lt;/span&gt;:&lt;span class=&quot;nc&quot;&gt;tt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;$g&lt;/span&gt;:&lt;span class=&quot;nc&quot;&gt;tt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;7&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0e1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0e-1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;输出结果： 22222&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;考察要点：&lt;/b&gt;&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;声明宏模式分支匹配规则&lt;/li&gt;&lt;li&gt;Rust如何对表达式进行词法分析&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Quiz代码中定义了m!宏，通过该宏可以判断Rust如何对表达式进行解析。&lt;/p&gt;&lt;p&gt;在main函数中：&lt;/p&gt;&lt;p&gt;&lt;code&gt;m!(-1)&lt;/code&gt;，其中&lt;code&gt;-1&lt;/code&gt;，会被Rust分词为两个独立词条（Token）：&lt;code&gt;-&lt;/code&gt;和&lt;code&gt;1&lt;/code&gt;。所以，宏调用会匹配到第二个模式条件分支，最终输出：&lt;code&gt;2&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;Rust对于数字&lt;code&gt;1&lt;/code&gt;、&lt;code&gt;1.&lt;/code&gt;、&lt;code&gt;1.0&lt;/code&gt;、&lt;code&gt;1.0e1&lt;/code&gt;和&lt;code&gt;1.0e-1&lt;/code&gt;均会识别为一个词条。所以，剩余的4个宏调用，也同样会输出： &lt;code&gt;2&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;&lt;code&gt;-&lt;/code&gt;永远都会被识别为独立的词条，比如下面这段代码：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出结果是：&lt;code&gt;-81&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//dtolnay.github.io/rust-quiz/22&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;点此查看 Rust Quiz 22&lt;/a&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-29-53599961</guid>
<pubDate>Sat, 29 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>《Rust编程之道》预售开启</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-28-53527737.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/53527737&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-c583a5daf6085325fb01402f7ab246b5_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;感谢大家一直以来对这本书的关注，《Rust编程之道》今天终于开始预售了。&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;&lt;b&gt;《Rust编程之道》介绍&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;本书跟进&lt;b&gt;Rust 2018 Edition。&lt;/b&gt;本书的特色：&lt;/p&gt;&lt;blockquote&gt;从设计哲学出发，探索Rust语言内在一致性 ；从源码分析入手，探索Rust地道的编程风格 ；从工程角度着手，探索Rust对健壮性的支持 ；从底层原理开始，探索Rust内存安全的本质&lt;/blockquote&gt;&lt;p&gt;更多关于本书的介绍，大家可以参考这篇文章：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/47179483&quot; class=&quot;internal&quot;&gt;张汉东：《Rust编程之道》完整目录公布&lt;/a&gt; 。&lt;/p&gt;&lt;p&gt;&lt;b&gt;为大家提供了样章下载：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;链接: &lt;a href=&quot;http://link.zhihu.com/?target=https%3A//pan.baidu.com/s/1wWU9zPnMi1zz4JA_MTjDVQ&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;pan.baidu.com/s/1wWU9zP&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;nMi1zz4JA_MTjDVQ&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;    提取码:    yuey &lt;/p&gt;&lt;p&gt;&lt;b&gt;可以关注随书源码：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;GitHub:  &lt;a href=&quot;http://link.zhihu.com/?target=https%3A//github.com/ZhangHanDong/tao-of-rust-codes&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ZhangHanDong/tao-of-rust-codes&lt;/a&gt; &lt;/p&gt;&lt;p&gt;随书源码也提供在线文档，包含了随书示例，一键跳转到Playgroud。&lt;/p&gt;&lt;p&gt;欢迎大家提交勘误issues。&lt;/p&gt;&lt;p&gt;&lt;b&gt;电子版说明：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;暂时没有电子版发行，不过有发行计划，具体情况我也不清楚，对电子版感兴趣的可以到时候关注我的通告。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;加群交流&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;如果你想和我交流，可以加我的微信群，通过私聊方式获取我的微信号，到时候邀请进群。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;电子工业出版社预售地址：&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//item.jd.com/12479415.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《Rust编程之道》(张汉东)【摘要 书评 试读】- 京东图书&lt;/a&gt; &lt;/p&gt;&lt;p&gt;八四折，优惠力度还可以。&lt;b&gt;官方预售大概是2019年1月7号开始发货。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;作者签名版&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;想买我签名版的朋友可以关注我的微信小店：&lt;a href=&quot;http://link.zhihu.com/?target=https%3A//weidian.com/s/1165436513%3Fwfr%3Dc%26ifr%3Dshopdetail%26source%3Dshop%26sfr%3Dapp&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;混沌小店&lt;/a&gt;&lt;b&gt;，也可以通过扫描下图二维码来进入店铺。&lt;/b&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-d6e32de80c9b89fbe222f4d63b712992_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;2250&quot; data-rawheight=&quot;3750&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2250&quot; data-original=&quot;https://pic3.zhimg.com/v2-d6e32de80c9b89fbe222f4d63b712992_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-d6e32de80c9b89fbe222f4d63b712992_b.jpg&quot; data-size=&quot;small&quot; data-rawwidth=&quot;2250&quot; data-rawheight=&quot;3750&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2250&quot; data-original=&quot;https://pic3.zhimg.com/v2-d6e32de80c9b89fbe222f4d63b712992_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-d6e32de80c9b89fbe222f4d63b712992_b.jpg&quot;&gt;&lt;figcaption&gt;混沌小店-《Rust编程之道》签名版&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;小店里提供了50份价值15元的优惠卷，相当于是九折优惠，包邮。因为我不是经销商，无法给大家提供更多的优惠了。如果你想要更便宜的价格，可以关注电子工业出版社官方店铺的八四折优惠。&lt;b&gt;签名版发货比官方多等一到两周。&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;样书照片&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;说明：封面上有白色条纹，那是印刷质感，不是磨损。&lt;/b&gt;&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-2afdb224bc26f926ec80e009b9cc2c50_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2976&quot; data-rawheight=&quot;3968&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2976&quot; data-original=&quot;https://pic1.zhimg.com/v2-2afdb224bc26f926ec80e009b9cc2c50_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-2afdb224bc26f926ec80e009b9cc2c50_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2976&quot; data-rawheight=&quot;3968&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2976&quot; data-original=&quot;https://pic1.zhimg.com/v2-2afdb224bc26f926ec80e009b9cc2c50_r.jpg&quot; data-actualsrc=&quot;https://pic1.zhimg.com/v2-2afdb224bc26f926ec80e009b9cc2c50_b.jpg&quot;&gt;&lt;/figure&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-8ebc7919eb3ef19619f2505186cdb8c2_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2976&quot; data-rawheight=&quot;3968&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2976&quot; data-original=&quot;https://pic3.zhimg.com/v2-8ebc7919eb3ef19619f2505186cdb8c2_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-8ebc7919eb3ef19619f2505186cdb8c2_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2976&quot; data-rawheight=&quot;3968&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2976&quot; data-original=&quot;https://pic3.zhimg.com/v2-8ebc7919eb3ef19619f2505186cdb8c2_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-8ebc7919eb3ef19619f2505186cdb8c2_b.jpg&quot;&gt;&lt;/figure&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-fb8b02ff2ccf630992e095eb30ce7255_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2976&quot; data-rawheight=&quot;3968&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2976&quot; data-original=&quot;https://pic2.zhimg.com/v2-fb8b02ff2ccf630992e095eb30ce7255_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-fb8b02ff2ccf630992e095eb30ce7255_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;2976&quot; data-rawheight=&quot;3968&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;2976&quot; data-original=&quot;https://pic2.zhimg.com/v2-fb8b02ff2ccf630992e095eb30ce7255_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-fb8b02ff2ccf630992e095eb30ce7255_b.jpg&quot;&gt;&lt;/figure&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-903043d2154b08d4920723111baa51ba_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;3968&quot; data-rawheight=&quot;2976&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;3968&quot; data-original=&quot;https://pic3.zhimg.com/v2-903043d2154b08d4920723111baa51ba_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-903043d2154b08d4920723111baa51ba_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;3968&quot; data-rawheight=&quot;2976&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;3968&quot; data-original=&quot;https://pic3.zhimg.com/v2-903043d2154b08d4920723111baa51ba_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-903043d2154b08d4920723111baa51ba_b.jpg&quot;&gt;&lt;/figure&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-c78fde0114da9dbb5eb2120dfe97d9c5_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;3968&quot; data-rawheight=&quot;2976&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;3968&quot; data-original=&quot;https://pic2.zhimg.com/v2-c78fde0114da9dbb5eb2120dfe97d9c5_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-c78fde0114da9dbb5eb2120dfe97d9c5_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;3968&quot; data-rawheight=&quot;2976&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;3968&quot; data-original=&quot;https://pic2.zhimg.com/v2-c78fde0114da9dbb5eb2120dfe97d9c5_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/v2-c78fde0114da9dbb5eb2120dfe97d9c5_b.jpg&quot;&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-28-53527737</guid>
<pubDate>Fri, 28 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>「知乎Live推荐」如何系统地学习Rust语言？</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-28-53510154.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/53510154&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-839798432500b3aec901cba0efb93bf7_b.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;在2018年11月25号，我在知乎分享了我的第一场Live：《如何系统地学习Rust语言》，好评不错，今天想再次推荐一下。&lt;/p&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-9e62c100345d80ec3648203d87cbe09e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1820&quot; data-rawheight=&quot;550&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1820&quot; data-original=&quot;https://pic3.zhimg.com/v2-9e62c100345d80ec3648203d87cbe09e_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-9e62c100345d80ec3648203d87cbe09e_b.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1820&quot; data-rawheight=&quot;550&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1820&quot; data-original=&quot;https://pic3.zhimg.com/v2-9e62c100345d80ec3648203d87cbe09e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-9e62c100345d80ec3648203d87cbe09e_b.jpg&quot;&gt;&lt;/figure&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;Live的目标人群&lt;/b&gt;&lt;/h2&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-a5bb63ea58e76ac7ea9fc4faac0bcddb_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1122&quot; data-rawheight=&quot;446&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1122&quot; data-original=&quot;https://pic4.zhimg.com/v2-a5bb63ea58e76ac7ea9fc4faac0bcddb_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-a5bb63ea58e76ac7ea9fc4faac0bcddb_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1122&quot; data-rawheight=&quot;446&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;1122&quot; data-original=&quot;https://pic4.zhimg.com/v2-a5bb63ea58e76ac7ea9fc4faac0bcddb_r.jpg&quot; data-actualsrc=&quot;https://pic4.zhimg.com/v2-a5bb63ea58e76ac7ea9fc4faac0bcddb_b.jpg&quot;&gt;&lt;figcaption&gt;目标人群介绍&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;&lt;b&gt;Live的学习目标&lt;/b&gt;&lt;/h2&gt;&lt;figure&gt;&lt;noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-badbab66c8534a7df5960a9785ceb70e_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;940&quot; data-rawheight=&quot;298&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;940&quot; data-original=&quot;https://pic3.zhimg.com/v2-badbab66c8534a7df5960a9785ceb70e_r.jpg&quot;&gt;&lt;/noscript&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-badbab66c8534a7df5960a9785ceb70e_b.jpg&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;940&quot; data-rawheight=&quot;298&quot; class=&quot;origin_image zh-lightbox-thumb lazy&quot; width=&quot;940&quot; data-original=&quot;https://pic3.zhimg.com/v2-badbab66c8534a7df5960a9785ceb70e_r.jpg&quot; data-actualsrc=&quot;https://pic3.zhimg.com/v2-badbab66c8534a7df5960a9785ceb70e_b.jpg&quot;&gt;&lt;figcaption&gt;Live的学习目标&lt;/figcaption&gt;&lt;/figure&gt;&lt;h2&gt;&lt;b&gt;本次 Live 主要包括以下内容&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;1. 为什么要学习Rust？&lt;/p&gt;&lt;p&gt;    * Rust语言是如何诞生的？ &lt;/p&gt;&lt;p&gt;    * Rust语言的社区文化是什么样的？&lt;/p&gt;&lt;p&gt;    * Rust语言当前生态系统的发展状况如何？&lt;/p&gt;&lt;p&gt;    * 学习Rust语言带来的收获是什么？&lt;/p&gt;&lt;p&gt;2. 如何学习Rust？&lt;/p&gt;&lt;p&gt;    * Rust学习过程中有哪些常见的障碍？&lt;/p&gt;&lt;p&gt;    * 系统性的学习思路和路线是什么？&lt;/p&gt;&lt;p&gt;    * 最佳的学习实践是什么？&lt;/p&gt;&lt;p&gt;3. 有哪些推荐的学习资料？&lt;/p&gt;&lt;p&gt;    * 在线免费的学习资料大梳理&lt;/p&gt;&lt;p&gt;    * 《Rust编程之道》介绍&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;有的人可能会说：「你这就是介绍你要出版的书嘛，为什么还收费？」&lt;/p&gt;&lt;p&gt;其实不然，Live两个多小时，我介绍书只用了最后一分钟。本次Live的主题是《如何系统地学习Rust》。其中，重点在于「系统学习的思路」。努力很重要，但努力的方向更重要。&lt;/p&gt;&lt;p&gt;其实，你只要是一个比较勤快的人，好好地把官方文档看一遍，也可以上手用Rust做一些项目。但此时在你的心里，你可能会感觉很没底气。多半是依赖于编译器的错误提示来逐步完成你的代码。甚至，你编写代码的过程，很可能演变为一种：为了编译通过而无所不用其极的方式，完全忽略了你用的数据结构是否正确，会带来什么影响。这样编写代码其实会让自己很难受。所以，只有系统地掌握了Rust，你才能愉悦地使用Rust，和编译器化敌为友。&lt;/p&gt;&lt;p&gt;本次Live的学习目标，就是为了让大家在达成系统掌握Rust的过程中少走一点弯路。&lt;/p&gt;&lt;p&gt;所以，你是为学习思路而付费。网上学习资料有很多，也并不可能每个人都会买我的书。但不管看什么资料，这个学习思路是对你有帮助的。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Live地址： &lt;/p&gt;&lt;a href=&quot;https://www.zhihu.com/lives/1043463438202249216&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;https://pic1.zhimg.com/v2-aae74274182615a00d57621efa4864e4_ipico.jpg&quot; data-image-width=&quot;1177&quot; data-image-height=&quot;1177&quot; class=&quot;internal&quot;&gt;如何系统地学习Rust语言？&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-28-53510154</guid>
<pubDate>Fri, 28 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>如何选择编程语言？</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-26-53358012.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/53358012&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-40dda6fe7127a6735d526f5384ca4768_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;前言&lt;br&gt;&lt;br&gt;做为一名程序员或准程序员，总会出现这个需求：如何选择一门编程？其实这个问题等价于，该如何投资自己的时间和精力？一个人的精力是有限的，大家肯定希望投入和产出是成正比的。那么有什么比较科学的方法指导自己呢？&lt;br&gt;&lt;br&gt;今天上午我看到一篇来自于斯坦福商学院一名学生Nnamdi写的文章：&lt;a href=&quot;https://whoisnnamdi.com/the-growth-share-matrix-of-software-development/&quot;&gt;《软件开发的增长矩阵共享模型》&lt;/a&gt;。他在文章中使用四象限法对当下众多编程语言做了一次分析。而且他使用的样本数据是来自于StackoverFlow在2017和2018年的年度开发者调查报告，大约有超10w开发者参与调查。我感觉他的分析是有一定科学道理的，也许你可以在选择编程语言时，用它做为一项参考。&lt;br&gt;&lt;br&gt;本文并非翻译，只是对Nnamdi文章中模型结果的思考。&lt;/blockquote&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;先看一下他文章中得出的分析结果模型。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-0e4da1c931a3b96b3e28ca9c200bc415_r.jpg&quot; data-caption=&quot;软件开发中的增长共享矩阵&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1388&quot; data-rawheight=&quot;1278&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-0e4da1c931a3b96b3e28ca9c200bc415&quot; data-watermark-src=&quot;v2-28f6d2f3849db12c014ff49c96e44d3b&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;四象限分析法&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;为了搞懂这个模型的意义，先来了解下什么是四象限分析法。&lt;/p&gt;&lt;p&gt;四象限分析法，也叫&lt;b&gt;波士顿矩阵(BCG Matrix)。&lt;/b&gt;波士顿矩阵又称市场增长率-相对市场份额矩阵、BCG矩阵、波士顿咨询集团法、产品系列结构管理法等。波士顿咨询集团（Boston Consulting Group）在上世纪70年代开发了此方法，用于指导公司高层制定未来发展战略。&lt;/p&gt;&lt;p&gt;&lt;b&gt;模型介绍&lt;/b&gt;&lt;/p&gt;&lt;p&gt;　　BCG矩阵区分出4种业务组合。&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-609418f20961be58f199f38173e3679b_r.jpg&quot; data-caption=&quot;BCG矩阵模型&quot; data-size=&quot;small&quot; data-rawwidth=&quot;1210&quot; data-rawheight=&quot;1210&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-609418f20961be58f199f38173e3679b&quot; data-watermark-src=&quot;v2-e31eef587ecbcf4b6a6f15a3d3ce4abb&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;blockquote&gt;&lt;b&gt;（1）明星型业务（Stars，指高增长、高市场份额）&lt;/b&gt;&lt;br&gt;　　这个领域中的产品处于快速增长的市场中并且占有支配地位的市场份额，但也许会或也许不会产生现金流，这取决于新工厂、设备和产品开发对投资的需要量。明星型业务是由&lt;b&gt;问题型业务&lt;/b&gt;继续投资发展起来的，可以视为高速成长市场中的领导者，它将成为公司未来的&lt;b&gt;现金牛&lt;/b&gt;业务。&lt;br&gt;&lt;b&gt; （2）问题型业务（Question Marks，指高增长、低市场份额）&lt;/b&gt;&lt;br&gt;　　处在这个领域中的是一些投机性产品，带有较大的风险。这些产品可能利润率很高，但占有的市场份额很小。这往往是一个公司的新业务。为发展问题业务，公司必须建立工厂，增加设备和人员，以便跟上迅速发展的市场，并超过竞争对手，这些意味着大量的资金投入。“问题”非常贴切地描述了公司对待这类业务的态度，因为这时公司必须慎重回答“是否继续投资，发展该业务？”这个问题。只有那些符合企业发展长远目标、企业具有资源优势、能够增强企业核心竞争力的业务才得到肯定的回答。&lt;br&gt;　　如何选择问题型业务是用BCG矩阵制定战略的重中之重，也是难点，这关乎企业未来的发展。&lt;br&gt;&lt;b&gt;（3）现金牛业务（Cash cows，指低增长、高市场份额）&lt;/b&gt;&lt;br&gt;　　处在这个领域中的产品产生大量的现金，但未来的增长前景是有限的。这是成熟市场中的领导者，它是企业现金的来源。由于市场已经成熟，企业不必大量投资来扩展市场规模，同时作为市场中的领导者，该业务享有规模经济和高边际利润的优势，因而给企业带来大量现金流。企业往往用现金牛业务来支付帐款并支持其他三种需大量现金的业务。&lt;br&gt;&lt;b&gt;（4）瘦狗型业务（Dogs，指低增长、低市场份额）&lt;/b&gt;&lt;br&gt;　　这个剩下的领域中的产品既不能产生大量的现金，也不需要投入大量现金，这些产品没有希望改进其绩效。一般情况下，这类业务常常是微利甚至是亏损的，瘦狗型业务存在的原因更多的是由于感情上的因素，虽然一直微利经营，但象人养了多年的狗一样恋恋不舍而不忍放弃。&lt;/blockquote&gt;&lt;p&gt;　　Why BCG Matrix？BCG矩阵的精髓在于把战略规划和资本预算紧密结合了起来，把一个复杂的企业行为用两个重要的衡量指标来分为四种类型，用四个相对简单的分析来应对复杂的战略问题。该矩阵帮助多种经营的公司确定哪些产品宜于投资，宜于操纵哪些产品以获取利润，宜于从业务组合中剔除哪些产品，从而使业务组合达到最佳经营成效。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;编程语言在四象限中的位置&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;现在来看看Nnamdi文章总结出的模型中提到编程语言，分别站在哪个象限。&lt;/p&gt;&lt;p&gt;&lt;b&gt;第一象限（Star），明星象限。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;包含的语言有TypeScript、Go、Python、Ruby。按BCG矩阵模型来分析，在这个象限里的这些语言，都是明星语言。&lt;/p&gt;&lt;blockquote&gt;Python这两年人气飙升，简直就是国民语言。让很多人产生一种错觉，好像所有公司都在用Python，离不开Python。但它其实是伴随最近两三年数据分析、机器学习和深度学习领域升温而火。Python有很多易于使用的库和开源项目，它的语法也相对其他语言更加简单，像Jupyter notebooks 这种交互式可复制的计算环境越来越受数据工作组和科学家欢迎。&lt;br&gt;&lt;br&gt;Ruby，基本上是和Python年龄相仿的语言，但其成名比较晚，所以不如Python那么普及。前十年创业大潮飞速发展，Ruby随着Ruby on Rails框架而声名鹊起，然而，现在在国外市场占有率还在升高，但是在国内就有点「冷」。但Ruby并没有「死」。现在国内很多公司还在用Ruby，有大量职位空缺，然而找不到相应的开发者。Ruby已经进入了成熟期。&lt;br&gt;&lt;br&gt;Go，最近几年增长飞快，市场也逐渐有了占有率。它简化了编写并发代码的过程，这得益于Google内部的Go语言团队，他们认为未来代码会越来越庞大，多核处理和网络应用的开发成本会越来越高，所以Go就诞生了。&lt;br&gt;&lt;br&gt;Typescript和Javascript有很强的重合性，但是具有该语言经验的开发人员是一个相对独立于Javascript开发者之外的群体。它的特色是强类型语言。其实从2010年开始出现的新语言，基本都是强类型。&lt;/blockquote&gt;&lt;p&gt;作为明星象限的语言，它很有潜力成为未来为你产生「现金流」的语言，所以，如果现在还不会这些语言，那么就选一门好学学吧。&lt;/p&gt;&lt;p&gt;&lt;b&gt;第二象限（Question），问题象限。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;该象限中，包含Rust、Haskell、R、Scala等语言。&lt;/p&gt;&lt;blockquote&gt;首当其冲的就是Rust语言。增长率高的可怕，但是市场占有率现在还比较低。Rust在技术上是一种通用型系统语言，你可以用它实现操作系统、嵌入式、网络服务、Web应用、游戏等等。它经常被拿来和C++比较，因为它们的语法有相似性。Rust在Stackoverflow已经连续三年成为开发者最喜欢的语言了。Rust的特色是，内存安全、并发安全和高性能。&lt;br&gt;&lt;br&gt;Scala，常常被视为下一代Java。它结合了面向对象和函数式两种范式，非常适合并行和分布式。但是和Go、Rust相比，它的增长率明显变得缓慢了。虽然图中没有Kotlin，但Scala想超越Java的目标，现在可能会由Kotlin替它实现了。&lt;br&gt;&lt;br&gt;R受欢迎的原因和Python比较相似，在数据科学领域比较受欢迎。但是现在随着Julia的正式发布，可能将来增长率会变缓。&lt;br&gt;&lt;br&gt;Haskell，是一门纯函数式语言，属于学术型语言。功能虽然很强大，但也可能限制其适用性。Rust语言借鉴了Haskell很多东西，但Rust实用性比Haskell更强。虽然现在Haskell还有很多狂热粉，有一定增长率，但很难说他们这种热情可以持续多久。&lt;/blockquote&gt;&lt;p&gt;这些语言之所以被归为问题象限，是因为没有人真正知道未来这些语言能发挥多大作用，占什么位置。但它们也是有可能在未来为你产生「现金流」的语言。依照目前Rust的增长率，极有可能在未来3到5年内，落入到明星象限中。这些语言如果你还不会，那么选一门学吧。如果暂时没有精力，那么可以放到后面考虑，但一定要关注它们。&lt;/p&gt;&lt;p&gt;&lt;b&gt;第三象限（Dogs），瘦狗象限。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;落入这个象限的语言包括VB、matlab、Perl等。虽然微软在使劲给VB续命，但还是挡不住它生命逝去的速度。虽然还有一定的增长，但实际上在2018年已经失去了市场份额。这些语言就不过多介绍了。只有在你万不得已的情况下，你再去选择学习吧。&lt;/p&gt;&lt;p&gt;&lt;b&gt;第四象限（Cash Cows），现金牛象限&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;落入这个象限的语言，都是支撑大部分开发者生存的语言，开发者要靠这些语言支付账单。包括Java、Javascript、PHP、SQL、C/Cpp、Swift等。这些语言基本都失去了增长率，但它们还占有大部分的市场份额。这些语言分别占据了Web前端、后端、数据库、系统、移动端等领域。你要手头拮据，那么你的第一需求是要找一份工作，那么可以考虑学习它们中的一门。但也不是必须的，因为这并不意味着你学习明星象限或问题型象限内的语言就找不到工作。这只是意味着，它们的工作岗位比较多而已，但是工作岗位多，意味着竞争也很多，其实单按找工作来考虑的话，明星象限和现金牛象限是差不多的。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;结语&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;该文的目的是给你提供一个相对比较科学的视角，让你可以批判性地思考，如何选择一门编程语言这个问题。其实，编程语言这种事，就算你选错了，也没有关系。因为背后都是相通的。作为程序员，多学几门编程语言永远不会亏。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;参考资料：&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://wiki.mbalib.com/wiki/%E6%B3%A2%E5%A3%AB%E9%A1%BF%E7%9F%A9%E9%98%B5&quot;&gt;波士顿矩阵 - MBA智库百科&lt;/a&gt; &lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-26-53358012</guid>
<pubDate>Wed, 26 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>如何为Rust语言做贡献</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-25-53247517.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/53247517&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-818d6382f325e4c72dd189c455c57d0c_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;本文为之前我撰写的付费阅读文章之一，今天公开，祝读者们圣诞快乐！&lt;/blockquote&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;本文基于macOSX平台，通过对Rust 1.32 Nightly版本中rustdoc的一个ICE问题进行复盘，分析并记录整个Bug修复的过程。主要目的是，通过这个过程，来学习如何给Rust做贡献。&lt;/p&gt;&lt;p&gt;（阅读时间：17m）&lt;/p&gt;&lt;ol&gt;&lt;li&gt;缘起&lt;/li&gt;&lt;li&gt;Rust本地调试环境准备&lt;/li&gt;&lt;li&gt;ICE问题分析&lt;/li&gt;&lt;li&gt;调试代码&lt;/li&gt;&lt;li&gt;提交PR说明&lt;/li&gt;&lt;/ol&gt;&lt;hr&gt;&lt;h2&gt;缘起：&lt;/h2&gt;&lt;p&gt;在几周前，我发现了一个rustdoc的&lt;a href=&quot;https://github.com/rust-lang/rust/issues/55723&quot;&gt;ICE(issue 55723)&lt;/a&gt;，提交给了官方。但是官方指派修复此Bug的开发者QuietMisdreavus 难以复现该Bug。我本来以为Bug是因为多字节字符（比如全角符号之类）引起的，然而经过我仔细的测试，发现问题的根源在于尾随的「空格」。 &lt;/p&gt;&lt;p&gt;引起ICE错误的代码示例：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;/// ## For example:
///  
///  （arr[i]）
pub fn test_ice() {
    unimplemented!();
}&lt;/code&gt;&lt;p&gt;&lt;i&gt;注意：问题出自于上面代码中文档注释第二行，在&lt;code class=&quot;inline&quot;&gt;///&lt;/code&gt;后面实际上还有两个尾随空格。&lt;/i&gt; &lt;/p&gt;&lt;p&gt;也可以通过&lt;a href=&quot;https://github.com/ZhangHanDong/test_ice&quot;&gt;GitHub - ZhangHanDong/test_ice: reproduce ice:   issues-55723(https://github.com/rust-lang/rust/issues/55723)&lt;/a&gt;来查看此ICE复现的代码。&lt;/p&gt;&lt;p&gt;起初，QuietMisdreavus 看了test_ice，依旧没有发现问题。过了两天，他顿悟了，原来是因为他用的代码编辑器是Vim。当他往Vim里复制粘贴我的测试代码时，Vim可能会对代码中尾随空格做了某种处理，以至于他还是难以复现该Bug。（我终于找到一个黑Vim的理由了吗？）&lt;/p&gt;&lt;p&gt;在他纳闷的同时，我也开始对这个Bug进行了调查。最初，根据错误提示，我定位了到 &lt;a href=&quot;https://github.com/rust-lang/rust/blob/master/src/libsyntax/source_map.rs#L827&quot;&gt;libsyntax/source_map.rs#L827&lt;/a&gt;的&lt;code class=&quot;inline&quot;&gt;bytepos_to_file_charpos&lt;/code&gt;方法。具体报错的代码是该方法中第842行代码，如下所示：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;// We should never see a byte position in the middle of a
// character
assert!(bpos.to_u32() &amp;gt;= mbc.pos.to_u32() + mbc.bytes as u32);&lt;/code&gt;&lt;p&gt;Libsyntax/source_map，是Rust用来跟踪（track）单个crate中所有文件的源码位置（字节位置），并将其存储在&lt;code class=&quot;inline&quot;&gt;Span&lt;/code&gt;中，可以在需要的时候转换为代码的行和列。比如在出错的时候，展示出错代码的行和列。&lt;/p&gt;&lt;p&gt;而这行代码，不管它的上下文，只看注释就应该明白：字节的位置，不可能跑到字符内部。比如，一个字母&lt;code class=&quot;inline&quot;&gt;a&lt;/code&gt;，它就一个字节，位置不可能是半个字节。再比如，一个多字节字符&lt;code class=&quot;inline&quot;&gt;（&lt;/code&gt;，占3个字节，假如它的起始位置是0，那么，source_map在计算源码位置的时候，只能是，&lt;code class=&quot;inline&quot;&gt;0, 1-2-3, 4&lt;/code&gt;，如果位置在&lt;code class=&quot;inline&quot;&gt;[1,2,3]&lt;/code&gt;范围内，则会出错。&lt;/p&gt;&lt;p&gt;而我现在碰到的错，显然就是这个问题：&lt;b&gt;sorce_map在计算源码位置的时候，错误地把位置算到了多字节字符内部。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;知道了错误的原因，但如何修复呢？虽然是这行出错了，但Bug的根源不一定是这里。&lt;/p&gt;&lt;p&gt;于是我下载了Rust源码，准备开始调试。但是在本地编译Rust的时候，遇到了很多编译错误。一一搞定了，但是最后一个编译错误我怎么也搞不定，就这样过了三天，然后发现QuietMisdreavus 已经提交了修复该问题的PR。于是就完美的错过了这次成为Rust贡献者的机会。&lt;/p&gt;&lt;p&gt;但是，我依然没有停下我的步伐。终于，让我发现本地编译Rust失败的原因，恰好那天机器上安装了python，环境变量设置有点问题，也许是覆盖了cc连接器的查找路径。具体修复可以参考此issues：&lt;a href=&quot;https://github.com/rust-lang/rust/issues/55875&quot;&gt;build rust from source fail on macos 10.13.6 · Issue #55875 · rust-lang/rust · GitHub&lt;/a&gt;&lt;/p&gt;&lt;p&gt;终于，Rust编译搞定了。接下来，就让我复盘一下该ICE问题出现的整个过程，与此同时，记录并模拟一个修复Bug的过程（虽然不是我修复的）。主要目的是，通过这个过程，来学习如何给Rust做贡献。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Rust本地调试环境准备&lt;/h2&gt;&lt;p&gt;首先，在本地创建一个文件夹，并下载Rust源码：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;$ git clone https://github.com/rust-lang/rust.git&lt;/code&gt;&lt;p&gt;下载完以后，进入到Rust源码目录，执行下面命令：&lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;$ ./configuration&lt;/code&gt;&lt;p&gt;该命令会执行&lt;code class=&quot;inline&quot;&gt;src/bootstrap/configure.py&lt;/code&gt;脚本，在项目根目录下生成&lt;code class=&quot;inline&quot;&gt;config.toml&lt;/code&gt;文件。所以，在你的本地，也需要安装Python2.7 。&lt;/p&gt;&lt;p&gt;然后需要修改此&lt;code class=&quot;inline&quot;&gt;config.toml&lt;/code&gt;文件。下面给出修改参考：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;compiler-docs = false
submodules = false
configure-args = []
debug = true
codegen-units = 0
debug-assertions = true
debuginfo = true
debuginfo-lines = true
default-linker = &quot;cc&quot;
channel = &quot;nightly&quot;&lt;/code&gt;&lt;p&gt;具体什么意思，可以参考&lt;code class=&quot;inline&quot;&gt;config.toml&lt;/code&gt;文件中的注释。&lt;/p&gt;&lt;p&gt;接下来就可以开始构建Rust了。&lt;/p&gt;&lt;p&gt;&lt;b&gt;使用x.py&lt;/b&gt;&lt;/p&gt;&lt;p&gt;构建Rust使用&lt;code class=&quot;inline&quot;&gt;x.py&lt;/code&gt;是最方便的。它是内置的编排工具，可以用来构建文档、运行测试和编译rustc。这些工作之前是makefile，现在不需要了。&lt;/p&gt;&lt;p&gt;&lt;b&gt;构建Rust的三个阶段&lt;/b&gt;&lt;/p&gt;&lt;p&gt;因为Rust是一个自举的编译器，所以，可以通过旧的编译器来构建最新的版本。所以一般是分阶段来完成：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;b&gt;Stage0&lt;/b&gt;，下载最新beta版的编译器，这些x.py会自动完成。你也可以通过修改配置文件来使用其他版本的Rust。&lt;/li&gt;&lt;li&gt;&lt;b&gt;Stage1&lt;/b&gt;，使用Stage0阶段下载的beta版编译器来编译从Git仓库里下载的代码。最终生成Stage1版编译器。但是为了对其优化，还需要进行下一阶段。理论上，Stage1和Stage2编译器在功能上是相同的，但实际上还有些细微的差别。&lt;/li&gt;&lt;li&gt;&lt;b&gt;Stage2&lt;/b&gt;，用Stage1版编译器继续对源码进行编译，以便生成Stage2版编译器。&lt;/li&gt;&lt;li&gt;&lt;b&gt;Stage3&lt;/b&gt;，这个阶段是可选的。这是为了对编译器进行健全性检查。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;官方推荐的构建流程如下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code class=&quot;inline&quot;&gt;./x.py check&lt;/code&gt; ，先执行此命令，检查编译器是否可以构建。&lt;/li&gt;&lt;li&gt;&lt;code class=&quot;inline&quot;&gt;./x.py build -i --stage 1&lt;/code&gt;，进行Stage 0和Stage 1阶段的构建，最终构建完成Stage1的编译器。&lt;/li&gt;&lt;li&gt;&lt;code class=&quot;inline&quot;&gt;./x.py build -i --stage 2  --keep-stage 1&lt;/code&gt;，使用 &lt;code class=&quot;inline&quot;&gt;--keep-stage 1&lt;/code&gt;参数，在Stage1基础上进行增量式构建，最终编译出Stage2的编译器。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;得到这个编译器，在本地就可以使用了。然后将其加到Rustup工具链中。&lt;/p&gt;&lt;p&gt;&lt;b&gt;加入本地Rustup工具链&lt;/b&gt;&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;$ rustup toolchain link local build/x86_64-apple-darwin/stage2&lt;/code&gt;&lt;p&gt;语法为：&lt;code class=&quot;inline&quot;&gt;rustup toolchain link &amp;lt;name&amp;gt; build/&amp;lt;host-triple&amp;gt;/stage2&lt;/code&gt;，其中，&lt;code class=&quot;inline&quot;&gt;&amp;lt;host-triple&amp;gt;&lt;/code&gt;就是上面示例中的&lt;code class=&quot;inline&quot;&gt;x86_64-apple-darwin&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;到此为止，准备工作就已经做好了。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;ICE问题分析&lt;/h2&gt;&lt;p&gt;前面已经分析得出，问题的缘由是：&lt;b&gt;sorce_map在计算源码位置的时候，错误地把位置算到了多字节字符内部。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;但应该不是这个libsyntax库计算出的问题。官方开发者QuietMisdreavus在我发布的issues中指出，他猜测原因出在「计算Markdown中内部链接」时出现了错误。因为Rust的文档注释支持Markdown功能。为了更好地提升Rust项目中模块之间的相关性，官方提出了&lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/1946-intra-rustdoc-links.md&quot;&gt;rfcs/1946-intra-rustdoc-links.md at master · rust-lang/rfcs · GitHub&lt;/a&gt;，在Markdown中支持识别内部文件模块之间链接的功能。如果识别正确，则正常生成文档。如果识别错误，则提示一个警告。&lt;/p&gt;&lt;p&gt;比如，上面test_ice的文档注释代码：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;/// ## For example:
///  
///  （arr[i]）
pub fn test_ice() {
    unimplemented!();
}&lt;/code&gt;&lt;p&gt;应该生成下面的警告：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;warning: `[i]` cannot be resolved, ignoring it...
 --&amp;gt; src/test/rustdoc-ui/intra-link-span-ice-55723.rs:3:12
  |
3 | /// （array[i]）
  |             ^ cannot be resolved, ignoring
  |
  = note: #[warn(intra_doc_link_resolution_failure)] on by default
  = help: to escape `[` and `]` characters, just add &#39;\&#39; before them like `\[` or `\]`&lt;/code&gt;&lt;p&gt;因为这里&lt;code class=&quot;inline&quot;&gt;[i]&lt;/code&gt;并不是一个合法的Markdown链接。&lt;/p&gt;&lt;p&gt;但是现在，出现了ICE：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;note: Run with `RUST_BACKTRACE=1` for a backtrace.

error: internal compiler error: unexpected panic

note: the compiler unexpectedly panicked. this is a bug.

note: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports&lt;/code&gt;&lt;p&gt;那么现在，问题大概是发生在：&lt;i&gt;Rust识别出文档注释中&lt;code class=&quot;inline&quot;&gt;[i]&lt;/code&gt;不是Markdown链接，然后要抛出警告的时候，计算错了源码位置。&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;来看看相关源码：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;在&lt;code class=&quot;inline&quot;&gt;src/librustdoc/passes/collect_intra_doc_links.rs&lt;/code&gt;文件中的&lt;code class=&quot;inline&quot;&gt;resolution_failure&lt;/code&gt;方法，就是用来处理文档注释中链接识别失败后的情况。&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;fn resolution_failure( ... ) {
  // ...
    if dox.lines().count() == code_dox.lines().count() {
        let line_offset = dox[..link_range.start].lines().count();
        // The span starts in the `///`, so we don&#39;t have to account for the leading whitespace
        let code_dox_len = if line_offset &amp;lt;= 1 {
                doc_comment_padding
            } else {
                // The first `///`
                doc_comment_padding +
                    // Each subsequent leading whitespace and `///`
                    code_dox.lines().skip(1).take(line_offset - 1).fold(0, |sum, line| {
                   sum + doc_comment_padding + line.len() - line.trim().len()
             })
        };
        // Extract the specific span
        let sp = sp.from_inner_byte_pos(
                link_range.start + code_dox_len,
                link_range.end + code_dox_len,
        );
  // ...  
}&lt;/code&gt;&lt;p&gt;Rust处理文档注释，大致分成两部分来处理：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;文档注释符号&lt;code class=&quot;inline&quot;&gt;///&lt;/code&gt;，独立出来处理，代码里叫做&lt;code class=&quot;inline&quot;&gt;code_dox&lt;/code&gt;&lt;/li&gt;&lt;li&gt;注释的内容，独立处理，代码里叫做&lt;code class=&quot;inline&quot;&gt;dox&lt;/code&gt;。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;如下图所示：&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-9a6bdf4c17e62020f536cb11025c4c7e_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1992&quot; data-rawheight=&quot;1026&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-9a6bdf4c17e62020f536cb11025c4c7e&quot; data-watermark-src=&quot;v2-eb554a8a6e6c4a1cb60dad49d2b64179&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;这样分开处理是理所当然的，因为&lt;code class=&quot;inline&quot;&gt;///&lt;/code&gt;并不是Markdown内容。&lt;/p&gt;&lt;p&gt;在&lt;code class=&quot;inline&quot;&gt;resolution_failure&lt;/code&gt;方法中，需要计算非法链接出现的位置。那怎么计算呢？就是把code_dox的总长度计算出来，也就是行数乘以3。但为什么上面代码要写那么长呢？因为有可能在&lt;code class=&quot;inline&quot;&gt;///&lt;/code&gt;前面还会有空格。&lt;/p&gt;&lt;p&gt;其中每一行&lt;code class=&quot;inline&quot;&gt;///&lt;/code&gt;就会生成一个&lt;code class=&quot;inline&quot;&gt;span&lt;/code&gt;,最终，在计算位置的时候，通过&lt;code class=&quot;inline&quot;&gt;link_range.start + code_dox_len&lt;/code&gt;来定位非法链接的位置。&lt;/p&gt;&lt;p&gt;那么ICE的问题，极有可能是这个位置，计算到了多字节字符&lt;code class=&quot;inline&quot;&gt;（&lt;/code&gt;或&lt;code class=&quot;inline&quot;&gt;）&lt;/code&gt;的内部。&lt;/p&gt;&lt;p&gt;那么接下来，调试一下代码就能确定是不是这里的问题。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;调试代码&lt;/h2&gt;&lt;p&gt;Rust中提供了&lt;code class=&quot;inline&quot;&gt;debug!&lt;/code&gt;宏来输出Debug信息。所以，修改&lt;code class=&quot;inline&quot;&gt;resolution_failure&lt;/code&gt;方法中的代码，并加上Debug信息：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;if dox.lines().count() == code_dox.lines().count() {
            let line_offset = dox[..link_range.start].lines().count();
            debug!(&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;line_offset&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;handong!!! {:?} &quot;, line_offset);
            // The span starts in the `///`, so we don&#39;t have to account for the leading whitespace
            let code_dox_len = if line_offset &amp;lt;= 1 {
                doc_comment_padding
            } else {
                // The first `///`
                doc_comment_padding +
                    // Each subsequent leading whitespace and `///`
                    code_dox.lines().skip(1).take(line_offset - 1).fold(0, |sum, line| {
                        debug!(&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;handong!!! {:?}, {:?}, {:?}, {:?}, {:?} &quot;, sum, line, doc_comment_padding, line.len(), line.trim().len());
                        sum + doc_comment_padding + line.len() - line.trim().len()
                    })
            };
            debug!(&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;handong!!! code_dox_len: {:?} &quot;, code_dox_len);
            debug!(&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;handong!!! link_range.start: {:?} &quot;, link_range.start);
            debug!(&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;handong!!! link_range.end: {:?} &quot;, link_range.end);
            // Extract the specific span
            let sp = sp.from_inner_byte_pos(
                link_range.start + code_dox_len,
                link_range.end + code_dox_len,
            );&lt;/code&gt;&lt;p&gt;修改完以后，需要重新编译。执行下面的命令：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;$ ./x.py build -i --stage 2  --keep-stage 1&lt;/code&gt;&lt;p&gt;直接进行第二阶段编译即可。&lt;/p&gt;&lt;p&gt;编译完毕以后，在&lt;code class=&quot;inline&quot;&gt;src/test/rustdoc-ui/&lt;/code&gt;目录（这下面有很多intra-link相关的测试）下加入&lt;code class=&quot;inline&quot;&gt;intra-link-span-ice-55732.rs&lt;/code&gt;文件，并把测试代码加进去：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;/// ## For example:
///  
///  （arr[i]）
pub fn test_ice() {
    unimplemented!();
}&lt;/code&gt;&lt;p&gt;然后执行下面命令：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;$ RUST_LOG=debug rustdoc +local src/test/rustdoc-ui/intra-link-span-ice-55723.rs&lt;/code&gt;&lt;p&gt;该命令会打印出Rustc编译过程中所有的Debug信息，一开始我没想到会有那么多的Debug信息，导致我的终端都无响应了。后来，我又看编译器文档，发现可以指定输出特定模块的Debug信息，就是使用下面命令：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;$ RUST_LOG=rustdoc::passes rustdoc +local src/test/rustdoc-ui/intra-link-span-ice-55723.rs&lt;/code&gt;&lt;p&gt;因为修改的源码位置是&lt;code class=&quot;inline&quot;&gt;librustdoc/passes/&lt;/code&gt;目录下，所以给&lt;code class=&quot;inline&quot;&gt;RUST_LOG&lt;/code&gt;赋予&lt;code class=&quot;inline&quot;&gt;rustdoc::passes&lt;/code&gt;。注意，使用的是&lt;code class=&quot;inline&quot;&gt;rustdoc&lt;/code&gt;命令，加上&lt;code class=&quot;inline&quot;&gt;local&lt;/code&gt;。local是Rustup配置的本地工具链，也就是Stage2版本的编译器。&lt;/p&gt;&lt;p&gt;然后就可以看到输出的Debug信息，如下：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;DEBUG 2018-12-03T11:25:17Z: rustdoc::passes::collect_intra_doc_links:  dox : ======= &quot; ## For example:\n  \n  （arr[i]）&quot;
DEBUG 2018-12-03T11:25:17Z: rustdoc::passes::collect_intra_doc_links: &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;line_offset&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;handong!!! 3 
DEBUG 2018-12-03T11:25:17Z: rustdoc::passes::collect_intra_doc_links: &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;handong!!! 0, &quot;///  &quot;, 3, 5, 3 
DEBUG 2018-12-03T11:25:17Z: rustdoc::passes::collect_intra_doc_links: &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;handong!!! 5, &quot;///  （arr[i]）&quot;, 3, 17, 17 
DEBUG 2018-12-03T11:25:17Z: rustdoc::passes::collect_intra_doc_links: &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;handong!!! code_dox_len: 11 
DEBUG 2018-12-03T11:25:17Z: rustdoc::passes::collect_intra_doc_links: &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;handong!!! link_range.start: 29 
DEBUG 2018-12-03T11:25:17Z: rustdoc::passes::collect_intra_doc_links: &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;handong!!! link_range.end: 30 
thread &#39;&amp;lt;unnamed&amp;gt;&#39; panicked at &#39;assertion failed: bpos.to_u32() &amp;gt;= mbc.pos.to_u32() + mbc.bytes as u32&#39;, libsyntax/source_map.rs:842:17
note: Run with `RUST_BACKTRACE=1` for a backtrace.
error: internal compiler error: unexpected panic
note: the compiler unexpectedly panicked. this is a bug.
note: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports&lt;/code&gt;&lt;p&gt;看得出来，根据上面输出的信息，最终判断出错链接的位置是：&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;11 + 29 = 40&lt;/code&gt;&lt;/p&gt;&lt;p&gt;这个位置是字节的位置，大家可以数一下测试文件中文档字节位置40是在哪里。注意，换行在Rust中会被按一个空白符来计算。注意，这里面的多字节字符是3位。&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-849df13f913622d1d73a88f2bbd56984_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1738&quot; data-rawheight=&quot;700&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-849df13f913622d1d73a88f2bbd56984&quot; data-watermark-src=&quot;v2-f771424c054178bfb338134b333c8c47&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;如图，第40个字符正好是&lt;code class=&quot;inline&quot;&gt;]&lt;/code&gt;，那么最终位置恰好识别为&lt;code class=&quot;inline&quot;&gt;41&lt;/code&gt;，就正好落在了多字节字符&lt;code class=&quot;inline&quot;&gt;）&lt;/code&gt;的内部，从而引起错误。&lt;/p&gt;&lt;p&gt;那么这个计算失误是怎么引起来的呢。再回到代码中：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;sum + doc_comment_padding + line.len() - line.trim().len()&lt;/code&gt;&lt;p&gt;关键是这行代码。最后的&lt;code class=&quot;inline&quot;&gt;line.trim()&lt;/code&gt;方法，会将整行字符串头和尾两边的空格或制表符、换行符都去掉。这就导致文档注释第二行后面的空格，被trim给剪掉了。&lt;/p&gt;&lt;p&gt;前面说了，Rust计算位置分为两个部分。第一个部分是code_doc，也就是前面&lt;code class=&quot;inline&quot;&gt;///&lt;/code&gt;的总长度，这个是没问题的。但是把后面的空格个剪掉了，就导致计算markdown文档内容（Dox）的位置，少了两格。&lt;/p&gt;&lt;p&gt;这就是问题的原因了。&lt;/p&gt;&lt;p&gt;所以修复起来也比较简单，就是把trim方法，改成trim_start，只剪掉前面的空格，这样操作，不会影响Dox的计算，也不会影响到code_dox的计算。但官方开发者QuietMisdreavus说可能会有其他问题，这个就等他发新的issues吧。&lt;/p&gt;&lt;p&gt;现在把trim方法改成trim_start方法，然后重新编译Stage2版编译器，并执行rustdoc命令&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;$ ./x.py build -i --stage 2  --keep-stage 1 
$  RUST_LOG=rustdoc::passes rustdoc +local src/test/rustdoc-ui/intra-link-span-ice-55723.rs&lt;/code&gt;&lt;p&gt;输出结果如下：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;DEBUG 2018-12-03T11:48:33Z: rustdoc::passes::collect_intra_doc_links:  dox : ======= &quot; ## For example:\n  \n  （arr[i]）&quot;
DEBUG 2018-12-03T11:48:33Z: rustdoc::passes::collect_intra_doc_links: &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;line_offset&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;handong!!! 3 
DEBUG 2018-12-03T11:48:33Z: rustdoc::passes::collect_intra_doc_links: &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;handong!!! 0, &quot;///  &quot;, 3, 5, 5 
DEBUG 2018-12-03T11:48:33Z: rustdoc::passes::collect_intra_doc_links: &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;handong!!! 3, &quot;///  （arr[i]）&quot;, 3, 17, 17 
DEBUG 2018-12-03T11:48:33Z: rustdoc::passes::collect_intra_doc_links: &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;handong!!! code_dox_len: 9 
DEBUG 2018-12-03T11:48:33Z: rustdoc::passes::collect_intra_doc_links: &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;handong!!! link_range.start: 29 
DEBUG 2018-12-03T11:48:33Z: rustdoc::passes::collect_intra_doc_links: &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;handong!!! link_range.end: 30 
*warning: `[i]` cannot be resolved, ignoring it...*
 *--&amp;gt;*src/test/rustdoc-ui/intra-link-span-ice-55723.rs:3:11
  *|*
*3* *|*///  （arr[i]）
  *|*           *^* *cannot be resolved, ignoring*
  *|*
  *= note*: #[warn(intra_doc_link_resolution_failure)] on by default
  *= help*: to escape `[` and `]` characters, just add &#39;\&#39; before them like `\[` or `\]`&lt;/code&gt;&lt;p&gt;这个结果就很正常了。当然你也可以使用&lt;code class=&quot;inline&quot;&gt;#![deny(intra_doc_link_resolution_failure)]&lt;/code&gt;属性来消除上面的Warning。&lt;/p&gt;&lt;p&gt;最后，创建&lt;code class=&quot;inline&quot;&gt;src/test/rustdoc-ui/intra-link-span-ice-55723.stderr&lt;/code&gt;文件，将上面的warning信息加进去。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;提交PR说明&lt;/h2&gt;&lt;p&gt;在修改完Bug之后，就可以提交PR了。但是在提交PR之前，还需要运行一遍整个项目的测试，避免引入新的问题。&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;$ python x.py test --stage 1&lt;/code&gt;&lt;p&gt;通过运行此测试，发现代码违反了一些代码风格：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;./x.py test --stage 1
*Finished* dev [unoptimized] target(s) in 0.29s                                                                                  
Building stage0 tool tidy (x86_64-apple-darwin)                                                                                    
*Compiling* syn v0.14.9                                                                                                           
*Compiling* serde_derive v1.0.75                                                                                                  
*Compiling* tidy v0.1.0 (/Users/songxinxin/work/projects/rust/rust/src/tools/tidy)                                                
*Finished* release [optimized] target(s) in 31.45s                                                                               
tidy check
tidy error: /Users/Name/work/projects/rust/rust/src/librustdoc/passes/collect_intra_doc_links.rs:584: line longer than 100 chars
tidy error: /Users/Name/work/projects/rust/rust/src/test/rustdoc-ui/intra-link-span-ice-55723.rs:2: trailing whitespace
some tidy checks failed


command did not execute successfully: &quot;/Users/Name/work/projects/rust/rust/build/x86_64-apple-darwin/stage0-tools-bin/tidy&quot; &quot;/Users/Name/work/projects/rust/rust/src&quot; &quot;/Users/Name/work/projects/rust/rust/build/x86_64-apple-darwin/stage0/bin/cargo&quot; &quot;--no-vendor&quot; &quot;--quiet&quot;
expected success, got: exit code: 1&lt;/code&gt;&lt;p&gt;这个错误告诉我，&lt;code class=&quot;inline&quot;&gt;librustdoc/passes/collect_intra_doc_links.rs&lt;/code&gt;代码中第584行超过了100个字符。这个是通过&lt;code class=&quot;inline&quot;&gt;tidy&lt;/code&gt;这个工具发现的。除此之外，测试代码里还有两个尾随空格检测失败了。&lt;/p&gt;&lt;p&gt;584行是我加的测试代码，现在将其删除。而测试文件中的尾随空格，是故意加的，删掉就起不到测试效果了，所以将其保留。&lt;/p&gt;&lt;p&gt;使用GitHub标准&lt;code class=&quot;inline&quot;&gt;fork+pull&lt;/code&gt;的方式来提交PR，在PR提交之后，使用下面格式的回复来调用机器人。&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;r? @steveklabnik&lt;/code&gt;&lt;p&gt;这样一来，@rust-highfive机器人就会将此PR指派给@steveklabnik来进行review。&lt;/p&gt;&lt;p&gt;在Review之后，就会继续使用机器人来对PR进行下一步审核。格式如下：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;@bors: r+ 38fe8d2&lt;/code&gt;&lt;p&gt;@bors机器人就会来处理此PR，将此PR放到&lt;a href=&quot;https://buildbot2.rust-lang.org/homu/queue/rust&quot;&gt;Merge队列 - rust&lt;/a&gt;，然后运行一遍所有的测试。如果工作正常，@bors就会merge你的代码并关闭该PR。&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;小结&lt;/h2&gt;&lt;p&gt;通过梳理ICE问题分析和Bug修复的整个过程，明白了如何在本地搭建Rust调试环境，以及如何通过Debug信息来定位问题、分析问题，最终提交PR的整个流程。如果你想为Rust做点贡献，完全可以参考这个流程。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;更多的细节内容，请参考以下资料：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://rust-lang.github.io/rustc-guide/how-to-build-and-run.html&quot;&gt;How to build the compiler and run what you built - Guide to Rustc Development&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md&quot;&gt;https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-25-53247517</guid>
<pubDate>Tue, 25 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>「Rust每日新闻」本周精选 • 第二十五期</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-23-53059897.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/53059897&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-23599072636a1820bba7b49b9d586092_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;前言：&lt;br&gt;&lt;br&gt;从2018年开始，我每天会花1个小时关注Rust社区动态，并且在&lt;a href=&quot;http://rust.cc/&quot;&gt;Rust.CC论坛&lt;/a&gt;、&lt;a href=&quot;https://t.me/rust_daily_news&quot;&gt;tg channel&lt;/a&gt;、&lt;a href=&quot;https://steemit.com/@blackanger&quot;&gt;Steemit&lt;/a&gt;、&lt;a href=&quot;https://github.com/RustStudy/rust_daily_news&quot;&gt;GitHub&lt;/a&gt;、&lt;a href=&quot;https://www.yuque.com/chaosbot/rustnews&quot;&gt;语雀订阅&lt;/a&gt;都开通了Rust每日新闻，分享我每天的见闻，偶尔也夹杂了一些个人的观点。大半年过去了，Rust每日新闻已经成为了Rust社区群大家每天必看的内容。在这个知乎专栏里，每周会精选几篇Rust社区中的动态，和大家分享。分享的内容就不按时间排序了。&lt;br&gt;&lt;br&gt;2018-12-23&lt;/blockquote&gt;&lt;hr&gt;&lt;h2&gt;「付费阅读」系列&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/51479889&quot;&gt;如何为Rust语言做贡献&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/52032027&quot;&gt;Rust Quiz 11&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;官方新闻&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;通告Rust 1.31.1发布&lt;/h2&gt;&lt;p&gt;修复了一些问题。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://blog.rust-lang.org/2018/12/20/Rust-1.31.1.html&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「官方」Rust 2018中的过程宏&lt;/h2&gt;&lt;p&gt;官方博客介绍了Rust 2018 edition中过程宏的支持，重点介绍了过程宏基于TokenStream的工作机制，值得一阅。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://blog.rust-lang.org/2018/12/21/Procedural-Macros-in-Rust-2018.html&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Withoutboats眼中的Rust 2019：组织债务&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/52568974&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Rust最新动态摘要&lt;/h2&gt;&lt;h2&gt;rust&lt;/h2&gt;&lt;p&gt;审核中的PR：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/rust/pull/56939&quot;&gt;稳定化Pin API&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/rust/pull/56932&quot;&gt;重构core::iter模块（值得一看）&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/rust/pull/56926&quot;&gt;升级stdsimd子模块&lt;/a&gt;&lt;/li&gt;&lt;li&gt;href=&quot;https://github.com/rust-lang/rust/pull/57049&quot;&amp;gt;稳定化#[repr(packed(N))]&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/rust/pull/57051&quot;&gt;rustc依赖的库：parking_lot升级到0.7版本&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/rust/pull/57027/files&quot;&gt;代码优化(没想到Rust代码中也有乱用clone的情况)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;href=&quot;https://github.com/rust-lang/rust/pull/57002&quot;&amp;gt;稳定化Vec(Deque)::resize_with&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/rust/pull/56981&quot;&gt;RalfJung改进了miri的内存分配精准度&lt;/a&gt;&lt;/li&gt;&lt;li&gt;a href=&quot;https://github.com&lt;code class=&quot;inline&quot;&gt;/rust-lang/rust/pull/56998&quot;&amp;gt;&lt;/code&gt;为Arc&amp;lt;T&amp;gt;/Rc&amp;lt;T&amp;gt;增加Into&amp;lt;NonNull&amp;lt;T&amp;gt;&amp;gt;实现（引起了较多讨论）&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/rust/pull/56973&quot;&gt;在Release版本中提供最基本的CTFE跟踪（为了Debug？）&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;已合并的PR：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/rust/pull/55992&quot;&gt;扩展Pin文档并且将std::pin::Pinned改成了std::marker::PhantomPinned&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/rust/pull/56305&quot;&gt;miri得到了更新&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/rust/pull/56737&quot;&gt;TokeStream得到了改进: 优化了TokenStream以及其他类型&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/rust/pull/56751&quot;&gt;允许胖指针实现Hash&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/rust/pull/56931&quot;&gt;Rust 1.31.1 Release Note已更新&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/rust/pull/56863&quot;&gt;修复trait对象的Bug&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/rust/pull/56948&quot;&gt;更新LLVM子模块&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「官方」Rust 2018 edition 工具集&lt;/h2&gt;&lt;h2&gt;devtool&lt;/h2&gt;&lt;p&gt;本文介绍了Rust 2018 edition包含的工具集&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Rustfix&lt;/li&gt;&lt;li&gt;Clippy&lt;/li&gt;&lt;li&gt;Rustfmt&lt;/li&gt;&lt;li&gt;IDE support&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;未来：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;改进LLDB和GDB的Rust调试支持&lt;/li&gt;&lt;li&gt;完善RLS&lt;/li&gt;&lt;li&gt;让Cargo更强大&lt;/li&gt;&lt;li&gt;Rustdoc改进&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://blog.rust-lang.org/2018/12/17/Rust-2018-dev-tools.html&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;社区新闻&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;LeetCode现在已支持Rust&lt;/h2&gt;&lt;p&gt;中国版和美国版都支持了，另外了解到的消息是，目前是基于Rust stable 1.31版，而且还会持续跟进Rust Stable版本。在未来会逐渐加入常用的crate，这个看使用者反馈来持续改进。&lt;/p&gt;&lt;p&gt;刷Leetcode Rust代码的碰到问题可以加QQ群反馈。qq群号： 950323896，进群以后可以加微信群，直接向官方反馈问题。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/explore/&quot;&gt;Leetcode中国&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;nitric: Specs的继承者&lt;/h2&gt;&lt;p&gt;nitric是Specs作者新写的库，那么他为什么在苦心研究两年Specs之后，要革自己的命呢？在本文中他阐述了如下理由：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;并非是对specs的重构，也不是和specs竞争，也不会对Specs有任何影响，Specs也不会被弃用&lt;/li&gt;&lt;li&gt;nitric是打算提供一个更通用的解决方案&lt;/li&gt;&lt;li&gt;Specs已经有了自己的生态，所以需要独立出另外一个库继续开发&lt;/li&gt;&lt;li&gt;nitric是一个通用的数据处理库，一旦完成这个库，specs将成为nitric的前端&lt;/li&gt;&lt;li&gt;nitric的愿景是提供一系列的crate，这些crate是解决数据处理问题的标准方案&lt;/li&gt;&lt;li&gt;未来可以使用nitric的领域：游戏开发、游戏物理、模拟器、编译器、数据验证、图形用户界面等&lt;/li&gt;&lt;li&gt;nitric的哲学是：1. 只能以合理的组合方式解决单个问题。 2. 公开一个通用、可组合和强大的API&lt;/li&gt;&lt;li&gt;nitric会与其他数据结构兼容，比如ECS/CGS库等&lt;/li&gt;&lt;li&gt;也可以使用nitric来作为ECS，比如通过nitric-entity库。文章里也介绍了几个计划中的其他nitric crate。&lt;/li&gt;&lt;li&gt;Amethyst将继续使用Sepcs，未来是否会迁移到nitric，需要由RFC来推动&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;大家也不要太亦可赛艇，他只是先分享了计划，还未动工。不过已经有了代码仓库：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/torkleyy/nitric&quot;&gt;GitHub: nitric&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://gitlab.com/nitric/nitric&quot;&gt;GitLab: nitric&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://users.rust-lang.org/t/announcing-nitric-the-successor-of-specs/23388&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「嵌入式Rust」Rust对Arduino支持进展调查&lt;/h2&gt;&lt;p&gt;因为Arduino使用的是AVR微控制器，但Rust目前还未支持AVR。但Rust嵌入式开发组已经有计划支持AVR。&lt;/p&gt;&lt;p&gt;感兴趣的朋友可以关注此issues： &lt;a href=&quot;https://github.com/rust-embedded/wg/issues/3&quot;&gt;AVR support&lt;/a&gt;&lt;/p&gt;&lt;p&gt;目前也有一个avr-project GitHub项目组独立fork了Rust，提供了对AVR的支持。在官方Rust未支持AVR之前，可以使用这个，看上去还非常活跃。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/avr-rust&quot;&gt;avr-rust&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「访谈」Josh Triplett访谈&lt;/h2&gt;&lt;p&gt;Josh Triplett是一个开源软件贡活跃献者，他最近正和另外一个匿名资助者，准备向非盈利性开源组织Conservancy捐赠9万美元，用于继续推动开源软件的发展。这是对他的采访。&lt;/p&gt;&lt;p&gt;采访中，他提到Rust是他今年在开源社区看到的最激动人心的项目。他说：Rust给了我对计算未来的巨大希望。&lt;/p&gt;&lt;p&gt;也许Conservancy在拿到这笔捐赠后，可能帮助Rust完成组织治理的工作。（猜想）&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://sfconservancy.org/blog/2018/dec/18/JoshT/&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Warp 0.1.10发布&lt;/h2&gt;&lt;p&gt;Wary是另一个Rust Web框架，由Hyper作者开发。 新版本的功能简要：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;TLS支持&lt;/li&gt;&lt;li&gt;CORS&lt;/li&gt;&lt;li&gt;Websocket检测助手&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;依然计划和tower-web进行合并，但下一步主要是完善service trait。将来可以通过Service方便地添加tower式中间件。&lt;/p&gt;&lt;p&gt;（那官方Tide框架的中间件协议呢？也许tower式中间件协议在官方中间件协议稳定以后也会支持吧）&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://seanmonstar.com/post/181223452087/warp-v0110&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Tokio 2019展望&lt;/h2&gt;&lt;p&gt;主要是两件事：&lt;/p&gt;&lt;p&gt;一、 Async/Await支持&lt;/p&gt;&lt;p&gt;Tokio预计在Rust语言async/await稳定之后，正式支持该语法。如果你想在nightly上面使用async/await，可以使用async-await-preview。&lt;/p&gt;&lt;p&gt;目前tokio是以实验性功能来探索async/await的支持，比如一些特定的API会添加&lt;code class=&quot;inline&quot;&gt;_async&lt;/code&gt;后缀，一旦async/await稳定了，Tokio将立马采取重大的更新并去除这些后缀。默认情况下，比如，会将&lt;code class=&quot;inline&quot;&gt;tokio::run_async&lt;/code&gt;改成&lt;code class=&quot;inline&quot;&gt;tokio::run&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;那么futures-rs 0.1怎么办？然而并不能立马放弃对0.1的支持。&lt;/p&gt;&lt;p&gt;这是一个不断增长的生态系统，包括一些生产环境的应用，也使用了futures 0.1。Tokio会以向后兼容的方式来支持async/await，也就是说，同时支持async/await和futures 0.1。对于已经形成生态的系统而言，变革很困难，还需要和社区共同商讨过渡策略：&lt;a href=&quot;https://github.com/tokio-rs/tokio/issues/804&quot;&gt;关注此track issues&lt;/a&gt;&lt;/p&gt;&lt;p&gt;二、团队扩展&lt;/p&gt;&lt;p&gt;是时候扩展Tokio的开发和维护团队了，准备像Rust团队学习，分成多个工作组，不同的组负责Tokio的不同方面。当然这个过程还在讨论中。&lt;/p&gt;&lt;p&gt;同时也需要一些新手加入，帮助使用和发展Tokio。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://tokio.rs/blog/2018-12-recap-2018/&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「嵌入式Rust」实时消息框架RTFM发布0.4版&lt;/h2&gt;&lt;p&gt;嵌入式工作组的老大japaric发布的库，用于构建并发的实时系统，貌似基于RTFM语言。&lt;/p&gt;&lt;p&gt;RTFM语言旨在促进并发编程或嵌入式实时软件的开发。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://www.rtfm-lang.org/&quot;&gt;www.rtfm-lang.org&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://blog.japaric.io/rtfm-v4/&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;如何成为一个超级的Rust开发者&lt;/h2&gt;&lt;p&gt;这是一个「真香」的故事。&lt;/p&gt;&lt;p&gt;作者在去年看到Rust语言的时候，心想：&quot;呵呵，继续吹，继续炒。呵呵，我用C++照样可以完成同样的事，而且还拥有更多的控制权&quot;。&lt;/p&gt;&lt;p&gt;然而，今天这位作者写下了这篇博文，他说：“我之前的想法真是大错特错，错到底了！，当我潜下心来研究Rust，我发现，它是一门经过深思熟虑的语言，它的工作方式有别于我所知道的一切。”&lt;/p&gt;&lt;p&gt;他变成了Rust传道者。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://hashnode.com/post/how-to-become-a-rust-super-developer-cjpv1ee7e000buhs2aqrdw2ym&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;crates.io可视化报告&lt;/h2&gt;&lt;p&gt;截止2018年11月，已经达到2w个crates，但很多crate版本发布都小于6次release版本，生态系统依然很年轻。另外一些crate有100多个发布版本，有很多crate都是零依赖，但有3000个crate都依赖serde，所以，serde当之无愧是最流行的crate。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-b2c5eefa87f2b6663cadb086b50c5d5d_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;321&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-b2c5eefa87f2b6663cadb086b50c5d5d&quot; data-watermark-src=&quot;v2-f12044ee0a9ee4b7d6f368643249566f&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-0127dd4d1eb402352d2188d62c250813_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;311&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-0127dd4d1eb402352d2188d62c250813&quot; data-watermark-src=&quot;v2-ad616e9e57488cbad322e76b6e66af8e&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-8e123ce95de39cafa173f37a520fe7c2_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;472&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-8e123ce95de39cafa173f37a520fe7c2&quot; data-watermark-src=&quot;v2-5392d73898407644a9f1fce81ad4567c&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-2e1600465993a762486df7feeb2ec037_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;335&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-2e1600465993a762486df7feeb2ec037&quot; data-watermark-src=&quot;v2-9050d004c5d8bfca6898f75747cf2a05&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-699cd494970cad3571fd4519cce5f61a_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;292&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-699cd494970cad3571fd4519cce5f61a&quot; data-watermark-src=&quot;v2-60958b2515ff0f03ee07e59fc187aa37&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://8-p.info/visualizing-crates-io/&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;学习资源&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;Rust Quiz解读已更新到Quiz 21&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/time-and-spirit-hut&quot;&gt;去专栏 Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Cortex-M3 入门指南（二）：寄存器与 GPIO &lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/52855259&quot;&gt;Andy Lok：Cortex-M3 入门指南（二）：寄存器与 GPIO&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Serverless HTTP&lt;/h2&gt;&lt;p&gt;该文作者探索aws lambda平台的无服务器HTTP应用，并编写了一个crate，叫做lando，它以http crate为核心接口，以lambda为部署目标，来部署API网关。本文就是对lando的介绍。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/softprops/lando&quot;&gt;lando&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/@softprops/serverless-http-9a58f9b2df60&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「Rust扩展Python案例」快速JSON解析库&lt;/h2&gt;&lt;p&gt;基于PyO3库&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ijl/orjson&quot;&gt;orjson&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;解析工具选择之书&lt;/h2&gt;&lt;p&gt;有人写了一本书，罗列了现在的解析工具，比如nom、combine、pest等，提供了一些文档和示例，帮助你选择适合使用场景的解析工具。目测还在完善中。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://freemasen.github.io/parsers_presentation/&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「系列文章」Rust vs Swift&lt;/h2&gt;&lt;p&gt;作者从2015年开始写这一系列博客，直到昨天才发布了一个整理页面。感兴趣可以看看。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.chriskrycho.com/rust-and-swift.html&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;rust-derivative: 提供了替代&lt;code class=&quot;inline&quot;&gt;derive&lt;/code&gt;属性的宏&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/mcarton/rust-derivative&quot;&gt;rust-derivative&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://mcarton.github.io/rust-derivative/&quot;&gt;指南&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「Slides」魅力wasm-bindgen&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/tsukushi/attractions-and-interests-of-wasm-bindgen&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;项目&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;下沙：Rust+WASM+WebGL实现的游戏&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://sandspiel.club/&quot;&gt;sandspiel.club&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/maxbittker/sandspiel&quot;&gt;Code: sandspiel&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;新的MQTT异步客户端&lt;/h2&gt;&lt;p&gt;基于tokio，目前正在召人审核代码&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/AtherEnergy/rumqtt&quot;&gt;rumqtt&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/rust/comments/a79j5v/rumqtt_release_async_version/&quot;&gt;讨论贴&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「嵌入式Rust」可用于串行热敏打印机的embedded-hal驱动&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://crates.io/crates/thermal_printer&quot;&gt;thermal_printer&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;encoding_rs: Web兼容字符编码库&lt;/h2&gt;&lt;p&gt;这是WHATWG编码标准的高性能实现。被用于Firefox 56版本中，替代了uconv库。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/hsivonen/encoding_rs&quot;&gt;encoding_rs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://hsivonen.fi/encoding_rs/&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;用Rust编写的roguelike游戏发布了&lt;/h2&gt;&lt;p&gt;基于wasm和Rust，可以在线玩，也可以下载到Windows、Mac和Linux平台。 在Reddit贴中，还记录了感人的开发故事。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/rust/comments/a8be46/dose_response_roguelike_game_written_in_rust/&quot;&gt;Reddit 介绍贴&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://tryjumping.com/dose-response-roguelike/play/&quot;&gt;在线玩&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://tryjumping.itch.io/dose-response&quot;&gt;下载&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/tryjumping/dose-response&quot;&gt;源码&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「深度学习」运行时前端TVM支持（预发布）&lt;/h2&gt;&lt;p&gt;TVM的Rust绑定。TVM介绍：&lt;/p&gt;&lt;blockquote&gt; 有了 TVM，业界与学界开发者们可以快速、轻松地在各个系统（包括手机、嵌入式设备与低功耗芯片）上部署深度学习应用程序，同时无须担心资源与速度的限制。「TVM 作为神经网络和硬件后端之间的共同层，消除了为每类设备或服务器优化各自基础架构的需要。」TVM 项目负责人陈天奇表示，「我们的框架允许开发人员快速、轻松地部署和优化大量硬件设备上的深度学习系统。」&lt;br&gt; &lt;/blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ehsanmok/tvm-rust&quot;&gt;tvm-rust&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;p2p: 支持自定义协议的多路p2p网络库&lt;/h2&gt;&lt;p&gt;群友漂流的作品，据说是libp2p的轻量版本。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/driftluo/p2p&quot;&gt;p2p&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;ferrugo: JVM的Rust实现&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/maekawatoshiki/ferrugo&quot;&gt;ferrugo&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;工具与库&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;使用dutree分析磁盘使用情况&lt;/h2&gt;&lt;p&gt;该文是dutree的使用教程，dutree是Rust实现的磁盘分析工具。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/nachoparker/dutree&quot;&gt;dutree&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://ownyourbits.com/2018/03/25/analyze-disk-usage-with-dutree/&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;cargo-expand：查看宏展开结果&lt;/h2&gt;&lt;p&gt;serde作者实现的新包，包括声明宏和&lt;code class=&quot;inline&quot;&gt;#[derive]&lt;/code&gt;过程宏。&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;$ cargo expand&lt;/code&gt;&lt;p&gt;是对rustc命令的包装：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;$ cargo rustc --profile=check -- -Zunstable-options --pretty=expanded&lt;/code&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/dtolnay/cargo-expand&quot;&gt;cargo-expand&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「小工具」验证代码中内存使用&lt;/h2&gt;&lt;p&gt;QADAPT库可以验证代码中何时分配或丢弃内存。作者写了篇文章，以构建自定义内存分配器为例来讲解如何使用QADAPT库提供的&lt;code class=&quot;inline&quot;&gt;debug_assert!&lt;/code&gt;验证代码中内存分配情况。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/bspeice/qadapt&quot;&gt;qadapt&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://speice.io/2018/12/allocation-safety.html&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;nymic: 一个可以打印类型名字的库&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/myrrlyn/nymic&quot;&gt;nymic&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;加速并校准Rust的浮点数解析&lt;/h2&gt;&lt;p&gt;作者实现了一个库：&lt;a href=&quot;https://github.com/Alexhuszagh/rust-lexical&quot;&gt;rust-lexical&lt;/a&gt;，比Rust内置的浮点数解析器快4000倍，并且更加正确。而且支持no_std。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/rust/comments/a6j5j1/making_rust_float_parsing_fast_and_correct/&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;structview-rs: 用于将二进制数据转换为更高级的数据结构&lt;/h2&gt;&lt;p&gt;structview提供了更安全的API来转换&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://gitlab.com/ra_kete/structview-rs&quot;&gt;structview-rs&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;juniper-from-schema 发布&lt;/h2&gt;&lt;p&gt;作者用Juniper的过程中，发现需要Juniper缺少一个关键的东西：可以和客户端共享实际的Graphql架构的文件。虽然可以手工编写，但代码和scheme文件不会实时同步。作者用过程宏实现了可以自动生成scheme的库。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/davidpdrsn/juniper-from-schema&quot;&gt;juniper-from-schema&lt;/a&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-23-53059897</guid>
<pubDate>Sun, 23 Dec 2018 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
