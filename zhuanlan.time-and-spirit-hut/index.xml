<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>时光与精神小屋</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/</link>
<description></description>
<language>zh-cn</language>
<lastBuildDate>Sun, 09 Dec 2018 15:24:49 +0800</lastBuildDate>
<item>
<title>Rust Quiz 解读：Quiz 10</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-09-51948290.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/51948290&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt; 来自于RustFest 2018 大会上Alex Crichton 和 David Tolnay两位大佬的轻演讲主题：Rust Quiz  &lt;br&gt; &lt;br&gt;&lt;a href=&quot;https://github.com/dtolnay/rust-quiz&quot;&gt;rust-quiz源码&lt;/a&gt; &lt;br&gt;&lt;a href=&quot;https://dtolnay.github.io/rust-quiz/18&quot;&gt;在线练习和解答&lt;/a&gt; &lt;br&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=QtDj9R6vtA8&amp;amp;index=6&amp;amp;list=PLgC1L0fKd7UlpVTHVfLYVtudVx8CzbSxW&amp;amp;t=0s&quot;&gt;视频&lt;/a&gt; &lt;br&gt;&lt;br&gt; 不得不说，两位大佬出的题非常具有迷惑性，一不留神就落入了陷阱。   &lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;Quiz 10:&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;下面这段代码输出什么？&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;trait Trait {
    fn f(&amp;amp;self);
}

impl&amp;lt;&#39;a&amp;gt; dyn Trait + &#39;a {
    fn f(&amp;amp;self) {
        print!(&quot;1&quot;);
    }
}

impl Trait for bool {
    fn f(&amp;amp;self) {
        print!(&quot;2&quot;);
    }
}

fn main() {
    Trait::f(&amp;amp;true);
    Trait::f(&amp;amp;true as &amp;amp;dyn Trait);
    &amp;lt;_ as Trait&amp;gt;::f(&amp;amp;true);
    &amp;lt;_ as Trait&amp;gt;::f(&amp;amp;true as &amp;amp;dyn Trait);
    &amp;lt;bool as Trait&amp;gt;::f(&amp;amp;true);
}&lt;/code&gt;&lt;p&gt;&lt;b&gt;输出结果：22222&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;解读&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;考察要点：&lt;/b&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;trait基本用法&lt;/li&gt;&lt;li&gt;Rust 2018 edition新语法&lt;code class=&quot;inline&quot;&gt;dyn Trait&lt;/code&gt;&lt;/li&gt;&lt;li&gt;无歧义完全限定语法（Fully Qualified Syntax for Disambiguation）&lt;/li&gt;&lt;li&gt;triat 对象&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Quiz代码中定义了名为Trait的trait，包含了&lt;code class=&quot;inline&quot;&gt;f&lt;/code&gt;函数签名。&lt;/p&gt;&lt;p&gt;接下来是为此Trait内定义的&lt;code class=&quot;inline&quot;&gt;f&lt;/code&gt;函数添加默认的实现，也叫固有（inherent）实现。此处使用了Rust 2018 edition的新语法：&lt;code class=&quot;inline&quot;&gt;dyn Trait&lt;/code&gt;。其实&lt;code class=&quot;inline&quot;&gt;impl&amp;lt;&#39;a&amp;gt; dyn Trait + &#39;a {&lt;/code&gt;等价于Rust 2015中&lt;code class=&quot;inline&quot;&gt;impl&amp;lt;&#39;a&amp;gt; Trait + &#39;a {&lt;/code&gt;的写法。&lt;/p&gt;&lt;p&gt;在Rust 2015中，直接为Trait实现固有方法，和&lt;code class=&quot;inline&quot;&gt;impl Trait for SomeType&lt;/code&gt;这种写法容易混淆。对于直接的&lt;code class=&quot;inline&quot;&gt;impl Trait {}&lt;/code&gt;来说，其实是为&lt;code class=&quot;inline&quot;&gt;trait Object&lt;/code&gt;实现固有方法。所以在Rust 2018 edition中引入了&lt;code class=&quot;inline&quot;&gt;dyn&lt;/code&gt;关键字，表示&lt;code class=&quot;inline&quot;&gt;trait Object&lt;/code&gt;，&lt;code class=&quot;inline&quot;&gt;impl dyn Trait {}&lt;/code&gt;比起“裸写的” &lt;code class=&quot;inline&quot;&gt;impl Trait {}&lt;/code&gt;可读性要高。&lt;/p&gt;&lt;p&gt;而且&lt;code class=&quot;inline&quot;&gt;dyn Trait&lt;/code&gt;和新引入的&lt;code class=&quot;inline&quot;&gt;impl Trait语法&lt;/code&gt;相对应。一个表示动态分发，一个表示静态分发。&lt;/p&gt;&lt;p&gt;所以，Quiz代码中，&lt;code class=&quot;inline&quot;&gt;impl&amp;lt;&#39;a&amp;gt; dyn Trait + &#39;a {...}&lt;/code&gt;是为了实现Trait的&lt;code class=&quot;inline&quot;&gt;trait Object&lt;/code&gt;实现固有方法&lt;code class=&quot;inline&quot;&gt;f&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;接下来，&lt;code class=&quot;inline&quot;&gt;impl Trait for bool {...}&lt;/code&gt;为&lt;code class=&quot;inline&quot;&gt;bool&lt;/code&gt;布尔类型实现Trait，同样实现了&lt;code class=&quot;inline&quot;&gt;f&lt;/code&gt;方法。&lt;/p&gt;&lt;p&gt;至此，&lt;code class=&quot;inline&quot;&gt;bool&lt;/code&gt;类型可以调用&lt;code class=&quot;inline&quot;&gt;f&lt;/code&gt;方法，而任何实现了Trait的&lt;code class=&quot;inline&quot;&gt;trait Object&lt;/code&gt;也可以调用默认实现的固有&lt;code class=&quot;inline&quot;&gt;f&lt;/code&gt;方法。&lt;/p&gt;&lt;p&gt;&lt;b&gt;那么，在main函数中的五种调用方法，到底调用哪个&lt;code class=&quot;inline&quot;&gt;f&lt;/code&gt;呢？&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;Trait::f(&amp;amp;true);&lt;/code&gt;，这种写法是Rust中常用的写法，通过指定&lt;code class=&quot;inline&quot;&gt;Trait::&lt;/code&gt;前缀，并且传入具体类型实例的引用&lt;code class=&quot;inline&quot;&gt;&amp;amp;true&lt;/code&gt;来调用对应的&lt;code class=&quot;inline&quot;&gt;f&lt;/code&gt;方法。在Quiz代码中，明确地为&lt;code class=&quot;inline&quot;&gt;bool&lt;/code&gt;类型实现了Trait，所以这里自然输出： 2。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;Trait::f(&amp;amp;true as &amp;amp;dyn Trait);&lt;/code&gt; ，这种写法类似于第一种，但是通过&lt;code class=&quot;inline&quot;&gt;as&lt;/code&gt;关键字将&lt;code class=&quot;inline&quot;&gt;&amp;amp;true&lt;/code&gt;转换为了trait对象&lt;code class=&quot;inline&quot;&gt;&amp;amp;dyn Trait&lt;/code&gt;类型。然而，对于Rust编译器来说，它已明确知道这还是&lt;code class=&quot;inline&quot;&gt;bool&lt;/code&gt;类型。在更精确的&lt;code class=&quot;inline&quot;&gt;bool&lt;/code&gt;和trait对象&lt;code class=&quot;inline&quot;&gt;&amp;amp;dyn Trait&lt;/code&gt;之间，编译器肯定要选择那个更精确的类型。所以，这里也会输出： 2。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;&amp;lt;_ as Trait&amp;gt;::f(&amp;amp;true);&lt;/code&gt; ，这种写法，叫做&lt;b&gt;无歧义完全限定语法（Fully Qualified Syntax for Disambiguation）&lt;/b&gt;，这种语法之前也被称为&lt;b&gt;通用函数调用语法（UFCS）&lt;/b&gt;。通过&lt;code class=&quot;inline&quot;&gt;&amp;lt;_ as Trait&amp;gt;&lt;/code&gt;，来指定实现了Trait的类型，调用的是&lt;code class=&quot;inline&quot;&gt;Trait&lt;/code&gt;中实现的方法。&lt;code class=&quot;inline&quot;&gt;_&lt;/code&gt;此处泛指实现了Trait的类型，Rust会根据上下文进行自动推断。所以，必然会去使用&lt;code class=&quot;inline&quot;&gt;impl Trait for bool&lt;/code&gt;中定义的&lt;code class=&quot;inline&quot;&gt;f&lt;/code&gt;实现。所以，这行代码依旧输出： 2。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;&amp;lt;_ as Trait&amp;gt;::f(&amp;amp;true as &amp;amp;dyn Trait);&lt;/code&gt;，同理，即便转为了trait对象，也还是去寻找为具体类型&lt;code class=&quot;inline&quot;&gt;bool&lt;/code&gt;实现的&lt;code class=&quot;inline&quot;&gt;f&lt;/code&gt;方法。所以，输出：2。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;&amp;lt;bool as Trait&amp;gt;::f(&amp;amp;true);&lt;/code&gt;，这句和&lt;code class=&quot;inline&quot;&gt;&amp;lt;_ as Trait&amp;gt;::f(&amp;amp;true);&lt;/code&gt;等价，只不过这里指定了&lt;code class=&quot;inline&quot;&gt;bool&lt;/code&gt;类型。所以，继续输出： 2。&lt;/p&gt;&lt;p&gt;目前，Rust还不提供直接调用trait对象中定义的默认实现的语法。除非，把trait对象中实现的方法换成不同的名称。比如：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;trait Trait {
    fn f(&amp;amp;self);
}

impl&amp;lt;&#39;a&amp;gt; dyn Trait + &#39;a {
    fn ff(&amp;amp;self) {
        print!(&quot;1&quot;);
    }
}

impl Trait for bool {
    fn f(&amp;amp;self) {
        print!(&quot;2&quot;);
    }
}

fn main() {
    Trait::f(&amp;amp;true);
    Trait::ff(&amp;amp;true);
    Trait::ff(&amp;amp;true as &amp;amp;dyn Trait);
}&lt;/code&gt;&lt;p&gt;这会输出： &lt;code class=&quot;inline&quot;&gt;211&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;注意main函数中最后两行：&lt;code class=&quot;inline&quot;&gt;Trait::ff(&amp;amp;true);&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;Trait::ff(&amp;amp;true as &amp;amp;dyn Trait);&lt;/code&gt;。这说明，没有为&lt;code class=&quot;inline&quot;&gt;bool&lt;/code&gt;类型实现&lt;code class=&quot;inline&quot;&gt;ff&lt;/code&gt;方法，Rust也会去trait对象的默认实现中去&lt;code class=&quot;inline&quot;&gt;查询&lt;/code&gt;该方法。&lt;/p&gt;&lt;p&gt;但是如果使用了无歧义完全限定语法，则不会这样做。比如：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;trait Trait {
    fn f(&amp;amp;self);
}

impl&amp;lt;&#39;a&amp;gt; dyn Trait + &#39;a {
    fn ff(&amp;amp;self) {
        print!(&quot;1&quot;);
    }
}

impl Trait for bool {
    fn f(&amp;amp;self) {
        print!(&quot;2&quot;);
    }
}

fn main() {
    &amp;lt;_ as Trait&amp;gt;::ff(&amp;amp;true);
    &amp;lt;_ as Trait&amp;gt;::ff(&amp;amp;true as &amp;amp;dyn Trait);
    &amp;lt;bool as Trait&amp;gt;::ff(&amp;amp;true);
}&lt;/code&gt;&lt;p&gt;这样写会报错：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;error[E0576]: cannot find method or associated constant `ff` in trait `Trait`
  --&amp;gt; src/main.rs:20:19
   |
20 |     &amp;lt;_ as Trait&amp;gt;::ff(&amp;amp;true);
   |                   ^^ did you mean `f`?

error[E0576]: cannot find method or associated constant `ff` in trait `Trait`
  --&amp;gt; src/main.rs:21:19
   |
21 |     &amp;lt;_ as Trait&amp;gt;::ff(&amp;amp;true as &amp;amp;dyn Trait);
   |                   ^^ did you mean `f`?

error[E0576]: cannot find method or associated constant `ff` in trait `Trait`
  --&amp;gt; src/main.rs:22:22
   |
22 |     &amp;lt;bool as Trait&amp;gt;::ff(&amp;amp;true);
   |                      ^^ did you mean `f`?

error: aborting due to 3 previous errors&lt;/code&gt;&lt;p&gt;因为，已经通过&lt;code class=&quot;inline&quot;&gt;&amp;lt;_ as Trait&amp;gt;&lt;/code&gt;这样的写法，已经明确指定了调用&lt;code class=&quot;inline&quot;&gt;impl Trait for bool&lt;/code&gt;中实现的&lt;code class=&quot;inline&quot;&gt;f&lt;/code&gt;方法，这时候调用&lt;code class=&quot;inline&quot;&gt;ff&lt;/code&gt;方法，显然，不会找到。&lt;/p&gt;&lt;h2&gt;&lt;a href=&quot;https://dtolnay.github.io/rust-quiz/10&quot;&gt;点此查看 Rust Quiz 10&lt;/a&gt; &lt;/h2&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-09-51948290</guid>
<pubDate>Sun, 09 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>Rust Quiz 解读：Quiz 9</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-08-51891075.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/51891075&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt; 来自于RustFest 2018 大会上Alex Crichton 和 David Tolnay两位大佬的轻演讲主题：Rust Quiz  &lt;br&gt; &lt;br&gt;- &lt;a href=&quot;https://github.com/dtolnay/rust-quiz&quot;&gt;rust-quiz源码&lt;/a&gt; &lt;br&gt;- &lt;a href=&quot;https://dtolnay.github.io/rust-quiz/18&quot;&gt;在线练习和解答&lt;/a&gt; &lt;br&gt;- &lt;a href=&quot;https://www.youtube.com/watch?v=QtDj9R6vtA8&amp;amp;index=6&amp;amp;list=PLgC1L0fKd7UlpVTHVfLYVtudVx8CzbSxW&amp;amp;t=0s&quot;&gt;视频&lt;/a&gt; &lt;br&gt;&lt;br&gt; 不得不说，两位大佬出的题非常具有迷惑性，一不留神就落入了陷阱。   &lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;Quiz 9:&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;下面这段代码输出什么？&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;macro_rules! m {
    (1) =&amp;gt; { print!(&quot;1&quot;) };
    ($tt:tt) =&amp;gt; { print!(&quot;2&quot;) };
}

macro_rules! e {
    ($e:expr) =&amp;gt; { m!($e) };
}

macro_rules! t {
    ($tt:tt) =&amp;gt; { e!($tt); m!($tt); };
}

fn main() {
    t!(1);
}&lt;/code&gt;&lt;p&gt;&lt;b&gt;输出结果： 21&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;解读&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;考察要点：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;声明宏基本匹配规则&lt;/li&gt;&lt;li&gt;声明宏元变量匹配的可传导性&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Quiz代码中依次定义了三个声明宏，&lt;code class=&quot;inline&quot;&gt;m!&lt;/code&gt;、&lt;code class=&quot;inline&quot;&gt;e!&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;t!&lt;/code&gt;，并且依次是包含关系。&lt;/p&gt;&lt;p&gt;在main函数中，调用&lt;code class=&quot;inline&quot;&gt;t!(1)&lt;/code&gt;时，根据宏定义，其参数&lt;code class=&quot;inline&quot;&gt;1&lt;/code&gt;经过词法分析得到词条树，也就是宏元变量&lt;code class=&quot;inline&quot;&gt;$tt:tt&lt;/code&gt;的类型&lt;code class=&quot;inline&quot;&gt;tt&lt;/code&gt;所指示。然后由&lt;code class=&quot;inline&quot;&gt;e!($tt);&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;m!($tt);&lt;/code&gt;继续匹配。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;e!($tt)&lt;/code&gt;在匹配过程中，因为&lt;code class=&quot;inline&quot;&gt;e!&lt;/code&gt;定义左边元变量&lt;code class=&quot;inline&quot;&gt;$e:expr&lt;/code&gt;，表明是一个表达式类型。对于Rust编译器来说，经过&lt;code class=&quot;inline&quot;&gt;e!&lt;/code&gt;宏处理的词条，将会变成一个不透明的词条（opaque token tree）。也就是说，后续的宏都会认为它是一个表达式token，而不是其他。所以，在&lt;code class=&quot;inline&quot;&gt;e!&lt;/code&gt;宏内匹配右侧&lt;code class=&quot;inline&quot;&gt;m!($e);&lt;/code&gt;的时候，只能匹配&lt;code class=&quot;inline&quot;&gt;m!&lt;/code&gt;宏的第二条分支&lt;code class=&quot;inline&quot;&gt;($tt:tt)&lt;/code&gt;，所以输出： 2。&lt;/p&gt;&lt;p&gt;如果试着在&lt;code class=&quot;inline&quot;&gt;m!&lt;/code&gt;中加一条匹配分支：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;macro_rules! m {
    (1) =&amp;gt; { print!(&quot;1&quot;) };
    ($ee;expr) =&amp;gt; { print!(&quot;3&quot;)};
    ($tt:tt) =&amp;gt; { print!(&quot;2&quot;) };
}&lt;/code&gt;&lt;p&gt;输出结果就会变成： &lt;code class=&quot;inline&quot;&gt;31&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;对于&lt;code class=&quot;inline&quot;&gt;m!(1)&lt;/code&gt;来说，它一直以&lt;code class=&quot;inline&quot;&gt;tt&lt;/code&gt;词条树类型来传播，到最后会尝试匹配到&lt;code class=&quot;inline&quot;&gt;(1)&lt;/code&gt;这个token字面量，然后匹配成功，最后输出： &lt;code class=&quot;inline&quot;&gt;1&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;这就是为什么输出结果是&lt;code class=&quot;inline&quot;&gt;21&lt;/code&gt;的原因。&lt;/p&gt;&lt;p&gt;同理，如果把&lt;code class=&quot;inline&quot;&gt;e!&lt;/code&gt;的匹配模式修改为：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;macro_rules! e {
    ($e:tt) =&amp;gt; { m!($e) };
}&lt;/code&gt;&lt;p&gt;则输出结果会是：&lt;code class=&quot;inline&quot;&gt;11&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;&lt;b&gt;不透明词条树（Opaque Token Tree）&lt;/b&gt;&lt;/p&gt;&lt;p&gt;所谓不透明词条树（Opaque Token Tree），就是指，不能和token字面量相匹配的词条树。&lt;/p&gt;&lt;p&gt;尝试把Quiz代码中&lt;code class=&quot;inline&quot;&gt;m!&lt;/code&gt;定义中的匹配分支修改如下：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;macro_rules! m {
    (1) =&amp;gt; { print!(&quot;1&quot;) };
}&lt;/code&gt;&lt;p&gt;再去执行Quiz代码，编译器会报错：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;error: no rules expected the token `1`
  --&amp;gt; src/main.rs:6:23
   |
6  |     ($e:expr) =&amp;gt; { m!($e) };
   |                       ^^
...
14 |     t!(1);
   |     ------ in this macro invocation&lt;/code&gt;&lt;p&gt;编译器提示：no rules expected the token &lt;code class=&quot;inline&quot;&gt;1&lt;/code&gt;。这意味着，&lt;code class=&quot;inline&quot;&gt;expr&lt;/code&gt;不能与&lt;code class=&quot;inline&quot;&gt;1&lt;/code&gt;这个token字面量相匹配。这就是所谓的「不透明词条」。&lt;/p&gt;&lt;p&gt;在Rust中，不透明词条类型除了&lt;code class=&quot;inline&quot;&gt;expr&lt;/code&gt;，还有其他类型，罗列如下：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;$:block
$:expr
$:item
$:literal
$:meta
$:pat
$:path
$:stmt
$:ty&lt;/code&gt;&lt;p&gt;而透明的词条如下：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;$:ident
$:lifetime
$:tt&lt;/code&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://dtolnay.github.io/rust-quiz/9&quot;&gt;点此查看 Rust Quiz 9&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-08-51891075</guid>
<pubDate>Sat, 08 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>Rust Quiz 解读：Quiz 8</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-07-51809530.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/51809530&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt; 来自于RustFest 2018 大会上Alex Crichton 和 David Tolnay两位大佬的轻演讲主题：Rust Quiz  &lt;br&gt; &lt;br&gt;- &lt;a href=&quot;https://github.com/dtolnay/rust-quiz&quot;&gt;rust-quiz源码&lt;/a&gt; &lt;br&gt;- &lt;a href=&quot;https://dtolnay.github.io/rust-quiz/18&quot;&gt;在线练习和解答&lt;/a&gt; &lt;br&gt;- &lt;a href=&quot;https://www.youtube.com/watch?v=QtDj9R6vtA8&amp;amp;index=6&amp;amp;list=PLgC1L0fKd7UlpVTHVfLYVtudVx8CzbSxW&amp;amp;t=0s&quot;&gt;视频&lt;/a&gt; &lt;br&gt; &lt;br&gt;不得不说，两位大佬出的题非常具有迷惑性，一不留神就落入了陷阱。  &lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;Quiz 8:&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;下面这段代码输出什么？&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;macro_rules! m {
    (==&amp;gt;) =&amp;gt; { print!(&quot;1&quot;); };
    (= = &amp;gt;) =&amp;gt; { print!(&quot;2&quot;); };
    (== &amp;gt;) =&amp;gt; { print!(&quot;3&quot;); };
    (= =&amp;gt;) =&amp;gt; { print!(&quot;4&quot;); };
}

fn main() {
    m!(==&amp;gt;);
    m!(= = &amp;gt;);
    m!(== &amp;gt;);
    m!(= =&amp;gt;);
}&lt;/code&gt;&lt;p&gt;&lt;b&gt;输出结果: 1214&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;解读&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;考察要点：&lt;/b&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code class=&quot;inline&quot;&gt;macro_rules!&lt;/code&gt;定义宏匹配规则&lt;/li&gt;&lt;li&gt;理解词法分析中的token&lt;/li&gt;&lt;li&gt;操作符优先级&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Rust中使用&lt;code class=&quot;inline&quot;&gt;macro_rules!&lt;/code&gt;来定义声明宏，将来也会稳定&lt;code class=&quot;inline&quot;&gt;macro&lt;/code&gt;关键字。但基本的核心是不变的。Rust语言因为还在发展期，所以无法像其他很多语言一样，把AST（抽象语法树）暴露出来给开发者使用。导致现在Rust的宏，都是基于分词解析后形成的词条流（TokenStream）来编写宏。&lt;/p&gt;&lt;p&gt;所以，你可以把声明宏理解为是TokenStream模板。其实声明宏也有另外一个名字：「macro by example」&lt;/p&gt;&lt;p&gt;声明宏的语法规则是这样的：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;macro_rules! $name {
    $rule0 ;
    $rule1 ;
    // …
    $ruleN ;
}&lt;/code&gt;&lt;p&gt;一个声明宏里可以包含多个规则（$rule）。一般来说，声明宏的时候，规则模式经常使用下面的标识符来匹配对应的项：&lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;item: 条目，比如函数、结构体、模组等。
block: 区块(即由花括号包起的一些语句加上/或是一项表达式)。
stmt: 语句
pat: 模式
expr: 表达式
ty: 类型
ident: 标识符
path: 路径 (例如 foo, ::std::mem::replace, transmute::&amp;lt;_, int&amp;gt;, …)
meta: 元条目，即被包含在 #[...]及#![...]属性内的东西。
tt: 标记树&lt;/code&gt;&lt;p&gt;比如在Quiz 1中见到的：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;macro_rules! m {
    ($($s:stmt)*) =&amp;gt; {
        $(
            { stringify!($s); 1 }
        )&amp;lt;&amp;lt;*
    };
}&lt;/code&gt;&lt;p&gt;其中&lt;code class=&quot;inline&quot;&gt;$s:stmt&lt;/code&gt;表示匹配一个语句。而Quiz 8中声明的这个宏，其匹配规则并没有使用任何标识符。而是直接使用了&lt;code class=&quot;inline&quot;&gt;==&amp;gt;&lt;/code&gt;或&lt;code class=&quot;inline&quot;&gt;= = &amp;gt;&lt;/code&gt;这样的值，这叫做&lt;code class=&quot;inline&quot;&gt;token字面量&lt;/code&gt;。它表示，Rust编译器中的宏解释器会把它作为token进行匹配。&lt;/p&gt;&lt;p&gt;所以，在上面Quiz 8的代码中，定义声明宏&lt;code class=&quot;inline&quot;&gt;m!&lt;/code&gt;，包含了四个匹配模式。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;(==&amp;gt;)&lt;/code&gt;，表示要直接和分词得到的token流进行匹配，那么它能匹配的是两个token：&lt;code class=&quot;inline&quot;&gt;==&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;&amp;gt;&lt;/code&gt;。因为是从左往右进行匹配。在Rust中，&lt;code class=&quot;inline&quot;&gt;==&lt;/code&gt;是一个完整的token。但是有的人可能会想，为什么不是匹配成&lt;code class=&quot;inline&quot;&gt;=&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;=&amp;gt;&lt;/code&gt;呢？这是因为在Rust里&lt;code class=&quot;inline&quot;&gt;==&lt;/code&gt;（ 比较操作符）的优先级要高于&lt;code class=&quot;inline&quot;&gt;=&lt;/code&gt;（赋值操作符）。所以，在执行&lt;code class=&quot;inline&quot;&gt;m!(==&amp;gt;);&lt;/code&gt;的时候，输出：1。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;(= = &amp;gt;)&lt;/code&gt;，那么同理，匹配&lt;code class=&quot;inline&quot;&gt;=&lt;/code&gt;、&lt;code class=&quot;inline&quot;&gt;=&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;&amp;gt;&lt;/code&gt;。注意匹配模式中包含的空格是忽略不计的，空格的作用，其实就是为了帮助编译器识别如何「断句」。所以，在执行&lt;code class=&quot;inline&quot;&gt;m!(= = &amp;gt;)&lt;/code&gt;的时候，当然输出： 2。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;(== &amp;gt;)&lt;/code&gt;，其实和&lt;code class=&quot;inline&quot;&gt;(==&amp;gt;)&lt;/code&gt;是一样的。不一样的是它们在宏定义中出现的位置。这里执行&lt;code class=&quot;inline&quot;&gt;m!(== &amp;gt;);&lt;/code&gt;输出是：1。这个差别待会再解释。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;(= =&amp;gt;);&lt;/code&gt;，同理，匹配&lt;code class=&quot;inline&quot;&gt;=&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;=&amp;gt;&lt;/code&gt;，所以在执行&lt;code class=&quot;inline&quot;&gt;m!(= =&amp;gt;);&lt;/code&gt;的时候，输出：4。&lt;/p&gt;&lt;p&gt;最终结果是：&lt;code class=&quot;inline&quot;&gt;1214&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;&lt;b&gt;那么，为什么&lt;code class=&quot;inline&quot;&gt;m!(== &amp;gt;);&lt;/code&gt;无法输出 3 呢？&lt;/b&gt;&lt;/p&gt;&lt;p&gt;我们把代码修改一下：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;macro_rules! m {
    (== &amp;gt;) =&amp;gt; { print!(&quot;3&quot;); };
    (= = &amp;gt;) =&amp;gt; { print!(&quot;2&quot;); };
    (==&amp;gt;) =&amp;gt; { print!(&quot;1&quot;); };
    (= =&amp;gt;) =&amp;gt; { print!(&quot;4&quot;); };
}
fn main() {
    m!(==&amp;gt;);
    m!(= = &amp;gt;);
    m!(== &amp;gt;);
    m!(= =&amp;gt;);
}&lt;/code&gt;&lt;p&gt;修改后的输出结果： &lt;code class=&quot;inline&quot;&gt;3234&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;注意，我只是把&lt;code class=&quot;inline&quot;&gt;(== &amp;gt;)&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;(==&amp;gt;)&lt;/code&gt;的匹配分支顺序换了一下。这段代码中，说明了声明宏的另一个特性：优先匹配最前面的匹配分支。&lt;/p&gt;&lt;p&gt;因为&lt;code class=&quot;inline&quot;&gt;m!(==&amp;gt;);&lt;/code&gt;的默认分词匹配就是&lt;code class=&quot;inline&quot;&gt;==&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;&amp;gt;&lt;/code&gt;，所以，当碰到第一个匹配分支&lt;code class=&quot;inline&quot;&gt;(== &amp;gt;)&lt;/code&gt;的时候，就匹配到了，所以，不会继续寻找后面的匹配分支，所以，不可能输出： &lt;code class=&quot;inline&quot;&gt;1&lt;/code&gt;。同理，回到修改前的代码中，&lt;code class=&quot;inline&quot;&gt;m!(== &amp;gt;);&lt;/code&gt;最先匹配的是&lt;code class=&quot;inline&quot;&gt;(==&amp;gt;)&lt;/code&gt;，所以不可能再去寻找后面的匹配分支了，所以不可能输出: &lt;code class=&quot;inline&quot;&gt;3&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://dtolnay.github.io/rust-quiz/8&quot;&gt;点此查看 Rust Quiz 8&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-07-51809530</guid>
<pubDate>Fri, 07 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>Rust Quiz 解读：Quiz 7</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-06-51759112.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/51759112&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;来自于RustFest 2018 大会上Alex Crichton 和 David Tolnay两位大佬的轻演讲主题：Rust Quiz    &lt;br&gt;&lt;br&gt;- &lt;a href=&quot;https://github.com/dtolnay/rust-quiz&quot;&gt;rust-quiz源码&lt;/a&gt; &lt;br&gt;- &lt;a href=&quot;https://dtolnay.github.io/rust-quiz/18&quot;&gt;在线练习和解答&lt;/a&gt; &lt;br&gt;- &lt;a href=&quot;https://www.youtube.com/watch?v=QtDj9R6vtA8&amp;amp;index=6&amp;amp;list=PLgC1L0fKd7UlpVTHVfLYVtudVx8CzbSxW&amp;amp;t=0s&quot;&gt;视频&lt;/a&gt; &lt;br&gt;&lt;br&gt; 不得不说，两位大佬出的题非常具有迷惑性，一不留神就落入了陷阱。  &lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;Quiz 7:&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;下面这段代码输出什么？&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;#[repr(u8)]
enum Enum {
    First,
    Second,
}

impl Enum {
    fn p(self) {
        match self {
            First =&amp;gt; print!(&quot;1&quot;),
            Second =&amp;gt; print!(&quot;2&quot;),
        }
    }
}

fn main() {
    Enum::p(unsafe {
        std::mem::transmute(1u8)
    });
}&lt;/code&gt;&lt;p&gt;&lt;b&gt;输出结果： 1&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;解读&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;考察要点：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Enum内存布局&lt;/li&gt;&lt;li&gt;std::mem::transmute函数&lt;/li&gt;&lt;li&gt;类型推断&lt;/li&gt;&lt;li&gt;match匹配&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;在上面代码中定义了Enum枚举体，使用&lt;code class=&quot;inline&quot;&gt;#[repr(u8)]&lt;/code&gt;来指定其内存布局，是按8位对齐。&lt;/p&gt;&lt;p&gt;然后为Enum实现了方法p，其方法体使用match匹配。这里是最让人迷惑的地方了。注意match的两个匹配模式，&lt;code class=&quot;inline&quot;&gt;First&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;Second&lt;/code&gt;与Enum枚举体包含值同名。正常情况下，如果要在方法p内使用枚举值，应该是&lt;code class=&quot;inline&quot;&gt;Enum::First&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;Enum::Second&lt;/code&gt;，或者使用&lt;code class=&quot;inline&quot;&gt;use Enum::*;&lt;/code&gt;导入。这里没有导入，也没有加&lt;code class=&quot;inline&quot;&gt;Enum::&lt;/code&gt;前缀，那么实际上，Rust将&lt;code class=&quot;inline&quot;&gt;First&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;Second&lt;/code&gt;当作通配符_来看待。&lt;/p&gt;&lt;p&gt;所以，在main函数中，不管给p方法传入什么类型，只能匹配到第一个，所以输出结果是： 1。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;怎么理解呢？&lt;/b&gt;把上面的代码放到Playground执行一遍，会看到编译器有警告输出：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;warning[E0170]: pattern binding `First` is named the same as one of the variants of the type `Enum`
  --&amp;gt; src/main.rs:10:13
   |
10 |             First =&amp;gt; print!(&quot;1&quot;),
   |             ^^^^^ help: to match on the variant, qualify the path: `Enum::First`

warning[E0170]: pattern binding `Second` is named the same as one of the variants of the type `Enum`
  --&amp;gt; src/main.rs:11:13
   |
11 |             Second =&amp;gt; print!(&quot;2&quot;),
   |             ^^^^^^ help: to match on the variant, qualify the path: `Enum::Second`&lt;/code&gt;&lt;p&gt;首先是这两个警告，这是提示开发者，First和Second和Enum定义的枚举值同名了，提示加上Enum::前缀。&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;warning: unreachable pattern
  --&amp;gt; src/main.rs:11:13
   |
10 |             First =&amp;gt; print!(&quot;1&quot;),
   |             ----- matches any value
11 |             Second =&amp;gt; print!(&quot;2&quot;),
   |             ^^^^^^ unreachable pattern
   |
   = note: #[warn(unreachable_patterns)] on by default&lt;/code&gt;&lt;p&gt;然后是上面这个警告，提示这里触发了&lt;code class=&quot;inline&quot;&gt;unreachable pattern&lt;/code&gt;模式，因为Rust编译器默认是开启&lt;code class=&quot;inline&quot;&gt;#[warn(unreachable_patterns)]&lt;/code&gt;警告的。&lt;/p&gt;&lt;p&gt;什么是Unreachable Pattern呢？p方法等价于下面代码：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;impl Enum {
    fn p(self) {
        match self {
            _ =&amp;gt; print!(&quot;1&quot;),
            _ =&amp;gt; print!(&quot;2&quot;),
        }
    }
}&lt;/code&gt;&lt;p&gt;当函数被调用的时候，Rust会遍历self所有可能的值，但是现在这里并没有把所有可能匹配的值给列出来。所以就是Unreachable。在这种情况下，将会匹配任意值。这也是上面代码输出1的原因。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;如果把p方法里的匹配模式加上Enum::前缀会怎么样？&lt;/b&gt;&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;#[repr(u8)]
enum Enum {
    First,
    Second,
}

impl Enum {
    fn p(self) {
        match self {
            Enum::First =&amp;gt; print!(&quot;1&quot;),
            Enum::Second =&amp;gt; print!(&quot;2&quot;),
        }
    }
}

fn main() {
    Enum::p(unsafe {
        std::mem::transmute(1u8)
    });
}&lt;/code&gt;&lt;p&gt;这次，输出结果变成了： 2。&lt;/p&gt;&lt;p&gt;这又是为什么呢?&lt;/p&gt;&lt;p&gt;事实上，Enum等价于下面代码：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;enum Enum {
  First = 0u8,
  Second = 1u8,
}&lt;/code&gt;&lt;p&gt;其实，你在Playground里输出MIR代码也能看得出来：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;#[repr(u8)]
enum Enum {
    First,
    Second,
}
fn main() {
    let a = Enum::First;
    let b = Enum::Second;
}&lt;/code&gt;&lt;p&gt;输出的MIR：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;fn main() -&amp;gt; (){
    let mut _0: ();                      // return place
    scope 1 {
        scope 3 {
        }
        scope 4 {
            let _2: Enum;                // &quot;b&quot; in scope 4 at src/main.rs:10:9: 10:10
        }
    }
    scope 2 {
        let _1: Enum;                    // &quot;a&quot; in scope 2 at src/main.rs:9:9: 9:10
    }

    bb0: {                              
       // 省略其他
        discriminant(_1) = 0;            // bb0[1]: scope 0 at src/main.rs:9:13: 9:24
        discriminant(_2) = 1;            // bb0[3]: scope 1 at src/main.rs:10:13: 10:25
       // 省略其他
    }
}&lt;/code&gt;&lt;p&gt;那么main函数，其实等价于下面代码：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;fn main() {
    let a = unsafe {
        std::mem::transmute(1u8)
    };
    Enum::p(a);
}&lt;/code&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;std::mem::transmute()&lt;/code&gt;函数本身是一个unsafe函数，它相当于直接在栈上进行拷贝，将一种类型的值，解释为另一种类型。语义上，相当于一种「按位移动」。说白了，就是一种类型转换。但不能随便使用它，必须在源值和目标值，都有效的情况下才可以转换。&lt;/p&gt;&lt;p&gt;但是上面代码里的&lt;code class=&quot;inline&quot;&gt;a&lt;/code&gt;，是什么类型呢？&lt;code class=&quot;inline&quot;&gt;std::mem::transmute(1u8)&lt;/code&gt;会把&lt;code class=&quot;inline&quot;&gt;1u8&lt;/code&gt;转换为Enum类型。这是Rust编译器根据上下文进行类型推断得出的。你可以把&lt;code class=&quot;inline&quot;&gt;1u8&lt;/code&gt;修改为&lt;code class=&quot;inline&quot;&gt;1u16&lt;/code&gt;看看编译器的提示。&lt;/p&gt;&lt;p&gt;那么现在a实际上是被转换成Enum::Second。所以Enum::p(a);输出的结果是：2。&lt;/p&gt;&lt;p&gt;注意上面Enum::First对应的判别式是0，而Enum::Second对应的判别式才是1。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://dtolnay.github.io/rust-quiz/7&quot;&gt;点此查看 Rust Quiz 7&lt;/a&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-06-51759112</guid>
<pubDate>Thu, 06 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>Rust Quiz 解读：Quiz 6</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-06-51683754.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/51683754&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt; 来自于RustFest 2018 大会上Alex Crichton 和 David Tolnay两位大佬的轻演讲主题：Rust Quiz  &lt;br&gt; &lt;br&gt;- &lt;a href=&quot;https://github.com/dtolnay/rust-quiz&quot;&gt;rust-quiz源码&lt;/a&gt; &lt;br&gt;- &lt;a href=&quot;https://dtolnay.github.io/rust-quiz/18&quot;&gt;在线练习和解答&lt;/a&gt; &lt;br&gt;- &lt;a href=&quot;https://www.youtube.com/watch?v=QtDj9R6vtA8&amp;amp;index=6&amp;amp;list=PLgC1L0fKd7UlpVTHVfLYVtudVx8CzbSxW&amp;amp;t=0s&quot;&gt;视频&lt;/a&gt; &lt;br&gt;&lt;br&gt; 不得不说，两位大佬出的题非常具有迷惑性，一不留神就落入了陷阱。   &lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;Quiz 6:&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;下面这段代码输出什么？&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;use std::mem;

fn main() {
    let a;
    let a =  a = true;
    print!(&quot;{}&quot;, mem::size_of_val(&amp;amp;a));
}&lt;/code&gt;&lt;p&gt;&lt;b&gt;输出结果：0&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;解读&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;考察要点：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code class=&quot;inline&quot;&gt;std::mem::size_of_val()&lt;/code&gt;函数的用法&lt;/li&gt;&lt;li&gt;&lt;code class=&quot;inline&quot;&gt;let&lt;/code&gt;变量屏蔽&lt;/li&gt;&lt;li&gt;变量声明和赋值&lt;/li&gt;&lt;li&gt;ZST（零大小类型）&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;main函数中，首先声明了&lt;code class=&quot;inline&quot;&gt;a&lt;/code&gt;，但并未赋值，也没有指定具体的类型。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;let a = a = true;&lt;/code&gt;，等价于&lt;code class=&quot;inline&quot;&gt;let a = (a = true);&lt;/code&gt;，Rust中可以说是「一切皆表达式」。对于&lt;code class=&quot;inline&quot;&gt;(a=true)&lt;/code&gt;来说，是一个赋值表达式，该表达式的值永远返回单元类型&lt;code class=&quot;inline&quot;&gt;()&lt;/code&gt;，同时它的值也是&lt;code class=&quot;inline&quot;&gt;()&lt;/code&gt;。那么&lt;code class=&quot;inline&quot;&gt;let a = (a = true)&lt;/code&gt;;最终等价于&lt;code class=&quot;inline&quot;&gt;let a = ();&lt;/code&gt;。 &lt;/p&gt;&lt;p&gt;所以，在最后的print!打印语句里，使用&lt;code class=&quot;inline&quot;&gt;mem::size_of_val(&amp;amp;a)&lt;/code&gt;函数来计算&lt;code class=&quot;inline&quot;&gt;a&lt;/code&gt;的内存大小，此时等价于&lt;code class=&quot;inline&quot;&gt;mem::size_of_val(&amp;amp;())&lt;/code&gt;，对于单元类型来说，它并不占任何内存空间。在Rust中，这种类型叫做ZST（Zero Size Type）。它们不占空间，最终会被LLVM优化掉。所以输出当然是：0。&lt;/p&gt;&lt;p&gt;那么，上面代码发散一下，能否这么写呢?&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;fn main() {
    let a;
    let a =  a =  a = true;
    print!(&quot;{}&quot;, std::mem::size_of_val(&amp;amp;a));
}&lt;/code&gt;&lt;p&gt;注意这里的代码变化，&lt;code class=&quot;inline&quot;&gt;let a =  a =  a = true;&lt;/code&gt;，等价于&lt;code class=&quot;inline&quot;&gt;let a =  ( a =  (a = true) );&lt;/code&gt;。但仔细想想，这样成立吗？&lt;/p&gt;&lt;p&gt;执行以后会报错：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;error[E0308]: mismatched types
 --&amp;gt; src/main.rs:3:17
  |
3 |     let a = a = (a = true);
  |                 ^^^^^^^^^^ expected bool, found ()
  |
  = note: expected type `bool`
             found type `()`

error: aborting due to previous error&lt;/code&gt;&lt;p&gt;这是为什么呢？&lt;/p&gt;&lt;p&gt;首先，&lt;code class=&quot;inline&quot;&gt;(a = true)&lt;/code&gt;，已经让Rust编译器推断&lt;code class=&quot;inline&quot;&gt;a&lt;/code&gt;的类型为&lt;code class=&quot;inline&quot;&gt;bool&lt;/code&gt;了。然后，&lt;code class=&quot;inline&quot;&gt;(a = (a = true))&lt;/code&gt;，等价于，&lt;code class=&quot;inline&quot;&gt;(a = ());&lt;/code&gt;，类型不匹配，自然会报错。&lt;/p&gt;&lt;p&gt;但是为什么&lt;code class=&quot;inline&quot;&gt;let a = (a = true)&lt;/code&gt;，没有报相似的错呢？ 这是因为，当前执行的是&lt;code class=&quot;inline&quot;&gt;let a = ();&lt;/code&gt;，和&lt;code class=&quot;inline&quot;&gt;a = ();&lt;/code&gt;比较一下，区别在哪里？ &lt;/p&gt;&lt;p&gt;区别正是因为那个&lt;code class=&quot;inline&quot;&gt;let&lt;/code&gt;，因为有&lt;code class=&quot;inline&quot;&gt;let&lt;/code&gt;，所以这里是一个&lt;code class=&quot;inline&quot;&gt;变量屏蔽&lt;/code&gt;，也就是重新定义了一个&lt;code class=&quot;inline&quot;&gt;a&lt;/code&gt;，它的类型自然不受之前类型推断结果的影响。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://dtolnay.github.io/rust-quiz/6&quot;&gt;点此查看 Rust Quiz 6&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-06-51683754</guid>
<pubDate>Thu, 06 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>Rust Quiz 解读：Quiz 5</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-05-51616607.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/51616607&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt; 来自于RustFest 2018 大会上Alex Crichton 和 David Tolnay两位大佬的轻演讲主题：Rust Quiz  &lt;br&gt;- &lt;a href=&quot;https://github.com/dtolnay/rust-quiz&quot;&gt;rust-quiz源码&lt;/a&gt; &lt;br&gt;- &lt;a href=&quot;https://dtolnay.github.io/rust-quiz/18&quot;&gt;在线练习和解答&lt;/a&gt; &lt;br&gt;- &lt;a href=&quot;https://www.youtube.com/watch?v=QtDj9R6vtA8&amp;amp;index=6&amp;amp;list=PLgC1L0fKd7UlpVTHVfLYVtudVx8CzbSxW&amp;amp;t=0s&quot;&gt;视频&lt;/a&gt; &lt;br&gt; &lt;br&gt;不得不说，两位大佬出的题非常具有迷惑性，一不留神就落入了陷阱。   &lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;Quiz 5:&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;下面这段代码输出什么？&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;trait Trait {
    fn f(self);
}

impl&amp;lt;T&amp;gt; Trait for fn(T) {
    fn f(self) {
        print!(&quot;1&quot;);
    }
}

impl&amp;lt;T&amp;gt; Trait for fn(&amp;amp;T) {
    fn f(self) {
        print!(&quot;2&quot;);
    }
}

fn main() {
    let a: fn(_) = |_: u8| {};
    let b: fn(_) = |_: &amp;amp;u8| {};
    let c: fn(&amp;amp;_) = |_: &amp;amp;u8| {};
    a.f();
    b.f();
    c.f();
}&lt;/code&gt;&lt;p&gt;&lt;b&gt;输出结果：112&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;解读：&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;考察要点：&lt;/b&gt; &lt;/p&gt;&lt;ol&gt;&lt;li&gt;fn(T)与fn(&amp;amp;T)的区别&lt;/li&gt;&lt;li&gt;类型推断&lt;/li&gt;&lt;li&gt;trait 实现&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;代码中定义了一个名为&lt;code class=&quot;inline&quot;&gt;Trait&lt;/code&gt;的trait，其中包含了方法签名&lt;code class=&quot;inline&quot;&gt;f&lt;/code&gt;。然后分别为&lt;code class=&quot;inline&quot;&gt;fn(T)&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;fn(&amp;amp;T)&lt;/code&gt;这两种函数指针类型实现了Trait。&lt;/p&gt;&lt;p&gt;那&lt;code class=&quot;inline&quot;&gt;T&lt;/code&gt; 和&lt;code class=&quot;inline&quot;&gt;&amp;amp;T&lt;/code&gt;有啥区别呢？&lt;/p&gt;&lt;ul&gt;&lt;li&gt; T， 是一个泛型参数，代表任何一个具体的类型。那么&lt;code class=&quot;inline&quot;&gt;fn(T)&lt;/code&gt;就是指一个拥有具体类型的函数指针。&lt;/li&gt;&lt;li&gt;&amp;amp;T，实际上等价于&lt;code class=&quot;inline&quot;&gt;&amp;amp;&#39;a T&lt;/code&gt;，代表某个引用类型。则&lt;code class=&quot;inline&quot;&gt;fn(&amp;amp;T)&lt;/code&gt;，就是&lt;code class=&quot;inline&quot;&gt;fn(&amp;amp;&#39;a T)&lt;/code&gt;。注意这里的&lt;code class=&quot;inline&quot;&gt;&#39;a&lt;/code&gt;也是一个泛型参数，并不是指具体的类型。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在main函数中，分别定义了三个变量绑定，a、b、c，分别将三个闭包指定为特定的函数指针类型。最后再分别调用它们的&lt;code class=&quot;inline&quot;&gt;f&lt;/code&gt;方法。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;let a: fn(_) = |_: u8| {};&lt;/code&gt;，对于&lt;code class=&quot;inline&quot;&gt;a&lt;/code&gt;来说，&lt;code class=&quot;inline&quot;&gt;_&lt;/code&gt;会被推断为&lt;code class=&quot;inline&quot;&gt;u8&lt;/code&gt;类型。那么对应于&lt;code class=&quot;inline&quot;&gt;fn(T)&lt;/code&gt;类型，最终调用其f方法输出结果就是：1。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;let b: fn(_) = |_: &amp;amp;u8| {};&lt;/code&gt;，对于&lt;code class=&quot;inline&quot;&gt;b&lt;/code&gt;来说，&lt;code class=&quot;inline&quot;&gt;_&lt;/code&gt;会被推断为&lt;code class=&quot;inline&quot;&gt;&amp;amp;u8&lt;/code&gt;类型。这就是一个令人迷惑的点了，到底是对应&lt;code class=&quot;inline&quot;&gt;fn(T)&lt;/code&gt;还是&lt;code class=&quot;inline&quot;&gt;fn(&amp;amp;T)&lt;/code&gt;。这里的&lt;code class=&quot;inline&quot;&gt;&amp;amp;u8&lt;/code&gt;实际上是一个具体的值。它实际上等价于&lt;code class=&quot;inline&quot;&gt;f(&amp;amp;&#39;x u8)&lt;/code&gt;，这里的&lt;code class=&quot;inline&quot;&gt;&#39;x&lt;/code&gt;是一个具体的可确定的生命周期值。因为Rust生命周期参数，只有在具体使用的地方，才是具体实例化的。最终调用其f方法输出结果依然是：1。&lt;/p&gt;&lt;p&gt;let c: fn(&amp;amp;&lt;i&gt;) = |&lt;/i&gt;: &amp;amp;u8| {};&lt;code class=&quot;inline&quot;&gt;`，对于c来说，&lt;/code&gt;_&lt;code class=&quot;inline&quot;&gt;会被推断为&lt;/code&gt;u8&lt;code class=&quot;inline&quot;&gt;。此时显然，对应于&lt;/code&gt;fn(&amp;amp;T)&lt;code class=&quot;inline&quot;&gt;。&lt;/code&gt;&amp;amp;u8&lt;code class=&quot;inline&quot;&gt;的生命周期固然是已经具体实例化，但它的函数指针类型，依然是&lt;/code&gt;fn(&amp;amp;T)`。最终调用其方法输出结果就是： 2。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://dtolnay.github.io/rust-quiz/5&quot;&gt;点此查看 Rust Quiz 5&lt;/a&gt; &lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-05-51616607</guid>
<pubDate>Wed, 05 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>Rust Quiz 解读：Quiz 4</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-04-51560682.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/51560682&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;来自于RustFest 2018 大会上Alex Crichton 和 David Tolnay两位大佬的轻演讲主题：Rust Quiz&lt;br&gt;- &lt;a href=&quot;https://github.com/dtolnay/rust-quiz&quot;&gt;rust-quiz源码&lt;/a&gt;&lt;br&gt;-  &lt;a href=&quot;https://dtolnay.github.io/rust-quiz/18&quot;&gt;在线练习和解答&lt;/a&gt;&lt;br&gt;-  &lt;a href=&quot;https://www.youtube.com/watch?v=QtDj9R6vtA8&amp;amp;index=6&amp;amp;list=PLgC1L0fKd7UlpVTHVfLYVtudVx8CzbSxW&amp;amp;t=0s&quot;&gt;视频&lt;/a&gt;&lt;br&gt;不得不说，两位大佬出的题非常具有迷惑性，一不留神就落入了陷阱。&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;Quiz 4:&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;下面这段代码输出什么？&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;fn main() {
    let (.., x, y) = (0, 1, ..);
    print!(&quot;{}&quot;, b&quot;066&quot;[y][x]);
}&lt;/code&gt;&lt;p&gt;&lt;b&gt;输出结果： 54&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;解读：&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;考察要点： &lt;/b&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;模式匹配&lt;/li&gt;&lt;li&gt;Range和RangeFull&lt;/li&gt;&lt;li&gt;字节字符串表示法&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;上面只有两行代码，但是隐藏了很多信息。&lt;/p&gt;&lt;p&gt;Rust中let绑定语句支持模式匹配。main函数中代码第一行是元组的匹配赋值操作。在等号左边的&lt;code class=&quot;inline&quot;&gt;(.., x, y)&lt;/code&gt;是匹配的模式，等号右边&lt;code class=&quot;inline&quot;&gt;(0, 1, ..)&lt;/code&gt;是要匹配的值。&lt;/p&gt;&lt;p&gt;这里最迷惑人的地方就是&lt;code class=&quot;inline&quot;&gt;..&lt;/code&gt;，在匹配模式中，&lt;code class=&quot;inline&quot;&gt;..&lt;/code&gt;代表其余要匹配的项。在上面示例中，就是除了x和y之外，要匹配的项。而在等号右边等待匹配的值中，&lt;code class=&quot;inline&quot;&gt;..&lt;/code&gt;则代表一个值：RangeFull。RangeFull是一个单元结构体，它代表Range（范围）的全范围类型。&lt;/p&gt;&lt;p&gt;所以，下面代码是合法的：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;let range_full = std::ops::RangeFull;
let range_full = ..;&lt;/code&gt;&lt;p&gt;这两行代码是等价的。&lt;/p&gt;&lt;p&gt;所以，上面最终的元组匹配结果是：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;左边&lt;code class=&quot;inline&quot;&gt;..&lt;/code&gt;匹配右边的&lt;code class=&quot;inline&quot;&gt;0&lt;/code&gt;&lt;/li&gt;&lt;li&gt;左边&lt;code class=&quot;inline&quot;&gt;x&lt;/code&gt;匹配右边的&lt;code class=&quot;inline&quot;&gt;1&lt;/code&gt;&lt;/li&gt;&lt;li&gt;左边&lt;code class=&quot;inline&quot;&gt;y&lt;/code&gt;匹配右边的&lt;code class=&quot;inline&quot;&gt;..&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;然后在最后的&lt;code class=&quot;inline&quot;&gt;print!&lt;/code&gt;语句中，&lt;code class=&quot;inline&quot;&gt;b&quot;0666&quot;&lt;/code&gt;实际上是一种字节字符串的语法糖，它等价于&lt;code class=&quot;inline&quot;&gt;[48u8, 54u8, 54u8]&lt;/code&gt;字节序列：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;let d = [48u8, 54u8, 54u8];
 assert_eq!(&quot;066&quot;, std::str::from_utf8(&amp;amp;d).unwrap());&lt;/code&gt;&lt;p&gt;所以，&lt;code class=&quot;inline&quot;&gt;b&quot;066&quot;[y][x]&lt;/code&gt;现在是&lt;code class=&quot;inline&quot;&gt;b&quot;066&quot;[..][1] == b&quot;6&quot;&lt;/code&gt;，那么最终输出结果就是： 54。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://dtolnay.github.io/rust-quiz/4&quot;&gt;点此查看 Rust Quiz 4&lt;/a&gt; &lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-04-51560682</guid>
<pubDate>Tue, 04 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>「付费阅读」如何为Rust语言做贡献</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-03-51479889.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/51479889&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-5d4a713aff10d99bf7e2d48b68018ce4_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;本文基于macOSX平台，通过对Rust 1.32 Nightly版本中rustdoc的一个ICE问题进行复盘，分析并记录整个Bug修复的过程。主要目的是，通过这个过程，来学习如何给Rust做贡献。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;（阅读时间：17m）&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;1. 缘起&lt;/p&gt;&lt;p&gt;2. Rust本地调试环境准备&lt;/p&gt;&lt;p&gt;3. ICE问题分析&lt;/p&gt;&lt;p&gt;4. 调试代码&lt;/p&gt;&lt;p&gt;5. 提交PR说明&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;---&lt;/p&gt;&lt;h2&gt;&lt;b&gt;缘起：&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;在两周前，我发现了一个rustdoc的[ICE(issue 55723)](&lt;a href=&quot;https://github.com/rust-lang/rust/issues/55723&quot;&gt;https://github.com/rust-lang/rust/issues/55723&lt;/a&gt;)，提交给了官方。但是官方指派修复此Bug的开发者QuietMisdreavus 难以复现该Bug。我本来以为Bug是因为多字节字符（比如全角符号之类）引起的，然而经过我仔细的测试，发现问题的根源在于尾随的「空格」。&lt;/p&gt;&lt;h2&gt;更多内容请花&lt;b&gt;一元查看&lt;/b&gt;：&lt;/h2&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-233a6d659a6944c30a4d23a1cf8054aa_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;659&quot; data-rawheight=&quot;1920&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-233a6d659a6944c30a4d23a1cf8054aa&quot; data-watermark-src=&quot;v2-0a81c5365a61d19ca3a2bc04d60b2416&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-03-51479889</guid>
<pubDate>Mon, 03 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>Rust Quiz 解读：Quiz 3</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-03-51433417.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/51433417&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;来自于RustFest 2018 大会上Alex Crichton 和 David Tolnay两位大佬的轻演讲主题：Rust Quiz&lt;br&gt;-  &lt;a href=&quot;https://github.com/dtolnay/rust-quiz&quot;&gt;rust-quiz源码&lt;/a&gt;&lt;br&gt;-  &lt;a href=&quot;https://dtolnay.github.io/rust-quiz/18&quot;&gt;在线练习和解答&lt;/a&gt;&lt;br&gt;-  &lt;a href=&quot;https://www.youtube.com/watch?v=QtDj9R6vtA8&amp;amp;index=6&amp;amp;list=PLgC1L0fKd7UlpVTHVfLYVtudVx8CzbSxW&amp;amp;t=0s&quot;&gt;视频&lt;/a&gt;&lt;br&gt;不得不说，两位大佬出的题非常具有迷惑性，一不留神就落入了陷阱。&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;Quiz 3:&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;下面这段代码输出什么？&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;struct S {
    x: i32,
}

const S: S = S { x: 2 };

fn main() {
    let v = &amp;amp;mut S;
    v.x += 1;
    S.x += 1;
    print!(&quot;{}{}&quot;, v.x, S.x);
}&lt;/code&gt;&lt;p&gt;&lt;b&gt;输出结果： 32&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;解读：&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;考察要点： &lt;/b&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;可变引用&lt;/li&gt;&lt;li&gt;结构体实例化不需要构造函数&lt;/li&gt;&lt;li&gt;const语义&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;代码中定义了一个具名结构体&lt;code class=&quot;inline&quot;&gt;S&lt;/code&gt;，包含了一个字段&lt;code class=&quot;inline&quot;&gt;x&lt;/code&gt;。接下来又定义了一个&lt;code class=&quot;inline&quot;&gt;const&lt;/code&gt;常量，同样命名为&lt;code class=&quot;inline&quot;&gt;S&lt;/code&gt;，并且将一个结构体&lt;code class=&quot;inline&quot;&gt;S&lt;/code&gt;的实例赋值给它。&lt;/p&gt;&lt;p&gt;要注意区分这两个&lt;code class=&quot;inline&quot;&gt;S&lt;/code&gt;。常量&lt;code class=&quot;inline&quot;&gt;S&lt;/code&gt;，是代表值，而结构体&lt;code class=&quot;inline&quot;&gt;S&lt;/code&gt;，则代表类型。在Rust中，分别将这两个S，存储在&lt;code class=&quot;inline&quot;&gt;值命名空间(Value NameSpace)&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;类型命名空间(Type NameSpace)&lt;/code&gt;中，所以可以同时存在两个相同的S。&lt;/p&gt;&lt;p&gt;常量S，会内联到用它的具体使用的地方。在语义层面，就是表示它的值会替换到使用它的每个地方。&lt;/p&gt;&lt;p&gt;&lt;b&gt;在main函数中， 常量S会被内联到两个地方：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;第一个地方&lt;/b&gt;是： &lt;code class=&quot;inline&quot;&gt;let v = &amp;amp;mut S;&lt;/code&gt;， 这里的S，是一个值，要被const S替换掉。等价于:&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;let mut _tmp = S {x: 2} ; 
let v = &amp;amp;mut tmp_;&lt;/code&gt;&lt;p&gt;所以，当执行 &lt;code class=&quot;inline&quot;&gt;v.x += 1&lt;/code&gt; 之后，&lt;code class=&quot;inline&quot;&gt;v.x&lt;/code&gt;的值就是：3。&lt;/p&gt;&lt;p&gt;&lt;b&gt;第二个地方&lt;/b&gt;是：&lt;code class=&quot;inline&quot;&gt;S.x += 1;&lt;/code&gt;，这里的S同样会被替换为const S的值。等价于:&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;S {x: 2}.x += 1;&lt;/code&gt;&lt;p&gt;而此时，这个S {: 2}是一个新的结构体实例，和上面的S已经无关，所以改变它的值，并不影响到&lt;code class=&quot;inline&quot;&gt;S.x&lt;/code&gt;的值，所以结果是: 2。&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-03-51433417</guid>
<pubDate>Mon, 03 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>Rust Quiz 解读： Quiz 2</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-02-51366804.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/51366804&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;来自于RustFest 2018 大会上Alex Crichton 和 David Tolnay两位大佬的轻演讲主题：Rust Quiz&lt;br&gt;&lt;a href=&quot;https://github.com/dtolnay/rust-quiz&quot;&gt;rust-quiz源码&lt;/a&gt; &lt;br&gt;&lt;a href=&quot;https://dtolnay.github.io/rust-quiz/18&quot;&gt;在线练习和解答&lt;/a&gt; &lt;br&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=QtDj9R6vtA8&amp;amp;index=6&amp;amp;list=PLgC1L0fKd7UlpVTHVfLYVtudVx8CzbSxW&amp;amp;t=0s&quot;&gt;视频&lt;/a&gt; &lt;br&gt;不得不说，两位大佬出的题非常具有迷惑性，一不留神就落入了陷阱。&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;Quiz 2:&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;下面这段代码输出什么？&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;struct S(i32);

impl std::ops::BitAnd&amp;lt;S&amp;gt; for () {
    type Output = ();

    fn bitand(self, rhs: S) {
        print!(&quot;{}&quot;, rhs.0);
    }
}

fn main() {
    let f = || ( () &amp;amp; S(1) );
    let g = || { () &amp;amp; S(2) };
    let h = || ( {} &amp;amp; S(3) );
    let i = || { {} &amp;amp; S(4) };
    f();
    g();
    h();
    i();
}&lt;/code&gt;&lt;p&gt;&lt;b&gt;输出结果：123&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;解读：&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;考察要点： &lt;/p&gt;&lt;ol&gt;&lt;li&gt;trait：操作符重载&lt;/li&gt;&lt;li&gt;trait：关联类型&lt;/li&gt;&lt;li&gt;单元类型 ()&lt;/li&gt;&lt;li&gt;元组结构体&lt;/li&gt;&lt;li&gt;闭包使用圆括号和块的差异&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;代码中定义了元组结构体S(i32)，又为其实现了&lt;code class=&quot;inline&quot;&gt;std::ops::BitAdd&amp;lt;s&amp;gt;&lt;/code&gt; trait，意味着，该元组结构体就有了位运算&lt;code class=&quot;inline&quot;&gt;&amp;amp;&lt;/code&gt;的能力。&lt;/p&gt;&lt;p&gt;在实现BitAdd的代码中，指定了关联类型为单元类型&lt;code class=&quot;inline&quot;&gt;()&lt;/code&gt;，在bitand方法中，省略了返回类型。等价于下面代码。&lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;fn bitand(self, rhs: S) -&amp;gt; () { ... }&lt;/code&gt;&lt;p&gt;那么在main函数中：&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;let f = || ( () &amp;amp; S(1) );&lt;/code&gt;  ， 这行代码中，f绑定的是一个闭包。闭包中&lt;code class=&quot;inline&quot;&gt;() &amp;amp; S(1)&lt;/code&gt;是一个位操作&lt;code class=&quot;inline&quot;&gt;&amp;amp;&lt;/code&gt;表达式。最终结果当然是输出&lt;code class=&quot;inline&quot;&gt;rhs.0&lt;/code&gt;，也就是：1。元组结构体和元组的用法是一样的。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;let g = || { () &amp;amp; S(2) };&lt;/code&gt;， 这行代码中，g绑定的依然是一个闭包。闭包可以用圆括号，也可以用花括号。闭包内，&lt;code class=&quot;inline&quot;&gt;() &amp;amp; S(2)&lt;/code&gt;依然是一个完整的表达式，求值结果是：2。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;let h = || ( {} &amp;amp; S(3) );&lt;/code&gt;，这行代码中，h同样是一个闭包，但注意这里闭包是用圆括号来表示，这代表，&lt;code class=&quot;inline&quot;&gt;{} &amp;amp; S(3)&lt;/code&gt;按一个完整独立的表达式来处理。其中&lt;code class=&quot;inline&quot;&gt;{}&lt;/code&gt;表达式求值结果是&lt;code class=&quot;inline&quot;&gt;()&lt;/code&gt;，再和&lt;code class=&quot;inline&quot;&gt;S(3)&lt;/code&gt;进行与操作，得到最终值： 3。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;let i = || { {} &amp;amp; S(4) };&lt;/code&gt;，这行代码中， i同样是一个闭包，然而，它是以花括号构成。花括号和圆括号的区别在于，花括号代表一个块（block），它默认按多条表达式语句进行解析。所以，&lt;code class=&quot;inline&quot;&gt;{} &amp;amp; S(4)&lt;/code&gt;，实际上被看作两条语句&lt;code class=&quot;inline&quot;&gt;{}&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;&amp;amp;S(4)&lt;/code&gt;，最终闭包执行结果是返回一个&lt;code class=&quot;inline&quot;&gt;S(4)&lt;/code&gt;的引用。和位操作没有啥关系，最终也没有任何输出结果。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;()&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;{}&lt;/code&gt;的区别，不仅仅在于闭包，在写声明宏或者其他地方都是一致的。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://dtolnay.github.io/rust-quiz/2&quot;&gt;点此查看 Rust Quiz 2 &lt;/a&gt; &lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-02-51366804</guid>
<pubDate>Sun, 02 Dec 2018 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
