<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>时光与精神小屋</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/</link>
<description></description>
<language>zh-cn</language>
<lastBuildDate>Tue, 18 Dec 2018 01:18:16 +0800</lastBuildDate>
<item>
<title>Rust Quiz 解读：Quiz 18</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-17-52609791.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/52609791&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;来自于RustFest 2018 大会上Alex Crichton 和 David Tolnay两位大佬的轻演讲主题：Rust Quiz&lt;br&gt;&lt;br&gt;- &lt;a href=&quot;https://github.com/dtolnay/rust-quiz&quot;&gt;rust-quiz源码&lt;/a&gt; &lt;br&gt;- &lt;a href=&quot;https://dtolnay.github.io/rust-quiz/18&quot;&gt;在线练习和解答&lt;/a&gt; &lt;br&gt;- &lt;a href=&quot;https://www.youtube.com/watch?v=QtDj9R6vtA8&amp;amp;index=6&amp;amp;list=PLgC1L0fKd7UlpVTHVfLYVtudVx8CzbSxW&amp;amp;t=0s&quot;&gt;视频&lt;/a&gt; &lt;br&gt;&lt;br&gt;不得不说，两位大佬出的题非常具有迷惑性，一不留神就落入了陷阱。&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;Quiz 18:&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;下面这段代码输出什么？&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;struct S {
    f: fn(),
}

impl S {
    fn f(&amp;amp;self) {
        print!(&quot;1&quot;);
    }
}

fn main() {
    let print2 = || print!(&quot;2&quot;);
    S { f: print2 }.f();
}&lt;/code&gt;&lt;p&gt;&lt;b&gt;输出结果： 1&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;解读&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;考察要点：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;闭包调用&lt;/li&gt;&lt;li&gt;结构体字段和函数调用的优先级&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Quiz代码中实现了结构体S，包含一个类型为&lt;code class=&quot;inline&quot;&gt;fn()&lt;/code&gt;的函数指针字段。然后为S实现了同样名为&lt;code class=&quot;inline&quot;&gt;f&lt;/code&gt;的方法。&lt;/p&gt;&lt;p&gt;在main函数中，定义了闭包print2。然后main中最后一行代码就开始迷惑人了。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;S {f: print2 }.f();&lt;/code&gt;&lt;/p&gt;&lt;p&gt;如果你没有关注结构体字段名也是f，并且它是个函数指针类型，也罢。你就不会想太多。一眼看上去就是调用&lt;code class=&quot;inline&quot;&gt;S&lt;/code&gt;的结构体实例的&lt;code class=&quot;inline&quot;&gt;f&lt;/code&gt;方法。输出结果是&lt;code class=&quot;inline&quot;&gt;1&lt;/code&gt;。那么正好答对了。&lt;/p&gt;&lt;p&gt;但是，如果你如果注意到&lt;code class=&quot;inline&quot;&gt;print2&lt;/code&gt;闭包也可以作为一个函数指针。那么为什么不是&lt;code class=&quot;inline&quot;&gt;(S {f: print2 }.f)()&lt;/code&gt;呢？&lt;/p&gt;&lt;p&gt;不好意思，如果你想调用闭包，那么最好显式地加上括号告诉编译器你是想调用闭包。就像这样：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;struct S {
    f: fn(),
}

impl S {
    fn f(&amp;amp;self) {
        print!(&quot;1&quot;);
    }
}

fn main() {
    let print2 = || print!(&quot;2&quot;);
    (S { f: print2 }.f)();
}&lt;/code&gt;&lt;p&gt;这样输出结果就是&lt;code class=&quot;inline&quot;&gt;2&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;否则，编译器在这里，只认函数调用。如果不信的话，你把&lt;code class=&quot;inline&quot;&gt;impl S { ... }&lt;/code&gt;代码删除以后看看：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;struct S {
    f: fn(),
}

fn main() {
    let print2 = || print!(&quot;2&quot;);
    S { f: print2 }.f();
}&lt;/code&gt;&lt;p&gt;编译器会报错：&lt;code class=&quot;inline&quot;&gt;error[E0599]: no method named&lt;/code&gt;f&lt;code class=&quot;inline&quot;&gt;found for type&lt;/code&gt;S&lt;code class=&quot;inline&quot;&gt;in the current scope&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://dtolnay.github.io/rust-quiz/18&quot;&gt;点此查看 Rust Quiz 18&lt;/a&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-17-52609791</guid>
<pubDate>Mon, 17 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>Rust Quiz 解读：Quiz 17</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-17-52608592.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/52608592&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;来自于RustFest 2018 大会上Alex Crichton 和 David Tolnay两位大佬的轻演讲主题：Rust Quiz&lt;br&gt;&lt;br&gt;-  &lt;a href=&quot;https://github.com/dtolnay/rust-quiz&quot;&gt;rust-quiz源码&lt;/a&gt;&lt;br&gt;-  &lt;a href=&quot;https://dtolnay.github.io/rust-quiz/18&quot;&gt;在线练习和解答&lt;/a&gt;&lt;br&gt;-  &lt;a href=&quot;https://www.youtube.com/watch?v=QtDj9R6vtA8&amp;amp;index=6&amp;amp;list=PLgC1L0fKd7UlpVTHVfLYVtudVx8CzbSxW&amp;amp;t=0s&quot;&gt;视频&lt;/a&gt;&lt;br&gt;&lt;br&gt;不得不说，两位大佬出的题非常具有迷惑性，一不留神就落入了陷阱。&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;Quiz 17:&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;下面这段代码输出什么？&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;fn main() {
    let mut a = 5;
    let mut b = 3;
    print!(&quot;{}&quot;, a-- - --b);
}&lt;/code&gt;&lt;p&gt;&lt;b&gt;输出结果: 2&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;解读&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;考察要点：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;和Quiz16代码一样，Rust中不存在自增或自减运算符&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;a-- - --b&lt;/code&gt;等价于&lt;code class=&quot;inline&quot;&gt;a - (-(-(-(-b))))&lt;/code&gt; ，&lt;code class=&quot;inline&quot;&gt;5 - 3 = 2&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;那为什么Rust中没有自增/自减运算符呢？&lt;/p&gt;&lt;p&gt;在Rust官方的FAQ中有描述：&lt;/p&gt;&lt;blockquote&gt; 先增和后增（以及相对应的减法）虽然方便，但也相当复杂。它们都需要求值顺序的知识，而且经常导致 C 和 C++ 中的细节错误和未定义的行为。 x = x + 1 或 x += 1 只是略长一点，但更加明确。  &lt;br&gt; &lt;/blockquote&gt;&lt;p&gt;Rust新官网已经没有了FAQ页面，查看需要从旧官网入口进入：&lt;a href=&quot;https://prev.rust-lang.org/zh-CN/faq.html#why-doesnt-rust-have-increment-and-decrement-operators&quot;&gt;常见问题解答 · Rust 程序设计语言&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://dtolnay.github.io/rust-quiz/17&quot;&gt;点此查看 Rust Quiz 17&lt;/a&gt; &lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-17-52608592</guid>
<pubDate>Mon, 17 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>Rust Quiz 解读：Quiz 16</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-17-52607988.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/52607988&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;来自于RustFest 2018 大会上Alex Crichton 和 David Tolnay两位大佬的轻演讲主题：Rust Quiz&lt;br&gt;-   &lt;a href=&quot;https://github.com/dtolnay/rust-quiz&quot;&gt;rust-quiz源码&lt;/a&gt;&lt;br&gt;-   &lt;a href=&quot;https://dtolnay.github.io/rust-quiz/18&quot;&gt;在线练习和解答&lt;/a&gt;&lt;br&gt;-   &lt;a href=&quot;https://www.youtube.com/watch?v=QtDj9R6vtA8&amp;amp;index=6&amp;amp;list=PLgC1L0fKd7UlpVTHVfLYVtudVx8CzbSxW&amp;amp;t=0s&quot;&gt;视频&lt;/a&gt; &lt;br&gt;&lt;br&gt;不得不说，两位大佬出的题非常具有迷惑性，一不留神就落入了陷阱。&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;Quiz 16:&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;下面这段代码输出什么？&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;fn main() {
    let mut x = 4;
    --x;
    print!(&quot;{}{}&quot;, --x, --x);
}&lt;/code&gt;&lt;p&gt;&lt;b&gt;输出结果：44&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;解读&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;考察要点：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Rust里不存在C语言中的&lt;code class=&quot;inline&quot;&gt;++i/--i&lt;/code&gt;自增/自减运算符&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;当看到&lt;code class=&quot;inline&quot;&gt;--x&lt;/code&gt;中，可能会有所迷惑。Rust中并不存在自增/自减运算符。所以，Rust编译器怎么解析这个操作呢？答案是&lt;code class=&quot;inline&quot;&gt;-(-x)&lt;/code&gt;。将&lt;code class=&quot;inline&quot;&gt;-&lt;/code&gt;按负号进行解析，而非减号。&lt;/p&gt;&lt;p&gt;负负得正，所以结果是4。然后输出的时候，打印了两次，就是44。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://dtolnay.github.io/rust-quiz/16&quot;&gt;点此查看 Rust Quiz 16&lt;/a&gt; &lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-17-52607988</guid>
<pubDate>Mon, 17 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>「内部视角」Rust团队内的组织债务</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-17-52568974.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/52568974&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-5e37612217a05e23ca21433c769d22e4_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;官方核心团队成员无船同志在本文中阐述了他对Rust 2019的看法。该文主要谈到了组织治理，Rust自身作为一个开源项目，也可以把它看作一个成长中的初创「产品」，不免会遇到成长之痛。作为Rust团队的内部成员，无船同志以他的视角来分析了Rust组织内部产生的问题，对于我们也是一种警示和学习。&lt;br&gt;&lt;br&gt;原文: &lt;a href=&quot;https://boats.gitlab.io/blog/post/rust-2019/&quot;&gt;Organizational Debt&lt;/a&gt; &lt;/blockquote&gt;&lt;p&gt;&lt;br&gt;首先，他肯定希望Rust会有更多的技术改进，而且他也会为之付出精力。但是，他认为2019最重要的问题不在于技术改进，而是组织债务（Organizational Debt）。&lt;br&gt;&lt;br&gt;什么是组织债务？它是和技术债务平行的一个名词。我节选一段infoq文章中的阐述：&lt;/p&gt;&lt;blockquote&gt; “组织债务”是在公司层面上是与技术债务平行的。如果技术债务是软件中妨害维护的问题，那么组织债务就是妨碍组织在日常运转中流畅运作的问题。他列举了如下几个组织债务的例子：&lt;br&gt; 1. 解决同一个问题，不同的部门都有自己的工具和方法，这使得主管们很难看到相似之处，以便解决公司层面的问题。&lt;br&gt; 2. 经理们创建的过程或实现的软件解决方案在当时看来似乎是个不错的注意，但却没有消除问题产生的根本原因，长期来看，最终造成了更多的问题。&lt;br&gt; 3. 由于时间特别紧，团队决定“本次”以一种并不是最理想的方式完成一项任务。但是，那种方式后续被重复使用，因为没有人记得第一次原本是打算当作一种一次性方案。&lt;br&gt;&lt;br&gt;&lt;br&gt;更通俗一点的描述：&lt;br&gt;&lt;br&gt; 所谓的组织债务就是初创公司为了「把事情搞定」而做出的所有人事/文化妥协。这些债务会在一定阶段爆发，比如公司融到了新一轮的钱/公司的战略方向调整/公司的人事扩张。这在一定程度上比「技术债务」更难处理，毕竟「技术债务」你面向的是工程/代码，而「组织债务」面向的是人。&lt;/blockquote&gt;&lt;p&gt;组织债务影响的是能否可持续发展的问题。&lt;br&gt;&lt;br&gt;无船同志认为，Rust项目在过去的几年里，一直像创业公司一样成长，虽然有很多好的方面，但也有一些糟糕的问题，如果这个项目想长期地维持下去，必须真正处理到目前已经积累起来的组织债务。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;以下是无船同志罗列出来要解决的问题：&lt;/b&gt;&lt;/h2&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;一 使用GitHub issues来讨论设计就像是从消防栓里喝水&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-c2c81fbbfde7d6077941414a08078788_r.jpg&quot; data-rawwidth=&quot;574&quot; data-rawheight=&quot;264&quot; data-size=&quot;normal&quot; data-caption=&quot;drinking from a firehose&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-c2c81fbbfde7d6077941414a08078788&quot; data-watermark-src=&quot;v2-26a8d58d69230e69a1b990b0006f08d6&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;无船同志统计了关于Pin API讨论的issues中评论数，一共有770条评论，还不算是reddit、irc或discord中的聊天记录。Rust虽然是他的全职工作，但是他发现还跟不上团队内其他人的设计讨论。&lt;br&gt;&lt;br&gt;其实Pin API虽然重要，但最终也是一个比较小的标准API添加，其中并没有包括关于异步、生成器或Futures的讨论。当这个主题高达770条评论的时候，谁有心思看完呢？包括参与评论的人也是，而且经常要对一个比较模糊的概念重新进行解释，这样每一条加入讨论的评论，都算是一种债务。更糟糕的是，将这些讨论再分解为更多的子问题，也无法解决问题。无论他们创建多少Github issues，似乎每一个issue都会变得越来越长。&lt;br&gt;&lt;br&gt;所有的这些讨论都会带来下面几个负面后果：&lt;br&gt;&lt;br&gt;1. 对于那些在讨论中想推动共识的人来说，会变得筋疲力尽&lt;br&gt;2. 对于真正有新见解的用户来说，参与变得更加困难。&lt;br&gt;3. 新加入讨论的新人，和已经知道大部分上下文的人之间会造成冲突&lt;br&gt;&lt;br&gt;RFC流程没有达到它应有的效果。在改革这个过程之前，无船同志对于发起新的共识讨论（比如提出一个语言的新特性）感到非常不满意。&lt;br&gt;&lt;br&gt;&lt;b&gt;二 项目内部并没有顺利地协调&lt;/b&gt;&lt;br&gt;&lt;br&gt;为了保证连贯的用户体验，Rust需要在不同的方面拥有一致的设计愿景。在过去，团队成员低于30人时，共享愿景可以自然地在整个项目中传播。但是随着团队规模的增加，现在这种愿景在团队中共享起来就遭遇了很多问题。现在需要一个积极的专门用来处理和设计相关决策信息、模式和框架了。今年无船同志就遇到了因为没有统一的指导方针而发生的分歧的问题。所以现在可以考虑重新核心团队的组织，并认识到团队之间协调的重要性。&lt;/p&gt;&lt;p&gt;&lt;b&gt;三 团队正在经历成长之痛&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Rust项目管理主要由负责项目的各个领域的各个团队执行。无船同志是其中三个团队的成员。他感受到了这三个团队内部的成长之痛：&lt;br&gt;&lt;br&gt;1. 对团队的成员分解为更小的团队来分解任务，比如工具和基础设施团队已经分解了五个小团队，这是为了解决任务模糊的问题，便于各负其责。但是分解小团队可能并未解决具体的问题。&lt;br&gt;2. 与此同时，团队常常会没有方向感，没有特定的目标。&lt;br&gt;3. 随着团队成员的增加，成员的日程安排、同步协调等方面都不是很有效。&lt;br&gt;4. 并且团队的共享知识也很难转移给新来的成员，因为还没有有意识的来执行这个事情。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;四  工作组需要工具包&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;需要将工作组的工作方式抽象为其他人可以使用的标准模板或流程，当然更重要的是需要有协调和领导力的人进入工作组。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;五 社区管理让人身心疲惫&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;需要一个高于社区行为准则的标准来规范参与Rust项目的工作，用于强制性地进行专业意见的交流，让沟通更加高效。社区的行为准则只是规范社区内成员随意互动的标准。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;六  是时候讨论薪酬了&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;并不是无船同志想涨薪了，而是他看到现在开源社区很多志愿者投入了大量时间但并没有报酬，完全是为了兴趣或学习而进入社区。但很多人应该用一种长远的眼光来看Rust，它在未来会带来就业发展的回报。&lt;br&gt;&lt;br&gt;但随着生活状态的变化，很多可以推动重要项目的志愿者已经退出，导致Rust的很多工作进展都不太顺利。只有拥有大量空闲时间和信心的人才能作为志愿者大力参与。现在的开源贡献者，其实都是资产阶级中的“无产”阶级。也许成立「Rust基金会」是一个办法。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;总结：&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;在找到解决问题的办法之前，必须先正视这些问题，承认它们的确存在。还清组织债务，只需要重新设计决策过程，重新组织治理结构，建立新的沟通规范，并找到一种方法来将大量资金转向Rust贡献者。&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-17-52568974</guid>
<pubDate>Mon, 17 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>「Rust每日新闻」本周精选 • 第二十四期</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-16-52509923.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/52509923&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-23599072636a1820bba7b49b9d586092_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;前言：&lt;br&gt;&lt;br&gt;从2018年开始，我每天会花1个小时关注Rust社区动态，并且在&lt;a href=&quot;http://rust.cc/&quot;&gt;Rust.CC论坛&lt;/a&gt;、&lt;a href=&quot;https://t.me/rust_daily_news&quot;&gt;tg channel&lt;/a&gt;、&lt;a href=&quot;https://steemit.com/@blackanger&quot;&gt;Steemit&lt;/a&gt;、&lt;a href=&quot;https://github.com/RustStudy/rust_daily_news&quot;&gt;GitHub&lt;/a&gt;、&lt;a href=&quot;https://www.yuque.com/chaosbot/rustnews&quot;&gt;语雀订阅&lt;/a&gt;都开通了Rust每日新闻，分享我每天的见闻，偶尔也夹杂了一些个人的观点。大半年过去了，Rust每日新闻已经成为了Rust社区群大家每天必看的内容。在这个知乎专栏里，每周会精选几篇Rust社区中的动态，和大家分享。分享的内容就不按时间排序了。&lt;br&gt;&lt;br&gt;2018-12-16&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;「付费阅读」系列&lt;/b&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/51479889&quot;&gt;如何为Rust语言做贡献&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/52032027&quot;&gt;Rust Quiz 11&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;官方新闻&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;官方核心成员nrc对Rust 2021 Edition的思考：&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/52181046&quot;&gt;Rust 2022&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「官方网络工作组」异步进展&lt;/h2&gt;&lt;h2&gt;async&lt;/h2&gt;&lt;p&gt;虽然Rust 2018发布的时候没有稳定异步编程，但在今年，异步编程也取得了很大进展。网络工作组发文，介绍了几个促进Nightly生态中使用async/await的crate。&lt;/p&gt;&lt;p&gt;async/await对Rust的重要性：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;async/await在其他语言中已经证明了其可用性&lt;/li&gt;&lt;li&gt;在Rust中引入async/await中需要多考虑一个元素：借用。所以，之前在编写异步代码的时候，必须使用&lt;code class=&quot;inline&quot;&gt;&#39;static&lt;/code&gt;限定，并且还经常要用到Arc和Mutex。&lt;/li&gt;&lt;li&gt;async/await语法稳定之后，将不会有「借用」相关的问题。但是在这之前，还有很多工作要做，比如稳定await语法。现在google的Fuchsia项目已经在大规模使用async/await语法了。&lt;/li&gt;&lt;li&gt;标准库中支持Future等trait的工作也即将完成。&lt;/li&gt;&lt;li&gt;确定了各种API，包括Waker、Pin、与tokio兼容的futures-rs 0.1等。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;发布了一些新的crate：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/withoutboats/romio&quot;&gt;romio&lt;/a&gt;，之前介绍过，是对tokio最小化包装，为了支持async/await。&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://docs.rs/http-service&quot;&gt;http-service&lt;/a&gt;， 一个基于字节的、http和新的futures API的crate，提供HTTP通用接口。是从Tide库中提取出来的API。&lt;/li&gt;&lt;li&gt;Tyger，即将推出的这个库是在Hyper上面构建的一个小的crate。提供直接的HTTP服务接口，因此可以直接使用async/await。Tyger也会对Hyper增加一些补充，提供一些更高级的抽象。也是从Tide中提取出来的包。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;官方希望在2019年上半年稳定async/await。官方所考虑的不仅仅是支持这个语法，而且还在为打造async/await生态做足了准备。这也是异步编程支持如此缓慢的原因。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://rust-lang-nursery.github.io/wg-net/2018/12/13/async-update.html&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;社区新闻&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;OS2ATC2018(第六届开源操作系统年度会议)会议现场直播链接&lt;/h2&gt;&lt;p&gt;现在的topic： 《Design &amp;amp; Implementation of uCore Plus OS in Rust Lang》（清华大学ucore操作系统课程升级Rust教学）&lt;/p&gt;&lt;p&gt;https://flypage.chinamcloud.com/h5/tpl/index.html?id=6469&amp;amp;tid=810&lt;/p&gt;&lt;p&gt;日程： http://soft.cs.tsinghua.edu.cn/os2atc2018/rc.html&lt;/p&gt;&lt;h2&gt;「安全」Crossbeam发现double-free Bug&lt;/h2&gt;&lt;blockquote&gt; MsQueue和SegQueue会发生此Bug。 即使从队列中弹出一个元素，crossbeam也会运行它，此问题来自于crossbeam-epoch的垃圾收集器内的析构函数。 &lt;br&gt; &lt;/blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/RustSec/advisory-db/blob/master/crates/crossbeam/RUSTSEC-2018-0009.toml&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;crev: 代码审查工具箱&lt;/h2&gt;&lt;p&gt;提供了一个cargo工具：&lt;a href=&quot;https://github.com/dpc/crev/tree/master/cargo-crev&quot;&gt;cargo-crev&lt;/a&gt;&lt;/p&gt;&lt;p&gt;该工具可以判断你项目中依赖crate的安全性、质量和发现的问题。可以在公共的git仓库里发布可验证的review信息。通过这种方式期望在Rust生态系统中构建可信任的网络。将不会有人再受到未经审查和不受信任代码的困扰。&lt;/p&gt;&lt;p&gt;想想npm因为依赖包出了多少次安全事故。这个工具ms不错，但是否真的可以解决问题？&lt;/p&gt;&lt;p&gt;使用方法：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;cd &amp;lt;your-project&amp;gt;
cargo crev id gen # generate your id
cargo crev verify # verify your depedencies
cargo crev review &amp;lt;crate&amp;gt; # review a dependency
cargo crev db git status # check git status of your proof database
cargo crev db git -- ci -a # commit everything
cargo crev db git push # push it to your github repository
cargo crev trust &amp;lt;id&amp;gt; # trust someone with a given CrevId
cargo crev db fetch # fetch updates from all people you trust
cargo crev verify # verify again
cargo crev help # see what other things you can do&lt;/code&gt;&lt;p&gt;其中id是可以通过&lt;a href=&quot;https://gitter.im/dpc/crev&quot;&gt;crev gitter channel&lt;/a&gt;来共享给大家的，形成信任网络。然后可以通过 &lt;code class=&quot;inline&quot;&gt;cargo crev trust &amp;lt;id&amp;gt;&lt;/code&gt;命令从你信任的人那里获取依赖crate。&lt;/p&gt;&lt;p&gt;当然，这世界上没有绝对的安全，但也无法阻碍人们追求它的脚步。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/dpc/crev&quot;&gt;crev&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Rust非常适合高性能科学计算&lt;/h2&gt;&lt;p&gt;来自某粒子物理实验室的软件性能工程师Hadrien坦言，相比于Cpp，Rust更适合高性能科学计算。并且对Rust能进入这个领域之前需要完善的工作提出了他自己的建议，同时也希望Rust 2019的目标之一可以是「高性能科学计算」。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://gist.github.com/HadrienG2/e9a875bdf98b528594f4e20f8176bb68&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;杭州Rust线下Meetup回放视频&lt;/h2&gt;&lt;p&gt;一共两场分享，视频地址是第二场分享，在列表里也能找到另外一场分享的视频。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av38044021/?share_source=qq&amp;amp;ts=1544706808&amp;amp;share_medium=iphone&amp;amp;bbid=dd199f5b7049675783521db5317f49ba&quot;&gt;Bilibili&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;使用Rust和WebAssembly进行edge计算&lt;/h2&gt;&lt;p&gt;什么是边缘计算？ 边缘计算将数据的处理、应用程序的运行甚至一些功能服务的实现，由网络中心下放到网络边缘的节点上。属于一种分布式计算。一直以来，公共和企业设施的监测和维护消耗着大量的人力、物力成本；电力、制造等行业数字化转型中对海量数据的实时、智能处理也有着强烈需求。如果用常规模式构建物联网，所有数据都交给云端，那么会带来一系列的问题。边缘计算就是为了解决这个问题。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.fastlylabs.com/&quot;&gt;fastlylabs&lt;/a&gt;公司，推出了一个产品Terrarium（看着像是用webassembly.studio改造的），是一个基于浏览器的多语言编辑和部署平台。据该公司描述，此产品是为了推进边缘计算。Terrarium是基于WebAssembly沙箱而构建。Terrarium可以将几种不同的编程语言编译为WebAssembly，然后将其编译为快速，安全的本地代码，并用于为Web服务提供动力。&lt;/p&gt;&lt;p&gt;本文介绍了如何用Rust和Terrarium进行编写边缘计算服务。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.fastly.com/blog/edge-programming-rust-web-assembly&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「趣味」Rust Raps: Rust 2018 Edition首张单曲发布&lt;/h2&gt;&lt;p&gt;由Rusta Rhymes推出的热门新单曲“Ferris Crab（Rust Raps 2018 Edition）”即将推出首张专辑“Drop for Mic”。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://fitzgeraldnick.com/media/rust-raps.mp3&quot;&gt;在线听&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://fitzgeraldnick.com/2018/12/13/rust-raps.html&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Rust开发的一款编程教学游戏预览&lt;/h2&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-63e41a23be7999267843b7c023bebf14_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;389&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-63e41a23be7999267843b7c023bebf14&quot; data-watermark-src=&quot;v2-6f63f7f5f828c1dfd9ec0712aef949fb&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://blog.roboinstruct.us/2018/12/07/looking-good.html&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;学习资源&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;Rust Quiz解读已更新到Quiz 15&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/time-and-spirit-hut&quot;&gt;去专栏 Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Rust 异步函数内部转换流程&lt;/h2&gt;&lt;p&gt;本文介绍了Rust内部async/await的内部转换机制，包括generator、状态转换过程等。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://blag.nemo157.com/2018/12/09/inside-rusts-async-transform.html&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;使用Cargo Test来Debug代码&lt;/h2&gt;&lt;p&gt;本文介绍了使用cargo test命令，结合单元测试来调试代码中的问题。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.wihlidal.com/blog/general/2018-12-07-debugging-cargo-test/&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「系列博文」在浏览器中使用WASM Part 1&lt;/h2&gt;&lt;p&gt;本文介绍了如何使用Rust编译wasm，并在浏览器中使用它。同时也包括了wasm的工作机制，值得一看。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://ljcode.org/blog/wasm-part1/&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;在AWS Lambda上面运行Rust&lt;/h2&gt;&lt;p&gt;本文以编写一个独立的crate为例，从代码编写到部署，介绍如何在AWS Lambda上面运行Rust库。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://kellenfujimoto.com/posts/dicers-rust-on-lambda/&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「嵌入式Rust」Cortex-M3 入门指南（一）：体系概述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/52235675&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「视频」如何在Rust/C/C++/.Net中使用SIMD&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=4Gs_CA_vm3o&quot;&gt;youtube&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;用Rust为Kubernetes动态生成Dockerfiles&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/docql/dynamically-generating-dockerfiles-for-k8s-d2baf7bfef5a&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「Slides」在Rust中使用C的va_list&lt;/h2&gt;&lt;p&gt;以及，你为什么不应该用它。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://dlrobertson.com/slides/va-list-12-13-2018.html#/&quot;&gt;PPT&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/rust/comments/a6j4hu/using_cs_va_list_in_rust_and_why_you_never_should/&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;项目&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;libui-rs: libui的Rust绑定&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/LeoTindall/libui-rs&quot;&gt;libui-rs&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;gba: 帮助你创建GBA游戏&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/rust-console/gba&quot;&gt;gba&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://rust-console.github.io/gba/&quot;&gt;gba book&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;NASA开源的静态分析工具: ikos&lt;/h2&gt;&lt;p&gt;虽然是为C/C++静态分析实现的工具，但据说也适用于LLVM IR，因此有助于检测Unsafe Rust的代码。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/NASA-SW-VnV/ikos&quot;&gt;ikos&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.reddit.com/r/rust/comments/a5kyz9/ikos_21_an_open_source_static_analyzer_from_nasa/&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;seed: Rust+WebAssembly 前端框架&lt;/h2&gt;&lt;p&gt;基于wasm-bindgen和js-sys创建。创建应用时需要依赖web-sys。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/David-OConnor/seed&quot;&gt;seed&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「区块链」comit-rs：Comit协议的Rust实现&lt;/h2&gt;&lt;p&gt;COMIT是一个协议，以链接不同的区块链。以便将区块链生态系统打造地更大，更具有包容性。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/comit-network/comit-rs&quot;&gt;comit-network/comit-rs&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;[WIP] Rust实现的Lua解释器&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/kyren/luster&quot;&gt;luster&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Rust开发安全应用程序指南&lt;/h2&gt;&lt;p&gt;该指南不是Rust语言教程，只是记录Rust开发应用程序过程中可能出现的「坑」，特别是开发一些对安全性要求较高的程序需要注意的地方。该指南还在持续更新中。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/ANSSI-FR/rust-guide&quot;&gt;rust-guide&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/ANSSI-FR/rust-guide/blob/master/src/SUMMARY.md&quot;&gt;Online Read&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;使用Rust配置管理kubernetes&lt;/h2&gt;&lt;p&gt;本文作者使用Rust构建了一个用于管理k8s上运行的微服务声明格式和生命周期的标准化工具shipcat。它封装了k8s的API，目的是为了更加标准化、版本化、权限化、自动化管理k8s。本文阐述了k8s管理中的问题，以及shipcat的解决思路。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/Babylonpartners/shipcat&quot;&gt;shipcat&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://clux.github.io/probes/post/2018-12-15-config-management-in-rust/&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;工具与库&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;spirit教程&lt;/h2&gt;&lt;p&gt;spirit可以帮助开发者更容易地构建Unix守护进程。 文章里介绍了它的使用方法。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/vorner/spirit&quot;&gt;spirit&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://vorner.github.io/2018/12/09/Spirit-Tutorial.html&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;parstream： 基于线程池以流方式计算迭代函数&lt;/h2&gt;&lt;p&gt;并且不会打乱迭代器中元素的顺序。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/newpavlov/parstream&quot;&gt;parstream&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;命令行使用频率跟踪工具fe&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ccheek21/fe&quot;&gt;fe&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;pom：又一个peg解析器&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/J-F-Liu/pom&quot;&gt;pom&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;支持no_std的Curve25519加密库&lt;/h2&gt;&lt;p&gt;椭圆曲线加密/签名/密钥交换算法Curve25519的 &lt;code class=&quot;inline&quot;&gt;#[no_std]&lt;/code&gt; 版本&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/shekohex/curve25519-rs&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-16-52509923</guid>
<pubDate>Sun, 16 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>Rust Quiz 解读：Quiz 15</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-16-52508991.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/52508991&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;来自于RustFest 2018 大会上Alex Crichton 和 David Tolnay两位大佬的轻演讲主题：Rust Quiz&lt;br&gt;-  &lt;a href=&quot;https://github.com/dtolnay/rust-quiz&quot;&gt;rust-quiz源码&lt;/a&gt;&lt;br&gt;-  &lt;a href=&quot;https://dtolnay.github.io/rust-quiz/18&quot;&gt;在线练习和解答&lt;/a&gt;&lt;br&gt;-  &lt;a href=&quot;https://www.youtube.com/watch?v=QtDj9R6vtA8&amp;amp;index=6&amp;amp;list=PLgC1L0fKd7UlpVTHVfLYVtudVx8CzbSxW&amp;amp;t=0s&quot;&gt;视频&lt;/a&gt;&lt;br&gt;&lt;br&gt;不得不说，两位大佬出的题非常具有迷惑性，一不留神就落入了陷阱。&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;Quiz 15:&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;下面这段代码输出什么？&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;trait Trait {
    fn f(&amp;amp;self);
}

impl Trait for u32 {
    fn f(&amp;amp;self) {
        print!(&quot;1&quot;);
    }
}

impl&amp;lt;&#39;a&amp;gt; Trait for &amp;amp;&#39;a i32 {
    fn f(&amp;amp;self) {
        print!(&quot;2&quot;);
    }
}

fn main() {
    let x = &amp;amp;0;
    x.f();
}&lt;/code&gt;&lt;p&gt;&lt;b&gt;输出结果： 1&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;解读&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;考察要点：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;trait实现&lt;/li&gt;&lt;li&gt;&lt;code class=&quot;inline&quot;&gt;T&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;&amp;amp;&#39;a T&lt;/code&gt;的区别&lt;/li&gt;&lt;li&gt;类型推断&lt;/li&gt;&lt;li&gt;自动加引用&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;其实Quiz 15和Quiz 5的考察点是相似的。主要是考察&lt;code class=&quot;inline&quot;&gt;T&lt;/code&gt; 和&lt;code class=&quot;inline&quot;&gt;&amp;amp;T&lt;/code&gt;有啥区别呢？虽然这里是&lt;code class=&quot;inline&quot;&gt;u32&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;&amp;amp;’a i32&lt;/code&gt;。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;T， 是一个泛型参数，代表任何一个具体的类型。&lt;/li&gt;&lt;li&gt;&amp;amp;T，实际上等价于&lt;code class=&quot;inline&quot;&gt;&amp;amp;&#39;a T&lt;/code&gt;，代表某个引用类型。注意这里的&lt;code class=&quot;inline&quot;&gt;&#39;a&lt;/code&gt;也是一个泛型参数，并不是指具体的类型。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;main函数中直接使用了&lt;code class=&quot;inline&quot;&gt;let x = &amp;amp;0;&lt;/code&gt;，&lt;code class=&quot;inline&quot;&gt;&amp;amp;0&lt;/code&gt;实际上是一个包含了具体生命周期参数实例的具体类型&lt;code class=&quot;inline&quot;&gt;&amp;amp;&#39;a 0&lt;/code&gt;。所以，&lt;code class=&quot;inline&quot;&gt;&amp;amp;0&lt;/code&gt;实际上会被推断为一个具体的&lt;code class=&quot;inline&quot;&gt;T&lt;/code&gt;类型的实例&lt;code class=&quot;inline&quot;&gt;u32&lt;/code&gt;。 &lt;/p&gt;&lt;p&gt;这和&lt;code class=&quot;inline&quot;&gt;impl Trait for ...&lt;/code&gt;的定义顺序无关。不妨把&lt;code class=&quot;inline&quot;&gt;impl&amp;lt;&#39;a&amp;gt; Trait for &amp;amp;&#39;a i32 { ... }&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;impl Trait for u32 { ... }&lt;/code&gt;的顺序交换，输出结果照样不变。&lt;/p&gt;&lt;p&gt;此时在&lt;code class=&quot;inline&quot;&gt;u32&lt;/code&gt;的&lt;code class=&quot;inline&quot;&gt;f&lt;/code&gt;方法实现中&lt;code class=&quot;inline&quot;&gt;self&lt;/code&gt;是&lt;code class=&quot;inline&quot;&gt;&amp;amp;u32&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;所以，&lt;code class=&quot;inline&quot;&gt;x.f()&lt;/code&gt;会输出&lt;code class=&quot;inline&quot;&gt;1&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;如果把&lt;code class=&quot;inline&quot;&gt;impl Trait for u32 {}&lt;/code&gt;实现注释掉。则 &lt;code class=&quot;inline&quot;&gt;x.f()&lt;/code&gt;会输出&lt;code class=&quot;inline&quot;&gt;2&lt;/code&gt;。&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;trait Trait {
    fn f(&amp;amp;self);
}

impl&amp;lt;&#39;a&amp;gt; Trait for &amp;amp;&#39;a i32 {
    fn f(&amp;amp;self) {
        print!(&quot;2&quot;);
    }
}

fn main() {
    let x = &amp;amp;0;
    x.f();
}&lt;/code&gt;&lt;p&gt;在这个代码中，&lt;code class=&quot;inline&quot;&gt;f&lt;/code&gt;方法中的&lt;code class=&quot;inline&quot;&gt;self&lt;/code&gt;会被自动加引用为&lt;code class=&quot;inline&quot;&gt;&amp;amp;&amp;amp;0&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://dtolnay.github.io/rust-quiz/15&quot;&gt;点此查看 Rust Quiz 15&lt;/a&gt; &lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-16-52508991</guid>
<pubDate>Sun, 16 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>Rust Quiz 解读：Quiz 14</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-14-52418867.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/52418867&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt; 来自于RustFest 2018 大会上Alex Crichton 和 David Tolnay两位大佬的轻演讲主题：Rust Quiz  &lt;br&gt; &lt;br&gt;- &lt;a href=&quot;https://github.com/dtolnay/rust-quiz&quot;&gt;rust-quiz源码&lt;/a&gt; &lt;br&gt;- &lt;a href=&quot;https://dtolnay.github.io/rust-quiz/18&quot;&gt;在线练习和解答&lt;/a&gt; &lt;br&gt;- &lt;a href=&quot;https://www.youtube.com/watch?v=QtDj9R6vtA8&amp;amp;index=6&amp;amp;list=PLgC1L0fKd7UlpVTHVfLYVtudVx8CzbSxW&amp;amp;t=0s&quot;&gt;视频&lt;/a&gt; &lt;br&gt; &lt;br&gt;不得不说，两位大佬出的题非常具有迷惑性，一不留神就落入了陷阱。   &lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;Quiz 14:&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;下面这段代码输出什么？&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;trait Trait: Sized {
    fn is_reference(self) -&amp;gt; bool;
}

impl&amp;lt;&#39;a, T&amp;gt; Trait for &amp;amp;&#39;a T {
    fn is_reference(self) -&amp;gt; bool {
        true
    }
}

fn main() {
    match 0.is_reference() {
        true =&amp;gt; print!(&quot;1&quot;),
        false =&amp;gt; print!(&quot;0&quot;),
    }

    match &#39;?&#39;.is_reference() {
        true =&amp;gt; print!(&quot;1&quot;),
        false =&amp;gt; {
            impl Trait for char {
                fn is_reference(self) -&amp;gt; bool {
                    false
                }
            }
            print!(&quot;0&quot;)
        }
    }
}&lt;/code&gt;&lt;p&gt;&lt;b&gt;输出结果：10&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;解读&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;考察要点：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;自动引用（autoref）&lt;/li&gt;&lt;li&gt;impl trait 的可见性&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Quiz代码中定义了Trait，并限定了Sized trait。这意味着该Trait无法当作trait对象来使用。但是对于Quiz代码来说没有啥特殊意义。&lt;/p&gt;&lt;p&gt;然后为&lt;code class=&quot;inline&quot;&gt;&amp;amp;&#39;a T&lt;/code&gt;实现了Trait：&lt;code class=&quot;inline&quot;&gt;impl&amp;lt;&#39;a, T&amp;gt; Trait for &amp;amp;&#39;a T { ... }&lt;/code&gt;。&lt;code class=&quot;inline&quot;&gt;&amp;amp;&#39;a T&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;T&lt;/code&gt;有什么区别呢？在之前的Quiz解读中已经讲过了。&lt;/p&gt;&lt;p&gt;在main函数中， &lt;code class=&quot;inline&quot;&gt;match 0.is_reference(){ ... }&lt;/code&gt;，当调用数字&lt;code class=&quot;inline&quot;&gt;0&lt;/code&gt;的&lt;code class=&quot;inline&quot;&gt;is_reference&lt;/code&gt;方法时，你可能会想，数字类型有没有被实现&lt;code class=&quot;inline&quot;&gt;Trait&lt;/code&gt;呢？在为&lt;code class=&quot;inline&quot;&gt;&amp;amp;&#39;a T&lt;/code&gt;的实现中，&lt;code class=&quot;inline&quot;&gt;is_reference&lt;/code&gt;的参数是&lt;code class=&quot;inline&quot;&gt;self&lt;/code&gt;。到底编译会不会成功呢？&lt;/p&gt;&lt;p&gt;事实上，这里涉及一个规则：自动引用。&lt;/p&gt;&lt;p&gt;当调用&lt;code class=&quot;inline&quot;&gt;0.is_reference()&lt;/code&gt;的时候，会为&lt;code class=&quot;inline&quot;&gt;0&lt;/code&gt;自动添加引用，等价于&lt;code class=&quot;inline&quot;&gt;(&amp;amp;0).is_reference()&lt;/code&gt;。 这是因为上下文中只有为&lt;code class=&quot;inline&quot;&gt;&amp;amp;&#39;a T&lt;/code&gt;实现了&lt;code class=&quot;inline&quot;&gt;Trait&lt;/code&gt;。此时&lt;code class=&quot;inline&quot;&gt;is_reference&lt;/code&gt;方法中的&lt;code class=&quot;inline&quot;&gt;self&lt;/code&gt;等价于&lt;code class=&quot;inline&quot;&gt;&amp;amp;&#39;a i32&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;如果为&lt;code class=&quot;inline&quot;&gt;T&lt;/code&gt;实现&lt;code class=&quot;inline&quot;&gt;Trait&lt;/code&gt;，就不会存在自动引用了。&lt;/p&gt;&lt;p&gt;注意：在Rust中与自动引用对应的规则，还有一个&lt;code class=&quot;inline&quot;&gt;自动解引用(auto deref)&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;所以，这里&lt;code class=&quot;inline&quot;&gt;0.is_reference()&lt;/code&gt;调用，会返回true。输出结果当然是： &lt;code class=&quot;inline&quot;&gt;1&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;而&lt;code class=&quot;inline&quot;&gt;match &#39;?&#39;.is_reference()&lt;/code&gt;，是调用字符&lt;code class=&quot;inline&quot;&gt;?&lt;/code&gt;的&lt;code class=&quot;inline&quot;&gt;is_reference()&lt;/code&gt;方法。这里迷惑人的地方就是&lt;code class=&quot;inline&quot;&gt;impl Trait for char { ... }&lt;/code&gt;实现是放到了&lt;code class=&quot;inline&quot;&gt;false&lt;/code&gt;匹配分支中。但实际上&lt;code class=&quot;inline&quot;&gt;impl Trait for char {...}&lt;/code&gt;是对整个Quiz代码可见的。所以，在&lt;code class=&quot;inline&quot;&gt;&#39;?&#39;.is_reference()&lt;/code&gt;调用的时候，它会输出&lt;code class=&quot;inline&quot;&gt;false&lt;/code&gt;，最终match匹配结果自然是： &lt;code class=&quot;inline&quot;&gt;0&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;如果你将&lt;code class=&quot;inline&quot;&gt;impl Trait for char {...}&lt;/code&gt;实现代码去掉的话：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;match &#39;?&#39;.is_reference() {
    true =&amp;gt; print!(&quot;1&quot;),
    false =&amp;gt; print!(&quot;0&quot;)
}&lt;/code&gt;&lt;p&gt;输出结果将会是：&lt;code class=&quot;inline&quot;&gt;11&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://dtolnay.github.io/rust-quiz/14&quot;&gt;点此查看 Rust Quiz 14&lt;/a&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-14-52418867</guid>
<pubDate>Fri, 14 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>Rust Quiz 解读：Quiz 13</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-12-52189029.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/52189029&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;来自于RustFest 2018 大会上Alex Crichton 和 David Tolnay两位大佬的轻演讲主题：Rust Quiz  &lt;br&gt; &lt;br&gt;- &lt;a href=&quot;https://github.com/dtolnay/rust-quiz&quot;&gt;rust-quiz源码&lt;/a&gt; &lt;br&gt;- &lt;a href=&quot;https://dtolnay.github.io/rust-quiz/18&quot;&gt;在线练习和解答&lt;/a&gt; &lt;br&gt;- &lt;a href=&quot;https://www.youtube.com/watch?v=QtDj9R6vtA8&amp;amp;index=6&amp;amp;list=PLgC1L0fKd7UlpVTHVfLYVtudVx8CzbSxW&amp;amp;t=0s&quot;&gt;视频&lt;/a&gt; &lt;br&gt;&lt;br&gt; 不得不说，两位大佬出的题非常具有迷惑性，一不留神就落入了陷阱。   &lt;/blockquote&gt;&lt;h2&gt;Quiz 13:&lt;/h2&gt;&lt;p&gt;下面这段代码输出什么？&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;struct S;

fn main() {
    let [x, y] = &amp;amp;mut [S, S];
    let eq = x as *mut S == y as *mut S;
    print!(&quot;{}&quot;, eq as u8);
}&lt;/code&gt;&lt;p&gt;&lt;b&gt;输出结果：1&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;解读&lt;/h2&gt;&lt;p&gt;考察要点：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;单元结构体&lt;/li&gt;&lt;li&gt;let绑定模式匹配&lt;/li&gt;&lt;li&gt;数组布局&lt;/li&gt;&lt;li&gt;操作符优先级&lt;/li&gt;&lt;li&gt;引用和原生指针的转换&lt;/li&gt;&lt;li&gt;bool类型转换为数字&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Quiz代码中定义了单元结构体&lt;code class=&quot;inline&quot;&gt;S&lt;/code&gt;。在main函数中，使用let绑定模式匹解构&lt;code class=&quot;inline&quot;&gt;&amp;amp;mut [S, S]&lt;/code&gt;数组，定义了&lt;code class=&quot;inline&quot;&gt;x&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;y&lt;/code&gt;两个变量。&lt;/p&gt;&lt;p&gt;此时&lt;code class=&quot;inline&quot;&gt;x&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;y&lt;/code&gt;的值分别是&lt;code class=&quot;inline&quot;&gt;&amp;amp;mut S&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;&amp;amp;mut S&lt;/code&gt;。 数组本身是可变借用，那么其元素自然也是借用，不可能是拥有其所有权。&lt;/p&gt;&lt;p&gt;这里可能有人要怀疑&lt;code class=&quot;inline&quot;&gt;x&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;y&lt;/code&gt;同时对&lt;code class=&quot;inline&quot;&gt;S&lt;/code&gt;进行可变借用，合法吗？答案是肯定的。因为此时&lt;code class=&quot;inline&quot;&gt;x&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;y&lt;/code&gt;借用的单元结构体&lt;code class=&quot;inline&quot;&gt;S&lt;/code&gt;可看作是两个独立的结构体实例。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;let eq = x as *mut S == y as *mut S;&lt;/code&gt;这行代码等价于&lt;code class=&quot;inline&quot;&gt;let eq = ( (x as *mut S) == (y as *mut S) );&lt;/code&gt;。优先级&lt;code class=&quot;inline&quot;&gt;as&lt;/code&gt; &amp;gt; &lt;code class=&quot;inline&quot;&gt;==&lt;/code&gt; &amp;gt; &lt;code class=&quot;inline&quot;&gt;=&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;x&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;y&lt;/code&gt;本身是可变借用，然后通过&lt;code class=&quot;inline&quot;&gt;as&lt;/code&gt;转换为原生可变指针类型（*mut S），然后对它们进行比较，是看它们的地址是否相同。然后将最后的bool类型结果赋值给&lt;code class=&quot;inline&quot;&gt;eq&lt;/code&gt;。最后通过&lt;code class=&quot;inline&quot;&gt;as&lt;/code&gt;将&lt;code class=&quot;inline&quot;&gt;bool&lt;/code&gt;类型的值转换为&lt;code class=&quot;inline&quot;&gt;u8&lt;/code&gt;。可以预测结果，不是&lt;code class=&quot;inline&quot;&gt;0&lt;/code&gt;就是&lt;code class=&quot;inline&quot;&gt;1&lt;/code&gt;，其中&lt;code class=&quot;inline&quot;&gt;0&lt;/code&gt;对应于&lt;code class=&quot;inline&quot;&gt;false&lt;/code&gt;， &lt;code class=&quot;inline&quot;&gt;1&lt;/code&gt;对应于&lt;code class=&quot;inline&quot;&gt;true&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;虽然分析出了整个过程，但是我无法确定这里到底是输出1还是0。因为我无法确定这里Rust的行为，这两个原生指针地址是否相同。&lt;/p&gt;&lt;p&gt;想知道我为啥有这个疑问吗？可以看看下面的代码：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;struct Empty;
fn main() {
    let x = &amp;amp;mut Empty;
    println!(&quot;x {:p}&quot;, x);
    let y = &amp;amp;mut Empty;
    println!(&quot;y {:p}&quot;, y);
}&lt;/code&gt;&lt;p&gt;此代码在Debug模式下编译的结果是：&lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;x 0x7fff5b8c2058
y 0x7fff5b8c20c0&lt;/code&gt;&lt;p&gt;在Release模式下编译的结果是：&lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;x 0x7ffe9ae101d8
y 0x7ffe9ae101d8&lt;/code&gt;&lt;p&gt;所以，你明白了吗？ 在Debug模式下编译，不同的单元结构体实例，地址是不同的，但是在Release模式下，不同的单元结构体实例会被优化成同一个地址。&lt;/p&gt;&lt;p&gt;这就是我为什么不敢确定Quiz代码输出结果的原因。没办法，只能把Quiz代码实际执行一下看看输出结果了。然后发现，不管是Debug模式还是Release模式，Quiz代码的输出结果都是&lt;code class=&quot;inline&quot;&gt;1&lt;/code&gt;。也就是说，&lt;code class=&quot;inline&quot;&gt;x&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;y&lt;/code&gt;的地址是一样的。&lt;/p&gt;&lt;p&gt;这是怎么回事呢？&lt;/p&gt;&lt;p&gt;我注意到Quiz代码和我上面编写代码中定义变量的区别：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;// Quiz 代码中
let [x, y] = &amp;amp;mut [S, S];

// 我自定义代码中
let x = &amp;amp;mut Empty;
let y = &amp;amp;mut Empty;&lt;/code&gt;&lt;p&gt;我有所悟： 在Quiz代码中的两个单元结构体实例是放到一个&lt;code class=&quot;inline&quot;&gt;[S; 2]&lt;/code&gt;类型的数组中的，同一个数组的起始地址肯定是一样的。难道Rust把数组的起始地址作为&lt;code class=&quot;inline&quot;&gt;x&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;y&lt;/code&gt;这两个实例的地址？&lt;/p&gt;&lt;p&gt;来看下面代码：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;struct S;
struct E;

struct A {
    s: S,
    e: E,
}

fn main() {
    let (x, y) = &amp;amp;mut (S, E);
    println!(&quot;{:p}&quot;, x as *mut S);
    println!(&quot;{:p}&quot;, y as *mut E);

    let A{s, e} = &amp;amp;mut A{s: S, e: E};
    println!(&quot;{:p}&quot;, s as *mut S);
    println!(&quot;{:p}&quot;, e as *mut E);
}&lt;/code&gt;&lt;p&gt;在Debug模式下编译：&lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;0x7ffe370bd7b8
0x7ffe370bd7b8
0x7ffe370bd890
0x7ffe370bd890&lt;/code&gt;&lt;p&gt;在Release模式下编译：&lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;0x7ffcde64f608
0x7ffcde64f608
0x7ffcde64f608
0x7ffcde64f608&lt;/code&gt;&lt;p&gt;所以，你明白了吗？&lt;/p&gt;&lt;h2&gt;&lt;a href=&quot;https://dtolnay.github.io/rust-quiz/13&quot;&gt;点此查看 Rust Quiz 13&lt;/a&gt; &lt;/h2&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-12-52189029</guid>
<pubDate>Wed, 12 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>Rust 2022</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-12-52181046.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/52181046&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-c2dd047bb41769e871c4282d775cdbff_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;b&gt;前几天Rust 2018 Edition刚刚发布，官方以及整个Rust社区，开始思考下一个Edition大版本的目标该是什么？以及Rust 2019的Roadmap。&lt;/b&gt;&lt;br&gt;&lt;b&gt;官方核心团队成员nrc也专门写了篇博文阐述了他自己的思考，本文是对他这篇博文的摘要描述。&lt;/b&gt;&lt;br&gt;&lt;b&gt;原文：&lt;a href=&quot;https://www.ncameron.org/blog/rust-in-2022/&quot;&gt;Rust in 2022&lt;/a&gt;&lt;/b&gt; &lt;/blockquote&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;思绪站在了2022年，回望2019年，nrc得出一个结论：Rust 2021 edition的目标应该是跟&lt;b&gt;「成熟度」&lt;/b&gt;相关，也就是说，2022年的开发者面对Rust做选择的时候，&lt;b&gt;决不能是「高风险/高回报式」的选择，而应该是一个安全的选择&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;&lt;b&gt;所以Rust 2021 edition的目标应该覆盖如下方面：&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;可持续性。&lt;/li&gt;&lt;li&gt;多样性。&lt;/li&gt;&lt;li&gt;成熟的工具。包括Cargo、IDE支持等，从广度和深度上都要加强。&lt;/li&gt;&lt;li&gt;异步编程。&lt;/li&gt;&lt;li&gt;标准库的改进。主要面向生态系统的扩展。&lt;/li&gt;&lt;li&gt;完成「宏」的功能。&lt;/li&gt;&lt;li&gt;国际化。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;持续关注Rust已经被证明适用的领域（系统、网络、嵌入式、WASM、游戏），以及发现新的领域。&lt;br&gt;&lt;br&gt;&lt;b&gt;再回头来看2019年，具体应该做什么呢？&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;增强标准库和工具的可发现性。比如新用户如何了解serde和clippy？&lt;/li&gt;&lt;li&gt;提升RFC流程&lt;/li&gt;&lt;li&gt;Rust项目的基础设施。如何改进和治理Rust代码结构，如何改进流程，如果让贡献者轻松更快地为Rust做贡献？&lt;/li&gt;&lt;li&gt;继续维护「COC」，保证社区讨论的「基调」充满友善。&lt;/li&gt;&lt;li&gt;提升Rust代码的安全性。&lt;/li&gt;&lt;li&gt;应该更加关注游戏和图形领域的应用。这些领域是性能敏感区。&lt;/li&gt;&lt;li&gt;继续推动异步编程进展。&lt;/li&gt;&lt;li&gt;Cargo需要更好地继承到IDE中。&lt;/li&gt;&lt;li&gt;努力让RLS变得更好。&lt;/li&gt;&lt;li&gt;更好的IDE体验。&lt;/li&gt;&lt;li&gt;集成Rustdoc、docs.rs和cargo-src，获得最佳文档和源码探索体验。&lt;/li&gt;&lt;li&gt; 完善编译器的query API。&lt;/li&gt;&lt;li&gt;Rust语言团队应该考虑一下开发节奏，为下一版做准备。获得足够的开发时间和迭代时间。&lt;/li&gt;&lt;li&gt;不管是GAT(generic associated types )或HKT或其他什么，需要确保有一个可以解决需要解决的问题的功能，并且不需要更多其他功能。也就是说，GAT可能是最后一个为trait系统增加的特性。&lt;/li&gt;&lt;li&gt;特化。可能与宏结合来完善这一工作。&lt;/li&gt;&lt;li&gt;继续推进未完善的功能（宏、impl Trait、const fn、nll等）&lt;/li&gt;&lt;li&gt;命名和可选参数支持&lt;/li&gt;&lt;li&gt;enum中增加类型变体（variant types），而不仅仅只支持值变体。&lt;/li&gt;&lt;li&gt;继续推动编译器性能&lt;br&gt;&lt;br&gt;虽然这都是nrc自己的愿望，但他可是核心团队成员，他的想法是可以直接传达到Rust官方。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-12-52181046</guid>
<pubDate>Wed, 12 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>Rust Quiz 解读：Quiz 12</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-11-52098828.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/52098828&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;来自于RustFest 2018 大会上Alex Crichton 和 David Tolnay两位大佬的轻演讲主题：Rust Quiz  &lt;br&gt; &lt;br&gt;- &lt;a href=&quot;https://github.com/dtolnay/rust-quiz&quot;&gt;rust-quiz源码&lt;/a&gt; &lt;br&gt;- &lt;a href=&quot;https://dtolnay.github.io/rust-quiz/18&quot;&gt;在线练习和解答&lt;/a&gt; &lt;br&gt;- &lt;a href=&quot;https://www.youtube.com/watch?v=QtDj9R6vtA8&amp;amp;index=6&amp;amp;list=PLgC1L0fKd7UlpVTHVfLYVtudVx8CzbSxW&amp;amp;t=0s&quot;&gt;视频&lt;/a&gt; &lt;br&gt;&lt;br&gt; 不得不说，两位大佬出的题非常具有迷惑性，一不留神就落入了陷阱。   &lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;Quiz 12:&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;下面这段代码输出什么？&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;struct D(u8);

impl Drop for D {
    fn drop(&amp;amp;mut self) {
        print!(&quot;{}&quot;, self.0);
    }
}

struct S {
    d: D,
    x: u8,
}

fn main() {
    let S { x, .. } = S {
        d: D(1),
        x: 2,
    };
    print!(&quot;{}&quot;, x);

    let S { ref x, .. } = S {
        d: D(3),
        x: 4,
    };
    print!(&quot;{}&quot;, x);
}&lt;/code&gt;&lt;p&gt;&lt;b&gt;输出结果： 1243&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;考察要点&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;let绑定时，结构体模式匹配&lt;/li&gt;&lt;li&gt;ref 模式匹配&lt;/li&gt;&lt;li&gt;析构顺序&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Quiz代码中定义了单元结构体&lt;code class=&quot;inline&quot;&gt;D(u8)&lt;/code&gt;，并且为其实现了Drop。这意味着，在&lt;code class=&quot;inline&quot;&gt;D(u8)&lt;/code&gt;出了作用域会自动调用其实现的&lt;code class=&quot;inline&quot;&gt;drop&lt;/code&gt;方法。&lt;/p&gt;&lt;p&gt;然后定义了结构体S，两个字段其中一个类似是&lt;code class=&quot;inline&quot;&gt;D&lt;/code&gt;。这就意味着，该结构体实例被销毁时，会调用字段&lt;code class=&quot;inline&quot;&gt;d&lt;/code&gt;的&lt;code class=&quot;inline&quot;&gt;drop&lt;/code&gt;方法。&lt;/p&gt;&lt;p&gt;在main函数中，使用let绑定模式匹配解构一个结构体实例。&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;let S { x, .. } = S {
    d: D(1),
    x: 2,
};&lt;/code&gt;&lt;p&gt;上面代码相当于定义了&lt;code class=&quot;inline&quot;&gt;let x = 2;&lt;/code&gt; ，而结构体实例中&lt;code class=&quot;inline&quot;&gt;d: D(1)&lt;/code&gt;字段将会被抛弃，因为它没有绑定任何变量。 所以，此时输出&lt;code class=&quot;inline&quot;&gt;x&lt;/code&gt;的值为： 2。&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;let S { ref x, .. } = S {
    d: D(3),
    x: 4,
};&lt;/code&gt;&lt;p&gt;同理，上面代码的&lt;code class=&quot;inline&quot;&gt;d: D(3)&lt;/code&gt;同样会被抛弃。相当于&lt;code class=&quot;inline&quot;&gt;let ref x = 4;&lt;/code&gt;，等价于&lt;code class=&quot;inline&quot;&gt;let x = &amp;amp;4;&lt;/code&gt;。所以，此时输出&lt;code class=&quot;inline&quot;&gt;x&lt;/code&gt;的值为： &lt;code class=&quot;inline&quot;&gt;4&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;&lt;b&gt;但为什么输出结果顺序是：&lt;code class=&quot;inline&quot;&gt;1 -&amp;gt; 2 -&amp;gt; 4 -&amp;gt; 3&lt;/code&gt;呢？&lt;/b&gt;&lt;/p&gt;&lt;p&gt;我们为Quiz代码中的结构体&lt;code class=&quot;inline&quot;&gt;S&lt;/code&gt;实现一个Drop。&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;impl Drop for S {
    fn drop(&amp;amp;mut self) {
        print!(&quot;S&quot;);
    }
}&lt;/code&gt;&lt;p&gt;然后再执行Quiz代码，输出结果是： &lt;code class=&quot;inline&quot;&gt;S124S3&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;从这个结果中发现：&lt;/p&gt;&lt;p&gt;最先析构的是结构体S的第一个实例，其次是&lt;code class=&quot;inline&quot;&gt;d: D(1)&lt;/code&gt;，第三个是结构体S的另一个实例，最后是&lt;code class=&quot;inline&quot;&gt;d: D(3)&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;两个结构体实例先于&lt;code class=&quot;inline&quot;&gt;D(1)&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;D(3)&lt;/code&gt;析构，是因为它们是先声明的。但是为什么输出结果不是&lt;code class=&quot;inline&quot;&gt;S12S34&lt;/code&gt;呢？&lt;/p&gt;&lt;p&gt;继续修改Quiz代码：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;let S {  x, .. } = S {
        d: D(3),
        x: 4,
    };&lt;/code&gt;&lt;p&gt;把main函数中第二个结构体实例的let绑定中的&lt;code class=&quot;inline&quot;&gt;ref&lt;/code&gt;去掉了。输出结果是：&lt;code class=&quot;inline&quot;&gt;S12S34&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;看来，是这个&lt;code class=&quot;inline&quot;&gt;ref&lt;/code&gt;影响了析构的顺序。回到原始的Quiz代码中，来分析这个过程：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;第一个结构体实例最先被声明，但该实例本身也没有被绑定任何变量。所以它第一个被弃用。调用其drop方法输出：&lt;code class=&quot;inline&quot;&gt;S&lt;/code&gt;。&lt;/li&gt;&lt;li&gt;第二个被析构的是&lt;code class=&quot;inline&quot;&gt;D(1)&lt;/code&gt;，同理，因为它没有绑定任何变量，此时已无用。调用其drop方法输出：&lt;code class=&quot;inline&quot;&gt;1&lt;/code&gt;。&lt;/li&gt;&lt;li&gt;此时结构体中x字段已经绑定给了x变量，打印输出它的值： &lt;code class=&quot;inline&quot;&gt;2&lt;/code&gt;。&lt;/li&gt;&lt;li&gt;第三个被析构的是第二个结构体S的实例。理论上，它没有绑定任何变量。所以应该调用其drop方法输出：&lt;code class=&quot;inline&quot;&gt;S&lt;/code&gt;。但是，此时let绑定解构语句中使用了&lt;code class=&quot;inline&quot;&gt;ref&lt;/code&gt;，它是一种模式匹配操作，将该结构体实例的字段&lt;code class=&quot;inline&quot;&gt;x&lt;/code&gt;的引用匹配了出来，相当于&lt;code class=&quot;inline&quot;&gt;let x = &amp;amp;S{x: 4}.x&lt;/code&gt;。也就是说，此时的绑定&lt;code class=&quot;inline&quot;&gt;x&lt;/code&gt;，是对结构体实例中字段的引用，如果此时抛弃了该结构体实例，势必会造成悬垂指针。所以，这里直接输出打印x的值：&lt;code class=&quot;inline&quot;&gt;4&lt;/code&gt;。&lt;/li&gt;&lt;li&gt;在使用完&lt;code class=&quot;inline&quot;&gt;x&lt;/code&gt;之后，结构体实例可以被析构了，调用drop，然后输出：&lt;code class=&quot;inline&quot;&gt;S&lt;/code&gt;。&lt;/li&gt;&lt;li&gt;最后在对&lt;code class=&quot;inline&quot;&gt;D(3)&lt;/code&gt;析构，输出：&lt;code class=&quot;inline&quot;&gt;3&lt;/code&gt;。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;那么最终结果就是： &lt;code class=&quot;inline&quot;&gt;S124S3&lt;/code&gt;。对于原始Quiz代码来说，输出结果就是：&lt;code class=&quot;inline&quot;&gt;1243&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://dtolnay.github.io/rust-quiz/12&quot;&gt;点此查看 Rust Quiz 12&lt;/a&gt; &lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-11-52098828</guid>
<pubDate>Tue, 11 Dec 2018 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
