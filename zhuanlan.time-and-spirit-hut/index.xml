<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>时光与精神小屋</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/</link>
<description></description>
<language>zh-cn</language>
<lastBuildDate>Tue, 11 Dec 2018 17:24:28 +0800</lastBuildDate>
<item>
<title>Rust Quiz 解读：Quiz 12</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-11-52098828.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/52098828&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;来自于RustFest 2018 大会上Alex Crichton 和 David Tolnay两位大佬的轻演讲主题：Rust Quiz  &lt;br&gt; &lt;br&gt;- &lt;a href=&quot;https://github.com/dtolnay/rust-quiz&quot;&gt;rust-quiz源码&lt;/a&gt; &lt;br&gt;- &lt;a href=&quot;https://dtolnay.github.io/rust-quiz/18&quot;&gt;在线练习和解答&lt;/a&gt; &lt;br&gt;- &lt;a href=&quot;https://www.youtube.com/watch?v=QtDj9R6vtA8&amp;amp;index=6&amp;amp;list=PLgC1L0fKd7UlpVTHVfLYVtudVx8CzbSxW&amp;amp;t=0s&quot;&gt;视频&lt;/a&gt; &lt;br&gt;&lt;br&gt; 不得不说，两位大佬出的题非常具有迷惑性，一不留神就落入了陷阱。   &lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;Quiz 12:&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;下面这段代码输出什么？&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;struct D(u8);

impl Drop for D {
    fn drop(&amp;amp;mut self) {
        print!(&quot;{}&quot;, self.0);
    }
}

struct S {
    d: D,
    x: u8,
}

fn main() {
    let S { x, .. } = S {
        d: D(1),
        x: 2,
    };
    print!(&quot;{}&quot;, x);

    let S { ref x, .. } = S {
        d: D(3),
        x: 4,
    };
    print!(&quot;{}&quot;, x);
}&lt;/code&gt;&lt;p&gt;&lt;b&gt;输出结果： 1243&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;考察要点&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;let绑定时，结构体模式匹配&lt;/li&gt;&lt;li&gt;ref 模式匹配&lt;/li&gt;&lt;li&gt;析构顺序&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Quiz代码中定义了单元结构体&lt;code class=&quot;inline&quot;&gt;D(u8)&lt;/code&gt;，并且为其实现了Drop。这意味着，在&lt;code class=&quot;inline&quot;&gt;D(u8)&lt;/code&gt;出了作用域会自动调用其实现的&lt;code class=&quot;inline&quot;&gt;drop&lt;/code&gt;方法。&lt;/p&gt;&lt;p&gt;然后定义了结构体S，两个字段其中一个类似是&lt;code class=&quot;inline&quot;&gt;D&lt;/code&gt;。这就意味着，该结构体实例被销毁时，会调用字段&lt;code class=&quot;inline&quot;&gt;d&lt;/code&gt;的&lt;code class=&quot;inline&quot;&gt;drop&lt;/code&gt;方法。&lt;/p&gt;&lt;p&gt;在main函数中，使用let绑定模式匹配解构一个结构体实例。&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;let S { x, .. } = S {
    d: D(1),
    x: 2,
};&lt;/code&gt;&lt;p&gt;上面代码相当于定义了&lt;code class=&quot;inline&quot;&gt;let x = 2;&lt;/code&gt; ，而结构体实例中&lt;code class=&quot;inline&quot;&gt;d: D(1)&lt;/code&gt;字段将会被抛弃，因为它没有绑定任何变量。 所以，此时输出&lt;code class=&quot;inline&quot;&gt;x&lt;/code&gt;的值为： 2。&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;let S { ref x, .. } = S {
    d: D(3),
    x: 4,
};&lt;/code&gt;&lt;p&gt;同理，上面代码的&lt;code class=&quot;inline&quot;&gt;d: D(3)&lt;/code&gt;同样会被抛弃。相当于&lt;code class=&quot;inline&quot;&gt;let ref x = 4;&lt;/code&gt;，等价于&lt;code class=&quot;inline&quot;&gt;let x = &amp;amp;4;&lt;/code&gt;。所以，此时输出&lt;code class=&quot;inline&quot;&gt;x&lt;/code&gt;的值为： &lt;code class=&quot;inline&quot;&gt;4&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;&lt;b&gt;但为什么输出结果顺序是：&lt;code class=&quot;inline&quot;&gt;1 -&amp;gt; 2 -&amp;gt; 4 -&amp;gt; 3&lt;/code&gt;呢？&lt;/b&gt;&lt;/p&gt;&lt;p&gt;我们为Quiz代码中的结构体&lt;code class=&quot;inline&quot;&gt;S&lt;/code&gt;实现一个Drop。&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;impl Drop for S {
    fn drop(&amp;amp;mut self) {
        print!(&quot;S&quot;);
    }
}&lt;/code&gt;&lt;p&gt;然后再执行Quiz代码，输出结果是： &lt;code class=&quot;inline&quot;&gt;S124S3&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;从这个结果中发现：&lt;/p&gt;&lt;p&gt;最先析构的是结构体S的第一个实例，其次是&lt;code class=&quot;inline&quot;&gt;d: D(1)&lt;/code&gt;，第三个是结构体S的另一个实例，最后是&lt;code class=&quot;inline&quot;&gt;d: D(3)&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;两个结构体实例先于&lt;code class=&quot;inline&quot;&gt;D(1)&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;D(3)&lt;/code&gt;析构，是因为它们是先声明的。但是为什么输出结果不是&lt;code class=&quot;inline&quot;&gt;S12S34&lt;/code&gt;呢？&lt;/p&gt;&lt;p&gt;继续修改Quiz代码：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;let S {  x, .. } = S {
        d: D(3),
        x: 4,
    };&lt;/code&gt;&lt;p&gt;把main函数中第二个结构体实例的let绑定中的&lt;code class=&quot;inline&quot;&gt;ref&lt;/code&gt;去掉了。输出结果是：&lt;code class=&quot;inline&quot;&gt;S12S34&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;看来，是这个&lt;code class=&quot;inline&quot;&gt;ref&lt;/code&gt;影响了析构的顺序。回到原始的Quiz代码中，来分析这个过程：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;第一个结构体实例最先被声明，但该实例本身也没有被绑定任何变量。所以它第一个被弃用。调用其drop方法输出：&lt;code class=&quot;inline&quot;&gt;S&lt;/code&gt;。&lt;/li&gt;&lt;li&gt;第二个被析构的是&lt;code class=&quot;inline&quot;&gt;D(1)&lt;/code&gt;，同理，因为它没有绑定任何变量，此时已无用。调用其drop方法输出：&lt;code class=&quot;inline&quot;&gt;1&lt;/code&gt;。&lt;/li&gt;&lt;li&gt;此时结构体中x字段已经绑定给了x变量，打印输出它的值： &lt;code class=&quot;inline&quot;&gt;2&lt;/code&gt;。&lt;/li&gt;&lt;li&gt;第三个被析构的是第二个结构体S的实例。理论上，它没有绑定任何变量。所以应该调用其drop方法输出：&lt;code class=&quot;inline&quot;&gt;S&lt;/code&gt;。但是，此时let绑定解构语句中使用了&lt;code class=&quot;inline&quot;&gt;ref&lt;/code&gt;，它是一种模式匹配操作，将该结构体实例的字段&lt;code class=&quot;inline&quot;&gt;x&lt;/code&gt;的引用匹配了出来，相当于&lt;code class=&quot;inline&quot;&gt;let x = &amp;amp;S{x: 4}.x&lt;/code&gt;。也就是说，此时的绑定&lt;code class=&quot;inline&quot;&gt;x&lt;/code&gt;，是对结构体实例中字段的引用，如果此时抛弃了该结构体实例，势必会造成悬垂指针。所以，这里直接输出打印x的值：&lt;code class=&quot;inline&quot;&gt;4&lt;/code&gt;。&lt;/li&gt;&lt;li&gt;在使用完&lt;code class=&quot;inline&quot;&gt;x&lt;/code&gt;之后，结构体实例可以被析构了，调用drop，然后输出：&lt;code class=&quot;inline&quot;&gt;S&lt;/code&gt;。&lt;/li&gt;&lt;li&gt;最后在对&lt;code class=&quot;inline&quot;&gt;D(3)&lt;/code&gt;析构，输出：&lt;code class=&quot;inline&quot;&gt;3&lt;/code&gt;。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;那么最终结果就是： &lt;code class=&quot;inline&quot;&gt;S124S3&lt;/code&gt;。对于原始Quiz代码来说，输出结果就是：&lt;code class=&quot;inline&quot;&gt;1243&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://dtolnay.github.io/rust-quiz/12&quot;&gt;点此查看 Rust Quiz 12&lt;/a&gt; &lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-11-52098828</guid>
<pubDate>Tue, 11 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>「付费阅读」 Rust Quiz 解读：Quiz 11</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-10-52032027.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/52032027&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;来自于RustFest 2018 大会上Alex Crichton 和 David Tolnay两位大佬的轻演讲主题：Rust Quiz  &lt;br&gt; &lt;br&gt;&lt;a href=&quot;https://github.com/dtolnay/rust-quiz&quot;&gt;rust-quiz源码&lt;/a&gt; &lt;br&gt;&lt;a href=&quot;https://dtolnay.github.io/rust-quiz/18&quot;&gt;在线练习和解答&lt;/a&gt; &lt;br&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=QtDj9R6vtA8&amp;amp;index=6&amp;amp;list=PLgC1L0fKd7UlpVTHVfLYVtudVx8CzbSxW&amp;amp;t=0s&quot;&gt;视频&lt;/a&gt; &lt;br&gt;&lt;br&gt; 不得不说，两位大佬出的题非常具有迷惑性，一不留神就落入了陷阱。  &lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;Quiz 11:&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;下面这段代码输出什么？&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;fn f&amp;lt;&#39;a&amp;gt;() {}
fn g&amp;lt;&#39;a: &#39;a&amp;gt;() {}

fn main() {
    let pf = f::&amp;lt;&#39;static&amp;gt; as fn();
    let pg = g::&amp;lt;&#39;static&amp;gt; as fn();
    print!(&quot;{}&quot;, pf == pg);
}&lt;/code&gt;&lt;p&gt;&lt;b&gt;输出结果： 编译错误&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;解读&lt;/h2&gt;&lt;p&gt;考察要点：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;生命周期参数概念&lt;/li&gt;&lt;li&gt;生命周期参数限定：&lt;code class=&quot;inline&quot;&gt;Early bound&lt;/code&gt; vs &lt;code class=&quot;inline&quot;&gt;Late bound&lt;/code&gt;&lt;/li&gt;&lt;li&gt;生命周期子类型与协变&lt;/li&gt;&lt;li&gt;函数指针及其比较&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;不得不说，此Quiz代码中涉及一个隐晦的概念：生命周期参数&lt;code class=&quot;inline&quot;&gt;Early bound&lt;/code&gt; vs &lt;code class=&quot;inline&quot;&gt;Late bound&lt;/code&gt;。这两个概念是官方提供的书里没有过的，也是我做这个题首次遇到的概念。通过调查Rust源码，大概得出了它们的定义：&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-4e50141ca4080ef17a7c90a2f87bbaa3_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;640&quot; data-rawheight=&quot;2512&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-4e50141ca4080ef17a7c90a2f87bbaa3&quot; data-watermark-src=&quot;v2-5ca74df78769f1be27cde7a30683f1d3&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-10-52032027</guid>
<pubDate>Mon, 10 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>「Rust每日新闻」本周精选 • 第二十三期</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-09-51950580.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/51950580&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-23599072636a1820bba7b49b9d586092_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;前言： 从2018年开始，我每天会花1个小时关注Rust社区动态，并且在&lt;a href=&quot;http://rust.cc/&quot;&gt;Rust.CC论坛&lt;/a&gt;、&lt;a href=&quot;https://t.me/rust_daily_news&quot;&gt;tg channel&lt;/a&gt;、&lt;a href=&quot;https://steemit.com/@blackanger&quot;&gt;Steemit&lt;/a&gt;、&lt;a href=&quot;https://github.com/RustStudy/rust_daily_news&quot;&gt;GitHub&lt;/a&gt;、&lt;a href=&quot;https://www.yuque.com/chaosbot/rustnews&quot;&gt;语雀订阅&lt;/a&gt;都开通了Rust每日新闻，分享我每天的见闻，偶尔也夹杂了一些个人的观点。大半年过去了，Rust每日新闻已经成为了Rust社区群大家每天必看的内容。在这个知乎专栏里，每周会精选几篇Rust社区中的动态，和大家分享。分享的内容就不按时间排序了。 &lt;br&gt;2018-12-09&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;「付费阅读」 如何为Rust语言做贡献&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;本文基于macOSX平台，通过对Rust 1.32 Nightly版本中rustdoc的一个ICE问题进行复盘，分析并记录整个Bug修复的过程。主要目的是，通过这个过程，来学习如何给Rust做贡献。&lt;/p&gt;&lt;p&gt;（阅读时间：17m）&lt;/p&gt;&lt;ol&gt;&lt;li&gt; 缘起&lt;br&gt; &lt;/li&gt;&lt;li&gt; Rust本地调试环境准备&lt;br&gt; &lt;/li&gt;&lt;li&gt; ICE问题分析&lt;br&gt; &lt;/li&gt;&lt;li&gt; 调试代码&lt;br&gt; &lt;/li&gt;&lt;li&gt; 提交PR说明&lt;br&gt; &lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/51479889&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;官方新闻&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;Rust 2018 edition 首个语义版本 1.31.0 发布&lt;/h2&gt;&lt;p&gt;在这个大版本里，新加入了很多内容：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;NLL（Non-lexical lifetimes）&lt;/li&gt;&lt;li&gt;新的模块系统&lt;/li&gt;&lt;li&gt;更多的生命周期省略规则&lt;/li&gt;&lt;li&gt;const fn：可以在编译时把const fn定义的函数用作常量值，但目前稳定的是最小化子集。&lt;/li&gt;&lt;li&gt;新的工具：clippy、rustfmt等已稳定&lt;/li&gt;&lt;li&gt;tool lint：像&lt;code class=&quot;inline&quot;&gt;#![allow(clippy::bool_comparison)]&lt;/code&gt;这种属性。已经不再需要&lt;code class=&quot;inline&quot;&gt;cfg_attr&lt;/code&gt;。&lt;/li&gt;&lt;li&gt;文档：改进了文档，并且重写了TRPL（The Rust Programming Language）, &lt;a href=&quot;https://doc.rust-lang.org/beta/book/&quot;&gt;TRPL 2018版&lt;/a&gt;&lt;/li&gt;&lt;li&gt; Cargo现在已经使用HTTP/2来并行下载crate。而且也不需要在代码里&lt;code class=&quot;inline&quot;&gt;extern crate&lt;/code&gt;引入crate了。&lt;br&gt; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://blog.rust-lang.org/2018/12/06/Rust-1.31-and-rust-2018.html&quot;&gt;Read More&lt;/a&gt;&lt;br&gt; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1310-2018-12-06&quot;&gt;1.31 Release Notes&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;与此同时，Rust官网也焕然一新：&lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;官网&lt;/a&gt;&lt;/p&gt;&lt;p&gt;这标志着Rust迈向了成熟。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Why Rust？ 高性能/可靠/生产力。&lt;/li&gt;&lt;li&gt;当你构建CLI、WebAssembly、网络、嵌入式可以考虑使用Rust。&lt;/li&gt;&lt;li&gt;Rust已经有了很多商业生产级应用&lt;/li&gt;&lt;li&gt;如何开始呢？除了Rust book，还有很多其他资源。&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;「官方」 Rust 2018 到底是什么？&lt;/h2&gt;&lt;p&gt;本文中，由Rust团队的Lin Clark，用很多漫画来帮你解释Rust 2018到底是什么？&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://hacks.mozilla.org/2018/12/rust-2018-is-here/&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「官方」征集Rust 2019 RoadMap意见的博客文章&lt;/h2&gt;&lt;p&gt;Rust 2019 Roadmap开始制定了，官方现在向社区征集一些博客，希望在博文中提出经过2018年对Rust的使用感受，以及希望Rust改进的目标和方向。去年的路线图RFC是在2018年1月29开放的。今年估计也差不多。&lt;/p&gt;&lt;p&gt;另外一件事，是在考虑下一个大版本的目标：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Rust 2015：稳定性&lt;/li&gt;&lt;li&gt;Rust 2018：生产力&lt;/li&gt;&lt;li&gt;Rust 2021：？&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;现在官方还不确定下一个大版本是2021，目前只是预估。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://blog.rust-lang.org/2018/12/06/call-for-rust-2019-roadmap-blogposts.html&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「官方」 反思Rust和WebAssembly在2018年的进展&lt;/h2&gt;&lt;p&gt;官方wasm工作组成立之初提炼出一个核心价值观：Rust和WebAssembly用于扩充JavaScript，而不是替换它。这个核心价值观推动了2018年Rust在WebAssembly领域的发展。&lt;/p&gt;&lt;p&gt;达成的目标：&lt;/p&gt;&lt;ol&gt;&lt;li&gt; 零成本与JavaScript交互。    基于wasm-bindgen来完成这一目标，现在基本已经构建出了以wasm-bindgen为核心的生态。&lt;br&gt; &lt;/li&gt;&lt;li&gt; 将Rust生成的WASM库分发给NPM。    由wasm-pack来完成这一目标。不仅仅是生成wasm，还需要分发到npm生态中。&lt;br&gt; &lt;/li&gt;&lt;li&gt; 快速提示开发效率。     对wasm-pack进行了扩展。自动管理wasm-bindgen CLI二进制文件，且自动安装浏览器的WebDriver客户端。比如：&lt;code class=&quot;inline&quot;&gt;wasm-pack test --headless --firefox&lt;/code&gt;来测试。     并且增加了一些模板项目来提升开发者效率：&lt;br&gt; &lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;&lt;code class=&quot;inline&quot;&gt;wasm-pack-template&lt;/code&gt;用于方便创建NPM库&lt;/li&gt;&lt;li&gt;&lt;code class=&quot;inline&quot;&gt;create-wasm-app&lt;/code&gt;用于创建web应用&lt;/li&gt;&lt;li&gt;&lt;code class=&quot;inline&quot;&gt;rust-webpack-template&lt;/code&gt;用于使用webpack来创建应用程序&lt;/li&gt;&lt;li&gt;&lt;code class=&quot;inline&quot;&gt;rust-parcel-template&lt;/code&gt;用于使用parcel来创建应用程序&lt;/li&gt;&lt;/ul&gt;&lt;ol&gt;&lt;li&gt; Rust生成的wasm应该是可测试和可调试的。&lt;br&gt; &lt;/li&gt;&lt;li&gt;console_error_panic_hook，可以将Rust代码产生的panic重定向到浏览器控制台&lt;/li&gt;&lt;li&gt;wasm-bindgen-test，作为基础是测试架构，结合wasm-pack来测试dom、js异步事件等。&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/rustwasm/twiggy&quot;&gt;Twiggy🌱&lt;/a&gt;，可以为Wasm分析代码大小。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;同样，也向社区征求Rust 2019 Rust和WebAssembly上的目标和建议。另外在感谢名单上，发现了群友：huangjj27。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://rustwasm.github.io/2018/12/06/reflecting-on-rust-and-wasm-in-2018.html&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「官方」关于RLS的状态说明&lt;/h2&gt;&lt;p&gt;RLS（language server for Rust）马上会随着Rust 2018的发布而发布，并且会共享版本号。但其实RLS并未准备好，只是借用这次Rust 2018发版的机会强调RLS实际上是一个可用且有用的工具。&lt;/p&gt;&lt;p&gt;官方核心人员nrc在这篇文章里，介绍了RLS目前哪些功能已经可用，哪些还不行，以及未来的走向。关注RLS的朋友可以看一下。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.ncameron.org/blog/more-on-rls-version-numbering/&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;社区新闻&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;汝为何是Romio？&lt;/h2&gt;&lt;h2&gt;async #romio #tokio&lt;/h2&gt;&lt;p&gt;无船同志新文：Wherefore art thou Romio?&lt;/p&gt;&lt;p&gt;（ &quot;Romeo, Romeo, wherefore art thou Romeo? —— 莎士比亚《罗密欧与朱丽叶》）&lt;/p&gt;&lt;p&gt;本文讲述了Romio的前世今生。主要目的是为了将Tokio接口移植到Future 0.3。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;处理显式的waker参数。 0.1和0.3的差异之一是对waker的处理。0.3中提供了一个唤醒当前任务的waker，而0.1则没有。0.1提供的是task::current这样的函数。现在统一使用LocalWaker。&lt;/li&gt;&lt;li&gt;消除代码重复。Tokio中的AtomicTask内部类型，实际上在Futures 0.3已经演变为AtomicWaker类型。通过给Tokio发PR来消除这些重复。&lt;/li&gt;&lt;li&gt;tokio-io到future::io的变化。这部分是最困难的一个部分。目前tokio-io中自定义了AsyncRead和AsyncWrite，而Futures 0.3也定义了AsyncRead和AsyncWrite，这两个版本的接口有很大变化。tokio-io是在unsafe代码上构建的AsyncRead和AsyncWrite，而Futures新的AsyncRead和AsyncWrite是构建于专门的poll_vectored_read扩展。&lt;/li&gt;&lt;li&gt;Pin。实际上Pin对于0.1到0.3的迁移工作影响很小。基本上就是用&lt;code class=&quot;inline&quot;&gt;＆mut self：Pin &amp;lt;＆mut Self&amp;gt;&lt;/code&gt;来替换&lt;code class=&quot;inline&quot;&gt;mut self&lt;/code&gt;。&lt;/li&gt;&lt;li&gt;这次迁移有利于&lt;code class=&quot;inline&quot;&gt;non-&#39;static&lt;/code&gt; Future的应用。将来使用async/await将不必担心因为不是&lt;code class=&quot;inline&quot;&gt;&#39;static&lt;/code&gt;的Future而产生任何问题。&lt;/li&gt;&lt;li&gt;Romio是fork自Tokio，但不打算和Tokio竞争。Romio旨在解锁async/await，因为现在Tokio使用futures 0.1已经阻碍了想用async/await人的步伐。毕竟Tokio在生态系统中占比太高。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;关于Romio的说明：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Romio仅包含与异步网络API相关的代码 -  TCP，UDP和Unix域套接字。换句话说，Romio只是 futures + mio。&lt;/li&gt;&lt;li&gt;Romio只暴露最小的API。&lt;/li&gt;&lt;li&gt;Romio目前版本为0.3.0-alpha.1，配合futures 0.3来发布更新。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;文章中给出了一个echo server的示例。这一切工作都是为了尽可能快速地稳定async/await。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://boats.gitlab.io/blog/post/romio/&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Rustsim 月报 #2&lt;/h2&gt;&lt;p&gt;Rustsim组织是一个GitHub组织，聚焦于提供各种数值模拟的库。包括&lt;/p&gt;&lt;ul&gt;&lt;li&gt;alga， 抽象代数库&lt;/li&gt;&lt;li&gt;nalgebra， 线性代数库&lt;/li&gt;&lt;li&gt;ncollide， 2D和3D的碰撞检测库&lt;/li&gt;&lt;li&gt;nphysics， 2D和3D的物理模拟库&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://rustsim.org/&quot;&gt;rustsim.org&lt;/a&gt;&lt;/p&gt;&lt;p&gt;本月改进：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;可变形体的物理模拟&lt;/li&gt;&lt;li&gt;改进ncollide&lt;/li&gt;&lt;li&gt;改进nalgebra&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://www.rustsim.org/blog/2018/12/01/this-month-in-rustsim/&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「博文」教你如何用Rust写C++&lt;/h2&gt;&lt;p&gt;长文预警!&lt;/p&gt;&lt;blockquote&gt; 背景： Firefox有一个名为encoding_rs的新字符编码转换库。它是用Rust编写的，取代了1999年初发布的名为uconv的旧C++字符编码转换库。因为调用该字符编码转换库的都是C++代码，所以新的库，尽管用Rust编写，但是该库在C++调用者看来，应该像是一个现代的C++库。也就是说，提供给C++调用者的接口使它看起来和感觉就像一个真正的C++库。&lt;br&gt; &lt;/blockquote&gt;&lt;p&gt;(啊哈？假装写C++，你学到了吗？)&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://hsivonen.fi/modern-cpp-in-rust/&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;使用Actix和Sentry构建安全web服务&lt;/h2&gt;&lt;p&gt;本文介绍了如何使用Actix创建Web服务，并使用Sentry对其进行监控。主要基于两个sentry平台相关的crate：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;sentry&lt;/li&gt;&lt;li&gt;sentry-actix&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;sentry是Sentry平台为Rust开发的SDK，详情：&lt;a href=&quot;https://blog.sentry.io/2018/10/22/getting-started-with-rust-error-tracking&quot;&gt;getting-started-with-rust-error-tracking&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://blog.sentry.io/2018/12/04/safe-web-services-actix-sentry?utm_campaign=rust&amp;amp;utm_source=social&amp;amp;utm_medium=twitter&amp;amp;utm_content=post&amp;amp;utm_term=actix&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;案例Librsvg：用Rust重构C项目值得遵循的模式&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://people.gnome.org/~federico/blog/guadec-2018-presentation.html&quot;&gt;Read More PPT&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://people.gnome.org/~federico/blog/docs/fmq-refactoring-c-to-rust.pdf&quot;&gt;PDF&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;超级账本新项目Ursa将使用Rust编写&lt;/h2&gt;&lt;p&gt;Ursa主要是一个加密库，区块链开发人员可以通过简单的配置文件更改来选择和修改其加密方案。主要使用Rust语言编写，但也会包含Hyperledger中常用到的其他语言的接口。&lt;/p&gt;&lt;p&gt;随着Hyperledger的成熟，Hyperledger中的各个项目已经开始需要复杂的加密实现。不是让每个项目都实现自己的加密协议，而是在共享库上进行协作要更好。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.hyperledger.org/blog/2018/12/04/welcome-hyperledger-ursa&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;在Rust中使用Passenger&lt;/h2&gt;&lt;p&gt;Passenger是一个Web应用服务器，常用于Ruby、Node、Python等语言，现在也支持Rust了。&lt;/p&gt;&lt;p&gt;官方写了文章，介绍如何在Rust中使用Passenger作为应用服务器。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.phusionpassenger.com/docs/advanced_guides/gls/rust.html&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Magic Leap用了Servo引擎技术构建浏览器&lt;/h2&gt;&lt;blockquote&gt; Magic Leap One设备为早期开发人员提供浏览器预览版。 该浏览器基于Servo引擎技术构建，并通过WebRender Web渲染库展示高质量的2D图形和字体渲染，并且很快将会有更多新功能。&lt;br&gt; &lt;/blockquote&gt;&lt;p&gt;Magic Leap 高科技！&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://blog.mozvr.com/a-new-browser-for-magic-leap/&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;让Nginx运行于WebWebassmbly&lt;/h2&gt;&lt;p&gt;wasmer是一个跨平台的WASM-JIT运行时。wasmer团队尝试将nginx编译为nginx.wasm模块，并将其运行在wasmer之上。本文介绍了他们完成这项工作的历程，以及示例代码。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/wasmerio/wasmer&quot;&gt;wasmer&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/@syrusakbary/running-nginx-with-webassembly-6353c02c08ac&quot;&gt;Read More&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Rocket v0.4 发布&lt;/h2&gt;&lt;p&gt;0.4版本是Rocket迄今为止最大的更新。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/SergioBenitez/Rocket/blob/v0.4.0/CHANGELOG.md#version-040-dec-06-2018&quot;&gt;ChangeLog&lt;/a&gt;&lt;/p&gt;&lt;p&gt;并且多了一个共同维护者：@jebrosen&lt;/p&gt;&lt;p&gt;最关键的是，Codegen已经用Rust过程宏重写了，下一个版本Rocket将支持Rust Stable。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://rocket.rs/v0.4/news/2018-12-08-version-0.4/&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;学习资源&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;「系列」Rust Quiz 解读&lt;/h2&gt;&lt;p&gt;[Quiz 1 ~ 10] ： &lt;a href=&quot;https://zhuanlan.zhihu.com/time-and-spirit-hut&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「嵌入式Rust」专栏启动&lt;/h2&gt;&lt;blockquote&gt; 本专栏面向于嵌入式开发的入门教程和实践，也就是说，本专栏的文章并不假定读者拥有任何嵌入式开发的知识或经验，但是要求读者有一定 Rust 语言基础，比如说熟悉借用所有权系统，懂得使用 unsafe 手动操作内存结构等等。&lt;br&gt; &lt;/blockquote&gt;&lt;p&gt;感兴趣的可以关注&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/embedded-rust&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;使用Rust编写AWS Lambda&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/@kkostov/rust-aws-lambda-30a1b92d4009&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Rust类型级（Type Level）的生命游戏&lt;/h2&gt;&lt;p&gt;又一次证明了Rust的类型系统是图灵完备的&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/gtestault/primitive-recursive-functions&quot;&gt;primitive-recursive-functions&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;wasm-bindgen的工作原理&lt;/h2&gt;&lt;p&gt;文章里包含了一个PPT&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://fitzgeraldnick.com/2018/12/02/wasm-bindgen-how-does-it-work.html&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://fitzgen.github.io/wasm-cg-wasm-bindgen/#1&quot;&gt;ppt&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;各种 AOC 2018 解题&lt;/h2&gt;&lt;p&gt;另外两个GitHub仓库&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/bpicolo/aoc2018&quot;&gt;aoc2018&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/maxdeviant/adventurous&quot;&gt;adventurous&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;一个简单的光线跟踪实现&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/shaunbennett/lucis&quot;&gt;lucis&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;「视频」2018-12-04 RustAKL: ECS编程范例&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Qc8a2hmpHCA&amp;amp;feature=youtu.be&quot;&gt;视频&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/azriel91/ecs_paradigm&quot;&gt;Code&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://gitpitch.com/azriel91/ecs_paradigm/master?grs=github&amp;amp;t=sky#/&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;HashMap界的瑞士军刀——深入研究hashbrown&lt;/h2&gt;&lt;p&gt;hashbrown之前介绍过，是对Google的SwissTable算法实现。目前作者正在尝试将其整合到Rust标准库中（RustFest Roma 2018演讲）。&lt;/p&gt;&lt;p&gt;本文是对hashbrown工作机制的研究报告。值得仔细阅读一下。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://blog.waffles.space/2018/12/07/deep-dive-into-hashbrown/&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;项目&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;一个新的2D游戏引擎&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/17cupsofcoffee/tetra&quot;&gt;tetra&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;另一个轻量级的序列化框架：sval&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/KodrAus/sval&quot;&gt;sval&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.reddit.com/r/rust/comments/a2kn7y/sval_a_prototype_nostd_objectsafe/&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;CFG Game: 利用你的计算机技能来制作汉堡包&lt;/h2&gt;&lt;p&gt;使用Rust编译为Wasm的在线小游戏。游戏的核心是一个非常标准的LL（1）解析器，其语法是在玩家的游戏中动态定义的。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://rickyhan.com/jekyll/update/2018/12/03/make-burgers-context-free-grammar.html&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;p&gt;源码：&lt;a href=&quot;https://github.com/rickyhan/dyn-grammar&quot;&gt;dyn-grammar&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;b&gt;工具与库&lt;/b&gt;&lt;/h2&gt;&lt;h2&gt;「工具」更智能展示你shell历史的工具: mcfly&lt;/h2&gt;&lt;p&gt;这个工具不得了，自带小型神经网络（mall neural network），可以替换&lt;code class=&quot;inline&quot;&gt;默认ctrl-r Bash历史搜索&lt;/code&gt;了，更加智能。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/cantino/mcfly&quot;&gt;mcfly&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Tui-rs: 用于构建丰富的命令行界面和DashBoard&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/fdehau/tui-rs&quot;&gt;tui-rs&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-99553f23f5d15e93879b7ec79585438a_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;399&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;从HTML反序列化为Rust类型&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Hexilee/unhtml.rs&quot;&gt;unhtml.rs&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;prettyprint: 让命令行拥有漂亮的输出&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/mre/prettyprint&quot;&gt;prettyprint&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;cargo-inspect: 探索Rust内部的工具&lt;/h2&gt;&lt;p&gt;之前介绍过这个库，今天看到该库作者写了篇文章，更详细介绍它的用法。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://matthias-endler.de/2018/cargo-inspect/&quot;&gt;Read More&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/mre/cargo-inspect&quot;&gt;cargo-inspect&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;cargo-call-stack: 分析程序中的静态调用栈&lt;/h2&gt;&lt;p&gt;官方嵌入式组老大japaric写的库。可以对整个程序做静态调用栈的分析，可以最终生成svg图片。调用栈分析结果还包含了栈的具体使用情况（以字节为单位），以及包括Max最大值。&lt;/p&gt;&lt;p&gt;在写一些对栈内存要求苛刻的程序，比如嵌入式，比较有用。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/japaric/cargo-call-stack#cargo-call-stack&quot;&gt;cargo-call-stack&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-81ced73aecfaae1061bed076a678dddc_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;690&quot; data-rawheight=&quot;264&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-81ced73aecfaae1061bed076a678dddc&quot; data-watermark-src=&quot;v2-390be26a4165ef330226a711a1ff918d&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;「CLI」indicatif: 命令行进度条工具&lt;/h2&gt;&lt;p&gt;可生成各样且彩色的进度条，非常酷。就不上图了。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/mitsuhiko/indicatif&quot;&gt;indicatif&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;JQL: 命令行JSON查询工具&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/yamafaktory/jql&quot;&gt;jql&lt;/a&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-09-51950580</guid>
<pubDate>Sun, 09 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>Rust Quiz 解读：Quiz 10</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-09-51948290.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/51948290&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt; 来自于RustFest 2018 大会上Alex Crichton 和 David Tolnay两位大佬的轻演讲主题：Rust Quiz  &lt;br&gt; &lt;br&gt;&lt;a href=&quot;https://github.com/dtolnay/rust-quiz&quot;&gt;rust-quiz源码&lt;/a&gt; &lt;br&gt;&lt;a href=&quot;https://dtolnay.github.io/rust-quiz/18&quot;&gt;在线练习和解答&lt;/a&gt; &lt;br&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=QtDj9R6vtA8&amp;amp;index=6&amp;amp;list=PLgC1L0fKd7UlpVTHVfLYVtudVx8CzbSxW&amp;amp;t=0s&quot;&gt;视频&lt;/a&gt; &lt;br&gt;&lt;br&gt; 不得不说，两位大佬出的题非常具有迷惑性，一不留神就落入了陷阱。   &lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;Quiz 10:&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;下面这段代码输出什么？&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;trait Trait {
    fn f(&amp;amp;self);
}

impl&amp;lt;&#39;a&amp;gt; dyn Trait + &#39;a {
    fn f(&amp;amp;self) {
        print!(&quot;1&quot;);
    }
}

impl Trait for bool {
    fn f(&amp;amp;self) {
        print!(&quot;2&quot;);
    }
}

fn main() {
    Trait::f(&amp;amp;true);
    Trait::f(&amp;amp;true as &amp;amp;dyn Trait);
    &amp;lt;_ as Trait&amp;gt;::f(&amp;amp;true);
    &amp;lt;_ as Trait&amp;gt;::f(&amp;amp;true as &amp;amp;dyn Trait);
    &amp;lt;bool as Trait&amp;gt;::f(&amp;amp;true);
}&lt;/code&gt;&lt;p&gt;&lt;b&gt;输出结果：22222&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;解读&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;考察要点：&lt;/b&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;trait基本用法&lt;/li&gt;&lt;li&gt;Rust 2018 edition新语法&lt;code class=&quot;inline&quot;&gt;dyn Trait&lt;/code&gt;&lt;/li&gt;&lt;li&gt;无歧义完全限定语法（Fully Qualified Syntax for Disambiguation）&lt;/li&gt;&lt;li&gt;triat 对象&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Quiz代码中定义了名为Trait的trait，包含了&lt;code class=&quot;inline&quot;&gt;f&lt;/code&gt;函数签名。&lt;/p&gt;&lt;p&gt;接下来是为此Trait内定义的&lt;code class=&quot;inline&quot;&gt;f&lt;/code&gt;函数添加默认的实现，也叫固有（inherent）实现。此处使用了Rust 2018 edition的新语法：&lt;code class=&quot;inline&quot;&gt;dyn Trait&lt;/code&gt;。其实&lt;code class=&quot;inline&quot;&gt;impl&amp;lt;&#39;a&amp;gt; dyn Trait + &#39;a {&lt;/code&gt;等价于Rust 2015中&lt;code class=&quot;inline&quot;&gt;impl&amp;lt;&#39;a&amp;gt; Trait + &#39;a {&lt;/code&gt;的写法。&lt;/p&gt;&lt;p&gt;在Rust 2015中，直接为Trait实现固有方法，和&lt;code class=&quot;inline&quot;&gt;impl Trait for SomeType&lt;/code&gt;这种写法容易混淆。对于直接的&lt;code class=&quot;inline&quot;&gt;impl Trait {}&lt;/code&gt;来说，其实是为&lt;code class=&quot;inline&quot;&gt;trait Object&lt;/code&gt;实现固有方法。所以在Rust 2018 edition中引入了&lt;code class=&quot;inline&quot;&gt;dyn&lt;/code&gt;关键字，表示&lt;code class=&quot;inline&quot;&gt;trait Object&lt;/code&gt;，&lt;code class=&quot;inline&quot;&gt;impl dyn Trait {}&lt;/code&gt;比起“裸写的” &lt;code class=&quot;inline&quot;&gt;impl Trait {}&lt;/code&gt;可读性要高。&lt;/p&gt;&lt;p&gt;而且&lt;code class=&quot;inline&quot;&gt;dyn Trait&lt;/code&gt;和新引入的&lt;code class=&quot;inline&quot;&gt;impl Trait语法&lt;/code&gt;相对应。一个表示动态分发，一个表示静态分发。&lt;/p&gt;&lt;p&gt;所以，Quiz代码中，&lt;code class=&quot;inline&quot;&gt;impl&amp;lt;&#39;a&amp;gt; dyn Trait + &#39;a {...}&lt;/code&gt;是为了实现Trait的&lt;code class=&quot;inline&quot;&gt;trait Object&lt;/code&gt;实现固有方法&lt;code class=&quot;inline&quot;&gt;f&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;接下来，&lt;code class=&quot;inline&quot;&gt;impl Trait for bool {...}&lt;/code&gt;为&lt;code class=&quot;inline&quot;&gt;bool&lt;/code&gt;布尔类型实现Trait，同样实现了&lt;code class=&quot;inline&quot;&gt;f&lt;/code&gt;方法。&lt;/p&gt;&lt;p&gt;至此，&lt;code class=&quot;inline&quot;&gt;bool&lt;/code&gt;类型可以调用&lt;code class=&quot;inline&quot;&gt;f&lt;/code&gt;方法，而任何实现了Trait的&lt;code class=&quot;inline&quot;&gt;trait Object&lt;/code&gt;也可以调用默认实现的固有&lt;code class=&quot;inline&quot;&gt;f&lt;/code&gt;方法。&lt;/p&gt;&lt;p&gt;&lt;b&gt;那么，在main函数中的五种调用方法，到底调用哪个&lt;code class=&quot;inline&quot;&gt;f&lt;/code&gt;呢？&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;Trait::f(&amp;amp;true);&lt;/code&gt;，这种写法是Rust中常用的写法，通过指定&lt;code class=&quot;inline&quot;&gt;Trait::&lt;/code&gt;前缀，并且传入具体类型实例的引用&lt;code class=&quot;inline&quot;&gt;&amp;amp;true&lt;/code&gt;来调用对应的&lt;code class=&quot;inline&quot;&gt;f&lt;/code&gt;方法。在Quiz代码中，明确地为&lt;code class=&quot;inline&quot;&gt;bool&lt;/code&gt;类型实现了Trait，所以这里自然输出： 2。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;Trait::f(&amp;amp;true as &amp;amp;dyn Trait);&lt;/code&gt; ，这种写法类似于第一种，但是通过&lt;code class=&quot;inline&quot;&gt;as&lt;/code&gt;关键字将&lt;code class=&quot;inline&quot;&gt;&amp;amp;true&lt;/code&gt;转换为了trait对象&lt;code class=&quot;inline&quot;&gt;&amp;amp;dyn Trait&lt;/code&gt;类型。然而，对于Rust编译器来说，它已明确知道这还是&lt;code class=&quot;inline&quot;&gt;bool&lt;/code&gt;类型。在更精确的&lt;code class=&quot;inline&quot;&gt;bool&lt;/code&gt;和trait对象&lt;code class=&quot;inline&quot;&gt;&amp;amp;dyn Trait&lt;/code&gt;之间，编译器肯定要选择那个更精确的类型。所以，这里也会输出： 2。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;&amp;lt;_ as Trait&amp;gt;::f(&amp;amp;true);&lt;/code&gt; ，这种写法，叫做&lt;b&gt;无歧义完全限定语法（Fully Qualified Syntax for Disambiguation）&lt;/b&gt;，这种语法之前也被称为&lt;b&gt;通用函数调用语法（UFCS）&lt;/b&gt;。通过&lt;code class=&quot;inline&quot;&gt;&amp;lt;_ as Trait&amp;gt;&lt;/code&gt;，来指定实现了Trait的类型，调用的是&lt;code class=&quot;inline&quot;&gt;Trait&lt;/code&gt;中实现的方法。&lt;code class=&quot;inline&quot;&gt;_&lt;/code&gt;此处泛指实现了Trait的类型，Rust会根据上下文进行自动推断。所以，必然会去使用&lt;code class=&quot;inline&quot;&gt;impl Trait for bool&lt;/code&gt;中定义的&lt;code class=&quot;inline&quot;&gt;f&lt;/code&gt;实现。所以，这行代码依旧输出： 2。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;&amp;lt;_ as Trait&amp;gt;::f(&amp;amp;true as &amp;amp;dyn Trait);&lt;/code&gt;，同理，即便转为了trait对象，也还是去寻找为具体类型&lt;code class=&quot;inline&quot;&gt;bool&lt;/code&gt;实现的&lt;code class=&quot;inline&quot;&gt;f&lt;/code&gt;方法。所以，输出：2。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;&amp;lt;bool as Trait&amp;gt;::f(&amp;amp;true);&lt;/code&gt;，这句和&lt;code class=&quot;inline&quot;&gt;&amp;lt;_ as Trait&amp;gt;::f(&amp;amp;true);&lt;/code&gt;等价，只不过这里指定了&lt;code class=&quot;inline&quot;&gt;bool&lt;/code&gt;类型。所以，继续输出： 2。&lt;/p&gt;&lt;p&gt;目前，Rust还不提供直接调用trait对象中定义的默认实现的语法。除非，把trait对象中实现的方法换成不同的名称。比如：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;trait Trait {
    fn f(&amp;amp;self);
}

impl&amp;lt;&#39;a&amp;gt; dyn Trait + &#39;a {
    fn ff(&amp;amp;self) {
        print!(&quot;1&quot;);
    }
}

impl Trait for bool {
    fn f(&amp;amp;self) {
        print!(&quot;2&quot;);
    }
}

fn main() {
    Trait::f(&amp;amp;true);
    Trait::ff(&amp;amp;true);
    Trait::ff(&amp;amp;true as &amp;amp;dyn Trait);
}&lt;/code&gt;&lt;p&gt;这会输出： &lt;code class=&quot;inline&quot;&gt;211&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;注意main函数中最后两行：&lt;code class=&quot;inline&quot;&gt;Trait::ff(&amp;amp;true);&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;Trait::ff(&amp;amp;true as &amp;amp;dyn Trait);&lt;/code&gt;。这说明，没有为&lt;code class=&quot;inline&quot;&gt;bool&lt;/code&gt;类型实现&lt;code class=&quot;inline&quot;&gt;ff&lt;/code&gt;方法，Rust也会去trait对象的默认实现中去&lt;code class=&quot;inline&quot;&gt;查询&lt;/code&gt;该方法。&lt;/p&gt;&lt;p&gt;但是如果使用了无歧义完全限定语法，则不会这样做。比如：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;trait Trait {
    fn f(&amp;amp;self);
}

impl&amp;lt;&#39;a&amp;gt; dyn Trait + &#39;a {
    fn ff(&amp;amp;self) {
        print!(&quot;1&quot;);
    }
}

impl Trait for bool {
    fn f(&amp;amp;self) {
        print!(&quot;2&quot;);
    }
}

fn main() {
    &amp;lt;_ as Trait&amp;gt;::ff(&amp;amp;true);
    &amp;lt;_ as Trait&amp;gt;::ff(&amp;amp;true as &amp;amp;dyn Trait);
    &amp;lt;bool as Trait&amp;gt;::ff(&amp;amp;true);
}&lt;/code&gt;&lt;p&gt;这样写会报错：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;error[E0576]: cannot find method or associated constant `ff` in trait `Trait`
  --&amp;gt; src/main.rs:20:19
   |
20 |     &amp;lt;_ as Trait&amp;gt;::ff(&amp;amp;true);
   |                   ^^ did you mean `f`?

error[E0576]: cannot find method or associated constant `ff` in trait `Trait`
  --&amp;gt; src/main.rs:21:19
   |
21 |     &amp;lt;_ as Trait&amp;gt;::ff(&amp;amp;true as &amp;amp;dyn Trait);
   |                   ^^ did you mean `f`?

error[E0576]: cannot find method or associated constant `ff` in trait `Trait`
  --&amp;gt; src/main.rs:22:22
   |
22 |     &amp;lt;bool as Trait&amp;gt;::ff(&amp;amp;true);
   |                      ^^ did you mean `f`?

error: aborting due to 3 previous errors&lt;/code&gt;&lt;p&gt;因为，已经通过&lt;code class=&quot;inline&quot;&gt;&amp;lt;_ as Trait&amp;gt;&lt;/code&gt;这样的写法，已经明确指定了调用&lt;code class=&quot;inline&quot;&gt;impl Trait for bool&lt;/code&gt;中实现的&lt;code class=&quot;inline&quot;&gt;f&lt;/code&gt;方法，这时候调用&lt;code class=&quot;inline&quot;&gt;ff&lt;/code&gt;方法，显然，不会找到。&lt;/p&gt;&lt;h2&gt;&lt;a href=&quot;https://dtolnay.github.io/rust-quiz/10&quot;&gt;点此查看 Rust Quiz 10&lt;/a&gt; &lt;/h2&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-09-51948290</guid>
<pubDate>Sun, 09 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>Rust Quiz 解读：Quiz 9</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-08-51891075.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/51891075&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt; 来自于RustFest 2018 大会上Alex Crichton 和 David Tolnay两位大佬的轻演讲主题：Rust Quiz  &lt;br&gt; &lt;br&gt;- &lt;a href=&quot;https://github.com/dtolnay/rust-quiz&quot;&gt;rust-quiz源码&lt;/a&gt; &lt;br&gt;- &lt;a href=&quot;https://dtolnay.github.io/rust-quiz/18&quot;&gt;在线练习和解答&lt;/a&gt; &lt;br&gt;- &lt;a href=&quot;https://www.youtube.com/watch?v=QtDj9R6vtA8&amp;amp;index=6&amp;amp;list=PLgC1L0fKd7UlpVTHVfLYVtudVx8CzbSxW&amp;amp;t=0s&quot;&gt;视频&lt;/a&gt; &lt;br&gt;&lt;br&gt; 不得不说，两位大佬出的题非常具有迷惑性，一不留神就落入了陷阱。   &lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;Quiz 9:&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;下面这段代码输出什么？&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;macro_rules! m {
    (1) =&amp;gt; { print!(&quot;1&quot;) };
    ($tt:tt) =&amp;gt; { print!(&quot;2&quot;) };
}

macro_rules! e {
    ($e:expr) =&amp;gt; { m!($e) };
}

macro_rules! t {
    ($tt:tt) =&amp;gt; { e!($tt); m!($tt); };
}

fn main() {
    t!(1);
}&lt;/code&gt;&lt;p&gt;&lt;b&gt;输出结果： 21&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;解读&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;考察要点：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;声明宏基本匹配规则&lt;/li&gt;&lt;li&gt;声明宏元变量匹配的可传导性&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Quiz代码中依次定义了三个声明宏，&lt;code class=&quot;inline&quot;&gt;m!&lt;/code&gt;、&lt;code class=&quot;inline&quot;&gt;e!&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;t!&lt;/code&gt;，并且依次是包含关系。&lt;/p&gt;&lt;p&gt;在main函数中，调用&lt;code class=&quot;inline&quot;&gt;t!(1)&lt;/code&gt;时，根据宏定义，其参数&lt;code class=&quot;inline&quot;&gt;1&lt;/code&gt;经过词法分析得到词条树，也就是宏元变量&lt;code class=&quot;inline&quot;&gt;$tt:tt&lt;/code&gt;的类型&lt;code class=&quot;inline&quot;&gt;tt&lt;/code&gt;所指示。然后由&lt;code class=&quot;inline&quot;&gt;e!($tt);&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;m!($tt);&lt;/code&gt;继续匹配。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;e!($tt)&lt;/code&gt;在匹配过程中，因为&lt;code class=&quot;inline&quot;&gt;e!&lt;/code&gt;定义左边元变量&lt;code class=&quot;inline&quot;&gt;$e:expr&lt;/code&gt;，表明是一个表达式类型。对于Rust编译器来说，经过&lt;code class=&quot;inline&quot;&gt;e!&lt;/code&gt;宏处理的词条，将会变成一个不透明的词条（opaque token tree）。也就是说，后续的宏都会认为它是一个表达式token，而不是其他。所以，在&lt;code class=&quot;inline&quot;&gt;e!&lt;/code&gt;宏内匹配右侧&lt;code class=&quot;inline&quot;&gt;m!($e);&lt;/code&gt;的时候，只能匹配&lt;code class=&quot;inline&quot;&gt;m!&lt;/code&gt;宏的第二条分支&lt;code class=&quot;inline&quot;&gt;($tt:tt)&lt;/code&gt;，所以输出： 2。&lt;/p&gt;&lt;p&gt;如果试着在&lt;code class=&quot;inline&quot;&gt;m!&lt;/code&gt;中加一条匹配分支：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;macro_rules! m {
    (1) =&amp;gt; { print!(&quot;1&quot;) };
    ($ee;expr) =&amp;gt; { print!(&quot;3&quot;)};
    ($tt:tt) =&amp;gt; { print!(&quot;2&quot;) };
}&lt;/code&gt;&lt;p&gt;输出结果就会变成： &lt;code class=&quot;inline&quot;&gt;31&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;对于&lt;code class=&quot;inline&quot;&gt;m!(1)&lt;/code&gt;来说，它一直以&lt;code class=&quot;inline&quot;&gt;tt&lt;/code&gt;词条树类型来传播，到最后会尝试匹配到&lt;code class=&quot;inline&quot;&gt;(1)&lt;/code&gt;这个token字面量，然后匹配成功，最后输出： &lt;code class=&quot;inline&quot;&gt;1&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;这就是为什么输出结果是&lt;code class=&quot;inline&quot;&gt;21&lt;/code&gt;的原因。&lt;/p&gt;&lt;p&gt;同理，如果把&lt;code class=&quot;inline&quot;&gt;e!&lt;/code&gt;的匹配模式修改为：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;macro_rules! e {
    ($e:tt) =&amp;gt; { m!($e) };
}&lt;/code&gt;&lt;p&gt;则输出结果会是：&lt;code class=&quot;inline&quot;&gt;11&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;&lt;b&gt;不透明词条树（Opaque Token Tree）&lt;/b&gt;&lt;/p&gt;&lt;p&gt;所谓不透明词条树（Opaque Token Tree），就是指，不能和token字面量相匹配的词条树。&lt;/p&gt;&lt;p&gt;尝试把Quiz代码中&lt;code class=&quot;inline&quot;&gt;m!&lt;/code&gt;定义中的匹配分支修改如下：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;macro_rules! m {
    (1) =&amp;gt; { print!(&quot;1&quot;) };
}&lt;/code&gt;&lt;p&gt;再去执行Quiz代码，编译器会报错：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;error: no rules expected the token `1`
  --&amp;gt; src/main.rs:6:23
   |
6  |     ($e:expr) =&amp;gt; { m!($e) };
   |                       ^^
...
14 |     t!(1);
   |     ------ in this macro invocation&lt;/code&gt;&lt;p&gt;编译器提示：no rules expected the token &lt;code class=&quot;inline&quot;&gt;1&lt;/code&gt;。这意味着，&lt;code class=&quot;inline&quot;&gt;expr&lt;/code&gt;不能与&lt;code class=&quot;inline&quot;&gt;1&lt;/code&gt;这个token字面量相匹配。这就是所谓的「不透明词条」。&lt;/p&gt;&lt;p&gt;在Rust中，不透明词条类型除了&lt;code class=&quot;inline&quot;&gt;expr&lt;/code&gt;，还有其他类型，罗列如下：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;$:block
$:expr
$:item
$:literal
$:meta
$:pat
$:path
$:stmt
$:ty&lt;/code&gt;&lt;p&gt;而透明的词条如下：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;$:ident
$:lifetime
$:tt&lt;/code&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://dtolnay.github.io/rust-quiz/9&quot;&gt;点此查看 Rust Quiz 9&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-08-51891075</guid>
<pubDate>Sat, 08 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>Rust Quiz 解读：Quiz 8</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-07-51809530.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/51809530&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt; 来自于RustFest 2018 大会上Alex Crichton 和 David Tolnay两位大佬的轻演讲主题：Rust Quiz  &lt;br&gt; &lt;br&gt;- &lt;a href=&quot;https://github.com/dtolnay/rust-quiz&quot;&gt;rust-quiz源码&lt;/a&gt; &lt;br&gt;- &lt;a href=&quot;https://dtolnay.github.io/rust-quiz/18&quot;&gt;在线练习和解答&lt;/a&gt; &lt;br&gt;- &lt;a href=&quot;https://www.youtube.com/watch?v=QtDj9R6vtA8&amp;amp;index=6&amp;amp;list=PLgC1L0fKd7UlpVTHVfLYVtudVx8CzbSxW&amp;amp;t=0s&quot;&gt;视频&lt;/a&gt; &lt;br&gt; &lt;br&gt;不得不说，两位大佬出的题非常具有迷惑性，一不留神就落入了陷阱。  &lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;Quiz 8:&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;下面这段代码输出什么？&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;macro_rules! m {
    (==&amp;gt;) =&amp;gt; { print!(&quot;1&quot;); };
    (= = &amp;gt;) =&amp;gt; { print!(&quot;2&quot;); };
    (== &amp;gt;) =&amp;gt; { print!(&quot;3&quot;); };
    (= =&amp;gt;) =&amp;gt; { print!(&quot;4&quot;); };
}

fn main() {
    m!(==&amp;gt;);
    m!(= = &amp;gt;);
    m!(== &amp;gt;);
    m!(= =&amp;gt;);
}&lt;/code&gt;&lt;p&gt;&lt;b&gt;输出结果: 1214&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;解读&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;考察要点：&lt;/b&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code class=&quot;inline&quot;&gt;macro_rules!&lt;/code&gt;定义宏匹配规则&lt;/li&gt;&lt;li&gt;理解词法分析中的token&lt;/li&gt;&lt;li&gt;操作符优先级&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Rust中使用&lt;code class=&quot;inline&quot;&gt;macro_rules!&lt;/code&gt;来定义声明宏，将来也会稳定&lt;code class=&quot;inline&quot;&gt;macro&lt;/code&gt;关键字。但基本的核心是不变的。Rust语言因为还在发展期，所以无法像其他很多语言一样，把AST（抽象语法树）暴露出来给开发者使用。导致现在Rust的宏，都是基于分词解析后形成的词条流（TokenStream）来编写宏。&lt;/p&gt;&lt;p&gt;所以，你可以把声明宏理解为是TokenStream模板。其实声明宏也有另外一个名字：「macro by example」&lt;/p&gt;&lt;p&gt;声明宏的语法规则是这样的：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;macro_rules! $name {
    $rule0 ;
    $rule1 ;
    // …
    $ruleN ;
}&lt;/code&gt;&lt;p&gt;一个声明宏里可以包含多个规则（$rule）。一般来说，声明宏的时候，规则模式经常使用下面的标识符来匹配对应的项：&lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;item: 条目，比如函数、结构体、模组等。
block: 区块(即由花括号包起的一些语句加上/或是一项表达式)。
stmt: 语句
pat: 模式
expr: 表达式
ty: 类型
ident: 标识符
path: 路径 (例如 foo, ::std::mem::replace, transmute::&amp;lt;_, int&amp;gt;, …)
meta: 元条目，即被包含在 #[...]及#![...]属性内的东西。
tt: 标记树&lt;/code&gt;&lt;p&gt;比如在Quiz 1中见到的：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;macro_rules! m {
    ($($s:stmt)*) =&amp;gt; {
        $(
            { stringify!($s); 1 }
        )&amp;lt;&amp;lt;*
    };
}&lt;/code&gt;&lt;p&gt;其中&lt;code class=&quot;inline&quot;&gt;$s:stmt&lt;/code&gt;表示匹配一个语句。而Quiz 8中声明的这个宏，其匹配规则并没有使用任何标识符。而是直接使用了&lt;code class=&quot;inline&quot;&gt;==&amp;gt;&lt;/code&gt;或&lt;code class=&quot;inline&quot;&gt;= = &amp;gt;&lt;/code&gt;这样的值，这叫做&lt;code class=&quot;inline&quot;&gt;token字面量&lt;/code&gt;。它表示，Rust编译器中的宏解释器会把它作为token进行匹配。&lt;/p&gt;&lt;p&gt;所以，在上面Quiz 8的代码中，定义声明宏&lt;code class=&quot;inline&quot;&gt;m!&lt;/code&gt;，包含了四个匹配模式。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;(==&amp;gt;)&lt;/code&gt;，表示要直接和分词得到的token流进行匹配，那么它能匹配的是两个token：&lt;code class=&quot;inline&quot;&gt;==&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;&amp;gt;&lt;/code&gt;。因为是从左往右进行匹配。在Rust中，&lt;code class=&quot;inline&quot;&gt;==&lt;/code&gt;是一个完整的token。但是有的人可能会想，为什么不是匹配成&lt;code class=&quot;inline&quot;&gt;=&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;=&amp;gt;&lt;/code&gt;呢？这是因为在Rust里&lt;code class=&quot;inline&quot;&gt;==&lt;/code&gt;（ 比较操作符）的优先级要高于&lt;code class=&quot;inline&quot;&gt;=&lt;/code&gt;（赋值操作符）。所以，在执行&lt;code class=&quot;inline&quot;&gt;m!(==&amp;gt;);&lt;/code&gt;的时候，输出：1。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;(= = &amp;gt;)&lt;/code&gt;，那么同理，匹配&lt;code class=&quot;inline&quot;&gt;=&lt;/code&gt;、&lt;code class=&quot;inline&quot;&gt;=&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;&amp;gt;&lt;/code&gt;。注意匹配模式中包含的空格是忽略不计的，空格的作用，其实就是为了帮助编译器识别如何「断句」。所以，在执行&lt;code class=&quot;inline&quot;&gt;m!(= = &amp;gt;)&lt;/code&gt;的时候，当然输出： 2。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;(== &amp;gt;)&lt;/code&gt;，其实和&lt;code class=&quot;inline&quot;&gt;(==&amp;gt;)&lt;/code&gt;是一样的。不一样的是它们在宏定义中出现的位置。这里执行&lt;code class=&quot;inline&quot;&gt;m!(== &amp;gt;);&lt;/code&gt;输出是：1。这个差别待会再解释。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;(= =&amp;gt;);&lt;/code&gt;，同理，匹配&lt;code class=&quot;inline&quot;&gt;=&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;=&amp;gt;&lt;/code&gt;，所以在执行&lt;code class=&quot;inline&quot;&gt;m!(= =&amp;gt;);&lt;/code&gt;的时候，输出：4。&lt;/p&gt;&lt;p&gt;最终结果是：&lt;code class=&quot;inline&quot;&gt;1214&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;&lt;b&gt;那么，为什么&lt;code class=&quot;inline&quot;&gt;m!(== &amp;gt;);&lt;/code&gt;无法输出 3 呢？&lt;/b&gt;&lt;/p&gt;&lt;p&gt;我们把代码修改一下：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;macro_rules! m {
    (== &amp;gt;) =&amp;gt; { print!(&quot;3&quot;); };
    (= = &amp;gt;) =&amp;gt; { print!(&quot;2&quot;); };
    (==&amp;gt;) =&amp;gt; { print!(&quot;1&quot;); };
    (= =&amp;gt;) =&amp;gt; { print!(&quot;4&quot;); };
}
fn main() {
    m!(==&amp;gt;);
    m!(= = &amp;gt;);
    m!(== &amp;gt;);
    m!(= =&amp;gt;);
}&lt;/code&gt;&lt;p&gt;修改后的输出结果： &lt;code class=&quot;inline&quot;&gt;3234&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;注意，我只是把&lt;code class=&quot;inline&quot;&gt;(== &amp;gt;)&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;(==&amp;gt;)&lt;/code&gt;的匹配分支顺序换了一下。这段代码中，说明了声明宏的另一个特性：优先匹配最前面的匹配分支。&lt;/p&gt;&lt;p&gt;因为&lt;code class=&quot;inline&quot;&gt;m!(==&amp;gt;);&lt;/code&gt;的默认分词匹配就是&lt;code class=&quot;inline&quot;&gt;==&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;&amp;gt;&lt;/code&gt;，所以，当碰到第一个匹配分支&lt;code class=&quot;inline&quot;&gt;(== &amp;gt;)&lt;/code&gt;的时候，就匹配到了，所以，不会继续寻找后面的匹配分支，所以，不可能输出： &lt;code class=&quot;inline&quot;&gt;1&lt;/code&gt;。同理，回到修改前的代码中，&lt;code class=&quot;inline&quot;&gt;m!(== &amp;gt;);&lt;/code&gt;最先匹配的是&lt;code class=&quot;inline&quot;&gt;(==&amp;gt;)&lt;/code&gt;，所以不可能再去寻找后面的匹配分支了，所以不可能输出: &lt;code class=&quot;inline&quot;&gt;3&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://dtolnay.github.io/rust-quiz/8&quot;&gt;点此查看 Rust Quiz 8&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-07-51809530</guid>
<pubDate>Fri, 07 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>Rust Quiz 解读：Quiz 7</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-06-51759112.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/51759112&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;来自于RustFest 2018 大会上Alex Crichton 和 David Tolnay两位大佬的轻演讲主题：Rust Quiz    &lt;br&gt;&lt;br&gt;- &lt;a href=&quot;https://github.com/dtolnay/rust-quiz&quot;&gt;rust-quiz源码&lt;/a&gt; &lt;br&gt;- &lt;a href=&quot;https://dtolnay.github.io/rust-quiz/18&quot;&gt;在线练习和解答&lt;/a&gt; &lt;br&gt;- &lt;a href=&quot;https://www.youtube.com/watch?v=QtDj9R6vtA8&amp;amp;index=6&amp;amp;list=PLgC1L0fKd7UlpVTHVfLYVtudVx8CzbSxW&amp;amp;t=0s&quot;&gt;视频&lt;/a&gt; &lt;br&gt;&lt;br&gt; 不得不说，两位大佬出的题非常具有迷惑性，一不留神就落入了陷阱。  &lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;Quiz 7:&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;下面这段代码输出什么？&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;#[repr(u8)]
enum Enum {
    First,
    Second,
}

impl Enum {
    fn p(self) {
        match self {
            First =&amp;gt; print!(&quot;1&quot;),
            Second =&amp;gt; print!(&quot;2&quot;),
        }
    }
}

fn main() {
    Enum::p(unsafe {
        std::mem::transmute(1u8)
    });
}&lt;/code&gt;&lt;p&gt;&lt;b&gt;输出结果： 1&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;解读&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;考察要点：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Enum内存布局&lt;/li&gt;&lt;li&gt;std::mem::transmute函数&lt;/li&gt;&lt;li&gt;类型推断&lt;/li&gt;&lt;li&gt;match匹配&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;在上面代码中定义了Enum枚举体，使用&lt;code class=&quot;inline&quot;&gt;#[repr(u8)]&lt;/code&gt;来指定其内存布局，是按8位对齐。&lt;/p&gt;&lt;p&gt;然后为Enum实现了方法p，其方法体使用match匹配。这里是最让人迷惑的地方了。注意match的两个匹配模式，&lt;code class=&quot;inline&quot;&gt;First&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;Second&lt;/code&gt;与Enum枚举体包含值同名。正常情况下，如果要在方法p内使用枚举值，应该是&lt;code class=&quot;inline&quot;&gt;Enum::First&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;Enum::Second&lt;/code&gt;，或者使用&lt;code class=&quot;inline&quot;&gt;use Enum::*;&lt;/code&gt;导入。这里没有导入，也没有加&lt;code class=&quot;inline&quot;&gt;Enum::&lt;/code&gt;前缀，那么实际上，Rust将&lt;code class=&quot;inline&quot;&gt;First&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;Second&lt;/code&gt;当作通配符_来看待。&lt;/p&gt;&lt;p&gt;所以，在main函数中，不管给p方法传入什么类型，只能匹配到第一个，所以输出结果是： 1。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;怎么理解呢？&lt;/b&gt;把上面的代码放到Playground执行一遍，会看到编译器有警告输出：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;warning[E0170]: pattern binding `First` is named the same as one of the variants of the type `Enum`
  --&amp;gt; src/main.rs:10:13
   |
10 |             First =&amp;gt; print!(&quot;1&quot;),
   |             ^^^^^ help: to match on the variant, qualify the path: `Enum::First`

warning[E0170]: pattern binding `Second` is named the same as one of the variants of the type `Enum`
  --&amp;gt; src/main.rs:11:13
   |
11 |             Second =&amp;gt; print!(&quot;2&quot;),
   |             ^^^^^^ help: to match on the variant, qualify the path: `Enum::Second`&lt;/code&gt;&lt;p&gt;首先是这两个警告，这是提示开发者，First和Second和Enum定义的枚举值同名了，提示加上Enum::前缀。&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;warning: unreachable pattern
  --&amp;gt; src/main.rs:11:13
   |
10 |             First =&amp;gt; print!(&quot;1&quot;),
   |             ----- matches any value
11 |             Second =&amp;gt; print!(&quot;2&quot;),
   |             ^^^^^^ unreachable pattern
   |
   = note: #[warn(unreachable_patterns)] on by default&lt;/code&gt;&lt;p&gt;然后是上面这个警告，提示这里触发了&lt;code class=&quot;inline&quot;&gt;unreachable pattern&lt;/code&gt;模式，因为Rust编译器默认是开启&lt;code class=&quot;inline&quot;&gt;#[warn(unreachable_patterns)]&lt;/code&gt;警告的。&lt;/p&gt;&lt;p&gt;什么是Unreachable Pattern呢？p方法等价于下面代码：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;impl Enum {
    fn p(self) {
        match self {
            _ =&amp;gt; print!(&quot;1&quot;),
            _ =&amp;gt; print!(&quot;2&quot;),
        }
    }
}&lt;/code&gt;&lt;p&gt;当函数被调用的时候，Rust会遍历self所有可能的值，但是现在这里并没有把所有可能匹配的值给列出来。所以就是Unreachable。在这种情况下，将会匹配任意值。这也是上面代码输出1的原因。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;如果把p方法里的匹配模式加上Enum::前缀会怎么样？&lt;/b&gt;&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;#[repr(u8)]
enum Enum {
    First,
    Second,
}

impl Enum {
    fn p(self) {
        match self {
            Enum::First =&amp;gt; print!(&quot;1&quot;),
            Enum::Second =&amp;gt; print!(&quot;2&quot;),
        }
    }
}

fn main() {
    Enum::p(unsafe {
        std::mem::transmute(1u8)
    });
}&lt;/code&gt;&lt;p&gt;这次，输出结果变成了： 2。&lt;/p&gt;&lt;p&gt;这又是为什么呢?&lt;/p&gt;&lt;p&gt;事实上，Enum等价于下面代码：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;enum Enum {
  First = 0u8,
  Second = 1u8,
}&lt;/code&gt;&lt;p&gt;其实，你在Playground里输出MIR代码也能看得出来：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;#[repr(u8)]
enum Enum {
    First,
    Second,
}
fn main() {
    let a = Enum::First;
    let b = Enum::Second;
}&lt;/code&gt;&lt;p&gt;输出的MIR：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;fn main() -&amp;gt; (){
    let mut _0: ();                      // return place
    scope 1 {
        scope 3 {
        }
        scope 4 {
            let _2: Enum;                // &quot;b&quot; in scope 4 at src/main.rs:10:9: 10:10
        }
    }
    scope 2 {
        let _1: Enum;                    // &quot;a&quot; in scope 2 at src/main.rs:9:9: 9:10
    }

    bb0: {                              
       // 省略其他
        discriminant(_1) = 0;            // bb0[1]: scope 0 at src/main.rs:9:13: 9:24
        discriminant(_2) = 1;            // bb0[3]: scope 1 at src/main.rs:10:13: 10:25
       // 省略其他
    }
}&lt;/code&gt;&lt;p&gt;那么main函数，其实等价于下面代码：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;fn main() {
    let a = unsafe {
        std::mem::transmute(1u8)
    };
    Enum::p(a);
}&lt;/code&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;std::mem::transmute()&lt;/code&gt;函数本身是一个unsafe函数，它相当于直接在栈上进行拷贝，将一种类型的值，解释为另一种类型。语义上，相当于一种「按位移动」。说白了，就是一种类型转换。但不能随便使用它，必须在源值和目标值，都有效的情况下才可以转换。&lt;/p&gt;&lt;p&gt;但是上面代码里的&lt;code class=&quot;inline&quot;&gt;a&lt;/code&gt;，是什么类型呢？&lt;code class=&quot;inline&quot;&gt;std::mem::transmute(1u8)&lt;/code&gt;会把&lt;code class=&quot;inline&quot;&gt;1u8&lt;/code&gt;转换为Enum类型。这是Rust编译器根据上下文进行类型推断得出的。你可以把&lt;code class=&quot;inline&quot;&gt;1u8&lt;/code&gt;修改为&lt;code class=&quot;inline&quot;&gt;1u16&lt;/code&gt;看看编译器的提示。&lt;/p&gt;&lt;p&gt;那么现在a实际上是被转换成Enum::Second。所以Enum::p(a);输出的结果是：2。&lt;/p&gt;&lt;p&gt;注意上面Enum::First对应的判别式是0，而Enum::Second对应的判别式才是1。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://dtolnay.github.io/rust-quiz/7&quot;&gt;点此查看 Rust Quiz 7&lt;/a&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-06-51759112</guid>
<pubDate>Thu, 06 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>Rust Quiz 解读：Quiz 6</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-06-51683754.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/51683754&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt; 来自于RustFest 2018 大会上Alex Crichton 和 David Tolnay两位大佬的轻演讲主题：Rust Quiz  &lt;br&gt; &lt;br&gt;- &lt;a href=&quot;https://github.com/dtolnay/rust-quiz&quot;&gt;rust-quiz源码&lt;/a&gt; &lt;br&gt;- &lt;a href=&quot;https://dtolnay.github.io/rust-quiz/18&quot;&gt;在线练习和解答&lt;/a&gt; &lt;br&gt;- &lt;a href=&quot;https://www.youtube.com/watch?v=QtDj9R6vtA8&amp;amp;index=6&amp;amp;list=PLgC1L0fKd7UlpVTHVfLYVtudVx8CzbSxW&amp;amp;t=0s&quot;&gt;视频&lt;/a&gt; &lt;br&gt;&lt;br&gt; 不得不说，两位大佬出的题非常具有迷惑性，一不留神就落入了陷阱。   &lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;Quiz 6:&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;下面这段代码输出什么？&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;use std::mem;

fn main() {
    let a;
    let a =  a = true;
    print!(&quot;{}&quot;, mem::size_of_val(&amp;amp;a));
}&lt;/code&gt;&lt;p&gt;&lt;b&gt;输出结果：0&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;解读&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;考察要点：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code class=&quot;inline&quot;&gt;std::mem::size_of_val()&lt;/code&gt;函数的用法&lt;/li&gt;&lt;li&gt;&lt;code class=&quot;inline&quot;&gt;let&lt;/code&gt;变量屏蔽&lt;/li&gt;&lt;li&gt;变量声明和赋值&lt;/li&gt;&lt;li&gt;ZST（零大小类型）&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;main函数中，首先声明了&lt;code class=&quot;inline&quot;&gt;a&lt;/code&gt;，但并未赋值，也没有指定具体的类型。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;let a = a = true;&lt;/code&gt;，等价于&lt;code class=&quot;inline&quot;&gt;let a = (a = true);&lt;/code&gt;，Rust中可以说是「一切皆表达式」。对于&lt;code class=&quot;inline&quot;&gt;(a=true)&lt;/code&gt;来说，是一个赋值表达式，该表达式的值永远返回单元类型&lt;code class=&quot;inline&quot;&gt;()&lt;/code&gt;，同时它的值也是&lt;code class=&quot;inline&quot;&gt;()&lt;/code&gt;。那么&lt;code class=&quot;inline&quot;&gt;let a = (a = true)&lt;/code&gt;;最终等价于&lt;code class=&quot;inline&quot;&gt;let a = ();&lt;/code&gt;。 &lt;/p&gt;&lt;p&gt;所以，在最后的print!打印语句里，使用&lt;code class=&quot;inline&quot;&gt;mem::size_of_val(&amp;amp;a)&lt;/code&gt;函数来计算&lt;code class=&quot;inline&quot;&gt;a&lt;/code&gt;的内存大小，此时等价于&lt;code class=&quot;inline&quot;&gt;mem::size_of_val(&amp;amp;())&lt;/code&gt;，对于单元类型来说，它并不占任何内存空间。在Rust中，这种类型叫做ZST（Zero Size Type）。它们不占空间，最终会被LLVM优化掉。所以输出当然是：0。&lt;/p&gt;&lt;p&gt;那么，上面代码发散一下，能否这么写呢?&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;fn main() {
    let a;
    let a =  a =  a = true;
    print!(&quot;{}&quot;, std::mem::size_of_val(&amp;amp;a));
}&lt;/code&gt;&lt;p&gt;注意这里的代码变化，&lt;code class=&quot;inline&quot;&gt;let a =  a =  a = true;&lt;/code&gt;，等价于&lt;code class=&quot;inline&quot;&gt;let a =  ( a =  (a = true) );&lt;/code&gt;。但仔细想想，这样成立吗？&lt;/p&gt;&lt;p&gt;执行以后会报错：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;error[E0308]: mismatched types
 --&amp;gt; src/main.rs:3:17
  |
3 |     let a = a = (a = true);
  |                 ^^^^^^^^^^ expected bool, found ()
  |
  = note: expected type `bool`
             found type `()`

error: aborting due to previous error&lt;/code&gt;&lt;p&gt;这是为什么呢？&lt;/p&gt;&lt;p&gt;首先，&lt;code class=&quot;inline&quot;&gt;(a = true)&lt;/code&gt;，已经让Rust编译器推断&lt;code class=&quot;inline&quot;&gt;a&lt;/code&gt;的类型为&lt;code class=&quot;inline&quot;&gt;bool&lt;/code&gt;了。然后，&lt;code class=&quot;inline&quot;&gt;(a = (a = true))&lt;/code&gt;，等价于，&lt;code class=&quot;inline&quot;&gt;(a = ());&lt;/code&gt;，类型不匹配，自然会报错。&lt;/p&gt;&lt;p&gt;但是为什么&lt;code class=&quot;inline&quot;&gt;let a = (a = true)&lt;/code&gt;，没有报相似的错呢？ 这是因为，当前执行的是&lt;code class=&quot;inline&quot;&gt;let a = ();&lt;/code&gt;，和&lt;code class=&quot;inline&quot;&gt;a = ();&lt;/code&gt;比较一下，区别在哪里？ &lt;/p&gt;&lt;p&gt;区别正是因为那个&lt;code class=&quot;inline&quot;&gt;let&lt;/code&gt;，因为有&lt;code class=&quot;inline&quot;&gt;let&lt;/code&gt;，所以这里是一个&lt;code class=&quot;inline&quot;&gt;变量屏蔽&lt;/code&gt;，也就是重新定义了一个&lt;code class=&quot;inline&quot;&gt;a&lt;/code&gt;，它的类型自然不受之前类型推断结果的影响。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://dtolnay.github.io/rust-quiz/6&quot;&gt;点此查看 Rust Quiz 6&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-06-51683754</guid>
<pubDate>Thu, 06 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>Rust Quiz 解读：Quiz 5</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-05-51616607.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/51616607&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt; 来自于RustFest 2018 大会上Alex Crichton 和 David Tolnay两位大佬的轻演讲主题：Rust Quiz  &lt;br&gt;- &lt;a href=&quot;https://github.com/dtolnay/rust-quiz&quot;&gt;rust-quiz源码&lt;/a&gt; &lt;br&gt;- &lt;a href=&quot;https://dtolnay.github.io/rust-quiz/18&quot;&gt;在线练习和解答&lt;/a&gt; &lt;br&gt;- &lt;a href=&quot;https://www.youtube.com/watch?v=QtDj9R6vtA8&amp;amp;index=6&amp;amp;list=PLgC1L0fKd7UlpVTHVfLYVtudVx8CzbSxW&amp;amp;t=0s&quot;&gt;视频&lt;/a&gt; &lt;br&gt; &lt;br&gt;不得不说，两位大佬出的题非常具有迷惑性，一不留神就落入了陷阱。   &lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;Quiz 5:&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;下面这段代码输出什么？&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;trait Trait {
    fn f(self);
}

impl&amp;lt;T&amp;gt; Trait for fn(T) {
    fn f(self) {
        print!(&quot;1&quot;);
    }
}

impl&amp;lt;T&amp;gt; Trait for fn(&amp;amp;T) {
    fn f(self) {
        print!(&quot;2&quot;);
    }
}

fn main() {
    let a: fn(_) = |_: u8| {};
    let b: fn(_) = |_: &amp;amp;u8| {};
    let c: fn(&amp;amp;_) = |_: &amp;amp;u8| {};
    a.f();
    b.f();
    c.f();
}&lt;/code&gt;&lt;p&gt;&lt;b&gt;输出结果：112&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;解读：&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;考察要点：&lt;/b&gt; &lt;/p&gt;&lt;ol&gt;&lt;li&gt;fn(T)与fn(&amp;amp;T)的区别&lt;/li&gt;&lt;li&gt;类型推断&lt;/li&gt;&lt;li&gt;trait 实现&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;代码中定义了一个名为&lt;code class=&quot;inline&quot;&gt;Trait&lt;/code&gt;的trait，其中包含了方法签名&lt;code class=&quot;inline&quot;&gt;f&lt;/code&gt;。然后分别为&lt;code class=&quot;inline&quot;&gt;fn(T)&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;fn(&amp;amp;T)&lt;/code&gt;这两种函数指针类型实现了Trait。&lt;/p&gt;&lt;p&gt;那&lt;code class=&quot;inline&quot;&gt;T&lt;/code&gt; 和&lt;code class=&quot;inline&quot;&gt;&amp;amp;T&lt;/code&gt;有啥区别呢？&lt;/p&gt;&lt;ul&gt;&lt;li&gt; T， 是一个泛型参数，代表任何一个具体的类型。那么&lt;code class=&quot;inline&quot;&gt;fn(T)&lt;/code&gt;就是指一个拥有具体类型的函数指针。&lt;/li&gt;&lt;li&gt;&amp;amp;T，实际上等价于&lt;code class=&quot;inline&quot;&gt;&amp;amp;&#39;a T&lt;/code&gt;，代表某个引用类型。则&lt;code class=&quot;inline&quot;&gt;fn(&amp;amp;T)&lt;/code&gt;，就是&lt;code class=&quot;inline&quot;&gt;fn(&amp;amp;&#39;a T)&lt;/code&gt;。注意这里的&lt;code class=&quot;inline&quot;&gt;&#39;a&lt;/code&gt;也是一个泛型参数，并不是指具体的类型。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在main函数中，分别定义了三个变量绑定，a、b、c，分别将三个闭包指定为特定的函数指针类型。最后再分别调用它们的&lt;code class=&quot;inline&quot;&gt;f&lt;/code&gt;方法。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;let a: fn(_) = |_: u8| {};&lt;/code&gt;，对于&lt;code class=&quot;inline&quot;&gt;a&lt;/code&gt;来说，&lt;code class=&quot;inline&quot;&gt;_&lt;/code&gt;会被推断为&lt;code class=&quot;inline&quot;&gt;u8&lt;/code&gt;类型。那么对应于&lt;code class=&quot;inline&quot;&gt;fn(T)&lt;/code&gt;类型，最终调用其f方法输出结果就是：1。&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;let b: fn(_) = |_: &amp;amp;u8| {};&lt;/code&gt;，对于&lt;code class=&quot;inline&quot;&gt;b&lt;/code&gt;来说，&lt;code class=&quot;inline&quot;&gt;_&lt;/code&gt;会被推断为&lt;code class=&quot;inline&quot;&gt;&amp;amp;u8&lt;/code&gt;类型。这就是一个令人迷惑的点了，到底是对应&lt;code class=&quot;inline&quot;&gt;fn(T)&lt;/code&gt;还是&lt;code class=&quot;inline&quot;&gt;fn(&amp;amp;T)&lt;/code&gt;。这里的&lt;code class=&quot;inline&quot;&gt;&amp;amp;u8&lt;/code&gt;实际上是一个具体的值。它实际上等价于&lt;code class=&quot;inline&quot;&gt;f(&amp;amp;&#39;x u8)&lt;/code&gt;，这里的&lt;code class=&quot;inline&quot;&gt;&#39;x&lt;/code&gt;是一个具体的可确定的生命周期值。因为Rust生命周期参数，只有在具体使用的地方，才是具体实例化的。最终调用其f方法输出结果依然是：1。&lt;/p&gt;&lt;p&gt;let c: fn(&amp;amp;&lt;i&gt;) = |&lt;/i&gt;: &amp;amp;u8| {};&lt;code class=&quot;inline&quot;&gt;`，对于c来说，&lt;/code&gt;_&lt;code class=&quot;inline&quot;&gt;会被推断为&lt;/code&gt;u8&lt;code class=&quot;inline&quot;&gt;。此时显然，对应于&lt;/code&gt;fn(&amp;amp;T)&lt;code class=&quot;inline&quot;&gt;。&lt;/code&gt;&amp;amp;u8&lt;code class=&quot;inline&quot;&gt;的生命周期固然是已经具体实例化，但它的函数指针类型，依然是&lt;/code&gt;fn(&amp;amp;T)`。最终调用其方法输出结果就是： 2。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://dtolnay.github.io/rust-quiz/5&quot;&gt;点此查看 Rust Quiz 5&lt;/a&gt; &lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-05-51616607</guid>
<pubDate>Wed, 05 Dec 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>Rust Quiz 解读：Quiz 4</title>
<link>https://henix.github.io/feeds/zhuanlan.time-and-spirit-hut/2018-12-04-51560682.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/51560682&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-27785f4d62d62024a054a78b168015d1_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;来自于RustFest 2018 大会上Alex Crichton 和 David Tolnay两位大佬的轻演讲主题：Rust Quiz&lt;br&gt;- &lt;a href=&quot;https://github.com/dtolnay/rust-quiz&quot;&gt;rust-quiz源码&lt;/a&gt;&lt;br&gt;-  &lt;a href=&quot;https://dtolnay.github.io/rust-quiz/18&quot;&gt;在线练习和解答&lt;/a&gt;&lt;br&gt;-  &lt;a href=&quot;https://www.youtube.com/watch?v=QtDj9R6vtA8&amp;amp;index=6&amp;amp;list=PLgC1L0fKd7UlpVTHVfLYVtudVx8CzbSxW&amp;amp;t=0s&quot;&gt;视频&lt;/a&gt;&lt;br&gt;不得不说，两位大佬出的题非常具有迷惑性，一不留神就落入了陷阱。&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;Quiz 4:&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;下面这段代码输出什么？&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;fn main() {
    let (.., x, y) = (0, 1, ..);
    print!(&quot;{}&quot;, b&quot;066&quot;[y][x]);
}&lt;/code&gt;&lt;p&gt;&lt;b&gt;输出结果： 54&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;解读：&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;&lt;b&gt;考察要点： &lt;/b&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;模式匹配&lt;/li&gt;&lt;li&gt;Range和RangeFull&lt;/li&gt;&lt;li&gt;字节字符串表示法&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;上面只有两行代码，但是隐藏了很多信息。&lt;/p&gt;&lt;p&gt;Rust中let绑定语句支持模式匹配。main函数中代码第一行是元组的匹配赋值操作。在等号左边的&lt;code class=&quot;inline&quot;&gt;(.., x, y)&lt;/code&gt;是匹配的模式，等号右边&lt;code class=&quot;inline&quot;&gt;(0, 1, ..)&lt;/code&gt;是要匹配的值。&lt;/p&gt;&lt;p&gt;这里最迷惑人的地方就是&lt;code class=&quot;inline&quot;&gt;..&lt;/code&gt;，在匹配模式中，&lt;code class=&quot;inline&quot;&gt;..&lt;/code&gt;代表其余要匹配的项。在上面示例中，就是除了x和y之外，要匹配的项。而在等号右边等待匹配的值中，&lt;code class=&quot;inline&quot;&gt;..&lt;/code&gt;则代表一个值：RangeFull。RangeFull是一个单元结构体，它代表Range（范围）的全范围类型。&lt;/p&gt;&lt;p&gt;所以，下面代码是合法的：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;let range_full = std::ops::RangeFull;
let range_full = ..;&lt;/code&gt;&lt;p&gt;这两行代码是等价的。&lt;/p&gt;&lt;p&gt;所以，上面最终的元组匹配结果是：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;左边&lt;code class=&quot;inline&quot;&gt;..&lt;/code&gt;匹配右边的&lt;code class=&quot;inline&quot;&gt;0&lt;/code&gt;&lt;/li&gt;&lt;li&gt;左边&lt;code class=&quot;inline&quot;&gt;x&lt;/code&gt;匹配右边的&lt;code class=&quot;inline&quot;&gt;1&lt;/code&gt;&lt;/li&gt;&lt;li&gt;左边&lt;code class=&quot;inline&quot;&gt;y&lt;/code&gt;匹配右边的&lt;code class=&quot;inline&quot;&gt;..&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;然后在最后的&lt;code class=&quot;inline&quot;&gt;print!&lt;/code&gt;语句中，&lt;code class=&quot;inline&quot;&gt;b&quot;0666&quot;&lt;/code&gt;实际上是一种字节字符串的语法糖，它等价于&lt;code class=&quot;inline&quot;&gt;[48u8, 54u8, 54u8]&lt;/code&gt;字节序列：&lt;/p&gt;&lt;code lang=&quot;rust&quot;&gt;let d = [48u8, 54u8, 54u8];
 assert_eq!(&quot;066&quot;, std::str::from_utf8(&amp;amp;d).unwrap());&lt;/code&gt;&lt;p&gt;所以，&lt;code class=&quot;inline&quot;&gt;b&quot;066&quot;[y][x]&lt;/code&gt;现在是&lt;code class=&quot;inline&quot;&gt;b&quot;066&quot;[..][1] == b&quot;6&quot;&lt;/code&gt;，那么最终输出结果就是： 54。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://dtolnay.github.io/rust-quiz/4&quot;&gt;点此查看 Rust Quiz 4&lt;/a&gt; &lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>张汉东</author>
<guid isPermaLink="false">2018-12-04-51560682</guid>
<pubDate>Tue, 04 Dec 2018 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
