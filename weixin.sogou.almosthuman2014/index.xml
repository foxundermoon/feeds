<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>机器之心</title>
<link>https://henix.github.io/feeds/weixin.sogou.almosthuman2014/</link>
<description>专业的人工智能媒体和产业服务平台</description>
<language>zh-cn</language>
<lastBuildDate>Mon, 12 Mar 2018 15:08:44 +0800</lastBuildDate>
<item>
<title>资源 | 吴恩达deeplearning.ai五项课程完整笔记了解一下？</title>
<link>https://henix.github.io/feeds/weixin.sogou.almosthuman2014/2018-03-12-1000000628_503255489.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?timestamp=1520838466&amp;amp;src=3&amp;amp;ver=1&amp;amp;signature=60g4FlJblx0ynvOUS2XUspYgnCfnLlIE4wKAdgp82vIQeeJ3wTqzwri*aeP6HIJc17mS453JUn06-5lTp1FTg0wCAlTB07EmqcTJvpwOA-ZLV60YFOmyxAjUnk*XXUIb1kNLmvkEqO0CYoRBJPO2Be8pjQ3*k2oh-vq1N*DsZcc=&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;img-content&quot;&gt;
                
                &lt;h2 class=&quot;rich_media_title&quot; id=&quot;activity-name&quot;&gt;
                    资源 | 吴恩达deeplearning.ai五项课程完整笔记了解一下？                                    &lt;/h2&gt;
                &lt;div id=&quot;meta_content&quot; class=&quot;rich_media_meta_list&quot;&gt;
                                                            &lt;em id=&quot;post-date&quot; class=&quot;rich_media_meta rich_media_meta_text&quot;&gt;2018-03-12&lt;/em&gt;

                                        &lt;a class=&quot;rich_media_meta rich_media_meta_link rich_media_meta_nickname&quot; href=&quot;##&quot; id=&quot;post-user&quot;&gt;机器之心&lt;/a&gt;
                    &lt;span class=&quot;rich_media_meta rich_media_meta_text rich_media_meta_nickname&quot;&gt;机器之心&lt;/span&gt;


                    &lt;div id=&quot;js_profile_qrcode&quot; class=&quot;profile_container&quot; style=&quot;display:none;&quot;&gt;
                        &lt;div class=&quot;profile_inner&quot;&gt;
                            &lt;strong class=&quot;profile_nickname&quot;&gt;机器之心&lt;/strong&gt;
                            &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;&gt;

                            &lt;p class=&quot;profile_meta&quot;&gt;
                            &lt;label class=&quot;profile_meta_label&quot;&gt;微信号&lt;/label&gt;
                            &lt;span class=&quot;profile_meta_value&quot;&gt;almosthuman2014&lt;/span&gt;
                            &lt;/p&gt;

                            &lt;p class=&quot;profile_meta&quot;&gt;
                            &lt;label class=&quot;profile_meta_label&quot;&gt;功能介绍&lt;/label&gt;
                            &lt;span class=&quot;profile_meta_value&quot;&gt;专业的人工智能媒体和产业服务平台&lt;/span&gt;
                            &lt;/p&gt;
                            
                        &lt;/div&gt;
                        &lt;span class=&quot;profile_arrow_wrp&quot; id=&quot;js_profile_arrow_wrp&quot;&gt;
                            &lt;i class=&quot;profile_arrow arrow_out&quot;&gt;&lt;/i&gt;
                            &lt;i class=&quot;profile_arrow arrow_in&quot;&gt;&lt;/i&gt;
                        &lt;/span&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                
                
                
                
                                                
                                                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section style=&quot;max-width: 100%;font-size: 16px;white-space: normal;line-height: 28.4444px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section data-id=&quot;85660&quot; data-custom=&quot;rgb(117, 117, 118)&quot; data-color=&quot;rgb(117, 117, 118)&quot; style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section data-id=&quot;85660&quot; data-custom=&quot;rgb(117, 117, 118)&quot; data-color=&quot;rgb(117, 117, 118)&quot; style=&quot;max-width: 100%;border-width: 0px;border-style: initial;border-color: currentcolor;font-family: 微软雅黑;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;margin-top: 2em;padding-top: 0.5em;padding-bottom: 0.5em;max-width: 100%;border-style: solid none;font-family: inherit;text-decoration: inherit;border-top-color: rgb(204, 204, 204);border-bottom-color: rgb(204, 204, 204);border-top-width: 1px;border-bottom-width: 1px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;p style=&quot;margin-top: -1.2em;max-width: 100%;min-height: 1em;text-align: center;line-height: 1.75em;border-width: initial;border-style: initial;border-color: currentcolor;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;color: rgb(255, 255, 255);background-color: rgb(117, 117, 118);&quot;&gt;机器之心整理&lt;/span&gt;&lt;/p&gt;&lt;section data-style=&quot;white-space: normal; text-align: left;font-size: 14px;line-height: 1.5em; color: rgb(12, 12, 12);&quot; style=&quot;color: rgb(62, 62, 62);background-color: rgb(255, 255, 255);padding: 16px 16px 10px;max-width: 100%;font-family: inherit;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;font-size: 12px;color: rgb(136, 136, 136);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;机器之心编译&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;font-size: 12px;color: rgb(136, 136, 136);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;参与：思源、路雪&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style=&quot;font-size: 14px;text-align: justify;color: rgb(136, 136, 136);&quot;&gt;自吴恩达发布 deeplearning.ai 课程以来，很多学习者陆续完成了所有专项课程并精心制作了课程笔记，在此过程中机器之心也一直在为读者推荐优质的笔记。上个月，deep learning.ai 第五课发布，该系列课程最终结课。Mahmoud Badry 在 GitHub 上开源了五项课程的完整笔记，介绍了包括序列模型在内的详细知识点。机器之心简要介绍了该项目，并重点描述了第五项课程序列模型。&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;color: rgb(123, 12, 0);&quot;&gt;项目地址：https://github.com/mbadry1/DeepLearning.ai-Summary&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;上周吴恩达在推特上展示了一份由 TessFerrandez 完成的深度学习专项课程信息图，这套信息图优美地记录了深度学习课程的知识与亮点。这一份信息图的详细介绍请查看：&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3MzI4MjgzMw==&amp;amp;mid=2650738808&amp;amp;idx=1&amp;amp;sn=950b3a51af28a0434018343a2810bc82&amp;amp;chksm=871ad406b06d5d1000a246ea73acb9bec34e9b1de8f19fc90e473f071a2c40667676a174eb1b&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot;&gt;这是一份优美的信息图，吴恩达点赞的 deeplearning.ai 课程总结&lt;/a&gt; 。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Deeplearning.ai 课程开课以来，一直受到大家的关注，也有众多读者积极的参与到学习中。机器之心在这段时间内也介绍了多篇该系列课程的学习笔记，以下为前四课的笔记与学习心得：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-2&quot; style=&quot;list-style-type: disc;&quot;&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3MzI4MjgzMw==&amp;amp;mid=2650729826&amp;amp;idx=1&amp;amp;sn=9efa4e62ae2456cc509b85a66a376be4&amp;amp;chksm=871b291cb06ca00ac758954e0d76301490af5d5f4d6ab5824f0e46ae0b0dbfa891fb9b210036&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;吴恩达 Deeplearning.ai 课程学习全体验：深度学习必备课程（已获证书）&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3MzI4MjgzMw==&amp;amp;mid=2650732373&amp;amp;idx=2&amp;amp;sn=a9e7e73cf7341e82ab8b803bbcc9a4b0&amp;amp;chksm=871b332bb06cba3d7568b77e5a9067d3e57ab066044cd2617958987805dd2b070feb0c4360a9&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;入门 | 吴恩达 Deeplearning.ai 全部课程学习心得分享&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3MzI4MjgzMw==&amp;amp;mid=2650733632&amp;amp;idx=2&amp;amp;sn=12ded354c742dfda520c8da72df9766a&amp;amp;chksm=871b383eb06cb128fc60e7de8a31bba2cf3ca7b9d98b4c34c2d0ae2ff67942ec63295903cf4b&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;资源 | 吴恩达 deeplearning.ai 第四课学习心得：卷积神经网络与计算机视觉 &lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Mahmoud Badry 完成的笔记主要分为五部分，分别对应神经网络与深度学习基础、提升 DNN 性能的技巧与方法等、结构化机器学习项目、卷积神经网络和序列模型五门课程。值得注意的是，该项目完成的笔记十分详细，基本上五门课程的知识点全都覆盖到了。例如第一项课程以每周不同主题为序记录了从神经网络简介到 Goodfellow 采访等基本知识点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;由于前四课很多知识点都已经介绍过，因此本文我们着重介绍第五课的笔记概要，读者可自行查阅 GitHub 阅读完整的笔记，也可查看机器之心往期发过的一些课程资料。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;第五课序列模型简介&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;本课程将讲授如何构建自然语言、音频和其他序列数据的模型。在深度学习的帮助下，序列算法比两年前效果更好，用于大量有趣的应用，如语音识别、音乐合成、聊天机器人、机器翻译、自然语言理解等。学完本课，你将：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-2&quot; style=&quot;list-style-type: disc;&quot;&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;了解如何构建和训练循环神经网络（RNN）及其常用变体，如 GRU 和 LSTM。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;使用序列模型处理自然语言问题，如文本合成。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;将序列模型应用到音频应用中，如语音识别和音乐合成。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;这是 Deep Learning Specialization 课程的第五课，也是最后一课。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;适用人群：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-2&quot; style=&quot;list-style-type: disc;&quot;&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;学完第一、二、四课的学习者。同样推荐大家学习第三课。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;已经对神经网络（包括 CNN）具备深厚理解，并想学习如何开发循环神经网络的人。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;该课程介绍循环神经网络（RNN）、自然语言处理和词嵌入还有序列模型和注意力机制等，以下将简要介绍 Mahmoud Badry 所完成的序列模型笔记。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;序列模型&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;序列模型（如 RNN 和 LSTM）极大地改变了序列学习，序列模型可通过注意力机制获得增强。序列模型在语音识别、音乐生成、情感分类、DNA 序列分析、机器翻译、视频活动识别、命名实体识别等方面得到应用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&lt;strong&gt;循环神经网络模型（RNN）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;循环神经网络出现于 20 世纪 80 年代，最近由于网络设计的推进和图形处理单元上计算能力的提升，循环神经网络变得越来越流行。这种网络尤其是对序列数据非常有用，因为每个神经元或者单元能用它的内部存储来保存之前输入的相关信息。在语言的案例中，「I had washed my house」这句话的意思与「I had my house washed」大不相同。这就能让网络获取对该表达更深的理解。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;RNN 有很多应用，在自然语言处理（NLP）领域表现良好。下图是一个用于解决命名实体识别任务的 RNN 网络。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.3646112600536193&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZHf1NwIvRsibjkcOk4jIacIMyQVKicdRLbSRHIZMpJWp8QVwT9QNKWFZtQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;746&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);font-size: 12px;&quot;&gt;&lt;em&gt;用于解决命名实体识别任务的 RNN 网络。&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.38869257950530034&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZHRx7QsEmOTdRZjdsxK8WKxrgfeFqj9R2DzePKoiaoUyjJ5PL8VYM5n8g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;849&quot; style=&quot;width: 532px;height: 207px;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);font-size: 12px;&quot;&gt;&lt;em&gt;简化版 RNN 表示法。&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;strong&gt;沿时间的反向传播（BPTT）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.3328335832083958&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZHCTkpbUVaku33JA3WGknmSkuOn0ia30KiblX9R1YHDlOrRYVF61egsUUA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;667&quot; style=&quot;width: 498px;height: 166px;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;RNN 架构中的反向传播，w_a、b_a、w_y、b_y 被序列中的所有元素共享。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;这里使用交叉熵损失函数：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.1809872029250457&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZHol5mCTfJ034RSJhXoicbbEMew13YYjKh8KAdvt4CUU1Hz6PjHibOYJdQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;547&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;其中第一个公式是序列中一个元素的损失函数，整个序列的损失是每个元素的损失之和。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.40343915343915343&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZHuQFib7ZKK35poEJMJDuAoFb2Pdsafay7L8EYlgDs1kaPO9HbA1mtnOQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;756&quot; style=&quot;width: 488px;height: 197px;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;在上图中沿时间反向传播中，激活值 a 从一个序列元素向另一个元素传播。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;RNN 的类型&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.3133253301320528&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZH30KsJlForzibQNsBbiaH9ClsHGahfgJpsOOBIJcmia8tbDIvDzZI1aEcw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;833&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);font-size: 12px;&quot;&gt;&lt;em&gt;RNN 的不同类型。&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;RNN 的梯度消失&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;「梯度消失」指的是随着网络深度增加，参数的梯度范数指数式减小的现象。梯度很小，意味着参数的变化很缓慢，从而使得学习过程停滞。循环神经网络在语言建模等序列问题上有非常强大的力量，但同时它也存在很严重的梯度消失问题。因此像 LSTM 和 GRU 等基于门控的 RNN 有非常大的潜力，它们使用门控机制保留或遗忘前面时间步的信息，并形成记忆以提供给当前的计算过程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;门控循环单元（GRU）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;GRU 旨在解决标准 RNN 中出现的梯度消失问题。GRU 背后的原理与 LSTM 非常相似，即用门控机制控制输入、记忆等信息而在当前时间步做出预测，表达式如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.4567901234567901&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZH9RFRzeesz8Y7TtBAsExo0rOSnaRXKIGgbGvYIoicuOPiaKPoia6iaxaKfA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;243&quot; style=&quot;width: 256px;height: 117px;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;GRU 有两个有两个门，即一个重置门（reset gate）和一个更新门（update gate）。从直观上来说，重置门决定了如何将新的输入信息与前面的记忆相结合，更新门定义了前面记忆保存到当前时间步的量。如果我们将重置门设置为 1，更新门设置为 0，那么我们将再次获得标准 RNN 模型。使用门控机制学习长期依赖关系的基本思想和 LSTM 一致，但还是有一些关键区别：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-2&quot; style=&quot;list-style-type: disc;&quot;&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;GRU 有两个门（重置门与更新门），而 LSTM 有三个门（输入门、遗忘门和输出门）。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;GRU 并不会控制并保留内部记忆（c_t），且没有 LSTM 中的输出门。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;LSTM 中的输入与遗忘门对应于 GRU 的更新门，重置门直接作用于前面的隐藏状态。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;在计算输出时并不应用二阶非线性。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;为了解决标准 RNN 的梯度消失问题，GRU 使用了更新门（update gate）与重置门（reset gate）。基本上，这两个门控向量决定了哪些信息最终能作为门控循环单元的输出。这两个门控机制的特殊之处在于，它们能够保存长期序列中的信息，且不会随时间而清除或因为与预测不相关而移除。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.3511111111111111&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZHZgRZbb5ibria08POic0XmOOEUa7RfCmfFUNnXup6VjWr0ZetG01ibpLPyw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;675&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);font-size: 12px;&quot;&gt;&lt;em&gt;带有门控循环单元的循环神经网络&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;以下展示了单个门控循环单元的具体结构。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.6835066864784547&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZHZiauXtR6icydZJhssic6gCbpbwoGkktNsCvFETs23icrwLV4lQNZfJSgcA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;673&quot; style=&quot;width: 431px;height: 295px;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);font-size: 12px;&quot;&gt;&lt;em&gt;门控循环单元&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;strong&gt;LSTM&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;使用传统的通过时间的反向传播（BPTT）或实时循环学习（RTTL/Real Time Recurrent Learning），在时间中反向流动的误差信号往往会爆炸（explode）或消失（vanish）。但 LSTM 可以通过遗忘和保留记忆的机制减少这些问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;LSTM 单元一般会输出两种状态到下一个单元，即单元状态和隐藏状态。记忆块负责记忆各个隐藏状态或前面时间步的事件，这种记忆方式一般是通过三种门控机制实现，即输入门、遗忘门和输出门。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;以下是 LSTM 单元的详细结构，其中 Z 为输入部分，Z_i、Z_o 和 Z_f 分别为控制三个门的值，即它们会通过激活函数 f 对输入信息进行筛选。一般激活函数可以选择为 Sigmoid 函数，因为它的输出值为 0 到 1，即表示这三个门被打开的程度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.776049766718507&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZH61BicAXZpKrHFmLyrxhDf4BUINxW3ggzhJYPQ5wX9JqQiblQ9XDzuU7A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;643&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 12px;color: rgb(136, 136, 136);&quot;&gt;&lt;em&gt;图片来源于李弘毅机器学习讲义。&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;若我们输入 Z，那么该输入向量通过激活函数得到的 g(Z) 和输入门 f(Z_i ) 的乘积 g(Z) f(Z_i ) 就表示输入数据经筛选后所保留的信息。Z_f 控制的遗忘门将控制以前记忆的信息到底需要保留多少，保留的记忆可以用方程 c*f（z_f）表示。以前保留的信息加上当前输入有意义的信息将会保留至下一个 LSTM 单元，即我们可以用 c&#39; = g(Z)f(Z_i) + cf(z_f) 表示更新的记忆，更新的记忆 c&#39; 也表示前面与当前所保留的全部有用信息。我们再取这一更新记忆的激活值 h(c&#39;) 作为可能的输出，一般可以选择 tanh 激活函数。最后剩下的就是由 Z_o 所控制的输出门，它决定当前记忆所激活的输出到底哪些是有用的。因此最终 LSTM 的输出就可以表示为 a = h(c&#39;)f(Z_o)。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;双向 RNN（BRNN）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;双向 RNN 和深度 RNN 是构建强大序列模型的有效方法。下图是一个命名实体识别任务的 RNN 模型：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.28592814371257486&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZH2s0oqHqom35uo04RtRxyUrGsnxM8pYaQGbTmKv7oKicFamlNqiabKIyA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;668&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;BRNN 架构&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.371868978805395&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZHxuFT7002B5DmRHuquaZZCdOiahszahgU7ISxU4TVtfuicjKcZan6JxIQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;519&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;BRNN 的缺点是在处理之前需要整个序列。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;深度 RNN&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;深度 RNN 可帮助构建强大的序列模型。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.4576547231270358&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZHbQtN4ThPz6vUfMWzWYia0uQlSLOJvLchn66DibV8KqwAjdmbqpSexhXg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;614&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 12px;color: rgb(136, 136, 136);&quot;&gt;&lt;em&gt;3 层深度 RNN 图示。&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;RNN 的反向传播&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;color: rgb(136, 136, 136);&quot;&gt;在现代深度学习框架中，你只需实现前向传播，框架会执行反向传播，因此大部分机器学习工程师不需要担心反向传播。但是，如果你是微积分专家，想了解 RNN 中反向传播的细节，可参考该 notebook：https://www.coursera.org/learn/nlp-sequence-models/notebook/X20PE/building-a-recurrent-neural-network-step-by-step。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&lt;strong&gt;自然语言处理与词表征&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;词表征在自然语言处理中是必不可少的部分，从早期的 One-Hot 编码到现在流行的词嵌入，研究者一直在寻找高效的词表征方法。Mahmoud Badry 在笔记中详细记录了词嵌入方法，包括用于命名实体识别、人脸识别和翻译系统的词嵌入等，下图展示了用于人脸识别的词嵌入结构：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.3708708708708709&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZH25Mrxjc4rteQic2vbo9abia2oyGOjJBjj61wUfqt6icIahricCZHamJhhw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1332&quot; style=&quot;width: 433px;height: 161px;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;在这种词嵌入方法中，我们可以将不同的人脸编码压缩为一个向量，进而根据该向量比较是不是同一张脸。&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;词嵌入有非常多的优秀属性，例如给定一张词嵌入表。该笔记用案例来解释词嵌入的语义相近关系，如下图所示，男性变化到女性与国王变化到女王的反向在嵌入空间内是相同的，这意味着词嵌入捕捉到了词与词之间的语义相关性。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.9052224371373307&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZHJNOPlodU7wLPHO3v9uP0Mia9vv8fMNpx9CPCian59bc5tRCv7SlLpuQQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;517&quot; style=&quot;width: 199px;height: 180px;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;一般来说，Word2Vec 方法由两部分组成。首先是将高维 one-hot 形式表示的单词映射成低维向量。例如将 10,000 列的矩阵转换为 300 列的矩阵，这一过程被称为词嵌入。第二个目标是在保留单词上下文的同时，从一定程度上保留其意义。Word2Vec 实现这两个目标的方法有 skip-gram 和 CBOW 等，skip-gram 会输入一个词，然后尝试估计其它词出现在该词附近的概率。还有一种与此相反的被称为连续词袋模型（Continuous Bag Of Words，CBOW），它将一些上下文词语作为输入，并通过评估概率找出最适合（概率最大）该上下文的词。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;对于连续词袋模型而言，Mikolov 等人运用目标词前面和后面的 n 个词来同时预测这个词。他们称这个模型为连续的词袋（CBOW），因为它用连续空间来表示词，而且这些词的先后顺序并不重要。CBOW 可以看作一个具有先知的语言模型，而 skip-gram 模型则完全改变将语言模型的目标：它不像 CBOW 一样从周围的词预测中间的词；恰恰相反，它用中心语去预测周围的词。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Mahmoud Badry 还展示了另一种学习词嵌入的方法 GloVe，该方法虽然不像语言模型那样使用广泛，但它精简的结构非常容易理解：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.40711009174311924&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZHNInw6fnCAdQw6x9JZIvcLCP3MzfKdibiaelgIGbHrb8b4Ieg8Ujd2AqA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;872&quot; style=&quot;width: 449px;height: 183px;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;序列模型与注意力机制&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;最后一部分作者着重介绍了注意力机制，包括编码器解码器架构的缺陷和引入注意力机制的解决方案。下图展示了使用语境向量 C 或注意力权重编码信息的过程。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.5256008359456635&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZHiaPuExBW7X8yHHOrYK21uYLHlNPic72mXD50Gkw9raBXE7UN5jyRBFicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;957&quot; style=&quot;width: 373px;height: 196px;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;其实当我们翻译一个句子时，会尤其关注于正在翻译的单词。神经网络可以通过注意力来实现同样的行为，即关注所收到信息子集的一部分。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;我们通常是使用基于上下文的注意力生成注意力分布。参与的 RNN 会生成一个描述它想关注内容的查询。每一个条目和这个查询做点乘来产生一个分数，这个分数描述这个条目与查询匹配程度。这些分数被输入一个 softmax 来生成注意力分布。&lt;/span&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.3287671232876712&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW89eluHpgtRK4IymWIgT5pfUp97Zo18NR4gR3icPhicewiazgaCKrrqQGmVqQTUn3CnIasvAZLHBqdDg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;73&quot; width=&quot;43px&quot; style=&quot;color: rgb(62, 62, 62);font-size: 16px;box-sizing: border-box !important;word-wrap: break-word !important;width: 43px !important;visibility: visible !important;&quot;&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.6341463414634146&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZHKjyZEpQyhiaTmM4BwcsBQsrGiaHrGpKiariboEyZ4p1o0aibz5qk9L56Yng/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;738&quot;&gt;&lt;/p&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);text-align: justify;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;line-height: 25.6px;font-family: 微软雅黑;font-size: 14px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;color: rgb(62, 62, 62);line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);text-align: justify;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;line-height: 25.6px;font-family: 微软雅黑;font-size: 14px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;color: rgb(62, 62, 62);line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);text-align: justify;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;line-height: 25.6px;font-family: 微软雅黑;font-size: 14px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;color: rgb(62, 62, 62);line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;本文为机器之心整理，&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;转载请联系本公众号获得授权&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;。&lt;/span&gt;&lt;/strong&gt;&lt;br style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 5px;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);white-space: normal;background-color: rgb(255, 255, 255);font-size: 18px;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);line-height: 25.6px;font-family: 微软雅黑;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;✄------------------------------------------------&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 5px;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);white-space: normal;background-color: rgb(255, 255, 255);font-size: 18px;font-family: 微软雅黑;text-align: center;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(217, 33, 66);font-size: 12px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;加入机器之心（全职记者/实习生）：hr@jiqizhixin.com&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);white-space: normal;background-color: rgb(255, 255, 255);font-size: 18px;font-family: 微软雅黑;text-align: center;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(217, 33, 66);line-height: 1.6;font-size: 12px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;投稿或寻求报道：editor@jiqizhixin.com&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);white-space: normal;background-color: rgb(255, 255, 255);font-size: 18px;font-family: 微软雅黑;text-align: center;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;font-size: 12px;color: rgb(217, 33, 66);line-height: 1.6;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;广告&amp;amp;商务合作：bd@jiqizhixin.com&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;
                &lt;script nonce=&quot;1449545818&quot; type=&quot;text/javascript&quot;&gt;
                    var first_sceen__time = (+new Date());

                    if (&quot;&quot; == 1 &amp;&amp; document.getElementById(&#39;js_content&#39;)) {
                        document.getElementById(&#39;js_content&#39;).addEventListener(&quot;selectstart&quot;,function(e){ e.preventDefault(); });
                    }

                    
                    (function(){
                        if (navigator.userAgent.indexOf(&quot;WindowsWechat&quot;) != -1){
                            var link = document.createElement(&#39;link&#39;);
                            var head = document.getElementsByTagName(&#39;head&#39;)[0];
                            link.rel = &#39;stylesheet&#39;;
                            link.type = &#39;text/css&#39;;
                            link.href = &quot;//res.wx.qq.com/mmbizwap/zh_CN/htmledition/style/page/appmsg/page_mp_article_improve_winwx31619e.css&quot;;
                            head.appendChild(link);
                        }
                    })();
                &lt;/script&gt;
                
                
                                
                &lt;div class=&quot;ct_mpda_wrp&quot; id=&quot;js_sponsor_ad_area&quot; style=&quot;display:none;&quot;&gt;&lt;/div&gt;

                
                                &lt;div class=&quot;reward_area tc&quot; id=&quot;js_preview_reward&quot; style=&quot;display:none;&quot;&gt;
                    &lt;p id=&quot;js_preview_reward_wording&quot; class=&quot;tips_global reward_tips&quot; style=&quot;display:none;&quot;&gt;&lt;/p&gt;
                    &lt;p&gt;
                        &lt;a class=&quot;reward_access&quot; id=&quot;js_preview_reward_link&quot; href=&quot;##&quot;&gt;&lt;span class=&quot;icon-reward&quot;&gt;&lt;/span&gt;赞赏&lt;/a&gt;

                    &lt;/p&gt;
                &lt;/div&gt;
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_preview_reward_qrcode&quot; style=&quot;display:none;&quot;&gt;
                    &lt;p class=&quot;tips_global&quot;&gt;长按二维码向我转账&lt;/p&gt;
                    &lt;p id=&quot;js_preview_reward_ios_wording&quot; class=&quot;reward_tips&quot; style=&quot;display:none;&quot;&gt;&lt;/p&gt;
                    &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; src=&quot;//res.wx.qq.com/mmbizwap/zh_CN/htmledition/images/pic/appmsg/pic_reward_qrcode.2x3534dd.png&quot;&gt;&lt;/span&gt;
                    &lt;p class=&quot;tips_global&quot;&gt;受苹果公司新规定影响，微信 iOS 版的赞赏功能被关闭，可通过二维码转账支持公众号。&lt;/p&gt;
                &lt;/div&gt;
                            &lt;/div&gt;&lt;div class=&quot;rich_media_tool&quot; id=&quot;js_toobar3&quot;&gt;
                
                                
                                            &lt;div id=&quot;js_read_area3&quot; class=&quot;media_tool_meta tips_global meta_primary&quot; style=&quot;display:none;&quot;&gt;阅读 &lt;span id=&quot;readNum3&quot;&gt;&lt;/span&gt;&lt;/div&gt;

                &lt;span style=&quot;display:none;&quot; class=&quot;media_tool_meta meta_primary tips_global meta_praise&quot; id=&quot;like3&quot;&gt;
                    &lt;i class=&quot;icon_praise_gray&quot;&gt;&lt;/i&gt;&lt;span class=&quot;praise_num&quot; id=&quot;likeNum3&quot;&gt;&lt;/span&gt;
                &lt;/span&gt;

                &lt;a id=&quot;js_report_article3&quot; style=&quot;display:none;&quot; class=&quot;media_tool_meta tips_global meta_extra&quot; href=&quot;##&quot;&gt;投诉&lt;/a&gt;

            &lt;/div&gt;&lt;div class=&quot;rich_media_tool&quot; id=&quot;js_sg_bar&quot;&gt;
                
                                
                                
            &lt;/div&gt;</description>
<author></author>
<guid isPermaLink="false">2018-03-12-1000000628_503255489</guid>
<pubDate>Mon, 12 Mar 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>活动 | 今日开售的搜狗旅行翻译宝，你想近距离体验吗？</title>
<link>https://henix.github.io/feeds/weixin.sogou.almosthuman2014/2018-03-12-1000000628_503255458.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?timestamp=1520838466&amp;amp;src=3&amp;amp;ver=1&amp;amp;signature=60g4FlJblx0ynvOUS2XUspYgnCfnLlIE4wKAdgp82vIQeeJ3wTqzwri*aeP6HIJc17mS453JUn06-5lTp1FTg0wCAlTB07EmqcTJvpwOA-YzoDoyG5OyqwoAlpRmwJhgFaD4HgK-N0bsyvF4QaOW9-TprNkN0H347tY1YEidXLs=&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;img-content&quot;&gt;
                
                &lt;h2 class=&quot;rich_media_title&quot; id=&quot;activity-name&quot;&gt;
                    活动 | 今日开售的搜狗旅行翻译宝，你想近距离体验吗？                                    &lt;/h2&gt;
                &lt;div id=&quot;meta_content&quot; class=&quot;rich_media_meta_list&quot;&gt;
                                                            &lt;em id=&quot;post-date&quot; class=&quot;rich_media_meta rich_media_meta_text&quot;&gt;2018-03-12&lt;/em&gt;

                                        &lt;a class=&quot;rich_media_meta rich_media_meta_link rich_media_meta_nickname&quot; href=&quot;##&quot; id=&quot;post-user&quot;&gt;机器之心&lt;/a&gt;
                    &lt;span class=&quot;rich_media_meta rich_media_meta_text rich_media_meta_nickname&quot;&gt;机器之心&lt;/span&gt;


                    &lt;div id=&quot;js_profile_qrcode&quot; class=&quot;profile_container&quot; style=&quot;display:none;&quot;&gt;
                        &lt;div class=&quot;profile_inner&quot;&gt;
                            &lt;strong class=&quot;profile_nickname&quot;&gt;机器之心&lt;/strong&gt;
                            &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;&gt;

                            &lt;p class=&quot;profile_meta&quot;&gt;
                            &lt;label class=&quot;profile_meta_label&quot;&gt;微信号&lt;/label&gt;
                            &lt;span class=&quot;profile_meta_value&quot;&gt;almosthuman2014&lt;/span&gt;
                            &lt;/p&gt;

                            &lt;p class=&quot;profile_meta&quot;&gt;
                            &lt;label class=&quot;profile_meta_label&quot;&gt;功能介绍&lt;/label&gt;
                            &lt;span class=&quot;profile_meta_value&quot;&gt;专业的人工智能媒体和产业服务平台&lt;/span&gt;
                            &lt;/p&gt;
                            
                        &lt;/div&gt;
                        &lt;span class=&quot;profile_arrow_wrp&quot; id=&quot;js_profile_arrow_wrp&quot;&gt;
                            &lt;i class=&quot;profile_arrow arrow_out&quot;&gt;&lt;/i&gt;
                            &lt;i class=&quot;profile_arrow arrow_in&quot;&gt;&lt;/i&gt;
                        &lt;/span&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                
                
                
                
                                                
                                                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;3 月 12 日，搜狗旅行翻译宝在京东平台首发，售价 1498 元。据了解，搜狗旅行翻译宝结合了搜狗神经网络机器翻译、语音识别、图像识别等多项技术，不仅支持语音、图像翻译等多种翻译模式，还提供中英日韩俄德等 18 种语言互译。&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.9789473684210527&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZHBsudhHrqSogJwticH4ytxCiczexl3k8dnVbb0HryccXMvxOcg9CzW9oQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;760&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;对搜狗的这款旅行翻译宝，你是不是充满好奇？想要了解其背后的语音翻译技术，体验这款产品？&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;在 3 月 17 日的 INTERFACE 线下分享中，搜狗语音交互技术中心研发总监陈伟、搜狗 IOT 事业部产品负责人李健涛，将从技术到产品为我们做解读。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;分享主题一：搜狗语音翻译技术是怎样炼成的？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.625&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_jpg/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZHicEicqrrk7rHggoFZvzVZztnKLYibGicyhp7O0fKZpXicaThZzNG0UOavfQ/640?wx_fmt=jpeg&quot; data-type=&quot;jpeg&quot; data-w=&quot;640&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 12px;color: rgb(136, 136, 136);&quot;&gt;&lt;em&gt;分享者：搜狗语音交互技术中心研发总监陈伟&lt;/em&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;陈伟：搜狗语音交互技术中心研发总监，语音技术负责人，负责搜狗语音识别、语音合成、机器翻译、声纹识别、手写识别等多项技术的研发工作，同时负责搜狗知音引擎语音技术的研发，致力于通过技术和产品的创新提升语音交互品质，为用户提供优质的语音使用体验。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;分享主题二：搜狗旅行翻译宝产品研发理念&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1.506578947368421&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZHcIPPyQ01Mu00DlgC1ibiaPay3opTjRH1LiafswmUo4veFNepYbCfO4P2Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;456&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);font-size: 12px;&quot;&gt;&lt;em&gt;分享者：搜狗 IOT 事业部产品负责人李健涛&lt;/em&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt; &lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;李健涛：搜狗 IOT 事业部产品负责人，负责搜狗旅行翻译宝、速记翻译笔、糖猫儿童智能手表等智能硬件产品研发工作。他在 2005 年加入搜狐，负责博客开发，经历了社交网络大爆炸、移动互联网浪潮，又投身智能硬件领域，致力于通过产品创新提升智能硬件产品使用体验，为用户提供优质的服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;strong&gt;活动流程&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;日期&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;：2018 年 03 月 17 日&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-2&quot; style=&quot;list-style-type: disc;&quot;&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;13:00-14:00 签到、产品体验&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;14:00-14：30 陈伟分享&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;14：30-15:00 李健涛分享 &lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;15:00-15:30 现场提问&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;15:30-16:00 现场交流、产品体验&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;地址&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;：北京市海淀区中关村东路搜狐网络大厦 8 层四海会议室&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(123, 12, 0);&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;参与方式&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;：点击「阅读原文」参与报名&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;/div&gt;
                &lt;script nonce=&quot;2093081280&quot; type=&quot;text/javascript&quot;&gt;
                    var first_sceen__time = (+new Date());

                    if (&quot;&quot; == 1 &amp;&amp; document.getElementById(&#39;js_content&#39;)) {
                        document.getElementById(&#39;js_content&#39;).addEventListener(&quot;selectstart&quot;,function(e){ e.preventDefault(); });
                    }

                    
                    (function(){
                        if (navigator.userAgent.indexOf(&quot;WindowsWechat&quot;) != -1){
                            var link = document.createElement(&#39;link&#39;);
                            var head = document.getElementsByTagName(&#39;head&#39;)[0];
                            link.rel = &#39;stylesheet&#39;;
                            link.type = &#39;text/css&#39;;
                            link.href = &quot;//res.wx.qq.com/mmbizwap/zh_CN/htmledition/style/page/appmsg/page_mp_article_improve_winwx31619e.css&quot;;
                            head.appendChild(link);
                        }
                    })();
                &lt;/script&gt;
                
                
                                
                &lt;div class=&quot;ct_mpda_wrp&quot; id=&quot;js_sponsor_ad_area&quot; style=&quot;display:none;&quot;&gt;&lt;/div&gt;

                
                                &lt;div class=&quot;reward_area tc&quot; id=&quot;js_preview_reward&quot; style=&quot;display:none;&quot;&gt;
                    &lt;p id=&quot;js_preview_reward_wording&quot; class=&quot;tips_global reward_tips&quot; style=&quot;display:none;&quot;&gt;&lt;/p&gt;
                    &lt;p&gt;
                        &lt;a class=&quot;reward_access&quot; id=&quot;js_preview_reward_link&quot; href=&quot;##&quot;&gt;&lt;span class=&quot;icon-reward&quot;&gt;&lt;/span&gt;赞赏&lt;/a&gt;

                    &lt;/p&gt;
                &lt;/div&gt;
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_preview_reward_qrcode&quot; style=&quot;display:none;&quot;&gt;
                    &lt;p class=&quot;tips_global&quot;&gt;长按二维码向我转账&lt;/p&gt;
                    &lt;p id=&quot;js_preview_reward_ios_wording&quot; class=&quot;reward_tips&quot; style=&quot;display:none;&quot;&gt;&lt;/p&gt;
                    &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; src=&quot;//res.wx.qq.com/mmbizwap/zh_CN/htmledition/images/pic/appmsg/pic_reward_qrcode.2x3534dd.png&quot;&gt;&lt;/span&gt;
                    &lt;p class=&quot;tips_global&quot;&gt;受苹果公司新规定影响，微信 iOS 版的赞赏功能被关闭，可通过二维码转账支持公众号。&lt;/p&gt;
                &lt;/div&gt;
                            &lt;/div&gt;&lt;div class=&quot;rich_media_tool&quot; id=&quot;js_toobar3&quot;&gt;
                
                                
                                            &lt;a class=&quot;media_tool_meta meta_primary&quot; id=&quot;js_view_source&quot; href=&quot;##&quot;&gt;阅读原文&lt;/a&gt;
                                &lt;div id=&quot;js_read_area3&quot; class=&quot;media_tool_meta tips_global meta_primary&quot; style=&quot;display:none;&quot;&gt;阅读 &lt;span id=&quot;readNum3&quot;&gt;&lt;/span&gt;&lt;/div&gt;

                &lt;span style=&quot;display:none;&quot; class=&quot;media_tool_meta meta_primary tips_global meta_praise&quot; id=&quot;like3&quot;&gt;
                    &lt;i class=&quot;icon_praise_gray&quot;&gt;&lt;/i&gt;&lt;span class=&quot;praise_num&quot; id=&quot;likeNum3&quot;&gt;&lt;/span&gt;
                &lt;/span&gt;

                &lt;a id=&quot;js_report_article3&quot; style=&quot;display:none;&quot; class=&quot;media_tool_meta tips_global meta_extra&quot; href=&quot;##&quot;&gt;投诉&lt;/a&gt;

            &lt;/div&gt;&lt;div class=&quot;rich_media_tool&quot; id=&quot;js_sg_bar&quot;&gt;
                
                                
                                &lt;a class=&quot;media_tool_meta meta_primary&quot; href=&quot;http://www.huodongxing.com/event/6429470863300&quot; target=&quot;_blank&quot;&gt;阅读原文&lt;/a&gt;
                                
            &lt;/div&gt;</description>
<author></author>
<guid isPermaLink="false">2018-03-12-1000000628_503255458</guid>
<pubDate>Mon, 12 Mar 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>CVPR 2018 | 优于Mask R-CNN，港中文&amp;腾讯优图提出PANet实例分割框架</title>
<link>https://henix.github.io/feeds/weixin.sogou.almosthuman2014/2018-03-12-1000000628_503255454.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?timestamp=1520838466&amp;amp;src=3&amp;amp;ver=1&amp;amp;signature=60g4FlJblx0ynvOUS2XUspYgnCfnLlIE4wKAdgp82vIQeeJ3wTqzwri*aeP6HIJc17mS453JUn06-5lTp1FTg0wCAlTB07EmqcTJvpwOA-bwIZoevvb0vA60VXDjq3coxFRd0em-zxrdz1FOW9MCFRDoMVPSmJoRn0Lu04qi07I=&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;img-content&quot;&gt;
                
                &lt;h2 class=&quot;rich_media_title&quot; id=&quot;activity-name&quot;&gt;
                    CVPR 2018 | 优于Mask R-CNN，港中文&amp;amp;腾讯优图提出PANet实例分割框架                                    &lt;/h2&gt;
                &lt;div id=&quot;meta_content&quot; class=&quot;rich_media_meta_list&quot;&gt;
                                                            &lt;em id=&quot;post-date&quot; class=&quot;rich_media_meta rich_media_meta_text&quot;&gt;2018-03-12&lt;/em&gt;

                                        &lt;a class=&quot;rich_media_meta rich_media_meta_link rich_media_meta_nickname&quot; href=&quot;##&quot; id=&quot;post-user&quot;&gt;机器之心&lt;/a&gt;
                    &lt;span class=&quot;rich_media_meta rich_media_meta_text rich_media_meta_nickname&quot;&gt;机器之心&lt;/span&gt;


                    &lt;div id=&quot;js_profile_qrcode&quot; class=&quot;profile_container&quot; style=&quot;display:none;&quot;&gt;
                        &lt;div class=&quot;profile_inner&quot;&gt;
                            &lt;strong class=&quot;profile_nickname&quot;&gt;机器之心&lt;/strong&gt;
                            &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;&gt;

                            &lt;p class=&quot;profile_meta&quot;&gt;
                            &lt;label class=&quot;profile_meta_label&quot;&gt;微信号&lt;/label&gt;
                            &lt;span class=&quot;profile_meta_value&quot;&gt;almosthuman2014&lt;/span&gt;
                            &lt;/p&gt;

                            &lt;p class=&quot;profile_meta&quot;&gt;
                            &lt;label class=&quot;profile_meta_label&quot;&gt;功能介绍&lt;/label&gt;
                            &lt;span class=&quot;profile_meta_value&quot;&gt;专业的人工智能媒体和产业服务平台&lt;/span&gt;
                            &lt;/p&gt;
                            
                        &lt;/div&gt;
                        &lt;span class=&quot;profile_arrow_wrp&quot; id=&quot;js_profile_arrow_wrp&quot;&gt;
                            &lt;i class=&quot;profile_arrow arrow_out&quot;&gt;&lt;/i&gt;
                            &lt;i class=&quot;profile_arrow arrow_in&quot;&gt;&lt;/i&gt;
                        &lt;/span&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                
                
                
                
                                                
                                                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;section style=&quot;max-width: 100%;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);line-height: 28.4444px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section data-id=&quot;85660&quot; data-custom=&quot;rgb(117, 117, 118)&quot; data-color=&quot;rgb(117, 117, 118)&quot; style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section data-id=&quot;85660&quot; data-custom=&quot;rgb(117, 117, 118)&quot; data-color=&quot;rgb(117, 117, 118)&quot; style=&quot;max-width: 100%;border-width: 0px;border-style: initial;border-color: currentcolor;font-family: 微软雅黑;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;margin-top: 2em;padding-top: 0.5em;padding-bottom: 0.5em;max-width: 100%;border-style: solid none;font-family: inherit;text-decoration: inherit;border-top-color: rgb(204, 204, 204);border-bottom-color: rgb(204, 204, 204);border-top-width: 1px;border-bottom-width: 1px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;p style=&quot;margin-top: -1.2em;max-width: 100%;min-height: 1em;text-align: center;line-height: 1.75em;border-width: initial;border-style: initial;border-color: currentcolor;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(255, 255, 255);background-color: rgb(117, 117, 118);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;选自arXiv&lt;/span&gt;&lt;/p&gt;&lt;section data-style=&quot;white-space: normal; text-align: left;font-size: 14px;line-height: 1.5em; color: rgb(12, 12, 12);&quot; style=&quot;padding: 16px 16px 10px;max-width: 100%;font-family: inherit;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;font-size: 12px;color: rgb(136, 136, 136);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;作者：&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;font-size: 12px;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(136, 136, 136);text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;Shu Liu 等&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;font-size: 12px;color: rgb(136, 136, 136);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;机器之心编译&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;font-size: 12px;color: rgb(136, 136, 136);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;参与：&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;font-size: 12px;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(136, 136, 136);text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;刘晓坤、路雪&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span style=&quot;text-align: justify;font-size: 14px;color: rgb(136, 136, 136);&quot;&gt;近日，港中文联合腾讯优图提出了新型实例分割框架 PANet，该网络通过加速信息流和整合不同层级的特征，可以极大提高生成预测掩码的质量。PANet 在 COCO 2017 挑战赛的实例分割任务中取得了第一名，优于 &lt;span style=&quot;color: rgb(136, 136, 136);font-size: 14px;text-align: justify;&quot;&gt;COCO 2016 实例分割挑战赛冠军和 &lt;/span&gt;Mask R-CNN。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;strong&gt;引言&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;实例分割是最重要、最具挑战性的任务之一。该任务的目的是预测类别标签和像素级实例掩码以定位图像中不同数量的实例。实例分割对自驾汽车、机器人、视频监控等很有用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;由于深度卷积神经网络的助力，人们提出了多种实例分割的框架 [21,33,3,38]，其性能也提升得很快 [12]。Mask R-CNN [21] 是一个很简单有效的实例分割框架。基于 Fast/Faster R-CNN [16,51]，研究者还提出了全卷积网络（FCN），FCN 结合边框回归和分类网络用于预测掩码。为了获得足够高的分割性能，研究者利用特征金字塔网络（FPN）[35] 来提取网络内部的特征层级，其中增强了自上而下的路径（具备侧向连接）以传播语义较强的特征。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;近期发布的新数据集 [37,7,45] 为算法提供了很大的提升空间。COCO [37] 由 20 万张图像构成，每张图像都包含了空间布局复杂的多个实例。与此不同，Cityscapes [7] 和 MVD [45] 的每张图像都是包含大量交通参与者的街景，因此这些数据集会出现很多模糊的、高度遮挡以及非常小的实例。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;研究者提出了多个原则，用于设计既可以执行图像分类又可以执行目标识别的网络。例如，通过残差连接 [23,24] 和密集连接 [26] 缩短信息路径，使信息更有效地传播。此外，通过分离-转换-融合策略创建并行路径以增加信息路径的灵活性和多样性也大有裨益 [61, 6]。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;研究发现&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;本文研究者指出当前最优的 Mask R-CNN 中的信息传播还可以进一步优化。具体来说，低层级的特征对于大型实例识别很有用。但最高层级特征和较低层级特征之间的路径很长，增加了访问准确定位信息的难度。此外，每个建议区域都是基于从一个特征层级池化得到的特征网格而预测的，此分配是启发式的。由于其它层级的丢弃信息可能对于最终的预测还有用，这个流程还有进一步优化的空间。最后，掩码预测仅在单个视野上执行，无法获得更加多样化的信息。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;贡献&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;受到这些理论和观察的启发，本文作者提出了新的实例分割框架 PANet，如图 1 所示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;首先，为了缩短信息路径和用低层级的准确定位信息增强特征金字塔，作者创建了自下而上的路径增强。实际上，文献 [44,42,13,46,35,5,31,14] 中的系统就使用了低层级的特征。而传播低层级特征来增强整个特征分层，从而提升实例分割质量的方向，尚未有人进行探索。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;第二，为了恢复每个建议区域和所有特征层级之间被破坏的信息，作者开发了适应性特征池化（adaptive feature pooling）技术。这是一个简单的组件，可以将所有特征层级中的特征整合到每个建议区域中，避免了任意分配的结果。通过该操作，研究者创建了更简洁的路径（与 [4,62] 相比）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.33083270817704424&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZHyNpHDmvkkbnHrleC661hQdgjJ1Nib1rwDeeS3cJ4xiasicVX6cH2nj2jQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1333&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);font-size: 12px;&quot;&gt;&lt;em&gt;图 1. 框架图示。（a）FPN 主干网络。（b）自下而上的路径增强。（c）适应性特征池化。（d）边框分支。（e）全连接融合层。注意：为简洁起见，（a）和（b）中省略了特征图的通道维度。&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;最后，为了捕捉每个建议区域的不同视野，研究者使用小型全连接层来增强掩码预测，作为对 Mask R-CNN 所用的 FCN 的补充。通过结合这两种视野的预测结果，网络输出的信息多样性有所改善，掩码质量有所提升。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;目标检测和实例分割共享前两个组件，这使得二者性能均有明显提升。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;实验结果 &lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;PANet 在多个数据集上达到了顶尖的性能。研究者使用 ResNet-50 [23] 作为 PANet 的初始网络，使用单个尺度进行测试，其性能优于 COCO 2016 挑战赛目标检测和实例分割任务冠军。注意：之前的结果均由具备多尺度和水平翻转测试的大型模型获取。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;本研究提出的模型在未经大批量训练的情况下，取得了 COCO 2017 挑战赛实例分割任务第一名、目标检测任务的第二名。研究者还在 Cityscapes 和 MVD 上对该系统进行了基准测试，同样获得了顶尖结果，这表明 PANet 是一个非常实际、且性能优秀的框架。之后研究者将公开代码和模型。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.6034782608695652&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZHJ8pPKsAIualMaHnicd4iaibpGLqd1vFD78wYeHiaFshJ1NysO4oNxcjclQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;575&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);font-size: 12px;&quot;&gt;&lt;em&gt;图 3. 使用适应性特征池化从不同特征级中整合特征的比率。每一条线表示应被分配至 FPN 中相同特征级的一组建议区域，即具备相似尺度的建议区域。横轴表示池化特征的来源。这表明具备不同大小的建议区域都可以使用不同级别的特征。&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.5145929339477726&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZHQZFAdiaIxGHOw9liaT7KZ97FjmVXOYkiaJSNy3EFXU6Qz0QHrI2ibFw8Dg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;651&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);font-size: 12px;&quot;&gt;&lt;em&gt;图 4. 具备全连接融合层的掩码预测分支。&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 14px;text-align: justify;&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.14403600900225055&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZHvFtNuOeKzaibibSiaojqYFypopdyib923UehIsSaG4DicFhWjyqZurbNc9w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1333&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);font-size: 12px;&quot;&gt;&lt;em&gt;表 1. PANet、COCO 2016 实例分割挑战赛冠军和 Mask R-CNN 在 COCO 测试-开发子集上的 Mask AP 对比，后两者是基线模型。&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.509090909090909&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZHUIicuxvfIUKAYWpk6PZChZBZkg0MY9UnCZbTbSFOMv1kcWC3v1Jsrtg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1265&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);font-size: 12px;&quot;&gt;&lt;em&gt;表 5. 每一行的图像分别是本研究提出的模型在 COCO 测试-开发集、Cityscapes 测试集和 MVD 测试集上的实例分割结果。&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.16989914662529093&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZHMKGibzX123BgYrjHa3P1lqS4FIb70g4EGKQUvCJ1NOqZNbTSTnF3Gow/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1289&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);font-size: 12px;&quot;&gt;&lt;em&gt;表 8. 在 Cityscapes 验证子集上的结果，标注为 AP [val]；在 Cityscapes 测试子集上的结果，标注为 AP。&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;论文：Path Aggregation Network for Instance Segmentation&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.23788217747949292&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZHKg4AyLysQmocC7UECYRh4ldedhlQn7INzyyuicN3vJXW5PvEDGk6I7Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1341&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;color: rgb(123, 12, 0);&quot;&gt;论文链接：https://arxiv.org/abs/1803.01534&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;神经网络中的信息传播方式是非常重要的因素。本论文提出了 Path Aggregation Network（PANet），该网络可以对基于区域建议的实例分割框架中的信息流进行加速。具体来说，我们通过自下而上的路径增强，在较底层用准确的定位信号增强了整个特征分层，从而缩短了较底层和最高层特征之间的信息路径。我们展示了适应性特征池化（adaptive feature pooling）操作，将特征网格和所有特征层级连接起来，以使每个特征层级中的有用信息能直接传播到随后的建议子网络。我们还创建了一个互补的分支网络为每个建议捕捉不同的视野，从而进一步提升生成掩码预测的质量。这些提升都能够很简单地实现，只需要少量的额外计算量。PANet 在 COCO 2017 挑战赛的实例分割任务中取得了第一名，在目标检测任务中取得了第二名，且无需大批量训练。它在 MVD 和 Cityscapes 上也取得了当前最佳的结果。&lt;/span&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.3287671232876712&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOd6kYzKSNx7GpKhf1OMhgW30B8WEsyibXYuvBogNHE5TQTpUQGLsWmeQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;73&quot; style=&quot;width: 43px;height: 20px;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);text-align: justify;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;line-height: 25.6px;font-family: 微软雅黑;font-size: 14px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;color: rgb(62, 62, 62);line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;本文为机器之心编译，&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;转载请联系本公众号获得授权&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;。&lt;/span&gt;&lt;/strong&gt;&lt;br style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 5px;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);white-space: normal;background-color: rgb(255, 255, 255);font-size: 18px;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);line-height: 25.6px;font-family: 微软雅黑;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;✄------------------------------------------------&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 5px;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);white-space: normal;background-color: rgb(255, 255, 255);font-size: 18px;font-family: 微软雅黑;text-align: center;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(217, 33, 66);font-size: 12px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;加入机器之心（全职记者/实习生）：hr@jiqizhixin.com&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);white-space: normal;background-color: rgb(255, 255, 255);font-size: 18px;font-family: 微软雅黑;text-align: center;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(217, 33, 66);line-height: 1.6;font-size: 12px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;投稿或寻求报道：editor@jiqizhixin.com&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);white-space: normal;background-color: rgb(255, 255, 255);font-size: 18px;font-family: 微软雅黑;text-align: center;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;font-size: 12px;color: rgb(217, 33, 66);line-height: 1.6;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;广告&amp;amp;商务合作：bd@jiqizhixin.com&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
                &lt;/div&gt;
                &lt;script nonce=&quot;1745426958&quot; type=&quot;text/javascript&quot;&gt;
                    var first_sceen__time = (+new Date());

                    if (&quot;&quot; == 1 &amp;&amp; document.getElementById(&#39;js_content&#39;)) {
                        document.getElementById(&#39;js_content&#39;).addEventListener(&quot;selectstart&quot;,function(e){ e.preventDefault(); });
                    }

                    
                    (function(){
                        if (navigator.userAgent.indexOf(&quot;WindowsWechat&quot;) != -1){
                            var link = document.createElement(&#39;link&#39;);
                            var head = document.getElementsByTagName(&#39;head&#39;)[0];
                            link.rel = &#39;stylesheet&#39;;
                            link.type = &#39;text/css&#39;;
                            link.href = &quot;//res.wx.qq.com/mmbizwap/zh_CN/htmledition/style/page/appmsg/page_mp_article_improve_winwx31619e.css&quot;;
                            head.appendChild(link);
                        }
                    })();
                &lt;/script&gt;
                
                
                                
                &lt;div class=&quot;ct_mpda_wrp&quot; id=&quot;js_sponsor_ad_area&quot; style=&quot;display:none;&quot;&gt;&lt;/div&gt;

                
                                &lt;div class=&quot;reward_area tc&quot; id=&quot;js_preview_reward&quot; style=&quot;display:none;&quot;&gt;
                    &lt;p id=&quot;js_preview_reward_wording&quot; class=&quot;tips_global reward_tips&quot; style=&quot;display:none;&quot;&gt;&lt;/p&gt;
                    &lt;p&gt;
                        &lt;a class=&quot;reward_access&quot; id=&quot;js_preview_reward_link&quot; href=&quot;##&quot;&gt;&lt;span class=&quot;icon-reward&quot;&gt;&lt;/span&gt;赞赏&lt;/a&gt;

                    &lt;/p&gt;
                &lt;/div&gt;
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_preview_reward_qrcode&quot; style=&quot;display:none;&quot;&gt;
                    &lt;p class=&quot;tips_global&quot;&gt;长按二维码向我转账&lt;/p&gt;
                    &lt;p id=&quot;js_preview_reward_ios_wording&quot; class=&quot;reward_tips&quot; style=&quot;display:none;&quot;&gt;&lt;/p&gt;
                    &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; src=&quot;//res.wx.qq.com/mmbizwap/zh_CN/htmledition/images/pic/appmsg/pic_reward_qrcode.2x3534dd.png&quot;&gt;&lt;/span&gt;
                    &lt;p class=&quot;tips_global&quot;&gt;受苹果公司新规定影响，微信 iOS 版的赞赏功能被关闭，可通过二维码转账支持公众号。&lt;/p&gt;
                &lt;/div&gt;
                            &lt;/div&gt;&lt;div class=&quot;rich_media_tool&quot; id=&quot;js_toobar3&quot;&gt;
                
                                
                                            &lt;div id=&quot;js_read_area3&quot; class=&quot;media_tool_meta tips_global meta_primary&quot; style=&quot;display:none;&quot;&gt;阅读 &lt;span id=&quot;readNum3&quot;&gt;&lt;/span&gt;&lt;/div&gt;

                &lt;span style=&quot;display:none;&quot; class=&quot;media_tool_meta meta_primary tips_global meta_praise&quot; id=&quot;like3&quot;&gt;
                    &lt;i class=&quot;icon_praise_gray&quot;&gt;&lt;/i&gt;&lt;span class=&quot;praise_num&quot; id=&quot;likeNum3&quot;&gt;&lt;/span&gt;
                &lt;/span&gt;

                &lt;a id=&quot;js_report_article3&quot; style=&quot;display:none;&quot; class=&quot;media_tool_meta tips_global meta_extra&quot; href=&quot;##&quot;&gt;投诉&lt;/a&gt;

            &lt;/div&gt;&lt;div class=&quot;rich_media_tool&quot; id=&quot;js_sg_bar&quot;&gt;
                
                                
                                
            &lt;/div&gt;</description>
<author></author>
<guid isPermaLink="false">2018-03-12-1000000628_503255454</guid>
<pubDate>Mon, 12 Mar 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>教程 | 如何通过PyTorch上手Tensor Comprehensions？</title>
<link>https://henix.github.io/feeds/weixin.sogou.almosthuman2014/2018-03-12-1000000628_503255435.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?timestamp=1520838466&amp;amp;src=3&amp;amp;ver=1&amp;amp;signature=60g4FlJblx0ynvOUS2XUspYgnCfnLlIE4wKAdgp82vIQeeJ3wTqzwri*aeP6HIJc17mS453JUn06-5lTp1FTg0wCAlTB07EmqcTJvpwOA-an4yGIfSWorSKJd4YbuNl3fk85LTXOTUFJaD78oFu-9vtwolH0gqb*bXpvOzsyR0s=&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;img-content&quot;&gt;
                
                &lt;h2 class=&quot;rich_media_title&quot; id=&quot;activity-name&quot;&gt;
                    教程 | 如何通过PyTorch上手Tensor Comprehensions？                                    &lt;/h2&gt;
                &lt;div id=&quot;meta_content&quot; class=&quot;rich_media_meta_list&quot;&gt;
                                                            &lt;em id=&quot;post-date&quot; class=&quot;rich_media_meta rich_media_meta_text&quot;&gt;2018-03-12&lt;/em&gt;

                                        &lt;a class=&quot;rich_media_meta rich_media_meta_link rich_media_meta_nickname&quot; href=&quot;##&quot; id=&quot;post-user&quot;&gt;机器之心&lt;/a&gt;
                    &lt;span class=&quot;rich_media_meta rich_media_meta_text rich_media_meta_nickname&quot;&gt;机器之心&lt;/span&gt;


                    &lt;div id=&quot;js_profile_qrcode&quot; class=&quot;profile_container&quot; style=&quot;display:none;&quot;&gt;
                        &lt;div class=&quot;profile_inner&quot;&gt;
                            &lt;strong class=&quot;profile_nickname&quot;&gt;机器之心&lt;/strong&gt;
                            &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;&gt;

                            &lt;p class=&quot;profile_meta&quot;&gt;
                            &lt;label class=&quot;profile_meta_label&quot;&gt;微信号&lt;/label&gt;
                            &lt;span class=&quot;profile_meta_value&quot;&gt;almosthuman2014&lt;/span&gt;
                            &lt;/p&gt;

                            &lt;p class=&quot;profile_meta&quot;&gt;
                            &lt;label class=&quot;profile_meta_label&quot;&gt;功能介绍&lt;/label&gt;
                            &lt;span class=&quot;profile_meta_value&quot;&gt;专业的人工智能媒体和产业服务平台&lt;/span&gt;
                            &lt;/p&gt;
                            
                        &lt;/div&gt;
                        &lt;span class=&quot;profile_arrow_wrp&quot; id=&quot;js_profile_arrow_wrp&quot;&gt;
                            &lt;i class=&quot;profile_arrow arrow_out&quot;&gt;&lt;/i&gt;
                            &lt;i class=&quot;profile_arrow arrow_in&quot;&gt;&lt;/i&gt;
                        &lt;/span&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                
                
                
                
                                                
                                                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section style=&quot;font-size: 16px;white-space: normal;max-width: 100%;color: rgb(62, 62, 62);background-color: rgb(255, 255, 255);line-height: 28.4444px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section data-id=&quot;85660&quot; data-custom=&quot;rgb(117, 117, 118)&quot; data-color=&quot;rgb(117, 117, 118)&quot; style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section data-id=&quot;85660&quot; data-custom=&quot;rgb(117, 117, 118)&quot; data-color=&quot;rgb(117, 117, 118)&quot; style=&quot;max-width: 100%;border-width: 0px;border-style: initial;border-color: currentcolor;font-family: 微软雅黑;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;margin-top: 2em;padding-top: 0.5em;padding-bottom: 0.5em;max-width: 100%;border-style: solid none;font-family: inherit;text-decoration: inherit;border-top-color: rgb(204, 204, 204);border-bottom-color: rgb(204, 204, 204);border-top-width: 1px;border-bottom-width: 1px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;p style=&quot;margin-top: -1.2em;max-width: 100%;min-height: 1em;text-align: center;line-height: 1.75em;border-width: initial;border-style: initial;border-color: currentcolor;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(255, 255, 255);background-color: rgb(117, 117, 118);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;选自&lt;span style=&quot;font-size: 14px;&quot;&gt;pytorch&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-style=&quot;white-space: normal; text-align: left;font-size: 14px;line-height: 1.5em; color: rgb(12, 12, 12);&quot; style=&quot;padding: 16px 16px 10px;max-width: 100%;font-family: inherit;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;font-size: 12px;color: rgb(136, 136, 136);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;作者：&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;font-size: 12px;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(136, 136, 136);&quot;&gt;Priya Goyal等&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;font-size: 12px;color: rgb(136, 136, 136);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;机器之心编译&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;font-size: 12px;color: rgb(136, 136, 136);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;参与：乾树、黄小天&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;color: rgb(136, 136, 136);&quot;&gt;Tensor Comprehensions 是一个降低高性能代码编写门槛的工具，可以将高级语言代码直接生成 GPU 代码并针对特定输入自动调整代码。本文作者将展示 TC 如何在 PyTorch 中无缝使用，并与 PyTorch Tensors 和 nn Variables 进行互操作。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span style=&quot;font-size: 14px;text-align: justify;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.6238738738738738&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOg1VSbMJfYP8kwJMPlUltgabqrjdRkrViayx3KElyH9haH4flLvT0z5Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;888&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 14px;text-align: justify;&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 14px;text-align: justify;&quot;&gt;Tensor Comprehensions (TC) 是一个降低高性能代码编写门槛的工具，可以将高级语言代码直接生成 GPU 代码并针对特定输入自动调整代码。本文强烈推荐你首先阅读 Tensor Comprehensions 发布博文（详见 &lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3MzI4MjgzMw==&amp;amp;mid=2650737949&amp;amp;idx=2&amp;amp;sn=73fba487380973257f1b171a23ecda0f&amp;amp;chksm=871ac963b06d4075a1264d23ca8bb18d9c43e5a45d463ba1c98fd95a75799ac7eac563f9281f&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot;&gt;Facebook 发布 Tensor Comprehensions：自动编译高性能机器学习核心的 C++库&lt;/a&gt;）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;如果你面临如下任一场景，TC 将会帮到你。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 14px;text-align: justify;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-2&quot; style=&quot;list-style-type: disc;&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span style=&quot;font-size: 14px;text-align: justify;&quot;&gt;你的 Pytorch 层又大又慢，你打算为此写一段 C++ 或者 CUDA 的优化代码，但是你又不擅长。&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;你写好了 CUDA 代码，但是你还要花费大量时间去优化。你希望可以在最短时间内搞定这些。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;为了加速，你想在网络中融合多个层，例如 Conv-ReLU-BatchNorm 或者 Linear-ReLU-Linear-ReLU。但是这很难理解。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;你的研究涉及 CuDNN 和 MKL 未能优化的不寻常的张量。例如，你要使用 13 x 24 的卷积核对 143 x 55 的输入图像进行卷积。你试着用 CUDNN 跑，并且发现它慢的超乎想象。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;通过调整 Tensors 以适应特定的内存布局，你的代码会变慢。你希望编写在你的输入布局上高效运行的自定义代码很容易。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;TC 可以在 PyTorch 中无缝使用，与 PyTorch Tensors 和 nn Variables 进行互操作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;教程现在开始！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;1. 安装包&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 0px;font-size: 16px;color: rgb(62, 62, 62);line-height: inherit;background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;box-sizing: border-box;margin-right: 2px;margin-left: 2px;padding: 0.5em;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;conda install -c pytorch -c tensorcomp tensor_comprehensions&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;此次我们只提供在 Ubuntu 16.04 和 CentOS7 上测试过的 Linux-64 二进制包。TC 依赖于大型 C++ 项目，如 Halide、Tapir-LLVM 及 ISL。因此，我们使用 Anaconda 来可靠地分配这些依赖。因此 TC 不提供 PyPI 安装包。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;2. 导入 Python 包&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;pre style=&quot;box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 0px;font-size: 16px;color: rgb(62, 62, 62);line-height: inherit;background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;box-sizing: border-box;margin-right: 2px;margin-left: 2px;padding: 0.5em;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;&lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;import&lt;/span&gt; tensor_comprehensions &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;as&lt;/span&gt; tc&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;3. 定义 TC 表达式并创建一个 Python 函数&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 0px;font-size: 16px;color: rgb(62, 62, 62);line-height: inherit;background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;box-sizing: border-box;margin-right: 2px;margin-left: 2px;padding: 0.5em;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;lang = &lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;&quot;&quot;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;def fcrelu(float(B,M) I, float(N,M) W1, float(N) B1) -&amp;gt; (O1) {&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    O1(b, n) +=! I(b, m) * W1(n, m)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    O1(b, n) = O1(b, n) + B1(n)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    O1(b, n) = fmax(O1(b, n), 0)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;}&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;fcrelu = tc.define(lang, name=&lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;fcrelu&quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;fcrelu 以 PyTorch Tensors 为输入并返回一个 PyTorch Tensor。输入 inputI、权重 W1、偏置项 B1 并返回一个 O1。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;4. 创建一些虚拟输入张量&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 0px;font-size: 16px;color: rgb(62, 62, 62);line-height: inherit;background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;box-sizing: border-box;margin-right: 2px;margin-left: 2px;padding: 0.5em;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;B, M, N = &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;128&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;100&lt;/span&gt;I, W1, B1 = torch.randn(B, M).cuda(), torch.randn(N, M).cuda(), torch.randn(N).cuda()&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;5. 自动调节函数以适用你的输入大小&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 0px;font-size: 16px;color: rgb(62, 62, 62);line-height: inherit;background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;box-sizing: border-box;margin-right: 2px;margin-left: 2px;padding: 0.5em;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;fcrelu.autotune(I, W1, B1, cache=&lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;fcrelu_100_128_100.tc&quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;自动调节器是你最好的朋友。你通常在调用 tc 函数前都会先自动调节它。当自动调节开始运行，则会显示当前的最佳性能。如果你满足于当前结果或时间耗完了，请按 Ctrl + C 终止调节进程。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.5925925925925926&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_gif/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOaohPNUFQQyHVMxFo8p6cwILaxjqOqSkticFz5Q3zX7RLlUiary5LZKsQ/640?wx_fmt=gif&quot; data-type=&quot;gif&quot; data-w=&quot;1377&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;cache 保留自动自动调节的核搜索结果并存到 fcrelu_100_128_100.tc 文件中。下一次再调用这句代码时，它就会自动加载已调节的结果而无需再计算。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;自动调节器有几个超参数 (就像你的卷积网络有学习率，层数等等）。我们预设了一些缺省项，但是你可以在这里了解如何使用高级选项。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;6. 调用函数并传参，返回你的结果&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 0px;font-size: 16px;color: rgb(62, 62, 62);line-height: inherit;background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;box-sizing: border-box;margin-right: 2px;margin-left: 2px;padding: 0.5em;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;out = fcrelu(I, W1, B1)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;现在，我们来看看怎么写 TC 表达式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&lt;strong&gt;TC 语言快速入门&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;TC 符号关注层的数学本质，将性能优化交给使用 Halide 和 polyhedral 编译技术的后端代码，这些技术累积了数十年来最先进的 Loop Nest Optimization（LNO）研究成果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;TC 和 np.einsum 很像。我们用一个实例快速展开学习。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 0px;font-size: 16px;color: rgb(62, 62, 62);line-height: inherit;background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;box-sizing: border-box;margin-right: 2px;margin-left: 2px;padding: 0.5em;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;lang = &lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;&quot;&quot;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;def matmul(float(M,N) A, float(N,K) B) -&amp;gt; (output) {&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  output(i, j) +=! A(i, kk) * B(kk, j)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;}&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;我们定义了这个实例中的一个函数，它接受两个输入 M x N 的 A 和 N x K 的Ｂ并返回一个结果。output 的尺寸由 TC 语言自动推导得出 (下面展开讨论）。看看这行代码：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 0px;font-size: 16px;color: rgb(62, 62, 62);line-height: inherit;background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;box-sizing: border-box;margin-right: 2px;margin-left: 2px;padding: 0.5em;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;output(i, j) +=! A(i, kk) * B(kk, j)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;意思是:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-2&quot; style=&quot;list-style-type: disc;&quot;&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;output(i, j) 表示输出是 2 维的&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;对于每个坐标 output(i, j), 加上 (+=) A(i, kk) * B(kk, j)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;i 是 A 中 dim=0 的所有坐标, 即，i 在 range(0, M) 里&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;j 是 B dim = 1 中的所有坐标，即，j 在 range(0, K) 里&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;kk 是由 0 到 N 推断出的所有坐标&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;output 的尺寸由 i 和 j 可取的最大值推理而来，也就是 M 和 K，所以 output 的尺寸就是 M x K。&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;! 符号用 0.0 初始化，相当于：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 0px;font-size: 16px;color: rgb(62, 62, 62);line-height: inherit;background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;box-sizing: border-box;margin-right: 2px;margin-left: 2px;padding: 0.5em;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;output(i, j) = &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;0&lt;/span&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;output(i, j) += A(i, kk) * B(kk, j)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;标量输入和范围约束：实现 AvgPool2d&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 0px;font-size: 16px;color: rgb(62, 62, 62);line-height: inherit;background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;box-sizing: border-box;margin-right: 2px;margin-left: 2px;padding: 0.5em;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;&lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;&quot;&quot;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;def avgpool(float(B, C, H, W) input) -&amp;gt; (output) {{&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    output(b, c, h, w) += input(b, c, h * {sH} + kh, w * {sW} + kw) where kh in 0:{kH}, kw in 0:{kW}&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;}}&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;avgpool = tc.define(LANG, name=&lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;avgpool&quot;&lt;/span&gt;, constants={&lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;sH&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;sW&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;kH&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;kW&quot;&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;2&lt;/span&gt;})&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;这里 where 关键字可以选取取值范围来进行运算。0:{kH} 类似与 Python 中的 range(kH）。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;注意：传入标量的语法在下一版本中可能会发生变化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&lt;strong&gt;torch.nn 层&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;我们对 TC 的基本 PyTorch 集成进行了封装，以便通过定义正向和反向 TC 表达式并有 Variable 输入/输出来轻松地将 TC 集成到更大的 torch.nn 模块。这里有一个用 TC 定义卷积操作的实例。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&lt;strong&gt;你可能忽略的基础知识 (这正是我们在做的）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;自动调节变量长度序列&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;TC 自动调节器要求预先自动调节好所有的输入尺寸。例如，如果你有一批输入图像 I1，调节器想要知道 I1 的确切尺寸以便生成优化的卷积核。你不能指定：高度介于 200 到 300 之间的图像。这对于如 NLP 之类的序列数据更为重要，NLP 每个语句可以具有不同的长度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;自动调节器不参数化是因为自动调整参数约束越来越难，并且这是一项热门研究。由于这是首次发布，我们决定主动提供工具，并保证其良好工作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;作为解决方法，如果你事先知道有一些要用到的特定尺寸，则可以输入它们运行自动调节器。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 0px;font-size: 16px;color: rgb(62, 62, 62);line-height: inherit;background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;box-sizing: border-box;margin-right: 2px;margin-left: 2px;padding: 0.5em;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;relu = tc.define(LANG, name=&lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;relu&quot;&lt;/span&gt;)batch, channels = &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;16&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;3&lt;/span&gt;tc.autotune((batch, channels, &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;32&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;32&lt;/span&gt;)) &lt;span class=&quot;hljs-comment&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;# image of size 32 x 32tc.autotune((batch, channels, 48, 48)) # image of size 48 x 48tc.autotune((batch, channels, 64, 64)) # image of size 64 x 64&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;当前的自动调节器自动调节三个特定的图片尺寸： 32x32、48x48 和 64x64。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;缺少循环&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;如果你想写一个 RNN，很容易把它视作相对于时间的 for 循环。但是，TC 语言目前还没有循环结构。如果你真的想写 RNN，可以试着把它展开。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;strong&gt;Strided-Tensors&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;TC 后台暂不支持不连续的张量。如果你输入的张量不连续，TC 在传递到后台代码前会作连续化处理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;使用 TC 表达式进行张量变形&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;在 TC 中你不能这么写操作：torch.matmul(...).view(...).mean(...)。任何时候都需要一个 view 来改变输入张量的尺寸，你必须获取到输出张量，在 PyTorch 级别上 view 它。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&lt;strong&gt;如何开始&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 14px;text-align: justify;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-2&quot; style=&quot;list-style-type: disc;&quot;&gt;&lt;li&gt;&lt;p&gt;&lt;span style=&quot;font-size: 14px;text-align: justify;&quot;&gt;《Walk through Tutorial》会帮助你理解并上手入门 TC PyTorch 包。&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;超过 20 个实例含有 TC 写的不同的 ML 层，包括 avgpool、maxpool、matmul、matmul - give output buffers、batch-matmul、convolution、strided-convolution、batchnorm、copy、cosine similarity、Linear、Linear + ReLU、group-convolutions、strided group-convolutions、indexing、Embedding (lookup table)、small-mobilenet、softmax、tensordot、transpose。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;有关 TC 的详细文档以及与 PyTorch 的整合。&lt;/span&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.3287671232876712&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOd6kYzKSNx7GpKhf1OMhgW30B8WEsyibXYuvBogNHE5TQTpUQGLsWmeQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;73&quot; style=&quot;width: 43px;height: 14px;&quot;&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;em style=&quot;color: rgb(136, 136, 136);font-size: 12px;text-align: justify;white-space: normal;&quot;&gt;原文链接：http://pytorch.org/2018/03/05/tensor-comprehensions.html&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;text-align: justify;max-width: 100%;line-height: 25.6px;font-family: 微软雅黑;font-size: 14px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;color: rgb(62, 62, 62);line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;text-align: justify;max-width: 100%;line-height: 25.6px;font-family: 微软雅黑;font-size: 14px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;color: rgb(62, 62, 62);line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;text-align: justify;max-width: 100%;line-height: 25.6px;font-family: 微软雅黑;font-size: 14px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;color: rgb(62, 62, 62);line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;本文为机器之心编译，&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;转载请联系本公众号获得授权&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;。&lt;/span&gt;&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 5px;max-width: 100%;min-height: 1em;background-color: rgb(255, 255, 255);font-size: 18px;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);line-height: 25.6px;font-family: 微软雅黑;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;✄------------------------------------------------&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 5px;max-width: 100%;min-height: 1em;background-color: rgb(255, 255, 255);font-size: 18px;font-family: 微软雅黑;text-align: center;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(217, 33, 66);font-size: 12px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;加入机器之心（全职记者/实习生）：hr@jiqizhixin.com&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;background-color: rgb(255, 255, 255);font-size: 18px;font-family: 微软雅黑;text-align: center;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(217, 33, 66);line-height: 1.6;font-size: 12px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;投稿或寻求报道：editor@jiqizhixin.com&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;background-color: rgb(255, 255, 255);font-size: 18px;font-family: 微软雅黑;text-align: center;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;font-size: 12px;color: rgb(217, 33, 66);line-height: 1.6;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;广告&amp;amp;商务合作：bd@jiqizhixin.com&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
                &lt;/div&gt;
                &lt;script nonce=&quot;1905972849&quot; type=&quot;text/javascript&quot;&gt;
                    var first_sceen__time = (+new Date());

                    if (&quot;&quot; == 1 &amp;&amp; document.getElementById(&#39;js_content&#39;)) {
                        document.getElementById(&#39;js_content&#39;).addEventListener(&quot;selectstart&quot;,function(e){ e.preventDefault(); });
                    }

                    
                    (function(){
                        if (navigator.userAgent.indexOf(&quot;WindowsWechat&quot;) != -1){
                            var link = document.createElement(&#39;link&#39;);
                            var head = document.getElementsByTagName(&#39;head&#39;)[0];
                            link.rel = &#39;stylesheet&#39;;
                            link.type = &#39;text/css&#39;;
                            link.href = &quot;//res.wx.qq.com/mmbizwap/zh_CN/htmledition/style/page/appmsg/page_mp_article_improve_winwx31619e.css&quot;;
                            head.appendChild(link);
                        }
                    })();
                &lt;/script&gt;
                
                
                                
                &lt;div class=&quot;ct_mpda_wrp&quot; id=&quot;js_sponsor_ad_area&quot; style=&quot;display:none;&quot;&gt;&lt;/div&gt;

                
                                &lt;div class=&quot;reward_area tc&quot; id=&quot;js_preview_reward&quot; style=&quot;display:none;&quot;&gt;
                    &lt;p id=&quot;js_preview_reward_wording&quot; class=&quot;tips_global reward_tips&quot; style=&quot;display:none;&quot;&gt;&lt;/p&gt;
                    &lt;p&gt;
                        &lt;a class=&quot;reward_access&quot; id=&quot;js_preview_reward_link&quot; href=&quot;##&quot;&gt;&lt;span class=&quot;icon-reward&quot;&gt;&lt;/span&gt;赞赏&lt;/a&gt;

                    &lt;/p&gt;
                &lt;/div&gt;
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_preview_reward_qrcode&quot; style=&quot;display:none;&quot;&gt;
                    &lt;p class=&quot;tips_global&quot;&gt;长按二维码向我转账&lt;/p&gt;
                    &lt;p id=&quot;js_preview_reward_ios_wording&quot; class=&quot;reward_tips&quot; style=&quot;display:none;&quot;&gt;&lt;/p&gt;
                    &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; src=&quot;//res.wx.qq.com/mmbizwap/zh_CN/htmledition/images/pic/appmsg/pic_reward_qrcode.2x3534dd.png&quot;&gt;&lt;/span&gt;
                    &lt;p class=&quot;tips_global&quot;&gt;受苹果公司新规定影响，微信 iOS 版的赞赏功能被关闭，可通过二维码转账支持公众号。&lt;/p&gt;
                &lt;/div&gt;
                            &lt;/div&gt;&lt;div class=&quot;rich_media_tool&quot; id=&quot;js_toobar3&quot;&gt;
                
                                
                                            &lt;div id=&quot;js_read_area3&quot; class=&quot;media_tool_meta tips_global meta_primary&quot; style=&quot;display:none;&quot;&gt;阅读 &lt;span id=&quot;readNum3&quot;&gt;&lt;/span&gt;&lt;/div&gt;

                &lt;span style=&quot;display:none;&quot; class=&quot;media_tool_meta meta_primary tips_global meta_praise&quot; id=&quot;like3&quot;&gt;
                    &lt;i class=&quot;icon_praise_gray&quot;&gt;&lt;/i&gt;&lt;span class=&quot;praise_num&quot; id=&quot;likeNum3&quot;&gt;&lt;/span&gt;
                &lt;/span&gt;

                &lt;a id=&quot;js_report_article3&quot; style=&quot;display:none;&quot; class=&quot;media_tool_meta tips_global meta_extra&quot; href=&quot;##&quot;&gt;投诉&lt;/a&gt;

            &lt;/div&gt;&lt;div class=&quot;rich_media_tool&quot; id=&quot;js_sg_bar&quot;&gt;
                
                                
                                
            &lt;/div&gt;</description>
<author></author>
<guid isPermaLink="false">2018-03-12-1000000628_503255435</guid>
<pubDate>Mon, 12 Mar 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>从起源到具体算法，这是一份适合所有人读的深度学习综述论文</title>
<link>https://henix.github.io/feeds/weixin.sogou.almosthuman2014/2018-03-12-1000000628.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?timestamp=1520838466&amp;amp;src=3&amp;amp;ver=1&amp;amp;signature=60g4FlJblx0ynvOUS2XUspYgnCfnLlIE4wKAdgp82vIQeeJ3wTqzwri*aeP6HIJc17mS453JUn06-5lTp1FTg0wCAlTB07EmqcTJvpwOA-YudAhTMqeHf*TTE6M7mCOaDHZRjqagLDyH-1PH9oVizppyUK7hops6qHteBxw9Pmc=&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;img-content&quot;&gt;
                
                &lt;h2 class=&quot;rich_media_title&quot; id=&quot;activity-name&quot;&gt;
                    从起源到具体算法，这是一份适合所有人读的深度学习综述论文                                    &lt;/h2&gt;
                &lt;div id=&quot;meta_content&quot; class=&quot;rich_media_meta_list&quot;&gt;
                                                            &lt;em id=&quot;post-date&quot; class=&quot;rich_media_meta rich_media_meta_text&quot;&gt;2018-03-12&lt;/em&gt;

                                        &lt;a class=&quot;rich_media_meta rich_media_meta_link rich_media_meta_nickname&quot; href=&quot;##&quot; id=&quot;post-user&quot;&gt;机器之心&lt;/a&gt;
                    &lt;span class=&quot;rich_media_meta rich_media_meta_text rich_media_meta_nickname&quot;&gt;机器之心&lt;/span&gt;


                    &lt;div id=&quot;js_profile_qrcode&quot; class=&quot;profile_container&quot; style=&quot;display:none;&quot;&gt;
                        &lt;div class=&quot;profile_inner&quot;&gt;
                            &lt;strong class=&quot;profile_nickname&quot;&gt;机器之心&lt;/strong&gt;
                            &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;&gt;

                            &lt;p class=&quot;profile_meta&quot;&gt;
                            &lt;label class=&quot;profile_meta_label&quot;&gt;微信号&lt;/label&gt;
                            &lt;span class=&quot;profile_meta_value&quot;&gt;almosthuman2014&lt;/span&gt;
                            &lt;/p&gt;

                            &lt;p class=&quot;profile_meta&quot;&gt;
                            &lt;label class=&quot;profile_meta_label&quot;&gt;功能介绍&lt;/label&gt;
                            &lt;span class=&quot;profile_meta_value&quot;&gt;专业的人工智能媒体和产业服务平台&lt;/span&gt;
                            &lt;/p&gt;
                            
                        &lt;/div&gt;
                        &lt;span class=&quot;profile_arrow_wrp&quot; id=&quot;js_profile_arrow_wrp&quot;&gt;
                            &lt;i class=&quot;profile_arrow arrow_out&quot;&gt;&lt;/i&gt;
                            &lt;i class=&quot;profile_arrow arrow_in&quot;&gt;&lt;/i&gt;
                        &lt;/span&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                
                
                
                
                                                
                                                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;section style=&quot;max-width: 100%;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);line-height: 28.4444px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section data-id=&quot;85660&quot; data-custom=&quot;rgb(117, 117, 118)&quot; data-color=&quot;rgb(117, 117, 118)&quot; style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section data-id=&quot;85660&quot; data-custom=&quot;rgb(117, 117, 118)&quot; data-color=&quot;rgb(117, 117, 118)&quot; style=&quot;max-width: 100%;border-width: 0px;border-style: initial;border-color: currentcolor;font-family: 微软雅黑;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;margin-top: 2em;padding-top: 0.5em;padding-bottom: 0.5em;max-width: 100%;border-style: solid none;font-family: inherit;text-decoration: inherit;border-top-color: rgb(204, 204, 204);border-bottom-color: rgb(204, 204, 204);border-top-width: 1px;border-bottom-width: 1px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;p style=&quot;margin-top: -1.2em;max-width: 100%;min-height: 1em;text-align: center;line-height: 1.75em;border-width: initial;border-style: initial;border-color: currentcolor;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(255, 255, 255);background-color: rgb(117, 117, 118);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;选自arXiv&lt;/span&gt;&lt;/p&gt;&lt;section data-style=&quot;white-space: normal; text-align: left;font-size: 14px;line-height: 1.5em; color: rgb(12, 12, 12);&quot; style=&quot;padding: 16px 16px 10px;max-width: 100%;font-family: inherit;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;font-size: 12px;color: rgb(136, 136, 136);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;作者：&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;max-width: 100%;font-size: 12px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);max-width: 100%;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;Md Zahangir Alom 等&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;font-size: 12px;color: rgb(136, 136, 136);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;机器之心编译&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;font-size: 12px;color: rgb(136, 136, 136);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;参与：白妤昕、黄小天、李泽南&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;color: rgb(136, 136, 136);&quot;&gt;自 2012 年多伦多大学 Alex Krizhevsky 等人提出 AlexNet 以来，「深度学习」作为一种机器学习的强大方法逐渐引发了今天的 AI 热潮。随着这种技术被应用到各种不同领域，人们已经开发出了大量新模型与架构，以至于我们无法理清网络类型之间的关系。近日，来自 University of Dayton 的研究者们对深度学习近年来的发展历程进行了全面的梳理与总结，并指出了目前人们面临的主要技术挑战。机器之心觉得这是一份非常详细的综述论文，既适合从零开始了解深度学习的人，又适合有基础的学习者。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;color: rgb(123, 12, 0);&quot;&gt;论文地址：https://arxiv.org/abs/1803.01164&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;近年来，深度学习作为机器学习的新分支，其应用在多个领域取得巨大成功，并一直在快速发展，不断开创新的应用模式，创造新机会。深度学习方法根据训练数据是否拥有标记信息被划分为监督学习、半监督学习和无监督学习。实验结果显示了上述方法在图像处理、计算机视觉、语音识别、机器翻译、艺术、医学成像、医疗信息处理、机器人控制和生物、自然语言处理（NLP）、网络安全等领域的最新成果。本报告简要概述了深度学习方法的发展，包括深度神经网络（DNN）、卷积神经网络（CNN）、循环神经网络（RNN）（包括长短期记忆（LSTM）和门控循环单元（GRU））、自 编码器（AE）、深度信念网络（DBN），生成对抗网络（GAN）和深度强化学习（DRL）。此外，本文也涵盖了深度学习方法前沿发展和高级变体深度学习技术。此外，深度学习方法在各个应用领域进行的探索和评估也包含在本次调查中。我们还会谈到最新开发的框架、SDK 和用于评估深度学习方法的基准数据集。然而，这些论文并没有讨论某些大型深度学习模型和最新开发的生成模型方法 [1]。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&lt;strong&gt;介绍&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;自 20 世纪 50 年代以来，作为人工智能子领域的机器学习已经开始革新若干个领域，而诞生自机器学习的深度学习实现了迄今为止最大的原创性突破，几乎在每个应用领域取得了显著成功。图 1 给出了 AI 的谱系。深度学习（学习或分层学习方法的深层架构）是从 2006 年兴起的一类机器学习技术。在深度学习中，学习即是评估模型参数，使学习模型（算法）可执行特定任务。例如，在人工神经网络（ANN）中，参数是权重矩阵&lt;/span&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.4117647058823529&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZHG48D6TNrxVRB2XeU2uazYcMUOlwQicbdeFzdR8wq23cD9IjH2q5Tfvg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;102&quot; style=&quot;width: 51px;height: 21px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;。另一方面，深度学习在输入层和输出层之间包含若干个隐层，使得不同阶段的非线性处理单元具有层级结构，以用于特征学习和模式分类 [1, 2]。基于数据表征的学习方法也被称为表征学习 [3]。根据最新文献，基于深度学习的表征学习涉及特征或概念的层次结构，其中高级概念可以从低级概念定义，低级概念可以从高级概念定义。在一些文章中，深度学习也被描述为一种通用学习方法，可以解决不同应用领域的几乎所有问题（不局限于特定任务）[4]。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt; &lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;A. 深度学习方法的类型&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;像机器学习一样，深度学习方法可以分为以下几类：监督、半监督、部分监督以及无监督。此外，还有另一类学习方法称为强化学习（Reinforcement Learning）或深度强化学习（Deep Reinforcement Learning），它们经常在半监督或非监督学习方法的范围内讨论。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt; &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.8774193548387097&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZHcRB82r3hqvYj7pCibiczBt1NqKialyCQO8JC9KMAwxibd6ZqBw2ic4AzTlw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;930&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);font-size: 12px;&quot;&gt;&lt;em&gt;图 1：人工智能谱系：AI、机器学习、神经网络、深度学习和脉冲神经网络（SNN）。&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;1) 监督学习&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;一种使用标注数据的学习技术。在其案例中，环境包含一组对应的输入输出 &lt;img class=&quot;&quot; data-ratio=&quot;0.3448275862068966&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZHmzciaAQwUyJmF7FDzxu42n1d6D2sickRRsjjBZvMMcOFXFiaB3L2Pk0LA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;116&quot; style=&quot;width: 80px;height: 27px;&quot;&gt;。比如，输入是 x_t，智能体预测&lt;img class=&quot;&quot; data-ratio=&quot;0.3333333333333333&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZHkkiaibSTLkFHvrJK9PXFoJmicVzYSvuT9rF2UxoMPC62ic0elMgAIBRpCQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;120&quot; style=&quot;width: 64px;height: 21px;&quot;&gt;，则会获得损失值&lt;img class=&quot;&quot; data-ratio=&quot;0.26666666666666666&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZHRETDAoNvUOsXPJoy7zwH0icsALskQfWrWLnic8ccq8aPKp2I4xzkYvdQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;120&quot; style=&quot;width: 68px;height: 20px;&quot;&gt;。接着智能体不断迭代调整网络参数，从而更好地近似期望输出。成功训练之后，智能体可对环境问题做出正确回答。监督学习主要有以下几种：深度神经网络 (DNN)、卷积神经网络 (CNN)、循环神经网络（包含 LSTM）以及门控循环单元（GRU）。上述网络将分别在 2、3、4、5 章节中详述。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;2) 半监督学习&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;一种使用部分标注数据的学习技术（通常被称之为强化学习）。本文第 8 节调查了其方法。在一些案例中，深度强化学习（DRL）和生成对抗网络（GAN）常被用作半监督学习技术。此外，包含 LSTM 的 RNN 和 GRU 也可划分为半监督学习。GAN 将在第 7 节讨论。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;3) 无监督学习&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;一种不使用标注数据的学习技术。在这种情况下，智能体学习内部表示或重要特征以发现输入数据中的未知关系或结构。无监督学习方法通常有聚类、降维和生成技术等。有些深度学习技术擅长聚类和非线性降维，如自编码器（AE）、受限玻尔兹曼机（RBM）和 GAN。此外，RNN（比如 LSTM）和 RL 也被用作半监督学习 [243]。本文第 6、7 节将分别详述 RNN 和 LSTM。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;4) 深度强化学习（DRL）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;一种适用于未知环境的学习技术。DRL 始于 2013 年谷歌 Deep Mind[5,6]。从此，人们基于 RL 提出了几种先进的方法，例如：如果环境样本输入：agent〜ρ，agentpredict：&lt;img class=&quot;&quot; data-ratio=&quot;0.2916666666666667&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZHUibG3cE0nNiaythY0tpmHzUtenfibSdIIPhcpDEYFibGJBvlvZ8icRS7IKA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;144&quot; style=&quot;width: 76px;height: 22px;&quot;&gt;，agentreceivecost：&lt;img class=&quot;&quot; data-ratio=&quot;0.16129032258064516&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZH8sJmA4jApiabNFofIbr2C1V3ZXx6GKst8iaqqMGqRtic6MGITLlpUGQOA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;248&quot; style=&quot;width: 135px;height: 22px;&quot;&gt;，其中 P 是未知概率分布，环境向智能体提出问题，并给其一个有噪音的分值作为答案。有时这种方法也被称为半监督学习。许多半监督和无监督学习方法已经基于这个概念实施（第 8 节）。在 RL 中，我们没有一个简单的前向损失函数，因此与传统的监督方法相比，这使得机器学习变得更困难。RL 和监督学习之间的根本区别在于：首先，我们无法获取你正在优化的函数，而必须通过交互来查询它；其次，我们正在与基于状态的环境交互：输入 x_t 取决于先前的动作。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.777542372881356&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZH11su1hib2Cq6ibcsqHc2TeKyZyVJ3xO755NWo4qJxrTeuHeVotJVNbQw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;944&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);font-size: 12px;&quot;&gt;&lt;em&gt;图 2：深度学习方法的分类&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;B. 特征学习&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;传统机器学习和深度学习之间的关键区别在于如何提取特征。传统机器学习方法通过应用几种特征提取算法，包括尺度不变特征变换（SIFT）、加速鲁棒特征（SURF）、GIST、RANSAC、直方图方向梯度（HOG）、局部二元模式（LBP）、经验模式分解（EMD）语音分析等等。最后，包括支持向量机（SVM）、随机森林（RF）、主成分分析（PCA）、核主成分分析（KPCA）、线性递减分析（LDA）、Fisher 递减分析（FDA）等很多学习算法都被人们应用于分类和提取特征的任务。此外，其他增强方法通常多个应用于单个任务或数据集特征的学习算法，并根据不同算法的多个结果进行决策。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.5018796992481203&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZHRPoMtibUUt3H7XQ4k2CvoyExrB7keuw0wicmS0OLA4k3ibAHwvt3d9GuQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1064&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);font-size: 12px;&quot;&gt;&lt;em&gt;表 1：不同的特征学习方法&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;另一方面，在深度学习中，这些特征会被自动学习并在多个层上分层表示。这是深度学习超越传统机器学习方法的原因。上表展示了不同特征学习方法与不同学习步骤之间的关系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;C. 应用深度学习的时机和领域&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(136, 136, 136);font-size: 12px;&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;人工智能在以下领域十分有用，深度学习在其中扮演重要角色：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;1. 缺乏人类专家（火星导航）；&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;2. 人们尚无法解释的专业知识（演讲、认知、视觉和语言理解）；&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;3. 问题的解决方案随时间不断变化（追踪、天气预报、偏好、股票、价格预测）；&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;4. 解决方案需要适应特定情况（生物统计学、个性化）；&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;5. 人类的推理能力有限，而问题的规模却很大（计算网页排名、将广告匹配到 Facebook、情感分析）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;目前，深度学习几乎在各个领域都有应用。因此，这种方法有时也被称为通用学习方法。图 4 显示了一些示例应用程序。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;2.4302325581395348&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZH8rdfDkt9NTwyXt0TKwnfKuicqzhialXlnibITnNDEiaqPtoeHITqrHVCHw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;516&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);font-size: 12px;&quot;&gt;&lt;em&gt;图 4：成功应用深度学习并取得顶级结果的示例图&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;D. 深度学习的前沿发展&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;深度学习在计算机视觉和语音识别领域有一些突出的成就，如下所述：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;1）ImageNet 数据集上的图像分类&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;深度学习在图像分类领域的应用基准被称为大规模视觉识别挑战（LSVRC）。基于深度学习和卷积神经网络技术，深度学习在 ImageNet 测量精确度中有很好的表现 [11]。近日，Russakovsky 等人发表了一篇关于 ImageNet 数据集的文章及近年来研究者们实现的最高精确度 [285]。下图显示了 2012 年深度学习技术的发展历程。时至今日，我们开发的方法在 ResNet-152 上只有 3.57％的误差，低于人类约 5% 的误差。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.5833333333333334&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZHf4GpNzUTHFichfewDQmmAyQecbmtuxDeKOjt6xFQuq27y4JcbiaU23xw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1128&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);font-size: 12px;&quot;&gt;&lt;em&gt;图 5：使用不同深度学习模型在 ImageNet 测试的准确性。&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;2）自动语音识别&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt; &lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;深度学习通过 TIMIT 数据集（通用数据集通常用于评估）完成的小规模识别任务是深度学习在语音识别领域的初次成功体现。TIMIT 连续声音 - 语音语料库包含 630 位来自美国的八种主要英语口音使用者，每位发言人读取 10 个句子。下图总结了包括早期结果在内的错误率，并以过去 20 年的电话错误率（PER）来衡量。条形图清楚地表明，与 TIMIT 数据集上以前的机器学习方法相比，最近开发的深度学习方法（图顶部）表现更好。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.7914572864321608&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZHXS9L3Y0niaUZQtWG5dkn1d3tWL9V4rCUicSqslGAicQiaueWLVN9YiaSozg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;796&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);font-size: 12px;&quot;&gt;&lt;em&gt;图 6：TIMIT 数据集的电话错误率（PER）&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;E. 为什么要使用深度学习&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;1）通用学习方法&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;深度学习有时被称为通用学习，因为它几乎可以应用于任何领域。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;2）鲁棒性&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;深度学习方法不需要提前设计功能。其自动学习的功能对于当前的任务来说是最佳的。结果是，任务自动获得对抗数据自然变化的鲁棒性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;3）泛化&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;相同的深度学习方法可以用于不同的应用程序或不同的数据类型，这种方法通常被称为迁移学习。另外，这种方法在可用数据不足时很有用。根据这个概念研究学者已经发表了多篇论文（在第 4 节中会有更详细地讨论）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;4）可扩展性&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;深度学习方法具有高度可扩展性。在 2015 年的一篇论文中，微软描述了一个名为 ResNet 的网络 [11]。该网络包含 1202 个层，并且通常由超级计算规模部署。美国的劳伦斯利弗莫尔国家实验室（LLNL）正在为这样的网络开发框架，该框架可以实现数千个节点 [24]。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;F. 深度学习面临的挑战：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-2&quot; style=&quot;list-style-type: disc;&quot;&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;使用深度学习进行大数据分析&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;深度学习方法要有可扩展性&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;在数据不可用于学习系统的情况下（尤其是对于计算机视觉任务，例如反向图形），生成数据的能力非常重要。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;特殊用途设备的低能耗技术，如移动端智能，FPGA 等。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;多任务和迁移学习（泛化）或多模块学习。这意味着要从不同的领域或不同的模型一起学习。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;在学习中处理因果关系。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.7220543806646526&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8SoHjRveoUkKr6WSMfHNZHiaFQ4VL0JQ4nc072OLxmnpyiaiaHqq7XSYtjn0QSkwXy1CUzW97YJ7nCQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;662&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);font-size: 12px;&quot;&gt;&lt;em&gt;图 7：深度学习的性能与数据数量之间的关系。&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;其次，大部分针对大规模问题的案例，其解决方案正在高性能计算机（HPC）系统（超级计算机、集群，有时被视为云计算）上部署，这为数据密集型商业计算提供了巨大的潜力。但随着数据在速度，多样性，准确性和数量上的爆炸式增长，我们越来越难以使用企业级服务器进行存储和提升计算性能。大多数论文考虑到这些需求，并提出了使用异构计算系统的高效 HPC。例如：劳伦斯利弗莫尔国家实验室（LLNL）开发了一个框架：Livermore Big Artificial Neural Networks（LBANN），用于大规模部署深度学习（超级计算规模），这一项目明确地回答了深度学习是否可扩展的问题 [24]。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;第三，生成模型是深度学习的另一个挑战，其中一个例子是 GAN，它是一种优秀的数据生成方法，可以生成具有相同分布数据 [28]。第四，我们在第七节讨论过的多任务和迁移学习。第四，我们对网络架构和硬件方面的高效率深度学习方法进行了大量的研究。第 10 节讨论了这个问题。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt; &lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;我们可以制作出适用于多领域、多任务的通用模型吗？出于对多模式系统的关注，最近，谷歌提交的论文《One Model To Learn Them All》[29] 介绍了一种新方法，其可以从不同的应用领域学习，包括 ImageNet、多种翻译任务、图像标题（MS-COCO 数据集）、语音识别语料库和英语解析任务。我们将通过这次调查讨论主要挑战和相应的解决方案。在过去几年中，人们还提出了其他多任务技术。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;最后，图形模型是一个具有因果关系的学习系统，用于定义如何根据数据推断因果模型。最近，已经出现了解决此类问题的深度学习方法 [33]。但是，在过去几年中，还有其他许多具有挑战性的问题仍未得到有效地解决。例如：图像或视频字幕 [34]，使用 GAN [35] 从文本到图像合成 [36] 以及其他从一个域到另一个域的风格迁移。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;最近，一些研究者完成了很多关于深度学习的调查，其中有一篇非常高质量的总结，但它没有涉及最近开发的 GAN 的生成模型 [28]。此外，它提及了强化学习的话题，但没有涉及深度强化学习方法的近期趋势 [1,39]。大多数情况下，调查是依据深度学习的不同方法来分类的。本报告的主要目标是介绍深度学习的总体思路及其相关领域，包括深度监督（如 DNN、CNN 和 RNN）、无监督（如 AE、RBM、GAN）（有时 GAN 也用于半监督学习任务）和深度强化学习的思路。在某些情况下，深度强化学习被认为是半监督/无监督的方法。我们考虑了该领域的最新发展趋势以及基于该技术开发的应用。此外，我们还囊括了评估深度学习技术常用的框架和基准数据集，会议和期刊的名称也包括在内。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;本论文的其余部分的组织方式如下：第二节讨论 DNN 的详细调查，第三节讨论 CNN；第四节介绍了不同的先进技术，以有效地训练深度学习模型； 第五节讨论 RNN； AE 和 RBM 在第六节中讨论； GAN 及其应用在第七节讨论；强化学习在第八节中介绍；第九节解释迁移学习； 第十节介绍了深度学习的高效应用方法和硬件； 第十一节讨论了深度学习框架和标准开发工具包（SDK）； 第十二节给出了不同应用领域的基准测试结果；第十三节为结论。&lt;/span&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.3287671232876712&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOd6kYzKSNx7GpKhf1OMhgW30B8WEsyibXYuvBogNHE5TQTpUQGLsWmeQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;73&quot; style=&quot;width: 47px;height: 20px;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;text-align: justify;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;line-height: 25.6px;font-family: 微软雅黑;font-size: 14px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;color: rgb(62, 62, 62);line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;本文为机器之心编译，&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;转载请联系本公众号获得授权&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;。&lt;/span&gt;&lt;/strong&gt;&lt;br style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 5px;max-width: 100%;min-height: 1em;background-color: rgb(255, 255, 255);font-size: 18px;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);line-height: 25.6px;font-family: 微软雅黑;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;✄------------------------------------------------&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 5px;max-width: 100%;min-height: 1em;background-color: rgb(255, 255, 255);font-size: 18px;font-family: 微软雅黑;text-align: center;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(217, 33, 66);font-size: 12px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;加入机器之心（全职记者/实习生）：hr@jiqizhixin.com&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;background-color: rgb(255, 255, 255);font-size: 18px;font-family: 微软雅黑;text-align: center;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(217, 33, 66);line-height: 1.6;font-size: 12px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;投稿或寻求报道：editor@jiqizhixin.com&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;background-color: rgb(255, 255, 255);font-size: 18px;font-family: 微软雅黑;text-align: center;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;font-size: 12px;color: rgb(217, 33, 66);line-height: 1.6;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;广告&amp;amp;商务合作：bd@jiqizhixin.com&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
                &lt;/div&gt;
                &lt;script nonce=&quot;429922451&quot; type=&quot;text/javascript&quot;&gt;
                    var first_sceen__time = (+new Date());

                    if (&quot;&quot; == 1 &amp;&amp; document.getElementById(&#39;js_content&#39;)) {
                        document.getElementById(&#39;js_content&#39;).addEventListener(&quot;selectstart&quot;,function(e){ e.preventDefault(); });
                    }

                    
                    (function(){
                        if (navigator.userAgent.indexOf(&quot;WindowsWechat&quot;) != -1){
                            var link = document.createElement(&#39;link&#39;);
                            var head = document.getElementsByTagName(&#39;head&#39;)[0];
                            link.rel = &#39;stylesheet&#39;;
                            link.type = &#39;text/css&#39;;
                            link.href = &quot;//res.wx.qq.com/mmbizwap/zh_CN/htmledition/style/page/appmsg/page_mp_article_improve_winwx31619e.css&quot;;
                            head.appendChild(link);
                        }
                    })();
                &lt;/script&gt;
                
                
                                
                &lt;div class=&quot;ct_mpda_wrp&quot; id=&quot;js_sponsor_ad_area&quot; style=&quot;display:none;&quot;&gt;&lt;/div&gt;

                
                                &lt;div class=&quot;reward_area tc&quot; id=&quot;js_preview_reward&quot; style=&quot;display:none;&quot;&gt;
                    &lt;p id=&quot;js_preview_reward_wording&quot; class=&quot;tips_global reward_tips&quot; style=&quot;display:none;&quot;&gt;&lt;/p&gt;
                    &lt;p&gt;
                        &lt;a class=&quot;reward_access&quot; id=&quot;js_preview_reward_link&quot; href=&quot;##&quot;&gt;&lt;span class=&quot;icon-reward&quot;&gt;&lt;/span&gt;赞赏&lt;/a&gt;

                    &lt;/p&gt;
                &lt;/div&gt;
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_preview_reward_qrcode&quot; style=&quot;display:none;&quot;&gt;
                    &lt;p class=&quot;tips_global&quot;&gt;长按二维码向我转账&lt;/p&gt;
                    &lt;p id=&quot;js_preview_reward_ios_wording&quot; class=&quot;reward_tips&quot; style=&quot;display:none;&quot;&gt;&lt;/p&gt;
                    &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; src=&quot;//res.wx.qq.com/mmbizwap/zh_CN/htmledition/images/pic/appmsg/pic_reward_qrcode.2x3534dd.png&quot;&gt;&lt;/span&gt;
                    &lt;p class=&quot;tips_global&quot;&gt;受苹果公司新规定影响，微信 iOS 版的赞赏功能被关闭，可通过二维码转账支持公众号。&lt;/p&gt;
                &lt;/div&gt;
                            &lt;/div&gt;&lt;div class=&quot;rich_media_tool&quot; id=&quot;js_toobar3&quot;&gt;
                
                                
                                            &lt;div id=&quot;js_read_area3&quot; class=&quot;media_tool_meta tips_global meta_primary&quot; style=&quot;display:none;&quot;&gt;阅读 &lt;span id=&quot;readNum3&quot;&gt;&lt;/span&gt;&lt;/div&gt;

                &lt;span style=&quot;display:none;&quot; class=&quot;media_tool_meta meta_primary tips_global meta_praise&quot; id=&quot;like3&quot;&gt;
                    &lt;i class=&quot;icon_praise_gray&quot;&gt;&lt;/i&gt;&lt;span class=&quot;praise_num&quot; id=&quot;likeNum3&quot;&gt;&lt;/span&gt;
                &lt;/span&gt;

                &lt;a id=&quot;js_report_article3&quot; style=&quot;display:none;&quot; class=&quot;media_tool_meta tips_global meta_extra&quot; href=&quot;##&quot;&gt;投诉&lt;/a&gt;

            &lt;/div&gt;&lt;div class=&quot;rich_media_tool&quot; id=&quot;js_sg_bar&quot;&gt;
                
                                
                                
            &lt;/div&gt;</description>
<author></author>
<guid isPermaLink="false">2018-03-12-1000000628</guid>
<pubDate>Mon, 12 Mar 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>CVPR 2018 | 中科大&amp;微软提出立体神经风格迁移模型，可用于3D视频风格化</title>
<link>https://henix.github.io/feeds/weixin.sogou.almosthuman2014/2018-03-11-1000000627_503255441.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?timestamp=1520838466&amp;amp;src=3&amp;amp;ver=1&amp;amp;signature=60g4FlJblx0ynvOUS2XUspYgnCfnLlIE4wKAdgp82vIQeeJ3wTqzwri*aeP6HIJc17mS453JUn06-5lTp1FTgziUHY*YdgFYhSfIPz1hXWcmVNXbBRDVrEA3O0n6anEuFybIcPFnL5h1pZsGCIlTbMFlm7ql95nIKRW6uM5evrs=&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;img-content&quot;&gt;
                
                &lt;h2 class=&quot;rich_media_title&quot; id=&quot;activity-name&quot;&gt;
                    CVPR 2018 | 中科大&amp;amp;微软提出立体神经风格迁移模型，可用于3D视频风格化                                    &lt;/h2&gt;
                &lt;div id=&quot;meta_content&quot; class=&quot;rich_media_meta_list&quot;&gt;
                                                            &lt;em id=&quot;post-date&quot; class=&quot;rich_media_meta rich_media_meta_text&quot;&gt;2018-03-11&lt;/em&gt;

                                        &lt;a class=&quot;rich_media_meta rich_media_meta_link rich_media_meta_nickname&quot; href=&quot;##&quot; id=&quot;post-user&quot;&gt;机器之心&lt;/a&gt;
                    &lt;span class=&quot;rich_media_meta rich_media_meta_text rich_media_meta_nickname&quot;&gt;机器之心&lt;/span&gt;


                    &lt;div id=&quot;js_profile_qrcode&quot; class=&quot;profile_container&quot; style=&quot;display:none;&quot;&gt;
                        &lt;div class=&quot;profile_inner&quot;&gt;
                            &lt;strong class=&quot;profile_nickname&quot;&gt;机器之心&lt;/strong&gt;
                            &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;&gt;

                            &lt;p class=&quot;profile_meta&quot;&gt;
                            &lt;label class=&quot;profile_meta_label&quot;&gt;微信号&lt;/label&gt;
                            &lt;span class=&quot;profile_meta_value&quot;&gt;almosthuman2014&lt;/span&gt;
                            &lt;/p&gt;

                            &lt;p class=&quot;profile_meta&quot;&gt;
                            &lt;label class=&quot;profile_meta_label&quot;&gt;功能介绍&lt;/label&gt;
                            &lt;span class=&quot;profile_meta_value&quot;&gt;专业的人工智能媒体和产业服务平台&lt;/span&gt;
                            &lt;/p&gt;
                            
                        &lt;/div&gt;
                        &lt;span class=&quot;profile_arrow_wrp&quot; id=&quot;js_profile_arrow_wrp&quot;&gt;
                            &lt;i class=&quot;profile_arrow arrow_out&quot;&gt;&lt;/i&gt;
                            &lt;i class=&quot;profile_arrow arrow_in&quot;&gt;&lt;/i&gt;
                        &lt;/span&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                
                
                
                
                                                
                                                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section style=&quot;font-size: 16px;white-space: normal;max-width: 100%;color: rgb(62, 62, 62);background-color: rgb(255, 255, 255);line-height: 28.4444px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section data-id=&quot;85660&quot; data-custom=&quot;rgb(117, 117, 118)&quot; data-color=&quot;rgb(117, 117, 118)&quot; style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section data-id=&quot;85660&quot; data-custom=&quot;rgb(117, 117, 118)&quot; data-color=&quot;rgb(117, 117, 118)&quot; style=&quot;max-width: 100%;border-width: 0px;border-style: initial;border-color: currentcolor;font-family: 微软雅黑;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;margin-top: 2em;padding-top: 0.5em;padding-bottom: 0.5em;max-width: 100%;border-style: solid none;font-family: inherit;text-decoration: inherit;border-top-color: rgb(204, 204, 204);border-bottom-color: rgb(204, 204, 204);border-top-width: 1px;border-bottom-width: 1px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;p style=&quot;margin-top: -1.2em;max-width: 100%;min-height: 1em;text-align: center;line-height: 1.75em;border-width: initial;border-style: initial;border-color: currentcolor;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(255, 255, 255);background-color: rgb(117, 117, 118);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;选自&lt;span style=&quot;max-width: 100%;text-align: justify;&quot;&gt;arXiv&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-style=&quot;white-space: normal; text-align: left;font-size: 14px;line-height: 1.5em; color: rgb(12, 12, 12);&quot; style=&quot;padding: 16px 16px 10px;max-width: 100%;font-family: inherit;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;font-size: 12px;color: rgb(136, 136, 136);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;作者：Dongdong Chen等&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;font-size: 12px;color: rgb(136, 136, 136);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;机器之心编译&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;font-size: 12px;color: rgb(136, 136, 136);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;参与：Nurhachu Null、刘晓坤&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;blockquote style=&quot;white-space: normal;&quot;&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;color: rgb(136, 136, 136);&quot;&gt;近年来，在自然图像上再现名画风格的风格转换技术成为内容创作的热门话题。例如，最近的电影「至爱梵高」是第一部完全由训练有素的艺术家制作的动画电影。然而，目前还没有将风格转换应用于立体图像或视频的技术。现有的风格迁移方法会使左右视图不一致的风格化纹理，研究者通过解决该问题，突破了立体风格迁移的一大瓶颈。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;立体 3D 正在成为一种大众消费媒体，例如 3D 电影、电视以及游戏。现在，随着头戴式 3D 显示器（例如 AR/VR 眼镜）和双镜头智能手机的发展，立体 3D 越来越受关注，并激发了许多有趣的研究工作，例如立体修复 [36,27]、视频稳定 [15]，以及全景 [39]。在这些研究中，创建立体 3D 内容总是令人感兴趣的。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;近年来，在自然图像上再现名画风格的风格转换技术成为内容创作的一个热门话题。例如，最近的电影「至爱梵高」是第一部完全由训练有素的艺术家制作的动画电影。受卷积神经网络 ( CNN ) 能力的启发，Gatys 等人的开创性工作 [ 13 ] 提出了一种将指定作品的风格自动转换为任何图像的通用解决方案。[ 21，19，34，12，11 ] 提出了许多后续工作，以改进或扩展该项目。这些技术还被应用于许多成功的工业应用 (例如，Prisma [ 1],Ostagram [2] 和 Microsoft Pix [3])。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;然而，据作者介绍，目前还没有将风格转换应用于立体图像或视频的技术。在这篇论文中，作者通过首次提出立体神经风格转换算法来应对这种新兴 3D 内容的需求。他们首先独立地仔细检验了现有的风格转换方法在左视图和右视图上的简单应用。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;他们发现往往这些方法很难在两个视图上产生几何一致的风格化纹理。结果就是，它会引起有问题的深度感知，并且造成观看者的 3D 疲劳（如图 1 所示）。因此我们需要生成和和两个视图一致的风格化纹理。此外，还需要一个快速的解决方案，尤其是在实际的实时 3D 显示中（例如 AR/VR 眼镜）。最后但不是最不重要的一点，作为进一步扩展的立体视频中的风格转换应当同时满足时间的连贯性。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;本文提出了第一个用于快速立体风格转换的前馈网络。除了广泛使用的风格损失函数 [13,19] 之外，作者还引入了一个附加的视差一致性损失，用它来惩罚风格化结果在非遮挡区域的偏差。具体而言，在给定双向视差和遮挡掩膜的情况下，可以建立左视图和右视图之间的对应关系，并且惩罚了两个视图中都可见的重叠区域的风格不一致。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;作者首先在基于优化的解决方案 [13] 中验证了这个新的损失项。如图 1 所示，通过在优化过程中联合考虑风格化和视差一致性，该方法可以为两个视图生成更加一致的风格化结果。然后作者进一步将这种新的视差损失结合在了为立体风格化所设计的前馈深度网络中。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.3641025641025641&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW89eluHpgtRK4IymWIgT5pfwx44sbnJaibCSFAz8rtsplEfZ2icNArMrv6Xvgj0EspXmpMY45683S5A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1560&quot;&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 12px;&quot;&gt;&lt;em&gt;&lt;span style=&quot;color: rgb(136, 136, 136);&quot;&gt;图 1. 图（a）给出立体图像对和一副风格图像，立体图像的左右视图都被进行了风格化（第一行），左视图的风格化结果（b）和右视图的风格化结果（c）会在空间对应区域（d）不一致。这会导致不期望的垂直差异和不正确的水平差异，进而在立体图像（e）中造成 3D 疲劳。相对而言，通过引入新的视差一致性约束，本文的方法（第二行）可以为两个视图生成一致的风格化结果。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;本文提出的网络由两个子网络组成。一个是风格化子网络 StyleNet，它使用了和 [19] 中一样的架构。另一个是视差子网络 DispOccNet，它可以估计出输入立体图像对的双向视差图和遮挡掩膜。这两个子网络被集成在特征级别的中间域中。它们首先分别接受各自任务的独立训练，然后作为一个整体接受联合训练。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;该新视差子网络具有两个优点：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;1 ) 与使用缓慢全局优化技术的一些最先进的立体匹配算法 [ 33，22 ] 相比，它能够实现实时处理；&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;2 ) 它是第一个同时估计双向视差和遮挡掩模的端到端网络，而其它方法 [ 26，38 ] 在每个前向过程中仅估计单个双向视差图，并且需要后处理步骤来获得遮挡掩模。文章的 5.2 部分展示了这种双向设计优于单向设计的原因。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;该网络还可以很容易地通过集成 [10] 中的子网络扩展到立体 3D 视频中。这样，最终的风格化结果不仅可以保持每个时间步的水平空间一致性，而且可以保持相邻时间步之间的时间连贯性。这项工作可能会启发电影创作者考虑自动地将 3D 电影或电视转变为名画风格。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;实验结果表明，该方法无论在数量上还是在质量上都优于这个领域中的基准结果。总体而言，本文主要贡献由以下四部分组成：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-2&quot; style=&quot;&quot;&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;通过将新的视差一致约束结合到原始的风格损失函数中，本文提出了第一个立体风格转换算法。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;本文提出了第一个用于快速立体风格转换的前馈网络，它把风格化、双向视差和遮挡掩码结合成了一个端到端系统。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;本文提出的视差子网络是第一个可以同时估计双向视差图和遮挡掩码的端到端网络。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;考虑到视差一致性和时间连贯性，本文通过集成一个附加的子网络把该方法扩展到了立体视频的风格转换上。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;本文的剩余部分将首先总结一些相关的工作。在该方法中，研究者使用了基于基线优化的方法验证了新提出的视差约束，然后介绍了快速立体风格转换的前馈网络，并将其扩展到立体视频。实验结果表明了该方法的有效性，还展示了对该方法的一些控制变量分析。在本文最后作者作了进一步讨论。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.8419540229885057&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW89eluHpgtRK4IymWIgT5pfHmBsZxgMKrcnImWVwKjcHibd4rbacqgOyKnqIDrA0BJy7tBpicdlMq6Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;696&quot;&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.8419540229885057&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW89eluHpgtRK4IymWIgT5pfHmBsZxgMKrcnImWVwKjcHibd4rbacqgOyKnqIDrA0BJy7tBpicdlMq6Q/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;696&quot;&gt;&lt;em style=&quot;text-align: justify;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);font-size: 12px;&quot;&gt;图 2. 左视图、右视图的风格化比较（第一行）；结合了一致性约束的风格化结果（中间行）。前一种方法（没有结合一致性约束）往往会在遮挡掩码边界附近产生纹理不连续。最下行是右视图遮挡掩码和放大的风格化图片。&lt;/span&gt;&lt;/em&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;4. 立体风格转换网络&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;本文提出了一个快速立体风格转换的前馈网络。整个网络由两个子网络组成:一个是与现有的风格化网络 [ 10,11,12,16 ] 相似的风格化网络 StyleNet，另一个是同时估计双向视差图和遮挡掩码的 DispOccNet。这两个子网络被集成在一个特征级中间域中，使左视图和右视图完全对称。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;StyleNet：作者使用了 [19] 最早提出的，并在其他工作中 [10, 11, 12, 16] 得到广泛应用的默认风格网络结构。该架构基本上类似图像自动编码器，它由若干个指定步幅的卷积层 (将图像编码到特征空间中)、五个残差模块和少数指定步幅的卷积层 (将特征解码为图像) 组成。在该实现中，遵循了与 [ 10 ] 相同的设置，其中第三个残差块 (包括第三个残差块) 之前的层被视为编码器，而剩余层被视为解码器。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;DispOccNet：最近，Mayer 等人引入了称为 DispNet 的端到端卷积网络，它被用于视差估计 [26]。然而，它只能预测每个前向的单向视差图 DI ( l→r )。在本文中，作者使用类似的网络结构，但在扩展部分中为每个分辨率 ( 1 / 64，...1 / 2 ) 增加了三个分支。这三个分支用于回归视差 Dr 和双向遮挡掩码 Ml 和 Mr。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.24740843123704215&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW89eluHpgtRK4IymWIgT5pf59hy4QR7nd13UuTRicAWk48iccPZEJqMkQY9wTDrL3EeTUrGgwkgWvRA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1447&quot;&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);&quot;&gt;&lt;em&gt;&lt;span style=&quot;font-size: 12px;&quot;&gt;图 3. 快速立体风格迁移的总体网络结构。它包含两个子网络：StyleNet 和 DispOccNet，它们被集成在特征级别中间域 H 中。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.6104815864022662&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW89eluHpgtRK4IymWIgT5pfXyBx3EdaSC2KqiasIZmWLy08aQeibaYhZsgicV1oQdsbTjowNLRTcPkmw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;706&quot;&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);&quot;&gt;&lt;em&gt;&lt;span style=&quot;font-size: 12px;&quot;&gt;图 4. 立体视频风格迁移的总体结构。左边是时间网络的简化工作流。右边是用于结合上述立体网络和左边附加的时间网络的递归公式。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.7486631016042781&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW89eluHpgtRK4IymWIgT5pfRGrdlRbia8hZ9WWia3uknUwI1dohzFBRqzvL1iccQ0X3PowHxd0rxX8LQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;748&quot;&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);&quot;&gt;&lt;em&gt;&lt;span style=&quot;font-size: 12px;&quot;&gt;图 6. 与使用 [10] 中所用方法（第一行）的一个类似变体的结果对比，该变体方法存在重影和风格化不一致的问题。中间行是使用了本文的方法构成掩码替换的结果，重影消失了，但是不一致性仍然存在。相比之下，本文的结果（最底行）没有上述问题。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.2661498708010336&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW89eluHpgtRK4IymWIgT5pfvEpejcqrqOdoJFk0H4w01WFhdUwlb7vy6Pgu4C0kL9HTf1obmPsyFA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1548&quot;&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);&quot;&gt;&lt;em&gt;&lt;span style=&quot;font-size: 12px;&quot;&gt;图 7. 与真实街道视图立体图像对的基准进行比较。第一行中带有红色标记框是基准结果，底行含有对应的绿色框的是本文的结果。显然，本文的结果具有更好的视差一致性。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;论文：Stereoscopic Neural Style Transfer（立体神经风格转换器）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.21105527638190955&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW89eluHpgtRK4IymWIgT5pfnl58sQhgjVBuQibMSglNxEm6hnk0R5jAKrmkgEunicEnic7m0IAJsUmEQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1592&quot;&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;color: rgb(123, 12, 0);&quot;&gt;论文链接：https://arxiv.org/abs/1802.10591&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;摘要：本文首次尝试实现立体神经风格转换，以应对 3D 电影或 AR/VR 的新需求。我们首先仔细检验了将现有的分别应用于立体图像的左视图和右视图的单目风格转换方法，表明在最终的风格化结果中不能很好地保持原始的视差一致性，这给观看者造成了 3D 疲劳。为了解决这个问题，我们通过在非遮挡区域中加强双向视差约束，向广泛采用的风格损失函数中加入了一个新的视差损失。为了得到实用的实时性解决方案，我们提出了第一个前馈网络：它联合训练一个风格化子网络和一个视差子网络，并将它们集成在一个特征级的中间域中。我们的视差子网络也是用于同时估计双向视差和遮挡掩码的首个端到端网络。最后，综合考虑时间连贯性和视差一致性，我们将该网络有效地扩展到立体视频上。实验结果表明，该方法无论在数量上还是质量上都明显优于基准算法。&lt;/span&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.3287671232876712&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW89eluHpgtRK4IymWIgT5pfUp97Zo18NR4gR3icPhicewiazgaCKrrqQGmVqQTUn3CnIasvAZLHBqdDg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;73&quot; style=&quot;height: 20px;width: 43px;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong style=&quot;color: rgb(62, 62, 62);max-width: 100%;line-height: 25.6px;font-family: 微软雅黑;font-size: 14px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;color: rgb(62, 62, 62);line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong style=&quot;color: rgb(62, 62, 62);max-width: 100%;line-height: 25.6px;font-family: 微软雅黑;font-size: 14px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;color: rgb(62, 62, 62);line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong style=&quot;color: rgb(62, 62, 62);max-width: 100%;line-height: 25.6px;font-family: 微软雅黑;font-size: 14px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;color: rgb(62, 62, 62);line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;本文为机器之心编译，&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;转载请联系本公众号获得授权&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;。&lt;/span&gt;&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 5px;white-space: normal;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);background-color: rgb(255, 255, 255);font-size: 18px;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);line-height: 25.6px;font-family: 微软雅黑;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;✄------------------------------------------------&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 5px;white-space: normal;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);background-color: rgb(255, 255, 255);font-size: 18px;font-family: 微软雅黑;text-align: center;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(217, 33, 66);font-size: 12px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;加入机器之心（全职记者/实习生）：hr@jiqizhixin.com&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);background-color: rgb(255, 255, 255);font-size: 18px;font-family: 微软雅黑;text-align: center;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(217, 33, 66);line-height: 1.6;font-size: 12px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;投稿或寻求报道：editor@jiqizhixin.com&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);background-color: rgb(255, 255, 255);font-size: 18px;font-family: 微软雅黑;text-align: center;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;font-size: 12px;color: rgb(217, 33, 66);line-height: 1.6;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;广告&amp;amp;商务合作：bd@jiqizhixin.com&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
                &lt;/div&gt;
                &lt;script nonce=&quot;1384116555&quot; type=&quot;text/javascript&quot;&gt;
                    var first_sceen__time = (+new Date());

                    if (&quot;&quot; == 1 &amp;&amp; document.getElementById(&#39;js_content&#39;)) {
                        document.getElementById(&#39;js_content&#39;).addEventListener(&quot;selectstart&quot;,function(e){ e.preventDefault(); });
                    }

                    
                    (function(){
                        if (navigator.userAgent.indexOf(&quot;WindowsWechat&quot;) != -1){
                            var link = document.createElement(&#39;link&#39;);
                            var head = document.getElementsByTagName(&#39;head&#39;)[0];
                            link.rel = &#39;stylesheet&#39;;
                            link.type = &#39;text/css&#39;;
                            link.href = &quot;//res.wx.qq.com/mmbizwap/zh_CN/htmledition/style/page/appmsg/page_mp_article_improve_winwx31619e.css&quot;;
                            head.appendChild(link);
                        }
                    })();
                &lt;/script&gt;
                
                
                                
                &lt;div class=&quot;ct_mpda_wrp&quot; id=&quot;js_sponsor_ad_area&quot; style=&quot;display:none;&quot;&gt;&lt;/div&gt;

                
                                &lt;div class=&quot;reward_area tc&quot; id=&quot;js_preview_reward&quot; style=&quot;display:none;&quot;&gt;
                    &lt;p id=&quot;js_preview_reward_wording&quot; class=&quot;tips_global reward_tips&quot; style=&quot;display:none;&quot;&gt;&lt;/p&gt;
                    &lt;p&gt;
                        &lt;a class=&quot;reward_access&quot; id=&quot;js_preview_reward_link&quot; href=&quot;##&quot;&gt;&lt;span class=&quot;icon-reward&quot;&gt;&lt;/span&gt;赞赏&lt;/a&gt;

                    &lt;/p&gt;
                &lt;/div&gt;
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_preview_reward_qrcode&quot; style=&quot;display:none;&quot;&gt;
                    &lt;p class=&quot;tips_global&quot;&gt;长按二维码向我转账&lt;/p&gt;
                    &lt;p id=&quot;js_preview_reward_ios_wording&quot; class=&quot;reward_tips&quot; style=&quot;display:none;&quot;&gt;&lt;/p&gt;
                    &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; src=&quot;//res.wx.qq.com/mmbizwap/zh_CN/htmledition/images/pic/appmsg/pic_reward_qrcode.2x3534dd.png&quot;&gt;&lt;/span&gt;
                    &lt;p class=&quot;tips_global&quot;&gt;受苹果公司新规定影响，微信 iOS 版的赞赏功能被关闭，可通过二维码转账支持公众号。&lt;/p&gt;
                &lt;/div&gt;
                            &lt;/div&gt;&lt;div class=&quot;rich_media_tool&quot; id=&quot;js_toobar3&quot;&gt;
                
                                
                                            &lt;div id=&quot;js_read_area3&quot; class=&quot;media_tool_meta tips_global meta_primary&quot; style=&quot;display:none;&quot;&gt;阅读 &lt;span id=&quot;readNum3&quot;&gt;&lt;/span&gt;&lt;/div&gt;

                &lt;span style=&quot;display:none;&quot; class=&quot;media_tool_meta meta_primary tips_global meta_praise&quot; id=&quot;like3&quot;&gt;
                    &lt;i class=&quot;icon_praise_gray&quot;&gt;&lt;/i&gt;&lt;span class=&quot;praise_num&quot; id=&quot;likeNum3&quot;&gt;&lt;/span&gt;
                &lt;/span&gt;

                &lt;a id=&quot;js_report_article3&quot; style=&quot;display:none;&quot; class=&quot;media_tool_meta tips_global meta_extra&quot; href=&quot;##&quot;&gt;投诉&lt;/a&gt;

            &lt;/div&gt;&lt;div class=&quot;rich_media_tool&quot; id=&quot;js_sg_bar&quot;&gt;
                
                                
                                
            &lt;/div&gt;</description>
<author></author>
<guid isPermaLink="false">2018-03-11-1000000627_503255441</guid>
<pubDate>Sun, 11 Mar 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>深度 | 级联MobileNet-V2实现人脸关键点检测（附训练源码）</title>
<link>https://henix.github.io/feeds/weixin.sogou.almosthuman2014/2018-03-11-1000000627_503255437.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?timestamp=1520838466&amp;amp;src=3&amp;amp;ver=1&amp;amp;signature=60g4FlJblx0ynvOUS2XUspYgnCfnLlIE4wKAdgp82vIQeeJ3wTqzwri*aeP6HIJc17mS453JUn06-5lTp1FTgziUHY*YdgFYhSfIPz1hXWd-KnRD-Vhd*bWGk*0YLng*jarY6sBUZh41toelBXG-b6dc*jfe162CNKoylQZLUgE=&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;img-content&quot;&gt;
                
                &lt;h2 class=&quot;rich_media_title&quot; id=&quot;activity-name&quot;&gt;
                    深度 | 级联MobileNet-V2实现人脸关键点检测（附训练源码）                                    &lt;/h2&gt;
                &lt;div id=&quot;meta_content&quot; class=&quot;rich_media_meta_list&quot;&gt;
                                                            &lt;em id=&quot;post-date&quot; class=&quot;rich_media_meta rich_media_meta_text&quot;&gt;2018-03-11&lt;/em&gt;

                                        &lt;a class=&quot;rich_media_meta rich_media_meta_link rich_media_meta_nickname&quot; href=&quot;##&quot; id=&quot;post-user&quot;&gt;机器之心&lt;/a&gt;
                    &lt;span class=&quot;rich_media_meta rich_media_meta_text rich_media_meta_nickname&quot;&gt;机器之心&lt;/span&gt;


                    &lt;div id=&quot;js_profile_qrcode&quot; class=&quot;profile_container&quot; style=&quot;display:none;&quot;&gt;
                        &lt;div class=&quot;profile_inner&quot;&gt;
                            &lt;strong class=&quot;profile_nickname&quot;&gt;机器之心&lt;/strong&gt;
                            &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;&gt;

                            &lt;p class=&quot;profile_meta&quot;&gt;
                            &lt;label class=&quot;profile_meta_label&quot;&gt;微信号&lt;/label&gt;
                            &lt;span class=&quot;profile_meta_value&quot;&gt;almosthuman2014&lt;/span&gt;
                            &lt;/p&gt;

                            &lt;p class=&quot;profile_meta&quot;&gt;
                            &lt;label class=&quot;profile_meta_label&quot;&gt;功能介绍&lt;/label&gt;
                            &lt;span class=&quot;profile_meta_value&quot;&gt;专业的人工智能媒体和产业服务平台&lt;/span&gt;
                            &lt;/p&gt;
                            
                        &lt;/div&gt;
                        &lt;span class=&quot;profile_arrow_wrp&quot; id=&quot;js_profile_arrow_wrp&quot;&gt;
                            &lt;i class=&quot;profile_arrow arrow_out&quot;&gt;&lt;/i&gt;
                            &lt;i class=&quot;profile_arrow arrow_in&quot;&gt;&lt;/i&gt;
                        &lt;/span&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                
                
                
                
                                                
                                                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section style=&quot;font-size: 16px;white-space: normal;max-width: 100%;line-height: 28.4444px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section data-id=&quot;85660&quot; data-custom=&quot;rgb(117, 117, 118)&quot; data-color=&quot;rgb(117, 117, 118)&quot; style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section data-id=&quot;85660&quot; data-custom=&quot;rgb(117, 117, 118)&quot; data-color=&quot;rgb(117, 117, 118)&quot; style=&quot;max-width: 100%;border-width: 0px;border-style: initial;border-color: currentcolor;font-family: 微软雅黑;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;margin-top: 2em;padding-top: 0.5em;padding-bottom: 0.5em;max-width: 100%;border-style: solid none;font-family: inherit;text-decoration: inherit;border-top-color: rgb(204, 204, 204);border-bottom-color: rgb(204, 204, 204);border-top-width: 1px;border-bottom-width: 1px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;p style=&quot;margin-top: -1.2em;max-width: 100%;min-height: 1em;text-align: center;line-height: 1.75em;border-width: initial;border-style: initial;border-color: currentcolor;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;color: rgb(255, 255, 255);&quot;&gt;&lt;span style=&quot;background-color: rgb(117, 117, 118);&quot;&gt;机器之心投稿&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section data-style=&quot;white-space: normal; text-align: left;font-size: 14px;line-height: 1.5em; color: rgb(12, 12, 12);&quot; style=&quot;padding: 16px 16px 10px;color: rgb(62, 62, 62);background-color: rgb(255, 255, 255);max-width: 100%;font-family: inherit;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;font-size: 12px;color: rgb(136, 136, 136);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;作者：&lt;/span&gt;&lt;/strong&gt;&lt;span style=&quot;font-size: 12px;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(136, 136, 136);text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;余霆嵩&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;blockquote style=&quot;white-space: normal;&quot;&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;color: rgb(136, 136, 136);&quot;&gt;为了能在移动端进行实时的人脸关键点检测，本实验采用最新的轻量化模型——MobileNet-V2 作为基础模型，在 CelebA 数据上，进行两级的级联 MobileNet-V2 实现人脸关键点检测。首先，将 CelebA 数据作为第一级 MobileNet-V2 的输入，经第一级 MobileNet-V2 得到粗略的关键点位置；然后，依据第一级 MobileNet-V2 的输出，采取一定的裁剪策略，将人脸区域从原始数据上裁剪出来作为第二级 MobileNet-V2 的输入；最后，经第二级 MobileNet-V2 输出最终人脸关键点定位信息。经初步训练，最终网络单模型不到 1M，仅 956KB，单张图片 inference 耗时 6ms（采用 GTX1080 在未优化的 Caffe）。实验结果表明，MobileNet-V2 是一个性能极佳的轻量化模型，可以采用较少的参数获得较好的性能；同时，级联的操作可达到从粗到精的关键点定位。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: center;&quot;&gt;&lt;strong&gt;一、引言&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;人脸关键点检测也称为人脸关键点检测、定位或者人脸对齐，是指给定人脸图像，定位出人脸面部的关键区域位置，包括眉毛、眼睛、鼻子、嘴巴、脸部轮廓等和人脸检测类似，由于受到姿态和遮挡等因素的影响，人脸关键点检测是一个富有挑战性的任务。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;人脸关键点检测方法大致分为三种，分别是基 ASM(Active Shape Model)[1] 和 AAM (Active Appearnce Model)[2,3] 的传统方法；基于级联形状回归的方法 [4]；基于深度学习的方法 [5-10]。在深度学习大行其道的环境下，本实验将借鉴深度学习以及级联思想进行人脸关键点检测。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;随着手机的智能化及万物物联的兴起，在移动端上部署深度学习模型的需求日益增大。然而，为获得更佳的性能，卷积神经网络的设计，从 7 层 AlexNet[11] 到上千层的 ResNet[12] 和 DenseNet[13]，网络模型越来越大，严重阻碍了深度学习在移动端的使用。因此，一种轻量的，高效率的模型——MobileNet-V1[14] 应运而生。MobileNet-V1 最早由 Google 团队于 2017 年 4 月公布在 arXiv 上，而本实验采用的是 MobileNet-V2[15]，是在 MobileNet-V1 基础上结合当下流行的残差思想而设计的一种面向移动端的卷积神经网络模型。MobileNet-V2 不仅达到满意的性能（ImageNet2012 上 top-1:74.7%），而且运行速度以及模型大小完全可达到移动端实时的指标。因此，本实验将 MobileNet-V2 作为基础模型进行级联。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: center;&quot;&gt;&lt;strong&gt;二、两级级联 MobileNet-V2&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;2.1 整体框架及思路&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;本实验采用两级级联 MobileNet-V2，分别称之为 level_1 和 level_2，由于个人精力有限，level_1 和 level_2 采用完全相同的网络结构。level_1 进行粗略的关键点定位；依据 level_1 输出的关键点进行人脸区域裁剪，获得人脸区域图像作为 level_2 的输入，最终关键点定位信息由 level_2 进行输出。流程如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.504950495049505&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOjn60DvPbrrq4It9v0zspOQTia1qNzfHaCDe6JnBoZlT79kfjFPZV0vQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1414&quot;&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;通常进行人脸关键点检测之前，需要进行人脸检测，即将人脸检测获得的人脸图像区域作为人脸关键点检测模型的输入。然而进行人脸检测是相当耗时的，所以，在特定场景下（即确定有且仅有一个人的图像）可以采用 level_1 代替人脸检测步骤，通过 level_1 可获得人脸区域，从而提高整个任务效率和速度。本实验正是采用 level_1 剔除非人脸区域，从而使得后一级的网络可以更为精准的进行关键点定位。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;本实验仅做了两级级联，其实还可像 DCNN[5] 那样继续级联，对眼睛，鼻子，嘴巴分别进行预测，或者是学习 Face++[6] 那样，在 68 点的关键点定位中，将 68 点划分为两个区域分别预测。这些都是很好的想法，十分值得借鉴，但个人精力有限，在此仅做了两级级联作为学习，希望大家可以基于 MobileNet-V2 去改进上述两种方法。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;2.2 基础模型——MobileNet-V2&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;MobileNet-V2[15] 由 Google 团队于 2018 年 1 月公布在 arXiv 上，是一种短小精悍的模型，仅数 M 的模型就在 ImageNet 上获得 74.7% 的准确率（top-1），具体分类性能如下：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.42328042328042326&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQO2A4VnKormCLZ9qZ8nB0xMmibHhiaGR1z1exTbKPofwvibMVCu4SoqcPAA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1134&quot;&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;原版 MobileNet-V2 网络结构如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.7323135755258127&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOoF0v1P0A3Xu8icYibCiczGuCkaVicIjypG4UGrRd6ickXemAAS1wE8BucpA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1046&quot;&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;其中：t 表示「扩张」倍数，c 表示输出通道数，n 表示重复次数，s 表示步长 stride。 &lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;解释一下原文的有误之处： &lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;1. 第五行，也就是第四个 bottleneck，stride=2，分辨率应该从 28 降低到 14；要么就是 stride=1； &lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;2. 文中提到共计采用 19 个 bottleneck，但是这里只有 17 个。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;结合本实验任务的需求，设计了一个输入尺寸为 48*48 的 MobileNet-V2（level_1 和 level_2 均采用此网络结构），网络结构如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.8284600389863548&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQO0Hdmg1RY0PLxMIYyj7KJQadpyLHpydFoggkq7VODH05icjrcFzwTcKA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1026&quot;&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: center;&quot;&gt;&lt;strong&gt;三、实验及结果&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;3.1 数据集简介&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;实验数据采用 CelebFaces Attributes Dataset (CelebA) 公开数据集 (http://mmlab.ie.cuhk.edu.hk/projects/CelebA.html)，CelebA 数据集是香港中文大学的开放的数据集，此数据集包含 10177 个名人，共计 202599 张图片，每张图片含 5 个关键点标注信息以及 40 个属性标签。经过实验结果分析，此数据集在人脸关键点检测上的困难点在于：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;1. 人脸区域面积占图片面积大小不一，有部分图片中的人脸占比相当小。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;例如：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.7176470588235294&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOiajfpaEX5nCouAB3C9epGJzz7ia2Sf7N5u2hLoZicVoHw03lv1hrQAXibg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1190&quot;&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;2. 人脸角度多样性强，俯仰角（pitch）、偏航角 (yaw) 和横滚角 (roll) 均有，但绝大多数数据为正向无偏角，从而导致正向无偏角检测效果较好，复杂偏角检测效果较差。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.5743243243243243&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOK0TjnaHPkIvuwQMLg92bmmKy70QWHQKC98cO3bhwfFTDslicEpdyLhQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1480&quot;&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;3. 噪音图片，图片「不完整」，例如存在大部分黑色区域图片。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1.0395136778115501&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQObLeXVRxL2HG6b1Mv9lvwlMI6AaZwAFxnH6rXTPUQreqUXlqOe3gqHA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;658&quot;&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;3.2 评价指标&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;这里采用相对误差作为评价指标，相对误差计算公式为：，其中表示输出 landmark 与真实 landmark 的欧氏距离，表示图片对角线的长度。一开始，本实验采用的是双眼距离作为归一化因子，但是 CelebA 数据集并不适合采用双眼距离作为归一化因子，因为在计算时会出现 inf！即两眼在同一位置，导致分母为零，这是 LFW,ALFW 数据集不会出现的情况。两眼距离为零的图片示意图；&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.670926517571885&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOFbafAn91PBe0XKHIxZ0WXAia5ySm88PTX9pF5CGeiaa6H7ic45ZyRGdFA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1252&quot;&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;3.3 模型训练&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;level_1 与 level_2 采用相同网络结构，solver 也一致。solver 为：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.13399153737658676&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOYWibAuiagICBbPnmHDyDahGGeNM8oIMO4Rd7tXibsiaBM5MGASPPibU97aA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1418&quot;&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;level_1 的训练 loss 曲线如图所示：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.3845070422535211&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQO8UU7sG3Y3d7a09glBBFzx01F0ajt11C3bOFsaOV3MKjkvroTJWLQww/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1420&quot;&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Train loss 大概是在 0.005~0.006，Test loss 是在 0.007~0.008（注：训练的时候 loss_weighs 设置为 100，因此上图数量级上不一致）&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;训练和测试的平均误差分别为 1.01% 和 1.17%。5 个点的平均误差如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;1.5129411764705882&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOAa2KyxY5J0ojfGy6Y4CqIwtqlQlhSJIusGccc0RwadTl1ibD3sia0SjA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;850&quot;&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;训练集和测试集各点误差分布如图：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.5827338129496403&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOqpXqEf9kSKn8kViciba4gibh8kALZ3eHuXkfNZ48Hm2QXGTYfneA7Mmnw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1390&quot;&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.5701881331403763&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOfeVhfRAPWx4XBibl1lTvugf3kTtj3UTIA7tmkvWyo4icN7mIKGcSicxLQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1382&quot;&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;从误差分布图可以看到，误差分布呈高斯分布状，训练与测试的分布形状基本一致，通过误差分布图可知，在训练集中，绝大部分误差小于 5%，因此在选取 level_1 的裁剪阈值时，可参照此图进行调试。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;level_1 训练完毕，需要进行图片裁剪，以供 level_2 进行训练。这里采取的裁剪策略为，以 level_1 预测到的鼻子为中心，裁剪出一个正方形，这个正方形的边长为四倍鼻子到左眼的距离。以下图为例，绿色点为 level_1 的预测关键点，红色方框即为裁剪框：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.7674418604651163&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOMcDXiaia4wcAAzpeyqNfujZIVTaKucyObyqA7gUSsJa3UcZIbOLgkHng/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;688&quot;&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;在裁剪时，还需要对部分图片进行丢弃，以此确保裁剪之后的图片能包含完整的人脸。本实验将丢弃阈值设置为 10%，即误差大于 10% 的图片进行丢弃，然而实验结果表明 10% 并不是一个较好的阈值，应该设置为 5% 比较合理。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;经过裁剪操作可获得 level_2 的训练数据，接着训练 level_2，level_2 的 loss 曲线如图：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.38870967741935486&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQO9L0XcJFkvxquseqhV9YIB5uXS1y2dNh7AgNtvvnYPrrcdr9fjic1b0A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1240&quot;&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;level_2 与 level_1 的曲线有着明显的不同，即曲线出现了很大的浮动，有尖点存在。这是为什么呢？其实是因为 level_1 剪裁出了问题，在裁剪时，将误差小于 10% 的图片保留，用以裁剪。其实这个阈值（10%）还是太大了，以至于裁剪出这一些「不合格」图片。例如：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.4722222222222222&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOOgy816Sc54F3icWFXF4CrUll4Nth8JOL4VIEKBYuLGLDkcsmDcQaBMA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1296&quot;&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;level_2 训练完毕，即可进行级联检测，forward 耗时如图所示：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.9473684210526315&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOmjdowMsqze9QIVF0Ay4uET5A286dzDbia1RNMosMjHN1xWPHt9iaySHg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;608&quot;&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;级联检测效果如下图所示，其中，绿色点为真实 landmark，红色点为 level_1 的预测，蓝色点为 level_2 的预测。可以看到蓝色点比红色点更靠近绿色点：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.6656394453004623&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOXS1aQIhZ6fH4ic2KPCOgNOlBWjOksiauWK4mbBN53RAGj2bcZCwA0Vqg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1298&quot;&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: center;&quot;&gt;&lt;strong&gt;四、总结与展望&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;本实验在 CelebA 数据集上，采用最新的轻量化网络——MobileNet-V2 作为基础模型，进行级联卷积神经网络人脸关键点检测实验，初步验证 MobileNet-V2 是短小精悍的模型，并且从模型大小以及运行速度上可知，此模型可在移动端实现实时检测。此实验只是对级联思想的一个简单验证，若要获得更高精度的人脸关键点模型，还有很多可改进的地方。在此总结此实验已知的不足之处，供大家参考并改进：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;1.	level_1 的输入可为 24*24 甚至更小，只要保证能依据输出的 landmark 来裁剪处人脸区域即可；&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;2.	level_1 的裁剪策略相对「拙劣」，可依据具体应用场景，提出不同的裁剪策略，确保输入到 level_2 的图片包含整个人脸；&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;3.	模型训练不足，未完全收敛，可对 solver 进行修改，获得更好的模型；&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;4.	可增加第三级模型，分别对眼睛，鼻子，嘴巴进行检测，从而获得更精确定位点；&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;5.	对于具体应用场景，应依据困难样本，需要针对性的做数据增强，例如 CelebA 中，正向无偏角人脸较多，而有俯仰角、偏航角和横滚角的图片占少数，从而导致模型对含偏角的图片预测效果较差；&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;6.	未进行模型压缩，若需要部署，则要进行模型压缩，从而获得更小的模型；&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;7.	Caffe 对 depth-wise convolution 的支持并不友好，从而在 Caffe 下体现不出 MobileNet-V2 的高效，可尝试 TensorFlow 下进行；&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;8.	欢迎大家补充&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;下一步工作：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;1. 针对以上不足进行改进；&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;2. 寻找有兴趣的朋友进行 68 点关键点检测实验，并进行模型压缩，获得更小更好的网络。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;本实验所有代码可在 GitHub 上获得：https://github.com/tensor-yu/cascaded_mobilenet-v2&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;详细训练步骤可参见博客：http://blog.csdn.net/u011995719/article/details/79435615&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;欢迎大家提出宝贵的意见和建议。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;参考文献&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);&quot;&gt;&lt;em&gt;&lt;span style=&quot;font-size: 12px;&quot;&gt;[1] T.F. Cootes, C.J. Taylor, D.H. Cooper, et al. Active Shape Models-Their Training and Application[J]. Computer Vision and Image Understanding, 1995, 61(1):38-59.&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);&quot;&gt;&lt;em&gt;&lt;span style=&quot;font-size: 12px;&quot;&gt;[2] G. J. Edwards, T. F. Cootes, C. J. Taylor. Face recognition using active appearance models[J]. Computer Vision—Eccv』, 1998, 1407(6):581-595.&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);&quot;&gt;&lt;em&gt;&lt;span style=&quot;font-size: 12px;&quot;&gt;[3] Cootes T F, Edwards G J, Taylor C J. Active appearance models[C]// European Conference on Computer Vision. Springer Berlin Heidelberg, 1998:484-498.&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);&quot;&gt;&lt;em&gt;&lt;span style=&quot;font-size: 12px;&quot;&gt;[4] Dollár P, Welinder P, Perona P. Cascaded pose regression[J]. IEEE, 2010, 238(6):1078-1085.&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);&quot;&gt;&lt;em&gt;&lt;span style=&quot;font-size: 12px;&quot;&gt;[5] Sun Y, Wang X, Tang X. Deep Convolutional Network Cascade for Facial Point Detection[C]// Computer Vision and Pattern Recognition. IEEE, 2013:3476-3483.&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);&quot;&gt;&lt;em&gt;&lt;span style=&quot;font-size: 12px;&quot;&gt;[6] Zhou E, Fan H, Cao Z, et al. Extensive Facial Landmark Localization with Coarse-to-Fine Convolutional Network Cascade[C]// IEEE International Conference on Computer Vision Workshops. IEEE, 2014:386-391.&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);&quot;&gt;&lt;em&gt;&lt;span style=&quot;font-size: 12px;&quot;&gt;[7] Zhang Z, Luo P, Chen C L, et al. Facial Landmark Detection by Deep Multi-task Learning[C]// European Conference on Computer Vision. 2014:94-108.&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);&quot;&gt;&lt;em&gt;&lt;span style=&quot;font-size: 12px;&quot;&gt;[8] Wu Y, Hassner T. Facial Landmark Detection with Tweaked Convolutional Neural Networks[J]. Computer Science, 2015.&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);&quot;&gt;&lt;em&gt;&lt;span style=&quot;font-size: 12px;&quot;&gt;[9] Zhang K, Zhang Z, Li Z, et al. Joint Face Detection and Alignment Using Multitask Cascaded Convolutional Networks[J]. IEEE Signal Processing Letters, 2016, 23(10):1499-1503.&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);&quot;&gt;&lt;em&gt;&lt;span style=&quot;font-size: 12px;&quot;&gt;[10] Kowalski M, Naruniec J, Trzcinski T. Deep Alignment Network: A Convolutional Neural Network for Robust Face Alignment[J]. 2017:2034-2043.&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);&quot;&gt;&lt;em&gt;&lt;span style=&quot;font-size: 12px;&quot;&gt;[11] Krizhevsky A, Sutskever I, Hinton G E. ImageNet classification with deep convolutional neural networks[C]// International Conference on Neural Information Processing Systems. Curran Associates Inc. 2012:1097-1105.&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);&quot;&gt;&lt;em&gt;&lt;span style=&quot;font-size: 12px;&quot;&gt;[12] He K, Zhang X, Ren S, et al. Deep Residual Learning for Image Recognition[C]// Computer Vision and Pattern Recognition. IEEE, 2016:770-778.&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);&quot;&gt;&lt;em&gt;&lt;span style=&quot;font-size: 12px;&quot;&gt;[13] Huang G, Liu Z, Maaten L V D, et al. Densely Connected Convolutional Networks[C]// CVPR. 2017.&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);&quot;&gt;&lt;em&gt;&lt;span style=&quot;font-size: 12px;&quot;&gt;[14] Howard A G, Zhu M, Chen B, et al. MobileNets: Efficient Convolutional Neural Networks for Mobile Vision Applications[J]. 2017.&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);&quot;&gt;&lt;em&gt;&lt;span style=&quot;font-size: 12px;&quot;&gt;[15] Sandler M, Howard A, Zhu M, et al. Inverted Residuals and Linear Bottlenecks: Mobile Networks for Classification,axXiv. &lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;color: rgb(123, 12, 0);&quot;&gt;作者简介：余霆嵩，广东工业大学研三学生，研究方向：关键点定位，模型压缩，Email：&lt;/span&gt;&lt;span style=&quot;font-size: 14px;color: rgb(123, 12, 0);&quot;&gt;yts3221@126.com&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;max-width: 100%;min-height: 1em;text-align: justify;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;line-height: 25.6px;font-family: 微软雅黑;font-size: 14px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;color: rgb(62, 62, 62);line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;本文为机器之心投稿，&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;转载请联系作者获得授权&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;。&lt;/span&gt;&lt;/strong&gt;&lt;br style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 5px;white-space: normal;max-width: 100%;min-height: 1em;font-size: 18px;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);line-height: 25.6px;font-family: 微软雅黑;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;✄------------------------------------------------&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 5px;white-space: normal;max-width: 100%;min-height: 1em;font-size: 18px;font-family: 微软雅黑;text-align: center;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(217, 33, 66);font-size: 12px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;加入机器之心（全职记者/实习生）：hr@jiqizhixin.com&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;max-width: 100%;min-height: 1em;font-size: 18px;font-family: 微软雅黑;text-align: center;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(217, 33, 66);line-height: 1.6;font-size: 12px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;投稿或寻求报道：editor@jiqizhixin.com&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;max-width: 100%;min-height: 1em;font-size: 18px;font-family: 微软雅黑;text-align: center;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;font-size: 12px;color: rgb(217, 33, 66);line-height: 1.6;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;广告&amp;amp;商务合作：bd@jiqizhixin.com&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
                &lt;/div&gt;
                &lt;script nonce=&quot;488920046&quot; type=&quot;text/javascript&quot;&gt;
                    var first_sceen__time = (+new Date());

                    if (&quot;&quot; == 1 &amp;&amp; document.getElementById(&#39;js_content&#39;)) {
                        document.getElementById(&#39;js_content&#39;).addEventListener(&quot;selectstart&quot;,function(e){ e.preventDefault(); });
                    }

                    
                    (function(){
                        if (navigator.userAgent.indexOf(&quot;WindowsWechat&quot;) != -1){
                            var link = document.createElement(&#39;link&#39;);
                            var head = document.getElementsByTagName(&#39;head&#39;)[0];
                            link.rel = &#39;stylesheet&#39;;
                            link.type = &#39;text/css&#39;;
                            link.href = &quot;//res.wx.qq.com/mmbizwap/zh_CN/htmledition/style/page/appmsg/page_mp_article_improve_winwx31619e.css&quot;;
                            head.appendChild(link);
                        }
                    })();
                &lt;/script&gt;
                
                
                                
                &lt;div class=&quot;ct_mpda_wrp&quot; id=&quot;js_sponsor_ad_area&quot; style=&quot;display:none;&quot;&gt;&lt;/div&gt;

                
                                &lt;div class=&quot;reward_area tc&quot; id=&quot;js_preview_reward&quot; style=&quot;display:none;&quot;&gt;
                    &lt;p id=&quot;js_preview_reward_wording&quot; class=&quot;tips_global reward_tips&quot; style=&quot;display:none;&quot;&gt;&lt;/p&gt;
                    &lt;p&gt;
                        &lt;a class=&quot;reward_access&quot; id=&quot;js_preview_reward_link&quot; href=&quot;##&quot;&gt;&lt;span class=&quot;icon-reward&quot;&gt;&lt;/span&gt;赞赏&lt;/a&gt;

                    &lt;/p&gt;
                &lt;/div&gt;
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_preview_reward_qrcode&quot; style=&quot;display:none;&quot;&gt;
                    &lt;p class=&quot;tips_global&quot;&gt;长按二维码向我转账&lt;/p&gt;
                    &lt;p id=&quot;js_preview_reward_ios_wording&quot; class=&quot;reward_tips&quot; style=&quot;display:none;&quot;&gt;&lt;/p&gt;
                    &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; src=&quot;//res.wx.qq.com/mmbizwap/zh_CN/htmledition/images/pic/appmsg/pic_reward_qrcode.2x3534dd.png&quot;&gt;&lt;/span&gt;
                    &lt;p class=&quot;tips_global&quot;&gt;受苹果公司新规定影响，微信 iOS 版的赞赏功能被关闭，可通过二维码转账支持公众号。&lt;/p&gt;
                &lt;/div&gt;
                            &lt;/div&gt;&lt;div class=&quot;rich_media_tool&quot; id=&quot;js_toobar3&quot;&gt;
                
                                
                                            &lt;div id=&quot;js_read_area3&quot; class=&quot;media_tool_meta tips_global meta_primary&quot; style=&quot;display:none;&quot;&gt;阅读 &lt;span id=&quot;readNum3&quot;&gt;&lt;/span&gt;&lt;/div&gt;

                &lt;span style=&quot;display:none;&quot; class=&quot;media_tool_meta meta_primary tips_global meta_praise&quot; id=&quot;like3&quot;&gt;
                    &lt;i class=&quot;icon_praise_gray&quot;&gt;&lt;/i&gt;&lt;span class=&quot;praise_num&quot; id=&quot;likeNum3&quot;&gt;&lt;/span&gt;
                &lt;/span&gt;

                &lt;a id=&quot;js_report_article3&quot; style=&quot;display:none;&quot; class=&quot;media_tool_meta tips_global meta_extra&quot; href=&quot;##&quot;&gt;投诉&lt;/a&gt;

            &lt;/div&gt;&lt;div class=&quot;rich_media_tool&quot; id=&quot;js_sg_bar&quot;&gt;
                
                                
                                
            &lt;/div&gt;</description>
<author></author>
<guid isPermaLink="false">2018-03-11-1000000627_503255437</guid>
<pubDate>Sun, 11 Mar 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>观点 | 如何可视化卷积网络分类图像时关注的焦点</title>
<link>https://henix.github.io/feeds/weixin.sogou.almosthuman2014/2018-03-11-1000000627_503255436.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?timestamp=1520838466&amp;amp;src=3&amp;amp;ver=1&amp;amp;signature=60g4FlJblx0ynvOUS2XUspYgnCfnLlIE4wKAdgp82vIQeeJ3wTqzwri*aeP6HIJc17mS453JUn06-5lTp1FTgziUHY*YdgFYhSfIPz1hXWc1zWj4M*cvt9BlEATN80rObtTOcuEk5VOYikTMU*hTcZWn7gmCtGrpmD6XYVe72Bs=&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;img-content&quot;&gt;
                
                &lt;h2 class=&quot;rich_media_title&quot; id=&quot;activity-name&quot;&gt;
                    观点 | 如何可视化卷积网络分类图像时关注的焦点                                    &lt;/h2&gt;
                &lt;div id=&quot;meta_content&quot; class=&quot;rich_media_meta_list&quot;&gt;
                                                            &lt;em id=&quot;post-date&quot; class=&quot;rich_media_meta rich_media_meta_text&quot;&gt;2018-03-11&lt;/em&gt;

                                        &lt;a class=&quot;rich_media_meta rich_media_meta_link rich_media_meta_nickname&quot; href=&quot;##&quot; id=&quot;post-user&quot;&gt;机器之心&lt;/a&gt;
                    &lt;span class=&quot;rich_media_meta rich_media_meta_text rich_media_meta_nickname&quot;&gt;机器之心&lt;/span&gt;


                    &lt;div id=&quot;js_profile_qrcode&quot; class=&quot;profile_container&quot; style=&quot;display:none;&quot;&gt;
                        &lt;div class=&quot;profile_inner&quot;&gt;
                            &lt;strong class=&quot;profile_nickname&quot;&gt;机器之心&lt;/strong&gt;
                            &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;&gt;

                            &lt;p class=&quot;profile_meta&quot;&gt;
                            &lt;label class=&quot;profile_meta_label&quot;&gt;微信号&lt;/label&gt;
                            &lt;span class=&quot;profile_meta_value&quot;&gt;almosthuman2014&lt;/span&gt;
                            &lt;/p&gt;

                            &lt;p class=&quot;profile_meta&quot;&gt;
                            &lt;label class=&quot;profile_meta_label&quot;&gt;功能介绍&lt;/label&gt;
                            &lt;span class=&quot;profile_meta_value&quot;&gt;专业的人工智能媒体和产业服务平台&lt;/span&gt;
                            &lt;/p&gt;
                            
                        &lt;/div&gt;
                        &lt;span class=&quot;profile_arrow_wrp&quot; id=&quot;js_profile_arrow_wrp&quot;&gt;
                            &lt;i class=&quot;profile_arrow arrow_out&quot;&gt;&lt;/i&gt;
                            &lt;i class=&quot;profile_arrow arrow_in&quot;&gt;&lt;/i&gt;
                        &lt;/span&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                
                
                
                
                                                
                                                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section style=&quot;font-size: 16px;white-space: normal;max-width: 100%;color: rgb(62, 62, 62);background-color: rgb(255, 255, 255);line-height: 28.4444px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section data-id=&quot;85660&quot; data-custom=&quot;rgb(117, 117, 118)&quot; data-color=&quot;rgb(117, 117, 118)&quot; style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section data-id=&quot;85660&quot; data-custom=&quot;rgb(117, 117, 118)&quot; data-color=&quot;rgb(117, 117, 118)&quot; style=&quot;max-width: 100%;border-width: 0px;border-style: initial;border-color: currentcolor;font-family: 微软雅黑;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;margin-top: 2em;padding-top: 0.5em;padding-bottom: 0.5em;max-width: 100%;border-style: solid none;font-family: inherit;text-decoration: inherit;border-top-color: rgb(204, 204, 204);border-bottom-color: rgb(204, 204, 204);border-top-width: 1px;border-bottom-width: 1px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;p style=&quot;margin-top: -1.2em;max-width: 100%;min-height: 1em;text-align: center;line-height: 1.75em;border-width: initial;border-style: initial;border-color: currentcolor;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(255, 255, 255);background-color: rgb(117, 117, 118);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;选自hackevolve&lt;/span&gt;&lt;/p&gt;&lt;section data-style=&quot;white-space: normal; text-align: left;font-size: 14px;line-height: 1.5em; color: rgb(12, 12, 12);&quot; style=&quot;padding: 16px 16px 10px;max-width: 100%;font-family: inherit;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;font-size: 12px;color: rgb(136, 136, 136);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;作者：Saideep Talari&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;font-size: 12px;color: rgb(136, 136, 136);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;机器之心编译&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;font-size: 12px;color: rgb(136, 136, 136);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;参与：乾树、思源&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote style=&quot;white-space: normal;&quot;&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;color: rgb(136, 136, 136);&quot;&gt;在我们使用 CNN 进行图片分类时，模型到底关注的是图像的哪个区域？Grad-CAM 利用卷积网络最后一个特征图的信息，并加权对应的梯度而构建模型分类的热力图，通过该热力图，我们可以清楚地了解哪一块区域对于类别是最重要的。&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;你在训练神经网络进行图片分类时，有没有想过网络是否就是像人类感知信息一样去理解图像？这个问题很难回答，因为多数情况下深度神经网络都被视作黑箱。我们喂给它输入数据进而得到输出。整个流程如果出现问题很难去调试。尽管预测的已经相当精准，但这并不能说明他们足以和人类感知的方式媲美。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;为何会这样？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;假设你需要对大象和企鹅进行二分类（我知道这个任务十分简单）。现在你已经获取了数据集，训好了模型并完成部署。这个模型想必是适用于绝大多数数据的，但是总有可能会出现误判。有人可能会把它看作是一个极端情况，但是你觉得对于 CNN 来说，什么时候物体才是明确可辨的？&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;结合上述内容，显然在图像中，大象常伴着草木出现，企鹅常伴着冰雪出现。所以，实际上模型已经学会了分辨草木与冰雪的颜色/形状，而不是真的学会了按对象分类。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;由上文案例知，如颜色通道统计那样的简单图像处理技术，与训练模型是一样的。因为在没有智能的情况下，模型只能依靠颜色辩物。现在你或许会问，如何知道 CNN 究竟在寻找什么？答案就是，Grad-CAM。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;加权梯度类激活映射（Grad-CAM）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;我们在本篇博客中实现了加权梯度类激活映射。首先，我们要知道这不是唯一的解决方案。原作说，&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;加权梯度类激活映射 (Grad-CAM) 通过任意目标概念的梯度（比如说类别「狗」的分对数甚至是「狗」这个字），将这些知识传递到最后的卷积层进而产生一张粗略的定位图，用于凸显图像中对于预测相关概念至关重要的区域。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;通俗点讲，我们只取最终卷积层的特征图，然后将该特征中的每个通道通过与该通道相关的类的梯度进行加权。这种方法只不过是输入图像如何通过每个通道对于类的重要性来激活不同的通道，最重要的是它不需要对现有架构进行任何重训练或更改。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: center;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.3935309973045822&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gWic7GYIsIKR5bEo5S0bHjWXYia6arTTCTw17IJx2YyuHqKN9SUFFSjCJHRKUSQMdxCujfIfL7F0WosQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;371&quot; style=&quot;height: 89px;width: 225px;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;特定类的特征空间得分就是对应类的输出值 y^c 关于特征图 A_ij 的偏导在 i 和 j 维上的特征进行全局平均池化操作。然后，我们将结果与特征图沿其通道轴 k 相乘。最后，将结果在通道维度 k 上求平均/池化。因此，特征空间的得分凸的大小是 i×j。Σ 符号用于描述池化和平均操作。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.4775&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gWic7GYIsIKR5bEo5S0bHjWXYQ4F3Mic0WNJJX2paFaNutbWUgdyVGApEmxbcPq3gDKaR4oypyOrdKXQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot;&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);font-size: 12px;&quot;&gt;&lt;em&gt;ReLU 激活函数用于得分图，随后被归一化以便输出正区域预测。&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;实现&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;为了达到本篇博客的目的，我们套用一个预训练好的 VGG 模型，并导入一些必要包开始实现代码。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;margin-top: 0px;margin-bottom: 0px;padding: 0px;background-color: rgb(255, 255, 255);font-size: 16px;box-sizing: border-box;color: rgb(62, 62, 62);line-height: inherit;&quot;&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;margin-right: 2px;margin-left: 2px;padding: 0.5em;box-sizing: border-box;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background-color: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;&lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;from&lt;/span&gt; keras.applications.vgg16 &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;import&lt;/span&gt; VGG16, preprocess_input, decode_predictions&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;from&lt;/span&gt; keras.preprocessing &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;import&lt;/span&gt; image&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;import&lt;/span&gt; keras.backend &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;as&lt;/span&gt; K&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;as&lt;/span&gt; np&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;import&lt;/span&gt; cv2&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;import&lt;/span&gt; sys&lt;/code&gt;&lt;/pre&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;我们使用 Keras 自带的 VGG16 模型。并加载一些有助于加载和处理图像的函数。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;margin-top: 0px;margin-bottom: 0px;padding: 0px;background-color: rgb(255, 255, 255);font-size: 16px;box-sizing: border-box;color: rgb(62, 62, 62);line-height: inherit;&quot;&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;margin-right: 2px;margin-left: 2px;padding: 0.5em;box-sizing: border-box;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background-color: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;model = VGG16(weights=&lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;imagenet&quot;&lt;/span&gt;)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;img_path = sys.argv[&lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;1&lt;/span&gt;]&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;img = image.load_img(img_path, target_size=(&lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;224&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;224&lt;/span&gt;))&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;x = image.img_to_array(img)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;x = np.expand_dims(x, axis=&lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;0&lt;/span&gt;)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;x = preprocess_input(x)&lt;/code&gt;&lt;/pre&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;我们先初始化模型并通过命令行参数加载图片。VGG 网络只接受 (224×224×3) 大小的图片，所以我们要把图片放缩到指定大小。由于我们只通过网络传递一个图像，因此需要扩展第一个维度，将其扩展为一个大小为 1 的批量。然后，我们通过辅助函数 preprocess_input 从输入图像中减去平均 RGB 值来实现图像的归一化。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;margin-top: 0px;margin-bottom: 0px;padding: 0px;background-color: rgb(255, 255, 255);font-size: 16px;box-sizing: border-box;color: rgb(62, 62, 62);line-height: inherit;&quot;&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;margin-right: 2px;margin-left: 2px;padding: 0.5em;box-sizing: border-box;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background-color: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;preds = model.predict(x)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;class_idx = np.argmax(preds[&lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;0&lt;/span&gt;])&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;class_output = model.output[:, class_idx]&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;last_conv_layer = model.get_layer(&lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;block5_conv3&quot;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;此处，我们来看看顶部预测的特征图。所以我们得到图像的预测，并给得分靠前的类做个索引。请记住，我们可以为任意类计算特征图。然后，我们可以取出 VGG16 中最后一个卷积层的输出 block5_conv3。得到的特征图大小应该是 14×14×512。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;margin-top: 0px;margin-bottom: 0px;padding: 0px;background-color: rgb(255, 255, 255);font-size: 16px;box-sizing: border-box;color: rgb(62, 62, 62);line-height: inherit;&quot;&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;margin-right: 2px;margin-left: 2px;padding: 0.5em;box-sizing: border-box;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background-color: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;grads = K.gradients(class_output, last_conv_layer.output)[&lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;0&lt;/span&gt;]&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;pooled_grads = K.mean(grads, axis=(&lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;2&lt;/span&gt;))&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;iterate = K.function([model.input], [pooled_grads, last_conv_layer.output[&lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;0&lt;/span&gt;]])&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;pooled_grads_value, conv_layer_output_value = iterate([x])&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;512&lt;/span&gt;):&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt; conv_layer_output_value[:, :, i] *= pooled_grads_value[i]&lt;/code&gt;&lt;/pre&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;如上所述，我们计算相类输出值关于特征图的梯度。然后，我们沿着除了通道维度之外的轴对梯度进行池化操作。最后，我们用计算出的梯度值对输出特征图加权。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;margin-top: 0px;margin-bottom: 0px;padding: 0px;background-color: rgb(255, 255, 255);font-size: 16px;box-sizing: border-box;color: rgb(62, 62, 62);line-height: inherit;&quot;&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;margin-right: 2px;margin-left: 2px;padding: 0.5em;box-sizing: border-box;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background-color: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;heatmap = np.mean(conv_layer_output_value, axis=&lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;-1&lt;/span&gt;)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;heatmap = np.maximum(heatmap, &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;0&lt;/span&gt;)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;heatmap /= np.max(heatmap)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;然后，我们沿着通道维度对加权的特征图求均值，从而得到大小为 14*14 的热力图。最后，我们对热力图进行归一化处理，以使其值在 0 和 1 之间。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;margin-top: 0px;margin-bottom: 0px;padding: 0px;background-color: rgb(255, 255, 255);font-size: 16px;box-sizing: border-box;color: rgb(62, 62, 62);line-height: inherit;&quot;&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;margin-right: 2px;margin-left: 2px;padding: 0.5em;box-sizing: border-box;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background-color: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;img = cv2.imread(img_path)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;heatmap = cv2.resize(heatmap, (img.shape[&lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;1&lt;/span&gt;], img.shape[&lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;0&lt;/span&gt;]))&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;heatmap = np.uint8(&lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;255&lt;/span&gt; * heatmap)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;heatmap = cv2.applyColorMap(heatmap, cv2.COLORMAP_JET)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;superimposed_img = cv2.addWeighted(img, &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;0.6&lt;/span&gt;, heatmap, &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;0.4&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;0&lt;/span&gt;)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;cv2.imshow(&lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;Original&quot;&lt;/span&gt;, img)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;cv2.imshow(&lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;GradCam&quot;&lt;/span&gt;, superimposed_img)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;cv2.waitKey(&lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;0&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;最后，我们使用 OpenCV 来读图片，将获取的热力图放缩到原图大小。我们将原图和热力图混合，以将热力图叠加到图像上。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.3508771929824561&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gWic7GYIsIKR5bEo5S0bHjWXYPgqsm6L1znKpHzzokl4vwfvYrUvUWIqwmUE9hhwNQA0k6HQAzdjm6w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;798&quot;&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;从上面的图片可以清楚地看到 CNN 在图像中寻找的是区分这些类的地方。这种技术不仅适用于定位，还可用于视觉问答、图像标注等。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;此外，它在调试建立精确模型的数据需求方面非常有帮助。虽然此技术并未过多涉及调参，但我们可以使用额外的数据和数据增强技术更好地泛化模型。&lt;/span&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.3287671232876712&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gWic7GYIsIKR5bEo5S0bHjWXYL6ynj6GNuQsBPwA8HsPzMiadOrrjCHG9NNOQqnc4cN32xgUKPBNc4uw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;73&quot; style=&quot;height: 20px;width: 38px;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 12px;color: rgb(136, 136, 136);&quot;&gt;&lt;em&gt;原文链接：http://www.hackevolve.com/where-cnn-is-looking-grad-cam/&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 12px;color: rgb(136, 136, 136);&quot;&gt;&lt;em&gt;&lt;br&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 12px;color: rgb(136, 136, 136);&quot;&gt;&lt;em&gt;&lt;br&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;font-size: 16px;white-space: normal;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);background-color: rgb(255, 255, 255);text-align: justify;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;line-height: 25.6px;font-family: 微软雅黑;font-size: 14px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;color: rgb(62, 62, 62);line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;本文为机器之心编译，&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;转载请联系本公众号获得授权&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;。&lt;/span&gt;&lt;/strong&gt;&lt;br style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 5px;white-space: normal;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);background-color: rgb(255, 255, 255);font-size: 18px;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);line-height: 25.6px;font-family: 微软雅黑;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;✄------------------------------------------------&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 5px;white-space: normal;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);background-color: rgb(255, 255, 255);font-size: 18px;font-family: 微软雅黑;text-align: center;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(217, 33, 66);font-size: 12px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;加入机器之心（全职记者/实习生）：hr@jiqizhixin.com&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);background-color: rgb(255, 255, 255);font-size: 18px;font-family: 微软雅黑;text-align: center;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(217, 33, 66);line-height: 1.6;font-size: 12px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;投稿或寻求报道：editor@jiqizhixin.com&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;white-space: normal;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);background-color: rgb(255, 255, 255);font-size: 18px;font-family: 微软雅黑;text-align: center;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;font-size: 12px;color: rgb(217, 33, 66);line-height: 1.6;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;广告&amp;amp;商务合作：bd@jiqizhixin.com&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
                &lt;/div&gt;
                &lt;script nonce=&quot;237910598&quot; type=&quot;text/javascript&quot;&gt;
                    var first_sceen__time = (+new Date());

                    if (&quot;&quot; == 1 &amp;&amp; document.getElementById(&#39;js_content&#39;)) {
                        document.getElementById(&#39;js_content&#39;).addEventListener(&quot;selectstart&quot;,function(e){ e.preventDefault(); });
                    }

                    
                    (function(){
                        if (navigator.userAgent.indexOf(&quot;WindowsWechat&quot;) != -1){
                            var link = document.createElement(&#39;link&#39;);
                            var head = document.getElementsByTagName(&#39;head&#39;)[0];
                            link.rel = &#39;stylesheet&#39;;
                            link.type = &#39;text/css&#39;;
                            link.href = &quot;//res.wx.qq.com/mmbizwap/zh_CN/htmledition/style/page/appmsg/page_mp_article_improve_winwx31619e.css&quot;;
                            head.appendChild(link);
                        }
                    })();
                &lt;/script&gt;
                
                
                                
                &lt;div class=&quot;ct_mpda_wrp&quot; id=&quot;js_sponsor_ad_area&quot; style=&quot;display:none;&quot;&gt;&lt;/div&gt;

                
                                &lt;div class=&quot;reward_area tc&quot; id=&quot;js_preview_reward&quot; style=&quot;display:none;&quot;&gt;
                    &lt;p id=&quot;js_preview_reward_wording&quot; class=&quot;tips_global reward_tips&quot; style=&quot;display:none;&quot;&gt;&lt;/p&gt;
                    &lt;p&gt;
                        &lt;a class=&quot;reward_access&quot; id=&quot;js_preview_reward_link&quot; href=&quot;##&quot;&gt;&lt;span class=&quot;icon-reward&quot;&gt;&lt;/span&gt;赞赏&lt;/a&gt;

                    &lt;/p&gt;
                &lt;/div&gt;
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_preview_reward_qrcode&quot; style=&quot;display:none;&quot;&gt;
                    &lt;p class=&quot;tips_global&quot;&gt;长按二维码向我转账&lt;/p&gt;
                    &lt;p id=&quot;js_preview_reward_ios_wording&quot; class=&quot;reward_tips&quot; style=&quot;display:none;&quot;&gt;&lt;/p&gt;
                    &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; src=&quot;//res.wx.qq.com/mmbizwap/zh_CN/htmledition/images/pic/appmsg/pic_reward_qrcode.2x3534dd.png&quot;&gt;&lt;/span&gt;
                    &lt;p class=&quot;tips_global&quot;&gt;受苹果公司新规定影响，微信 iOS 版的赞赏功能被关闭，可通过二维码转账支持公众号。&lt;/p&gt;
                &lt;/div&gt;
                            &lt;/div&gt;&lt;div class=&quot;rich_media_tool&quot; id=&quot;js_toobar3&quot;&gt;
                
                                
                                            &lt;div id=&quot;js_read_area3&quot; class=&quot;media_tool_meta tips_global meta_primary&quot; style=&quot;display:none;&quot;&gt;阅读 &lt;span id=&quot;readNum3&quot;&gt;&lt;/span&gt;&lt;/div&gt;

                &lt;span style=&quot;display:none;&quot; class=&quot;media_tool_meta meta_primary tips_global meta_praise&quot; id=&quot;like3&quot;&gt;
                    &lt;i class=&quot;icon_praise_gray&quot;&gt;&lt;/i&gt;&lt;span class=&quot;praise_num&quot; id=&quot;likeNum3&quot;&gt;&lt;/span&gt;
                &lt;/span&gt;

                &lt;a id=&quot;js_report_article3&quot; style=&quot;display:none;&quot; class=&quot;media_tool_meta tips_global meta_extra&quot; href=&quot;##&quot;&gt;投诉&lt;/a&gt;

            &lt;/div&gt;&lt;div class=&quot;rich_media_tool&quot; id=&quot;js_sg_bar&quot;&gt;
                
                                
                                
            &lt;/div&gt;</description>
<author></author>
<guid isPermaLink="false">2018-03-11-1000000627_503255436</guid>
<pubDate>Sun, 11 Mar 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>从七桥问题开始：全面介绍图论及其应用</title>
<link>https://henix.github.io/feeds/weixin.sogou.almosthuman2014/2018-03-11-1000000627.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?timestamp=1520838466&amp;amp;src=3&amp;amp;ver=1&amp;amp;signature=60g4FlJblx0ynvOUS2XUspYgnCfnLlIE4wKAdgp82vIQeeJ3wTqzwri*aeP6HIJc17mS453JUn06-5lTp1FTgziUHY*YdgFYhSfIPz1hXWerJEjgoP0OajKatm-QdRoKpsuInOkAL5pZ6rjAmDpP4LAZX5A6LEssrUkUY5PC9lc=&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;img-content&quot;&gt;
                
                &lt;h2 class=&quot;rich_media_title&quot; id=&quot;activity-name&quot;&gt;
                    从七桥问题开始：全面介绍图论及其应用                                    &lt;/h2&gt;
                &lt;div id=&quot;meta_content&quot; class=&quot;rich_media_meta_list&quot;&gt;
                                                            &lt;em id=&quot;post-date&quot; class=&quot;rich_media_meta rich_media_meta_text&quot;&gt;2018-03-11&lt;/em&gt;

                                        &lt;a class=&quot;rich_media_meta rich_media_meta_link rich_media_meta_nickname&quot; href=&quot;##&quot; id=&quot;post-user&quot;&gt;机器之心&lt;/a&gt;
                    &lt;span class=&quot;rich_media_meta rich_media_meta_text rich_media_meta_nickname&quot;&gt;机器之心&lt;/span&gt;


                    &lt;div id=&quot;js_profile_qrcode&quot; class=&quot;profile_container&quot; style=&quot;display:none;&quot;&gt;
                        &lt;div class=&quot;profile_inner&quot;&gt;
                            &lt;strong class=&quot;profile_nickname&quot;&gt;机器之心&lt;/strong&gt;
                            &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;&gt;

                            &lt;p class=&quot;profile_meta&quot;&gt;
                            &lt;label class=&quot;profile_meta_label&quot;&gt;微信号&lt;/label&gt;
                            &lt;span class=&quot;profile_meta_value&quot;&gt;almosthuman2014&lt;/span&gt;
                            &lt;/p&gt;

                            &lt;p class=&quot;profile_meta&quot;&gt;
                            &lt;label class=&quot;profile_meta_label&quot;&gt;功能介绍&lt;/label&gt;
                            &lt;span class=&quot;profile_meta_value&quot;&gt;专业的人工智能媒体和产业服务平台&lt;/span&gt;
                            &lt;/p&gt;
                            
                        &lt;/div&gt;
                        &lt;span class=&quot;profile_arrow_wrp&quot; id=&quot;js_profile_arrow_wrp&quot;&gt;
                            &lt;i class=&quot;profile_arrow arrow_out&quot;&gt;&lt;/i&gt;
                            &lt;i class=&quot;profile_arrow arrow_in&quot;&gt;&lt;/i&gt;
                        &lt;/span&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                
                
                
                
                                                
                                                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section style=&quot;max-width: 100%;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);line-height: 28.4444px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section data-id=&quot;85660&quot; data-custom=&quot;rgb(117, 117, 118)&quot; data-color=&quot;rgb(117, 117, 118)&quot; style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section data-id=&quot;85660&quot; data-custom=&quot;rgb(117, 117, 118)&quot; data-color=&quot;rgb(117, 117, 118)&quot; style=&quot;max-width: 100%;border-width: 0px;border-style: initial;border-color: currentcolor;font-family: 微软雅黑;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;margin-top: 2em;padding-top: 0.5em;padding-bottom: 0.5em;max-width: 100%;border-style: solid none;font-family: inherit;text-decoration: inherit;border-top-color: rgb(204, 204, 204);border-bottom-color: rgb(204, 204, 204);border-top-width: 1px;border-bottom-width: 1px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;p style=&quot;margin-top: -1.2em;max-width: 100%;min-height: 1em;text-align: center;line-height: 1.75em;border-width: initial;border-style: initial;border-color: currentcolor;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(255, 255, 255);background-color: rgb(117, 117, 118);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;选自Medium&lt;/span&gt;&lt;/p&gt;&lt;section data-style=&quot;white-space: normal; text-align: left;font-size: 14px;line-height: 1.5em; color: rgb(12, 12, 12);&quot; style=&quot;padding: 16px 16px 10px;max-width: 100%;font-family: inherit;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;font-size: 12px;color: rgb(136, 136, 136);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;作者：Vardan Grigoryan&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;font-size: 12px;color: rgb(136, 136, 136);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;机器之心编译&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;color: rgb(136, 136, 136);&quot;&gt;图论是计算机科学中最重要、最有趣的领域之一，同时也是最容易被误解的。本长文从图论最基础的七桥问题开始，进而结合推特与 Facebook 实例解释无向图与有向图。此外，本文还是用大量的实例解释表征图、搜索树、哈希表等关键概念。最后本文描述了基于深度的搜索和基于广度的搜索等十分流行的图算法。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;理解和使用图帮助我们成为更好的程序员。用图思考帮助我们成为最好的，至少我们应该那么思考。图是很多节点 V 和边 E 的集合，即可以表示为有序对 G=(V, E)。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;尽管尝试研究过图论，也实现了一些算法，但是我还是非常困惑，因为它实在太无聊了。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;事实上，理解一件事物的最佳方式是理解其应用。我们将展示图论的多个应用，最重要的是，有很多插图。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 20px;&quot;&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.5591531755915318&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOlv0SaU8QgfWL2Hlo19dzFqUiab0mqGRz4icx0kiaicfOKusHGaNHIKPHrA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;803&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;margin-bottom: 20px;&quot;&gt;&lt;strong&gt;七桥问题&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;让我们首先从《图论的起源》中的「柯尼斯堡（Königsberg）的七座桥」开始。在加里宁格勒（Kaliningrad）有七座桥，连接着由普雷戈里亚（Pregolya）河分割而成的两个岛屿和两大陆地。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;在 18 世纪，这里被称为柯尼斯堡，隶属普鲁士，这一区域有很多桥。当时，有一个与柯尼斯堡的桥相关的脑筋急转弯：如何只穿过桥一次而穿过整个城市。下图为柯尼斯堡七座桥的简化图。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 20px;&quot;&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.8480325644504749&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOibmeJaiaibicITicprkM7tI8UOYhwQJu7pvSkSq6FRbaL5bkHVY08mrmYbg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;737&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;你可以尝试一下，在穿过每座桥仅一次的情况下穿过这个城市。每座桥，意味着所有桥都被穿过；只穿过一次，意味着每座桥不能被穿越两次及以上。如果你对这一问题有所了解，就知道这不可能。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.3035714285714286&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOkAA8BLiauSUQaLjgLxSMJLa0U5NWP0tnxcupia2iavicKzicONIa5bc0JQw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;504&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);font-size: 12px;&quot;&gt;&lt;em&gt;Leonhard Euler &lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;有时候，放弃这一问题是合理的。这就是 Leonhard Euler 的解决方法，他没有试图解决这一问题，而是证明其不可解决。让我们试着去理解 Euler 的内在想法，做到像 Euler 一样思考。首先我们从下图开始。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 20px;&quot;&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.8518518518518519&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOSutjc4fYvcQP0vJlSiatNia4Y7Qx7vRD2VOP5j61xcpicQhUa4eeSVicicg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;837&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;图中有四块彼此分隔的区域，两个岛屿和两块陆地，以及七座桥。探讨每一区域的桥数是否有一定模式很有趣。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.8085808580858086&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOfviagSCzaOWk6oD36fULDzYjI1ibbBNCnE96veRicGfspAfdUT8UMS2DA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;606&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 12px;color: rgb(136, 136, 136);&quot;&gt;&lt;em&gt;每块区域的桥数&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;如图所示，每块区域的桥数皆为奇数。如果你只能穿过桥一次，区域有两座桥，那么你就可以进入并离开该区域。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;text-align: justify;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 5px;&quot;&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.31624863685932386&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOOf616AibuxAwoiac16KD1R6MUqjpChLG00hXZmXLc6KpWUc0WZ2ZjWzw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;917&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 12px;color: rgb(136, 136, 136);&quot;&gt;&lt;em&gt;有两座桥的区域的示例&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;text-align: justify;&quot;&gt;通过图示很容易发现，如果你通过一座桥进入一个区域，那么你也要通过第二座桥离开它。但是当第三座桥出现，则无法只穿过桥一次而离开。所以对于一块区域，当桥数为偶时，则可以每座桥只穿过一次而离开；当桥数为奇时，则不能。请牢记。&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;text-align: justify;&quot;&gt;让我们再添加一座新桥，如下图所示，看看其是否能解决问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.8177257525083612&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQO9C3q2wYo0rF3a8xLapRx9DuKTbPqlVE4XbUvnmU0Pot1ic8E45tutEQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;598&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 12px;color: rgb(136, 136, 136);&quot;&gt;&lt;em&gt;注意添加的新桥&lt;/em&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;text-align: justify;&quot;&gt;现在我们有两个偶数和两个奇数。让我们在添加新桥的图上画一条新路线。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;text-align: justify;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 20px;&quot;&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.8135313531353136&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOxwtIxWgPmIjNmKSD2VxDfqZIicAI9ysBDWhc9foLAiazQ4ClSSobKJ0g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;606&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;text-align: justify;&quot;&gt;我们已经看到了桥的奇偶数是重要的。这里有个问题：桥的数量解决问题了吗？难道这个数不应该一直是偶数吗？后来发现不是的。这就是 Euler 做的，他发现了一个显示桥数量很重要的办法。更有意思的事，有奇数个连接点的「陆地」也很重要。这时候 Euler 开始把陆地和桥转化成我们看得懂的图。下面是一幅表示了哥尼斯堡七桥（Königsberg bridges）的图（注意：我们「临时」加的桥不在这里）：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.4658385093167702&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOCWdHtp90SCb6UV0DiajKQ9lyVVFH1sd1oeDoLK76wtnkicKialMXkibxoQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;644&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 12px;color: rgb(136, 136, 136);&quot;&gt;&lt;em&gt;抽象化七桥问题&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;问题的泛化和提取是需要注意的。当你解决一个特定问题时，最重要的是为类似的问题概括答案。在这个实际问题里，Euler 的任务是泛化过桥问题从而在将来可以解决类似的问题。比如：对于世界上所有的桥。可视化也可以帮助我们从另一个角度看问题，如下面的图也全是七桥问题的抽象：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.8396694214876033&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOtaRT1tlK8SEpMoyZsH26fEEw11aaBNHUK9FX2KfEkg4Sdq3ok5LVag/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;605&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;所以，可视化图是解决该问题的好选择，因此我们需要去找出哥尼斯堡七桥问题是怎样被这张图解决的。注意从圈里面向外出来的线。因此我们命名圈为节点（或节点），连接他们的线为边。你也许看到了字母表达法，V 是节点（vertex），E 是边（edge）。&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.8333333333333334&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOUHGLIXBfg90XicjP7kdxIR3O8IqPLIjcHc91pVic4IFk4GTpicBCwZLIA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;594&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;下一个重要的事是所谓节点自由度（Degree），即连接到节点的边数量。在我们上面的例子里，连接陆地和桥的边的数量可以被表达成节点的自由度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.7598116169544741&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOamPic1QCiaTbU8nUzouDo0BIw4ia5F64e5MFZq3bPp0HaicswvxseA4NibQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;637&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;在 Euler 的努力下，他证明了在图上（城市里）每次只走过一条边（桥）并且走过每一条边是严格取决于节点自由度。由这样的边组成的路径被叫做 Euler 路径（Euler path），Euler 路径的长度就是边的数量。&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-2&quot; style=&quot;list-style-type: disc;&quot;&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 5px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;有限无向图 G(V,E) 的 Euler 路径是指 G 的每一个边都只出现一次的路径。如果 G 有一条 Euler 路径，它就被称之 Euler 图。[注释 1]&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;定理：有且仅有两个确定的节点存在奇数自由度，其它的节点都有偶数自由度，那么该有限无向图为 Euler 图。【1】&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span style=&quot;font-size: 14px;text-align: justify;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.3362676056338028&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOIkOxz4M7ogc5hFjL70hofqbnDTfs1XTKb1vKW22Rlds3Vcfcg2tBgA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1136&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);&quot;&gt;&lt;em&gt;&lt;span style=&quot;text-align: justify;font-size: 12px;&quot;&gt;左图：有两个节点有奇数自由度的图像。右图：所有节点都有奇数自由度。&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;首先，让我们分清楚上面定理和理论中的新名词。&lt;/span&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;有限图（Finite graph）是指有限数量的边和节点的图。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;图可以为有向的或无向的，这也是图非常有趣的性质。你肯定看到过将 Facebook 和 Twitter 的作为有向图和无向图的例子。Facebook 朋友关系也许可以很简单地表示为一个无向图，因为如果 Alice 是 Bob 的朋友的话，Bob 也必须是 Alice 的朋友。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 20px;&quot;&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.8203017832647462&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOkcVH1LL6bg25KPtYT0ZZzBZq3uBmkcIMb0q1VASZy8HjuRKIl7vz5A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;729&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;而且也要注意「Patrick」节点，因为它没有连接一条边（edges）。虽然它还是图的一部分，但在这个案例中我们可以说该图没有连接上，这是个失联图（disconnected graph）（「John」、「Ashot」和「Beth」也是同样的，因为它们是和别的节点都是分离的）。在一个连接的图里没有到达不了的节点，这里必须在每一对节点之间有一条路。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;与 Facebook 的例子相反的是，如果 Alice 在 Twitter 上关注了 Bob，Bob 并不需要关注 Alice。所以「关注」关系必须是有向的连接，其表示节点（用户）有一条有向边（关注）连接到其它的节点（用户）。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 20px;&quot;&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.8858773181169758&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOQvd4dkzictIYzZVEnNhEu6D03yzsLYkfL7iaVxibmwfRLibp3TnXmIX53A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;701&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;现在，我们了解了什么是有限无向图，让我们再一次思考 Euler 图：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 20px;&quot;&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.7940026075619296&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOjnHiaBDW7qsvsSc92tkCVkEluicQqHTGu9JbMSEpvricaBVI2R5XLgDZw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;767&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;所以为什么我们最开始就讨论了哥尼斯堡七桥问题和 Euler 图呢？在接触答案之前接触一下问题背后的因素（节点、边、有向、无向）也能避免枯燥的理论方法。我们现在应该更关注于用电脑表示图，因为这是我们最大的兴趣。用电脑程序表示图将使我们设计出一个算法来跟踪图路径（graph path），这样就能发现它是不是 Euler 路径了。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;margin-bottom: 20px;&quot;&gt;&lt;strong&gt;图表征：前言&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;这是一个很沉闷的任务，要有耐心。记得数组和链表之间的战争吗？用如果你需要快速访问元素就用数组，如果你需要快速插入/删除元素就用链表等。我很难相信你会在像「怎样表示列表」这样的问题上纠结。当然，在图论中真正的表达是非常无聊的，因为首先你应该决定你将怎样确切地表达图。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;现在我们以一个树来开始。你肯定已经至少一次见到了二叉树（下面的不是二叉搜索树）。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.1519507186858315&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOGcGANWzSDZxqK2oQc4ebUiaIUbeoN1iaOVxsumwn3XDknuDgf5u0qgxA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;487&quot; style=&quot;width: 302px;height: 348px;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;因为它是由节点和边构成的，所以它就是图。你也要想到一般最常见的二叉树是怎样表示的（至少在教科书上）。&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 0px;font-size: 16px;color: rgb(62, 62, 62);line-height: inherit;background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;box-sizing: border-box;margin-right: 2px;margin-left: 2px;padding: 0.5em;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;struct BinTreeNode&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;{&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  T value; // don&lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&#39;t bother with template&amp;lt;&amp;gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  TreeNode* left;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  TreeNode* right;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;};&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;class BinTree&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;{&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;public:&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  // insert, remove, find, bla bla&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;private:&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  BinTreeNode* root_;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;这个对于已经非常熟悉树的人来说太详细了，但是我必须确保我们在同一阶段。（注意我们还是在用伪代码）。&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 0px;font-size: 16px;color: rgb(62, 62, 62);line-height: inherit;background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;box-sizing: border-box;margin-right: 2px;margin-left: 2px;padding: 0.5em;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;BinTreeNode&amp;lt;Apple&amp;gt;* root = new BinTreeNode&amp;lt;Apple&amp;gt;(&lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;Green&quot;&lt;/span&gt;);&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;root-&amp;gt;left = new BinTreeNode&amp;lt;Apple&amp;gt;(&lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;Yellow&quot;&lt;/span&gt;);&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;root-&amp;gt;right = new BinTreeNode&amp;lt;Apple&amp;gt;(&lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;Yellow 2&quot;&lt;/span&gt;);&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;BinTreeNode&amp;lt;Apple&amp;gt;* yellow_2 = root-&amp;gt;right;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;yellow_2-&amp;gt;left = new BinTreeNode&amp;lt;Apple&amp;gt;(&lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;Almost red&quot;&lt;/span&gt;);&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;yellow_2-&amp;gt;right = new BinTreeNode&amp;lt;Apple&amp;gt;(&lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;Red&quot;&lt;/span&gt;);&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;如果你不是新手，仔细的读上面的伪代码然后阅读以下图解：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.5650969529085873&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQO5iag6n9NTBbe4MXR09wOf5ZkEna1DJ8k1zc7p4Zbvhjqicb0SuibCibiaicA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1083&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;text-align: justify;&quot;&gt;当一个二叉树是简单的节点「集合」，每一个父节点有左子节点和右子节点的节点。二叉树在应用简单规则的时候是非常有意义的，例如允许快速的关键字查找。二叉搜索树（BST）按序储存他们的关键字。我们可以根据任何规则实现二叉树（即使它会根据不同的规则而有不同的名字，比如，min—heap 或者 max——heap），最常见的 BST 规则是它符合二项搜索性质（也是名字的由来），即「任意节点的键值必须比它左边子树的键值要大，比右边子树上的键值要小。「更大」是 BST 重要的本质，当你把它改成「比更大或一样」时，你的 BST 可以在插入新节点时解决复制键值得问题，除此之外它将只保留唯一键值的节点。你可以在网上找到很好的二项树的文章，我们不会提供一个二元搜索树的全面实现，但我们将展示一个简单的二元搜索树。&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.9159663865546218&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOiclOYX9eXOveQthiak7UJt28KMBlatVO02ESX8mpVQkstPBcDMziatia1g/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;595&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Airbnb&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;树是非常有用的数据结构，你也许还没有实现过树型结构，但你也许无意间用过它们。像你注意到的，二叉搜索树（Binary Search Tree）中有「搜索」，简单来说，所有需要快速查找的事，应该被放到二叉搜索树中。「应该」不意味着一定，在编程中最重要的事情是用合适的工具去解决问题。这里有很多案例可以看到简单链表（O(N) 复杂度）搜索相比 BST（O(logN) 复杂度）搜索更受欢迎。一般来说我们可以用一个库来实现一个 BST，但是在这个教程中我们可以重新发明我们自己的轮子（BST 是基本在所有多用途编程语言库都有实现）。接近了「一个真实世界例子」，这里是我们试着去处理的问题：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Airbnb 房源搜索一瞥：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.7807276302851525&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOzpW5gQ9CYTxOnR7Yqy1uWXKcwicd07JnSjIiaplnOkC69bWZUngk2W3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1017&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;怎样用滤波器基于词条尽可能快的搜索房源，这是一项很难的任务。如果我们考虑到 Airbnb 储存了几百万条表格的情况下，这个任务更难了。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.691437802907916&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOj0aKiaAKQbmF3NAZ8c9T9KPpdI1uIUS9gL8GWwH3M2pBNFv46OS8Fjw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;619&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;所以当用户搜索房源时，他们也许就会「接触」到四百万条数据库中的记录。的确，在网站主页上能够展现的「top listings」有限，而用户对浏览百万条列表也并不感兴趣。我没有任何 Airbnb 的分析记录, 但我们可以用编程语言中叫做「假设」的强大工具，所以我们假设单个用户查看最多 1 千个房源就会发现中意的房源。并且最重要的因子是即时用户的数量，因为它会影响数据结构、数据库和项目构架的选择。就像这看起来的那么明显，如果这里总共有 100 个用户，我们就不用去操心。相反，如果即时用户数量超过了百万级，我们必须去思考每一个决定到底对不对。每个决策都被正确的使用，这是为什么巨头们雇佣最好的人才，为提供卓越的服务而努力的原因（Google、Facebook、Airbnb、Netflix、Amazon、Twitter 和许多其他公司都在处理大量的数据；招聘正确的工程师来做正确的选择，为数百万实时用户每秒处理百万级字节的数据。这就是为什么我们码农纠结于可能遇见的数据结构，算法和问题处理，因为需要的是工程师有能力快速、有效地解决这样大的问题）。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;所以在 Airbnb 的案例里，用户浏览了他们的房源主页，Airbnb 试着去过滤房源来找出最适合的。我们怎样处理这个问题呢？（注意这个问题是后端的，所以我们不需要管前端或者网络流量或者 https over http 或者 Amazon EC2 over home cluster 等。首先，因为我们已经熟悉了程序员仓库中最强大的工具（在说假设而不是抽象），我们假设处理的是完全适配 RAM 的数据。然后你也可以假设我们的 RAM 是足够大的。足够大去支持，但这是多大呢？这是另一个非常好的问题。需要多大的内存来存储真正的数据呢？如果我们处理的是四百万单元的数据（还是假设），如果我们大概知道每一个单元的大小，之后我们可以简单地驱动需要的内存，就是 4M*sizeof(one_unit)。考虑下「房源」及其性质（properties），事实上，至少考虑一下处理这一问题必要的性质（一个「房源」是我们的单元）。我们需要用 C++结构伪代码来表示一些问题，你可以简单地将他们转化为一个 MongoDB 略图目标或者任何你想要的形式, 我们只讨论性质的名字和类别。（试着去想象这是在空间经济里用字位段或者位集合）&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 0px;font-size: 16px;color: rgb(62, 62, 62);line-height: inherit;background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;box-sizing: border-box;margin-right: 2px;margin-left: 2px;padding: 0.5em;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;// feel free to reorganize this struct to avoid redundant space&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;// usage because of aligning factor&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;// Remark &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;1&lt;/span&gt;: some of the properties could be expressed &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;as&lt;/span&gt; enums,&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;// bitset &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;is&lt;/span&gt; chosen &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;as&lt;/span&gt; multi-value enum holder.&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;// Remark &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;for&lt;/span&gt; most of the count values the maximum &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;16&lt;/span&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;// Remark &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;3&lt;/span&gt;: price value considered &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;as&lt;/span&gt; integer,&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;// int considered &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;4&lt;/span&gt; byte.&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;// Remark &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;4&lt;/span&gt;: neighborhoods property omitted &lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;// Remark &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;5&lt;/span&gt;: to avoid spatial queries, we&lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&#39;re &lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;// using only country code and city name, at this point won&#39;&lt;/span&gt;t consider &lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;// the actual coordinates (latitude &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;and&lt;/span&gt; longitude)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;struct AirbnbHome&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;{&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  wstring name; // wide string&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  uint price;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  uchar rating;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  uint rating_count;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  vector&amp;lt;string&amp;gt; photos; // list of photo URLs&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  string host_id;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  uchar adults_number;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  uchar children_number; // max &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;5&lt;/span&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  uchar infants_number; // max &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;5&lt;/span&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  bitset&amp;lt;&lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;3&lt;/span&gt;&amp;gt; home_type;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  uchar beds_number;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  uchar bedrooms_number;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  uchar bathrooms_number;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  bitset&amp;lt;&lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;21&lt;/span&gt;&amp;gt; accessibility;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  bool superhost;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  bitset&amp;lt;&lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;20&lt;/span&gt;&amp;gt; amenities;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  bitset&amp;lt;&lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;6&lt;/span&gt;&amp;gt; facilities;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  bitset&amp;lt;&lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;34&lt;/span&gt;&amp;gt; property_types;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  bitset&amp;lt;&lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;32&lt;/span&gt;&amp;gt; host_languages;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  bitset&amp;lt;&lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;3&lt;/span&gt;&amp;gt; house_rules;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  ushort country_code;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  string city;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;};&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span style=&quot;font-size: 14px;text-align: justify;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;text-align: justify;&quot;&gt;假设。上面的结构不是完美的（很显然），而且这里有很多假设或者不完整的地方，去再读一下免责声明。我只是看了下 Airbnb 的过滤器和应该存在的符合搜索查询的设计性产权表。这只是个例子。现在我们应该能计算每一个 AirbnbHome 对象会在内存中占用多少空间。name 是一个 wstring 来支持多语言的名字/头衔的，这个意味着每一个字符占了 2 字节（我们不想担心字符大小如果我们需要用其他的语言，但在 C++中，char 是 1 字节然后 wchar 是 2 字节）。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;text-align: justify;&quot;&gt;快速的看一下 Airbnb 的表可以让我们估计房源的名字可以占到最多 100 个字符（虽然最多的是 50 个左右，而不是 100 个），我们会认为 100 个字符是最多的量，这占了差不多 200 字节的内存。uint 是 4 字节，uchar 是 1 字节,ushort 是 2 字节（还是假设）。假设图片是在储存服务旁边，像 Amazon S3（目前据我所知，这个假设对于 Airbnb 来说是最可能实现的，当然这也是假设）而且我们有这些照片的 URL，而且考虑这里没有 URL 的标准尺寸的限制，但这事实上有一个众所周知的上线-2083 字符，我们将要用这个当成任何 URL 的最大尺寸。所以考虑到这个，平均每个房源有 5 张照片，这可以占到 10Kb 内存。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;text-align: justify;&quot;&gt;让我们重新想一下，一般储存用同样的基础 URL 服务，像 http(s)://s3.amazonaws.com/&amp;lt;bucket&amp;gt;/&amp;lt;object&amp;gt;，这样就是说，这里有一个基本的模式来建 URL 并且我们只需要储存真实照片的 ID，让我们说用了一些独特的 ID 生成器，可以为图片对象返回 20 字节长度的独特的字符 ID，看起来像 https://s3.amazonaws.com/some-know-bucket/。这提供了我们好多空间效率，所以为了 5 张照片储存字符 ID，我们只需要 100 字节内存。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;text-align: justify;&quot;&gt;同样的「手段」可以用 host_id 来做，就是说，房主的用户 ID，占了 20 字节的内存（实际上我们可以就让用户用数字 ID，但考虑到一些 DB 系统像 MongoDB 有非常详细的 ID 生成器，我们假设 20 字节的字符 ID 是「中位」长度，已经可以用很小的改动就能适用于大部分 DB 系统了。Mongo 的 ID 长度是 24 字节）。最后，我们将用一个最多 4 字节 32 位大小对象的位集合和一个比 32 位大的 64 位小的位集合一起作为一个 8 字节的独享。注意这是个假设。我们在这个例子里为了所有的表达了枚举的性质用了位集合，但位集合可以取不止一个值，换种说法这是一种多种选择的多选框。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.48148148148148145&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOAEd4YY70R2NLy4NxFdyllYORYeCfmVs6hC1tGyuu5BserRO7vNhBBQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;702&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;举例，每一个 Airbnb 房源都有一些便利工具列表，比如：「熨斗」、「洗衣机」、「电视」、「wifi」、「挂衣架」、「烟雾探测器」甚至「适用于笔记本电脑的书桌」等。这里也许有超过 20 种便利工具，我们用 20 这个数字是因为 Airbnb 网站上可以用 20 个选项过滤。如果一个房源有所有的上述便利措施（在截图中看），我们在对应的位集合的位置上标注 1 就好。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.5214180206794683&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQO6Jp9icV59VGgO1B3c3ySoZzvhE0Rttia9MqNA1yo7ibyjNKqpvVWpXfaA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;677&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 12px;color: rgb(136, 136, 136);&quot;&gt;&lt;em&gt;位集合（Bitset）允许储存 20 个不同数据而只用 20 个字节。&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;举例，检查一个房源有没有「洗衣机」：&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 0px;font-size: 16px;color: rgb(62, 62, 62);line-height: inherit;background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;box-sizing: border-box;margin-right: 2px;margin-left: 2px;padding: 0.5em;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;bool HasWasher(AirbnbHome* h)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;{&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;return&lt;/span&gt; h-&amp;gt;amenities[&lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;2&lt;/span&gt;];&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;}&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;或者更专业一点：&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 0px;font-size: 16px;color: rgb(62, 62, 62);line-height: inherit;background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;box-sizing: border-box;margin-right: 2px;margin-left: 2px;padding: 0.5em;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;const int KITCHEN = &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;0&lt;/span&gt;;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;const int HEATING = &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;1&lt;/span&gt;;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;const int WASHER = &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;2&lt;/span&gt;;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;//...&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;bool HasWasher(AirbnbHome* h)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;{&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;return&lt;/span&gt; (h != nullptr) &amp;amp;&amp;amp; h-&amp;gt;amenities[WASHER];&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;}&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;bool HasWasherAndKitchen(AirbnbHome* h)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;{&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;return&lt;/span&gt; (h != nullptr) &amp;amp;&amp;amp; h-&amp;gt;amenities[WASHER] &amp;amp;&amp;amp; h-&amp;gt;amenities[KITCHEN];&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;}&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;bool HasAllAmenities(AirbnbHome* h, const std::vector&amp;lt;int&amp;gt;&amp;amp; amenities)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;{&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  bool has = (h != nullptr);&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;for&lt;/span&gt; (const auto a : amenities) {&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    has &amp;amp;= h-&amp;gt;amenities[a];&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  }&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;return&lt;/span&gt; has;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;}&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;你可以修正代码或修复编译错误，我们只想强调该问题背后用向量表征特征的观念。同样的观念可以用在「入住守则」、「房间类型」和其它特征上。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;最后，对于国家编码和城市名。像上面代码注释中提到的一样（看标注），我们不会储存经纬度来避免地理-空间问题，我们储存国家代码和城市名字来缩小用地名搜索的范围（为了简介省略街名，原谅我）。国家代码可以被用两个字符，3 个字符或者 3 个数字来表示，我们会用 ushort 储存数字表达。不幸的是，城市比国家多了太多，所以我们不能使用「城市编码」，我们只会储存真实的城市名，保留平均 0 为 50 字节的城市名字和特别的名字。我们最好用一个附加的布尔变量来表示这是不是一个特别长的名字，所以我们将会加上附加的 32 字节来保证最终的结构大小。我们也假设在 64 位系统上工作，即使我们为 int 何 short 选择了非常紧凑的值。&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;box-sizing: border-box;margin-right: 2px;margin-left: 2px;padding: 0.5em;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;// Note the comments&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;struct AirbnbHome&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;{&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  wstring name; // &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;200&lt;/span&gt; bytes&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  uint price; // &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;4&lt;/span&gt; bytes&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  uchar rating; // &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;1&lt;/span&gt; byte&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  uint rating_count; // &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;4&lt;/span&gt; bytes&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  vector&amp;lt;string&amp;gt; photos; // &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;100&lt;/span&gt; bytes&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  string host_id; // &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;20&lt;/span&gt; bytes&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  uchar adults_number; // &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;1&lt;/span&gt; byte&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  uchar children_number; // &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;1&lt;/span&gt; byte&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  uchar infants_number; // &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;1&lt;/span&gt; byte&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  bitset&amp;lt;&lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;3&lt;/span&gt;&amp;gt; home_type; // &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;4&lt;/span&gt; bytes&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  uchar beds_number; // &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;1&lt;/span&gt; byte&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  uchar bedrooms_number; // &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;1&lt;/span&gt; byte&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  uchar bathrooms_number; // &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;1&lt;/span&gt; byte&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  bitset&amp;lt;&lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;21&lt;/span&gt;&amp;gt; accessibility; // &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;4&lt;/span&gt; bytes&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  bool superhost; // &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;1&lt;/span&gt; byte&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  bitset&amp;lt;&lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;20&lt;/span&gt;&amp;gt; amenities; // &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;4&lt;/span&gt; bytes&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  bitset&amp;lt;&lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;6&lt;/span&gt;&amp;gt; facilities; // &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;4&lt;/span&gt; bytes&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  bitset&amp;lt;&lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;34&lt;/span&gt;&amp;gt; property_types; // &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;8&lt;/span&gt; bytes&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  bitset&amp;lt;&lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;32&lt;/span&gt;&amp;gt; host_languages; // &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;4&lt;/span&gt; bytes, correct me &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;if&lt;/span&gt; I&lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&#39;m wrong&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  bitset&amp;lt;3&amp;gt; house_rules; // 4 bytes&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  ushort country_code; // 2 bytes&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  string city; // 50 bytes&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;};&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p style=&quot;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;text-align: justify;&quot;&gt;所以，420 字节加上 32 个多出的字节，若我们四舍五入到 500 字节。所以每一个对象「home」最多占 500 字节，并且对于所有房源列表，500 字节*4 百万=1.86Gb ~2Gb。我们在搭建结构时做了很多假设，让储存在内存中更便宜。无论我们对这数据做什么，我们需要至少 2Gb 内存。如果你无聊，忍着，我们刚开始。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;现在是任务最难的地方了，为这个问题选择合适的数据结构（来尽可能有效的过滤表）不是最难的任务。最难的是（对我而言）按照一系列滤波器搜索列表。如果只有一个搜索键（key）（即只有一个滤波器），我们可以很轻易地解决这个问题。假设用户只关心价格，我们需要的只是在给定的范围以价格下降的顺序找到 Airbnbhome 对象（合适的家）。如果我们要用二元搜索树来解决这个问题，则可按下图形式执行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.7823691460055097&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOSBhgZ7IcicjbUQ0S0ibBFToG99JfOXeLLeB8hmIeOD8QPibFAd2R7r5hg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;726&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;如果需要遍历所有的 4 百万个对象，这搜索树会长得很大很大。另外，需要占用的内存也会越来越多。这只是因为我们用了二元搜索数来存储对象，每一个树节点给它的左右子树两个额外的指针，加起来是每个子指针有 8 个额外的比特（假设是 64 位系统）。对于 400 百万节点它加起来就是 62Mb，对于 2Gb 对象的数据来说是很小的，但还是不能轻易地「忽略」。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;目前为止，上面展示的树表明了任何物品都可以很轻易地在 O（logN）复杂度内被找到。如果你对这些概念不熟悉，我们会在接下来解释清楚，或者跳过复杂度讨论的副章节。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;算法复杂度：我们在这里快速地简要介绍，在之后的文章「Algorithmic Complexity and Software Performance: the missing manual」我会进行详细的解释。在大部分情况里，找到一个算法的「大 O」复杂度是简单的。首先要注意到，我们总是考虑最差的情况，即：一个算法要最多算多少次才能产生一个合适的结果（用来解决问题）。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;假设一个有 100 个元素的未排序数列，要做多少次的比较才能让它找到任意的元素，这里也要考虑到需要的元素可能缺失的情况？它最多需要与匹配的数字比较 100 次才能发现，尽管有时候第一个在数列中的元素就是要找的数字（意味着单次比较就找到答案了），但我们只考虑最差的可能情况（元素可能丢失了或者在最后的位置）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.7841328413284133&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOyIO5a9uDOHXAmia78ngjpAaExvCn5myQWG7PvUFzsSO3nvdV0VVCPEw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;542&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;计算算法复杂度的重点是找到运算次数与输入规模之间的依赖关系，举例来说，上面的数列有 100 个元素，运算的次数也是 100，如果数列的数量（输入）增长到 1423，运算次数也会增长到 1423（最差的情况）。所以，输入和运算次数之间的关系在这里是非常清晰的，它也被叫做线性关系，运算次数和数列的增长一样快。增长是复杂度的关键，我们说在一个未排序的数列中搜索需要 O（N）次运算，来强调寻找它需要最多用 N 次运算，（甚至最多到 N 的常数倍数运算，比如 3N 次）。另一方面，访问数列上的任意元素只需要常数时间，比如 O（1）。这是因为数列的结构是一个连续结构，并且包含相同类型的元素，所以访问特定的元素只需要计算它与数列第一个元素的相对位置。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.7759103641456583&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQO9NG9S04TJbkLMuFnwiaPTsOSNOmeMYhmTWrYVAmoD1Wp9AFQiaJibC4Kg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;714&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;有一点非常明确，二元搜索树按排序顺序保存其节点。那么在二元搜索树中搜索元素的算法复杂度是多少呢？我们应该在最坏的情况下计算查找元素所需的操作次数。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;见上图，当我们开始在根部搜索时，第一次匹配可能会导致三种情况：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 5px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;（1）目标节点被发现；&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 5px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;（2）如果要找的值小于节点的值，则匹配将继续到节点的左子树；&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;（3）如果要找的值大于节点的值，则匹配将继续到节点的右子树。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;在每一步中我们都把节点的数量减半。在二元搜索树中查找元素所需的操作数等于树的高度。树的高度是最长路径上节点的数量。在这一案例中，高度是 4。所以高度等于 logN+1（底数为 2），搜索复杂度是 O（logN+1）=O（logN）。这意味着在 4 百万个节点里搜索元素需要 log1000000=~22 次比较（最差的情况）。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;回到树搜索的问题，二元搜索树中的元素搜索时间为 O（logN）。为什么不使用哈希表？哈希表有常数的访问时间，这使得在几乎任何地方使用哈希表都是合理的。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;在该问题中，我们必须考虑一个重要的需求，即执行范围搜索，如搜索价格区间在$80 到 $162 之间的房源。在二元搜索树的情况下，获取区间中所有节点很简单，只需对树执行顺序遍历，保存计数即可。而哈希表的计算稍微昂贵，在这种情况下使用坚持二元搜索树更好一些。尽管还存在另一个因素，使我们需要重新考虑哈希表：密度。价格不会「一直」上涨，大部分房源处于固定的价格区间内。截图中的柱状图显示了价格的真实分布，数百万房源处于同一区间（$18—$212），它们具备同样的平均价格。简单的数组可能起到很好的效果。假设数组的索引是价格，则我们能够在（几乎）常数时间内获取任意价格区间。如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;1.075642965204236&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOo3hgvPpSPqgCtgtkV6HOLaRnQicMzc6B1ygYFoV9PlnzSRZc8xS3y0w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;661&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;就像一个哈希表，我们通过房源的价格来匹配每一套房子。所有具有相同价格的房源都归入单独的二元搜索树。如果我们存储房源的 ID 而不是上面定义的完整对象（AirbnbHome 结构），也可以节省一些空间。最可能的情况是将所有房源的完整对象保存在哈希表，并将房源 ID 映射到房源的完整对象中，以及保存另一个哈希表（或更好的，一个数组），该哈希表将价格与房源 ID 进行映射。因此，当用户请求价格范围时，我们从价格表中获取房源 ID，将结果裁剪成固定大小（即分页，通常在一页上显示 10-30 个项目），然后使用每个房源 ID 获取完整的房源对象。请记得，要注意平衡。平衡对二元搜索树至关重要，因为它是在 O（logN）内完成树操作的唯一保证。当你按排序顺序插入元素时，二元搜索树不平衡的问题就会很明显，最终，树将变成连接列表，这显然会导致线性时间复杂度。现在假设我们所有的搜索树都是完美平衡的。再看看上面的图。每个数组元素代表一棵大树。如果我们改变这个树，变成图呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.9217391304347826&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOGNH4KGP3cHRicnejkK51p6lAR2a2xzlCSHshwPb9tBUJzzATHeYtd3A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;575&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;这是一个「更接近真实」的图。这个图展示了最隐蔽的数据结构和图，带领我们到了（下文）。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;图表征：进阶&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;图论的缺点是缺乏单独定义，这就是为什么你无法在库中找到 std::graph。我们已经尝试过表示「特别的」图 BST。重点在于，树是图，但图未必是树。最后一张示例图表明在一个抽象图下面有很多树，「价格 vs 房源」和一些节点的类型不同，价格只有价格值的图节点，表示满足特定价格的房源 ID（房源节点）的树。这很像混合数据结构，不同于我们在教科书示例中见到的简单图形。图表示的重点：不存在固定、「权威」的图表示结构（这与 BST 不同，后者用左／右子指针代表基于节点的特定表示，尽管你可以用一个数组表示 BST）。你可以用最便捷的方式表示一个图，重点在于你把它「看作」是图。「看图」的意思是使用适用于图的算法。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;N-ary 树更像是模拟一个图。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.7905027932960894&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOpCZ2Nh4PxOeO2RL5ys9DjraMOLBjhpiaGAX0EIEYSkUNKTdCZZG0Hqw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;716&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;首先，将 N-ary 树节点表示为：&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 0px;font-size: 16px;color: rgb(62, 62, 62);line-height: inherit;background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;box-sizing: border-box;margin-right: 2px;margin-left: 2px;padding: 0.5em;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;struct NTreeNode&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;{&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  T value;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  vector&amp;lt;NTreeNode*&amp;gt; children;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;};&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;该结构仅表示树的一个节点，完整的树如下所示：&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 0px;font-size: 16px;color: rgb(62, 62, 62);line-height: inherit;background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;box-sizing: border-box;margin-right: 2px;margin-left: 2px;padding: 0.5em;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;// almost pseudocode&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;span class=&quot;hljs-class&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;NTree&lt;/span&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;{&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;span class=&quot;hljs-title&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  void Insert(const T&amp;amp;);&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  void Remove(const T&amp;amp;);&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  // lines of omitted code&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;private:&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  NTreeNode* root_;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;};&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;该类别是围绕单个树节点 root_ 的抽象。我们可以用它构建任意大小的树。这是树的起点。如果要添加新的树节点，我们就要为其分配内存，将该节点添加至树的根节点处。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;图与 N-ary 树很像，只有细微的不同。我们来看一下。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.7856135401974612&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOSzNQWtYrkbH9LETZicibNftscTPL1IHVAibTAywE8GwABRrPNwVLuMWJg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;709&quot; style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 14px;text-align: justify;&quot;&gt;这是图吗？我认为，是的。但这幅图与前面的 N-ary 相同，只不过稍微旋转了一下。只要你看到一棵树，无论它是苹果树、柠檬树，还是二叉搜索树，你都可以确定它也是一张图。因此，通过设计图节点（图节点）结构，我们能够提出同样的结构：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 14px;text-align: justify;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 0px;font-size: 16px;color: rgb(62, 62, 62);line-height: inherit;background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;box-sizing: border-box;margin-right: 2px;margin-left: 2px;padding: 0.5em;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;struct GraphNode&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;{&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  T value;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  vector&amp;lt;GraphNode*&amp;gt; adjacent_nodes;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;};&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;这样可以创建图吗？还不够。看下面两幅图，找不同：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.4082901554404145&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOJBf2wjib06Ax6gmPxyia4ckumCOiaBQwaaVICyaYCZMykIuc4vd2H04UQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;965&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);font-size: 12px;&quot;&gt;&lt;em&gt;&lt;span style=&quot;color: rgb(136, 136, 136);text-align: justify;&quot;&gt;二者都是图&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;左侧的图没有可以「进入」的点（与其说是树，它更像森林），相反，右侧的图没有不可达的节点，听起来很熟悉。&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;color: rgb(136, 136, 136);&quot;&gt;如果图中任意两点都是连通的，那么该图被称作连通图。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;虽然图中不明显，但是我们假设价格不能互相连接，那么在「价格 vs 房源」图中并不是每对节点之间都有路径相连，这说明我们无法使用单个 GraphNode 结构构建图的例子，但是在很多案例中我们必须这样处理非连通图。看下面这个类别：&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 0px;font-size: 16px;color: rgb(62, 62, 62);line-height: inherit;background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;box-sizing: border-box;margin-right: 2px;margin-left: 2px;padding: 0.5em;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;&lt;span class=&quot;hljs-class&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;ConnectedGraph&lt;/span&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;{&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;span class=&quot;hljs-title&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  // API&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;private:&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  GraphNode* root_;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;};&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;类似围绕单个节点（根节点）构建的 N-ary 树，连通图也可以围绕根节点构建。树有「根」，即它们有起始点。连通图可以用带有根节点的树来表示（当然还有其他属性），不过要注意，实际的表示可能会随着算法或具体问题发生变化。但是，考虑基于节点的图本质，非连通图可以按照下面的方式来表示：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 0px;font-size: 16px;color: rgb(62, 62, 62);line-height: inherit;background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;box-sizing: border-box;margin-right: 2px;margin-left: 2px;padding: 0.5em;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;&lt;span class=&quot;hljs-class&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;DisconnectedGraphOrJustAGraph&lt;/span&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;{&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;span class=&quot;hljs-title&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  // API&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;private:&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  std::vector&amp;lt;GraphNode*&amp;gt; all_roots_;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;};&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;树状图可以清晰自然地表示 DFS/BFS 这样的图遍历。但是，高效路径追踪等需要不同的表示方法。还记得欧拉图吗？为了追踪图的「eulerness」（真实性），我们应该追踪图中的欧拉路径。这意味着遍历每个边一次就要访问所有节点；如果追踪结束后我们仍有未遍历的边，则该图没有欧拉路径，因此它不是欧拉图。更快的方法是：检查节点的度（假设每条边都保存了度），如定义所述，如果图的节点度是奇数，则它不是欧拉图。该检查的复杂度是 O(|V|)，其中 |V| 是图节点的数量。我们可以在插入新的边缘的同时追踪节点的奇数／偶数度，同时插入新的边以增加奇数／偶数度检查的复杂度到 O(1)。下面介绍图表示和返回路径的 Trace() 函数。&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 0px;font-size: 16px;color: rgb(62, 62, 62);line-height: inherit;background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;box-sizing: border-box;margin-right: 2px;margin-left: 2px;padding: 0.5em;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;// A representation of a graph &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;with&lt;/span&gt; both vertex &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;and&lt;/span&gt; edge tables&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;// Vertex table &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;is&lt;/span&gt; a hashtable of edges (mapped by label)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;// Edge table &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;is&lt;/span&gt; a structure &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;4&lt;/span&gt; fields&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;// VELO = Vertex Edge Label Only (e.g. no vertex payloads)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;span class=&quot;hljs-class&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;ConnectedVELOGraph&lt;/span&gt; {&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;span class=&quot;hljs-title&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    struct Edge {&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;        Edge(const std::string&amp;amp; f, const std::string&amp;amp; t)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;            : &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;from&lt;/span&gt;(f)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;            , to(t)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;            , used(false)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;            , next(nullptr)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;        {}&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;        std::string ToString() {&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;            &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;from&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot; - &quot;&lt;/span&gt; + to + &lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot; [used:&quot;&lt;/span&gt; + (used ? &lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;true&quot;&lt;/span&gt; : &lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;false&quot;&lt;/span&gt;) + &lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;]&quot;&lt;/span&gt;);&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;        }&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;        std::string &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;from&lt;/span&gt;;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;        std::string to;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;        bool used;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;        Edge* next;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    };&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    ConnectedVELOGraph() {}&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    ~ConnectedVELOGraph() {&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;        vertices_.clear();&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;for&lt;/span&gt; (std::size_t ix = &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;0&lt;/span&gt;; ix &amp;lt; edges_.size(); ++ix) {&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;            delete edges_[ix];&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;        }&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    }&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;public:&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    void InsertEdge(const std::string&amp;amp; &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;from&lt;/span&gt;, const std::string&amp;amp; to) {&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;        Edge* e = new Edge(&lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;from&lt;/span&gt;, to);&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;        InsertVertexEdge_(&lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;from&lt;/span&gt;, e);&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;        InsertVertexEdge_(to, e);&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;        edges_.push_back(e);&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    }&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;public:&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    void Print() {&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;for&lt;/span&gt; (auto elem : edges_) {&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;            std::cout &amp;lt;&amp;lt; elem-&amp;gt;ToString() &amp;lt;&amp;lt; std::endl;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;        }&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    }&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    std::vector&amp;lt;std::string&amp;gt; Trace(const std::string&amp;amp; v) {&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;        std::vector&amp;lt;std::string&amp;gt; path;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;        Edge* e = vertices_[v];&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;while&lt;/span&gt; (e != nullptr) {&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;            &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;if&lt;/span&gt; (e-&amp;gt;used) {&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;                e = e-&amp;gt;next;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;            } &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;else&lt;/span&gt; {&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;                e-&amp;gt;used = true;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;                path.push_back(e-&amp;gt;&lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;from&lt;/span&gt; + &lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;:-:&quot;&lt;/span&gt; + e-&amp;gt;to);&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;                e = vertices_[e-&amp;gt;to];&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;            }&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;        }&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;return&lt;/span&gt; path;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    }&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;private:&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    void InsertVertexEdge_(const std::string&amp;amp; label, Edge* e) {&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;        &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;if&lt;/span&gt; (vertices_.count(label) == &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;0&lt;/span&gt;) {&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;            vertices_[label] = e;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;        } &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;else&lt;/span&gt; {&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;            vertices_[label]-&amp;gt;next = e;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;        }&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    }&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;private:&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    std::unordered_map&amp;lt;std::string, Edge*&amp;gt; vertices_;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    std::vector&amp;lt;Edge*&amp;gt; edges_;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;};&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;注意 bug，bug 到处都是。该代码包含大量假设，比如标签，我们可以通过节点理解字符串标签，确保你可以将其更新成任意事物。接下来，是命名。如注释中所述，VELOGraph 仅适用于 Vertex Edge Label Only Graph。重点在于，该图表示包括一个将节点标签映射至节点关联边的表、一个包含与边相连的两个节点的边列表，和一个仅用于 Trace() 函数的 flag。查看 Trace() 函数实现，它使用边的 flag 来标记已经遍历过的边（在任意 Trace() 调用之后应该重置 flag）。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;示例：Twitter&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;另一种表示叫做相邻矩阵，它在有向图中有用，就像我们在 Twitter 关注图中所使用的那样。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.8299845440494591&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOXhM81ANzhP02jGUs9hkn0jBT1ic4mlYXCgia8BiaMYojrwKTFfoJ6MByA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;647&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);font-size: 12px;&quot;&gt;&lt;em&gt;有向图&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;推特案例中有 8 个节点，所以我们需要使用|V|x|V|的二维矩阵表征这个图（其中 |V|分别代表行数和列数）。如果从 v 到 u 有一条有向边，那么我们称矩阵的元素 [v][u] 为真，否则为假。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.777602523659306&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOiciatDHglBdVpM8oud5MGqkhcxia2csDicIpNZ8GktU4r33dEYpHaNl68w/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;634&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;如你所见，这是一个十分稀疏的矩阵，其中的值代表是否有单向连接路径。如果我们需要了解 Patrick 是否关注了 Bob 的推特，那么我们只需要查看矩阵中 [&quot;Patrick&quot;][&quot;Sponge Bob&quot;] 的值是不是等于 1。而要查看 Ann 推特的关注者，我需要获得「Ann」的整个列；同样查看 Sponge Bob 正在关注的人只需要查看「Sponge Bob」的行就行。此外，邻接矩阵（Adjacency matrix）可以用来描述无向图，它不会在 v 到 u 的边选择值「0 或 1」来表示是否有连接，它会同时设置两个方向的值都为 1，即 adj_matrix[v][u] = 1 和 adj_matrix[u][v] = 1。因此，无向图的邻接矩阵为对称矩阵。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;注意，在通常情况下我们在邻接矩阵中并不会只储存 0 和 1，我们可以储存一些更具信息的值，例如边权重等。最好的案例可能是带有距离信息的地图。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.406570841889117&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOfibdbibwB6BADMa7jtia5ficibGFuQ0d6WePYkQazvuPictud3gDkRj2JKgQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;974&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;上图表示了 Patrick 和 Sponge Bob 等人之间的距离（也称为加权图）。如果节点间没有没有直接路径，那么我们就把它设为无穷大，它既不意味着根本没有路径，也不意味着一定有路径。它可以在应用算法搜索两个节点间路径时定义。当然，我们还有更好的方法来储存节点和边之间的关系，如关联矩阵。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;text-align: justify;&quot;&gt;尽管邻接矩阵对推特关注关系有很好的表征，但将 3 亿用户（每月活跃用户）储存在矩阵中需要 300*300*1（百万字节/布尔值）的储存空间。也就是约有 82000Tb（Terabyte）或需要 1024 * 82000 Gb 的储存空间。BitBoard 可以帮助我们减少一些空间需求，大约可以降低到 10000Tb，但还是太大。如上所述，邻接矩阵稀疏要求我们提供比实际需求更多的空间，这也就是为什么边的列表映射到节点可能会很有用。重点是，邻接矩阵允许保持关注和不关注的信息，而我们需要的仅仅是知道如下内容：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;text-align: justify;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.39476678043230945&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQO6V0yrZu3R0cPv2qCo4A3j1CnHDL68mw3b0KwU4lthBVeUqJYIw4eOQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;879&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);font-size: 12px;&quot;&gt;&lt;em&gt;&lt;span style=&quot;color: rgb(136, 136, 136);text-align: justify;&quot;&gt;邻接矩阵与邻接列表&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;右图表示邻接列表（adjacency list），每个列表描述了图中的一组邻近节点。在图表中，我们突出了哈希表的用法，因为任何节点的访问复杂度都是 O（1）。而且对于邻近节点列表，我们并没有提到任何具体的数据结构，也不会从列表转化为向量。重点是，如果要确定 Patrick 是否关注 Liz，我们应该遍历哈希表中每一个元素（常数时间），而邻近矩阵需要查看每一个与 Liz 相关的元素（线性时间）。线性时间在这一点上并不是那么糟，因为我们经需要循环与 Patrick 相关的固定数目的节点。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;如果我们用空间复杂度表示推特，这需要 3 亿个哈希表记录，每个记录指向一个向量（选择向量以避免链表的左/右指针所产生的内存开销）。此外，虽然没有统计数据，但平均推特关注的人数是 707 个。所以如果我们考虑每个哈希表记录指向一个有 707 个用户 ID 的数组，且每个 ID 有 8 个字节，那么现在我们可以计算出储存空间约为 12TB。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;现在少很多了，但我们仍然不确定 12TB 是否是一个合理的数字。如果在 32Gb RAM 的专用服务器上一个月需要 30 美元，那么 12TB 加上一些控制服务器和备用服务器等（约需要额外两倍数量）核算下来需要 1500 台服务器，每月的成本达到了 45K 美元。这对于我们来说当然是难以接受的价格，但对于推特来说就非常便宜了。但推特需要提高响应的速度，即用户发的推文需要第一时间发送给关注的人。但理想的时间是多少？我们并不能作出任何假设和抽象，因此我们可以探讨一下现实世界产品系统的响应。以下是我们在推文时经常遇到情况。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.7898338220918866&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQO4Nh4JV8W5Rl6z2rbKlDoXSXbstaxztfSMcpsuhNdA151ks5Hpw6PGg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1023&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;同样我们并不知道一条推文需要多少时间才能发送到所有的关注者，但公开的数据表明每天约有 500 亿条推文。所以经验看来一般推文的时间在 5 秒内，同时我们还要注意哪些拥有超百万粉丝的名人，推特可能会分配更多的资源来推送名人「超级有用」的内容。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;为了解决推文的分发问题，我们并不需要以下的图，我们需要关注者的列表。前面的哈希表和一些列表允许我们高效地搜索特定关注者关注的所有用户，但它并不允许高效地搜索关注特定用户所有关注者，因此我们必须扫描所有的哈希表键值。这也就是为什么我们应该构建另一个图，它与以下我们展示的图对称相反。这个新的图由包含 3 亿个节点的哈希表组成，每个节点指向相邻节点的猎鸟（结构相同），但是这次相邻节点的列表将表示关注者。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.7905844155844156&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOLRDOfV73LExFVwBxGCYx1nln8HT3lYOrhDSdWGCNONLB3ax2XwVFkA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;616&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;因此基于该示例，无论何时 Liz 发推特，Spone Bob 和 Ann 都必须在他们的时间线上找到特定的推文。一项普遍使用的解决该问题的技术是为每个用户的时间线保持独立的结构。假设推特有 3 亿的用户，我们可以假定至少存在 3 亿个时间线（每人一个）。简单的说，无论何时发推，我们应该找到他的关注者并且更新他们的时间轴，时间线可以被表征成连结串列或平衡树（以推文的日期作为节点关键字）。&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;box-sizing: border-box;margin-right: 2px;margin-left: 2px;padding: 0.5em;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;// &lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&#39;author&#39;&lt;/span&gt; represents the User object, at this point we are interested only &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;in&lt;/span&gt; author.id&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;//&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;// &lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&#39;tw&#39;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;is&lt;/span&gt; a Tweet object, at this point we are interested only &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&#39;tw.id&#39;&lt;/span&gt; &lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;void DeliverATweet(User* author, Tweet* tw)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;{&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  // we assume that &lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&#39;tw&#39;&lt;/span&gt; object &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;is&lt;/span&gt; already stored &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;in&lt;/span&gt; a database&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  // &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;1.&lt;/span&gt; Get the list of use&lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;r&#39;s followers (author of the tweet)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  vector&amp;lt;User*&amp;gt; user_followers = GetUserFollowers(author-&amp;gt;id);&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  // 2. insert tweet into each timeline&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  for (auto follower : user_followers) {&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    InsertTweetIntoUserTimeline(follower-&amp;gt;id, tw-&amp;gt;id);&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  }&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;}&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;这仅仅是基本思想，从真实的时间线表征抽象得到。当然如果使用多线程，我们可以将实际的传送过程变得更快。这对于大规模案例非常关键，因为对于百万级别的关注者，接近列表终点的用户在处理上通常慢于接近列表前面的用户。以下的伪代码将尝试解释该多线程传送思想。&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;box-sizing: border-box;margin-right: 2px;margin-left: 2px;padding: 0.5em;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;// Warning: a bunch of pseudocode ahead&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;void RangeInsertIntoTimelines(vector&amp;lt;long&amp;gt; user_ids, long tweet_id)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;{&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;for&lt;/span&gt; (auto id : user_ids) {&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    InsertIntoUserTimeline(id, tweet_id);&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  }&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;}&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;void DeliverATweet(User* author, Tweet* tw)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;{&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  // we assume that &lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&#39;tw&#39;&lt;/span&gt; object &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;is&lt;/span&gt; already stored &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;in&lt;/span&gt; a database&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  // &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;1.&lt;/span&gt; Get the list of use&lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;r&#39;s (tweet author&#39;&lt;/span&gt;s) followers&lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&#39;s ids&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  vector&amp;lt;long&amp;gt; user_followers = GetUserFollowers(author-&amp;gt;id);&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  // 2. Insert tweet into each timeline in parallel&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  const int CHUNK_SIZE = 4000; // saw this somewhere&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  for (each CHUNK_SIZE elements in user_followers) {&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    Thread t = ThreadPool.GetAvailableThread(); // somehow&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    t.Run(RangeInsertIntoTimelines, current_chunk, tw-&amp;gt;id);&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  }&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;}&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;因此无论关注者在什么时候刷新推特，他们都能收到新的推文。当然，我们仅仅讨论了 Airbnb 或推特面临问题的冰山一角，还有很多问题需要各位读者共同探讨。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.7765640516385303&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQO7icX64mjQrYaHoTkEeO9mH0E1fbiaWSib8xRzmSA7hCxc5HfUM7YMcbOw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1007&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;推特的推文分发问题关键在于对图的利用，即使我们不使用任何的图算法，仅用图表示。而真正的图算法是相当复杂的。在使用图表示之前，我们讨论了 Airbnb 房源和高效过滤的问题，主要困难在于当过滤器关键字超过一个的时候，就无法高效地过滤家园。那么使用图算法能带来什么好处吗？值得一试。我们可以将每个过滤器表示成一个独立的节点，每个过滤器可以代表特定的属性（价格、城市名、国家、生活设施等）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.7718518518518519&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOt4dvmhm91F1f3OXVmtibF0BR1RC0l3xLkFIzcSlMY3LR66wbrQpNcfg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;675&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);font-size: 12px;&quot;&gt;&lt;em&gt;Airbnb 过滤器节选&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;我们还可以通过添加高层的节点，例如「生活设施」节点来连接所有生活设施类的节点（WiFi、电视等），使该集合更容易理解。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.7355021216407355&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOxzX9iak4H9fHclhNM7r3EteSJBZ0mmwzLSUZhLCkUe9sxtr0OLbceIg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;707&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);font-size: 12px;&quot;&gt;&lt;em&gt;拥有高级类型的 Airbnb 过滤器&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;现在，我们可以将 Airbnb 房源（home）表示成节点，然后将这些节点和对应的属性节点连接起来。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.7633053221288515&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOmiajJHTEicSC0ibphnkqKyg7kOmfpwCRiaGV4mEjROtXwGD7uL9C9EU3lg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;714&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;这个插图的微妙变化使它更像一种特殊类型的图形，称为偶图（bipartite graph）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.8094512195121951&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQO2Il9iaPcIYXKCMJXmL9G1Vb0P5Yh0HdFxZT8UpAoZyLVicY4O5l2orew/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;656&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);font-size: 12px;&quot;&gt;&lt;em&gt;节点的数量比看起来的更多&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;偶图的节点可以分为两个不相交和独立的集合，这样每个边就将一个集合的节点连接到另一个集合的节点。在我们的例子中，其中一个表征过滤器（我们用 F 表示），另一个表征房源集合（H）。例如，如果有价值 62 美元的 10 万个房源，则标记为「$ 62」的价格节点将具有 10 万条边入射到每个房源的节点。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;如果我们测量空间复杂度的最坏情况，即每个家庭具有满足所有过滤器的所有属性，则要存储的边总量将为 7 万×400 万。如果我们将每个边表示为一个 ID 对：{filter_id; home_id}，如果我们重新考虑 ID，并使用 4 个字节（int）数字 ID 为过滤器 ID，8 个字节（long）ID 为房源使用的 ID，那么每个边缘至少需要 12 个字节。&lt;/span&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;因此，存储 7 万* 400 万个 12 字节值需要大约 3TB 的内存。我们在计算中犯了一个小错误，由于在 Airbnb 中有 65,000 个活跃城市，因此过滤器的数量约为 7 万个（统计数据）。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;好消息是，同一个家庭不能位于不同的城市。也就是说，我们实际与城市边配对的数量是 400 万（每个家庭位于一个城市），因此我们将计算 70k-65k = 5000 个过滤器，这意味着我们需要 5000 * 400 万* 12 个字节的内存，小于 0.3Tb。听起来不错。但是什么给了我们这个偶图？最常见的网站/移动请求将由多个过滤器组成，例如：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 0px;font-size: 16px;color: rgb(62, 62, 62);line-height: inherit;background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;box-sizing: border-box;margin-right: 2px;margin-left: 2px;padding: 0.5em;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;house_type: &lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;entire_place&quot;&lt;/span&gt;,&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;adults_number: &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;2&lt;/span&gt;,&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;price_range_start: &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;56&lt;/span&gt;,&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;price_range_end: &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;80&lt;/span&gt;,&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;beds_number: &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;2&lt;/span&gt;,&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;amenities: [&lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;tv&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;wifi&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;laptop friendly workspace&quot;&lt;/span&gt;],&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;facilities: [&lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;gym&quot;&lt;/span&gt;]&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;因此我们只需要找到上述所有「过滤器」的节点，并处理与其邻近所有「房源」的节点。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;图算法&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;或许，任何用图执行的计算过程都可以分类为「图算法」，你可以实现一个输出图的所由节点的函数，然后将其命名为「&amp;lt;你的名字&amp;gt;的节点输出算法」。但真正可怕的是教科书中列出的图算法：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-2&quot; style=&quot;list-style-type: disc;&quot;&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 5px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Coloring&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 5px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Hopcroft–Karp&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 5px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Hungarian&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 5px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Prüfer coding&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 5px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Tarjan&#39;s off-line least common ancestors&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Topological sort&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;我们尝试使用偶图匹配算法，例如 Hopcroft–Karp 算法到 Airbnb 房源过滤问题：&lt;/span&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;color: rgb(136, 136, 136);&quot;&gt;给定一个 Airbnb 房源（H）的偶图和过滤器（F），其中 H 的每个节点可以多于 F 的一个相邻节点（共享一个公共边）。寻找 H 的由节点构成的子集，该子集和 F 的子集的节点相邻。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;问题的定义很难理解，并且目前我们还不确定 Hopcroft-Karp 算法可以解决该问题，但我们可以在求解的过程中学到很多图算法的关键思想。这个过程不会很短，需要你有耐心。Hopcroft-Karp 算法以二分图为输入，并生成最大基数匹配的输出，该输出是一个包含尽可能多的边的集合，其中没有任何两条边共享同一个端点。熟悉该算法的读者已经注意到，这并不能解决我们的问题，因为匹配过程的条件是没有任何两条边共享同一个节点。我们来看一个示例展示，其中只有 4 个过滤器和 8 个房源（为简单起见）。这些房源用字母 A 到 H 标记，过滤器是随机选择的。从 A 到 H 的所有房源都是 50 美元每晚的价格和一张床，但很少有供应 WiFi 和/或电视的。因此以下的示例过程将尝试找到满足四个条件的房源（拥有 4 个过滤器）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.8059855521155831&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOicNOHD0AAB4k3IOOId3hs5lapD1Cicl9AG2n8uibpqGjicqkqQ0DVpnWeg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;969&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;对该问题的求解需要找到和特定的房源连接的所有边，该房源节点和相同的过滤器子集关联。而 Hopcroft-Karp 算法将移除公共端点的边，并生成和两个子集都关联的边。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;查看上图，我们需要寻找的是房源 D 和 G，它们满足了所有四个过滤器值。我们真正需要的是找到共享端点的所有匹配边。我们可以为该方法设计一个算法，但其处理时间可以说和用户需求并不相关（用户需求=快速）。也许创建一个平衡的多分类关键字的二值搜索树会更快，差不过类似于数据库索引文件，其将主关键字和外键映射到满足条件的记录集合。我们将在另一篇文章中独立讨论平衡二值搜索树和数据库索引，到时会再次返回到 Airbnb 房源问题上。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Hopcroft-Karp 算法（以及很多其它算法）都基于 DFS（深度优先搜索）和 BFS（广度优先搜索）的图遍历算法。说实话，这里介绍 Hopcroft-Karp 算法的真正原因是逐渐转换到图遍历算法的讨论，相比从二值树开始讨论会更好。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;二值树遍历非常漂亮，这大多是因为它们的递归本质。有三种基本的遍历方式称为中序（in-order）、后序（post-order）和前序（pre-order）。如果你曾经遍历过连结串列，这些概念是很好懂的。在连结串列中，你只需要输出当前节点的值（在下方的代码中称为 item），并继续到达下一个节点。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 0px;font-size: 16px;color: rgb(62, 62, 62);line-height: inherit;background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;box-sizing: border-box;margin-right: 2px;margin-left: 2px;padding: 0.5em;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;// struct ListNode {&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;//   ListNode* next;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;//   T item;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;// }; &lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;void TraverseRecursive(ListNode* node) // starting node, most commonly the list &lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&#39;head&#39;&lt;/span&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;{&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;if&lt;/span&gt; (!node) &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;return&lt;/span&gt;; // stop&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  std::cout &amp;lt;&amp;lt; node-&amp;gt;item;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  TraverseRecursive(node-&amp;gt;next); // recursive call&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;}&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;void TraverseIterative(ListNode* node)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;{&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;while&lt;/span&gt; (node) {&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    std::cout &amp;lt;&amp;lt; node-&amp;gt;item;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    node = node-&amp;gt;next;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  }&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;}&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;这和二值树几乎相同，输出节点的值，然后到达下一个节点，但在这里，「下一个」指的是两个节点，左节点和右节点。因此你需要分别到达左节点和右节点。不过你有三个不同的选择：&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-2&quot; style=&quot;list-style-type: disc;&quot;&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 5px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;输出节点值，然后到达左节点，再到达右节点。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 5px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;到达左节点，然后输出节点值，再到达右节点。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;到达左节点，然后到达右节点，再输出节点值。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;box-sizing: border-box;margin-right: 2px;margin-left: 2px;padding: 0.5em;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;// struct TreeNode {&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;//   T item;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;//   TreeNode* left;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;//   TreeNode* right;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;// }&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;// you cann &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;pass&lt;/span&gt; a callback function to do whatever you want to do &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;with&lt;/span&gt; the node&lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&#39;s value&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;// in this particular example we are just printing its value.&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;// node is the &quot;starting point&quot;, basically the first call is done with the &quot;root&quot; node&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;void PreOrderTraverse(TreeNode* node)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;{&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  if (!node) return; // stop&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  std::cout &amp;lt;&amp;lt; node-&amp;gt;item;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  PreOrderTraverse(node-&amp;gt;left); // do the same for the left sub-tree&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  PreOrderTraverse(node-&amp;gt;right); // do the same for the right sub-tree&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;}&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;void InOrderTraverse(TreeNode* node)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;{&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  if (!node) return; // stop&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  InOrderTraverse(node-&amp;gt;left);&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  std::cout &amp;lt;&amp;lt; node-&amp;gt;item;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  InOrderTraverse(node-&amp;gt;right);&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;}&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;void PostOrderTraverse(TreeNode* node)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;{&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  if (!node) return; // stop&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  PostOrderTraverse(node-&amp;gt;left);&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  PostOrderTraverse(node-&amp;gt;right);&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  std::cout &amp;lt;&amp;lt; node-&amp;gt;item;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;}&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.7684630738522954&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOicBkFk4TAlBSJeg1tdnCoH1AcYPwJ0CStyyCexSME8f56iaJrcZvhVfw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1002&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);font-size: 12px;&quot;&gt;&lt;em&gt;前序遍历的细节追踪&lt;/em&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.6005747126436781&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOP0ibeBWf5fg6t3dyEicniaxMgDeVia1icE3zQicnOcC7mfdgKR7pDH2iaYV4A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;696&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;很明显递归函数的形式很优雅，虽然其计算成本很高。每次我们递归地调用一个函数，也就意味着我们调用了一个完全的新函数（如上图所示）。其中「新」的意思是函数变量和局域变量需要分配其它的堆栈内存空间。这正是为什么递归调用的成本如此高（额外的堆栈空间分配和多函数调用）和危险（堆栈溢出），很明显地使用迭代实现会更好。在关键任务（航空、NASA 探测车等）的系统编程中，递归调用是完全禁止的。&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;实例：Netflix&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;假设我们要将所有 Netflix 电影存储在二进制搜索树中，并将电影标题作为排序键。所以无论何时用户输入类似「Inter」的内容，我们都会返回一个以「Inter」开头的电影列表，举例，[「Interstellar」,「Interceptor」,「Interrogation of Walter White」]。如果我们将返回标题中包含「Inter」的所有电影（不仅仅是以「Inter」开头的电影）那就太好了，并且该列表将根据电影的评分或与该特定用户相关的内容进行排序（喜欢惊悚片比戏剧更多）。这个例子的重点在于对 BST 进行有效的范围查询，但像往常一样，我们不会深入探讨其余部分。基本上，我们需要通过搜索关键字进行快速查找，然后获得按关键字排序的结果列表，这很可能应该是电影评级和/或基于用户个性化数据的内部排名。我们会尽可能地坚持 KISK 原则（Keep It Simple，Karl）。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;「KISK」或「让我们保持它的简单」或「为了简单起见」，这是教程编写者从真实问题中抽象出来的超级借口，并通过在伪代码中引入「abc」简单示例及其解决方案来做出大量假设，并且这些答案在很老的笔记本电脑上也能工作。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;这个问题可以很容易地应用到亚马逊的产品搜索上，因为我们通常通过输入描述我们兴趣的文本（如「图算法」）来搜索亚马逊的东西，并根据产品的评分获得结果（我没有在亚马逊的个性化结果中体验过搜索结果，但我很确定亚马逊也是这样做的）。所以，为了公平将这个子标题改为...&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Netflix 和亚马逊。Netflix 提供电影服务，亚马逊提供产品，我们会将它们命名为「物品」，所以每当你阅读「物品」时，都会想到 Netflix 中的电影或亚马逊的任何 [合格] 产品。这些物品最常用的是解析其标题和描述（我们只处理标题），所以如果一个操作员（通常是一个人通过管理仪表板将项目的数据插入 Netflix / Amazon 数据库）插入新项目到数据库中，它的标题正在被一些「ItemTitleProcessor」处理以产生关键字。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.7556818181818182&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOGumqZTmfBG7gJychoBd8scvX2KicgA0RyCghgIXckZvXQiaEybulZDTQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;704&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 12px;&quot;&gt;&lt;em&gt;&lt;span style=&quot;color: rgb(136, 136, 136);&quot;&gt;我知道这并不是最好的图例（而且有一个书写错误）&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;每一个物品都有专属 ID，这个 ID 也链接到了标题之中的关键字。这也是搜索引擎在爬全世界的网站时做的。他们分析每个文档的内容，对其进行标记（将其分解为更小的实体和单词）并添加到表中，该表将每个标记（词）映射到标记已被「看到」的文档标识（网站）。因此，无论何时搜索「hello」，搜索引擎都会获取映射到关键字「hello」的所有文档（实际情况非常复杂，因为最重要的是搜索相关性，这就是为什么谷歌搜索非常棒）。所以 Netflix /亚马逊的类似表格可能看起来像这样（再次，在阅读物品时想一想电影或产品）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.7411598302687411&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOibJ0nbHoyNssrC4W6NpE3coERCF0EnVVY9MEpb1VAP9CQw6oxBDVKjQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;707&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);font-size: 12px;&quot;&gt;&lt;em&gt;倒排索引&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;哈希表，再提一次。是的，我们将为此倒排索引（索引结构存储来自内容的映射）保留哈希表。哈希表会将关键字映射到物品的 BST。为什么选择 BST？因为我们希望保持它们的排序并同时提供连续排序的部分（响应前端请求），例如一次请求（分页）中的 100 个物品。这并不能说明 BST 的强大功能，但假设我们还需要在搜索结果中进行快速查找，例如，你需要关键字为「机器」的所有 3 星电影。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.7955465587044535&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQO9zAaI19UGZqBxTBvnQjOn2AFn0icHicNWsrUgPicHOJLTU8X3oeoMibcow/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;988&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;请注意，可以在不同的树中复制物品，因为通常可以使用多个关键字找到物品。我们将使用如下面定义的物品进行操作：&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;box-sizing: border-box;margin-right: 2px;margin-left: 2px;padding: 0.5em;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;// Cached representation of an Item&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;// Full Item object (&lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;with&lt;/span&gt; title, description, comments etc.) &lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;// could be fetched &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;from&lt;/span&gt; the database&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;struct Item&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;{&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  // ID_TYPE &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;is&lt;/span&gt; the type of Item&lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&#39;s unique id, might be an integer, or a string&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  ID_TYPE id;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  int rating;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;};&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;每次将新物品插入数据库时，其标题都将被处理并添加到大型索引表中，该表将关键字映射到物品。可能有许多物品共享相同的关键字，因此我们将这些物品保存在按照评分排序的 BST 中。当用户搜索某个关键字时，他们会得到按其评分排序的物品列表。我们如何从排序的树中获取列表？通过按顺序遍历。&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 0px;font-size: 16px;color: rgb(62, 62, 62);line-height: inherit;background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;box-sizing: border-box;margin-right: 2px;margin-left: 2px;padding: 0.5em;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;// this &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;is&lt;/span&gt; a pseudocode, that&lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&#39;s why I didn&#39;&lt;/span&gt;t bother &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;const&amp;amp;&quot;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&#39;s and &quot;std::&quot;&#39;&lt;/span&gt;s&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;// though it could have look better, forgive me C++ fellows&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;vector&amp;lt;Item*&amp;gt; GetItemsByKeywordInSortedOrder(string keyword)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;{&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  // assuming IndexTable &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;is&lt;/span&gt; a big hashtable mapping keywords to Item BSTs&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  BST&amp;lt;Item*&amp;gt; items = IndexTable[keyword]; &lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  // suppose BST has a function InOrderProduceVector(), which creates a vector &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;and&lt;/span&gt; &lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  // inserts into it items fetched via &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;in&lt;/span&gt;-order traversing the tree&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  vector&amp;lt;Item*&amp;gt; sorted_result = items.InOrderProduceVector();&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;return&lt;/span&gt; sorted_result;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;}&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;这里是一种 InOrderProduceVector() 实现：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-size: 14px;text-align: justify;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;pre style=&quot;box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 0px;font-size: 16px;color: rgb(62, 62, 62);line-height: inherit;background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;box-sizing: border-box;margin-right: 2px;margin-left: 2px;padding: 0.5em;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;template &amp;lt;typename BlaBla&amp;gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;span class=&quot;hljs-class&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;BST&lt;/span&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;{&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;span class=&quot;hljs-title&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  // other code ...&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  vector&amp;lt;BlaBla*&amp;gt; InOrderProduceVector()&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  {&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    vector&amp;lt;BlaBla*&amp;gt; result;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    result.reserve(&lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;1000&lt;/span&gt;); // magic number, reserving a space to avoid reallocation on inserts&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    InOrderProduceVectorHelper_(root_, result); // passing vector by reference&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;return&lt;/span&gt; result;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  }&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;protected:&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  // takes a reference to vector&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  void InOrderProduceVectorHelper_(BSTNode* node, vector&amp;lt;BlaBla*&amp;gt;&amp;amp; destination)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  {&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;if&lt;/span&gt; (!node) &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;return&lt;/span&gt;;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    InOrderProduceVectorHelper_(node-&amp;gt;left, destination);&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    destination.push_back(node-&amp;gt;item);&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    InOrderProduceVectorHelper_(node-&amp;gt;right, destination);&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  }&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;private:&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  BSTNode* root_;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;};&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span style=&quot;font-size: 14px;text-align: justify;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;text-align: justify;&quot;&gt;但是呢，我们首先需要最高评价的物品，来替换掉按顺序遍历生成最低评级的物品。这是因为它的性质，是从低到高的顺序遍历物品，「自下而上」。为了得到我们想要的东西，即列表按降序而不是升序排列，我们应该仔细查看顺序遍历实现。我们所做的是通过左节点，然后打印当前节点的值和通过右边的节点。当我们第一次通过左节点时，这就是为什么我们首先获得了「最左」节点（最左节点），这是具有最小值的节点。因此，简单地将实现更改为首先通过正确的节点将导致我们按照列表的降序排列。我们会像其他人一样将其命名，这是一种逆序的遍历。让我们更新上面的代码（引入单个列表、警告、错误）：&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;pre style=&quot;box-sizing: border-box;margin-top: 0px;margin-bottom: 0px;padding: 0px;font-size: 16px;color: rgb(62, 62, 62);line-height: inherit;background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;box-sizing: border-box;margin-right: 2px;margin-left: 2px;padding: 0.5em;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;// Reminder: this &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;is&lt;/span&gt; pseudocode, no bother &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;const&amp;amp;&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;std::&quot;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;or&lt;/span&gt; others&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;// forgive me C++ fellows&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;template &amp;lt;typename BlaBla&amp;gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;span class=&quot;hljs-class&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;BST&lt;/span&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;{&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;span class=&quot;hljs-title&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  // other code ...&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  vector&amp;lt;BlaBla*&amp;gt; ReverseInOrderProduceVector(int offset, int limit)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  {&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    vector&amp;lt;BlaBla*&amp;gt; result;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    result.reserve(limit);&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    // passing result vector by reference&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    // &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;and&lt;/span&gt; passing offset &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;and&lt;/span&gt; limit&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    ReverseInOrderProduceVectorHelper_(root_, result, offset, limit);&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;return&lt;/span&gt; result;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  }&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;protected:&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  // takes a reference to vector&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  // skips &lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&#39;offset&#39;&lt;/span&gt; nodes &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;and&lt;/span&gt; inserts up to &lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&#39;limit&#39;&lt;/span&gt; nodes&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  void ReverseInOrderProduceVectorHelper_(BSTNode* node, vector&amp;lt;BlaBla*&amp;gt;&amp;amp; destination, int offset, int limit)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  {&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;if&lt;/span&gt; (!node) &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;return&lt;/span&gt;;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;if&lt;/span&gt; (limit == &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;return&lt;/span&gt;;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    --offset; // skipping current element&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    ReverseInOrderProduceVectorHelper_(node-&amp;gt;right, destination, offset, limit);&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;if&lt;/span&gt; (offset &amp;lt;= &lt;span class=&quot;hljs-number&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;0&lt;/span&gt;) { // &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;if&lt;/span&gt; skipped enough, insert&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;      destination.push_back(node-&amp;gt;value);&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;      --limit; // keep the count of insertions&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    }&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    ReverseInOrderProduceVectorHelper_(node-&amp;gt;left, destination, offset, limit);&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  }&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;private:&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  BSTNode* root_;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;};&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;// ... other possibly useful code&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;// this &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;is&lt;/span&gt; a pseudocode, that&lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&#39;s why I didn&#39;&lt;/span&gt;t bother &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&quot;const&amp;amp;&quot;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&#39;s and &quot;std::&quot;&#39;&lt;/span&gt;s&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;// though it could have look better, forgive me C++ fellows&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;vector&amp;lt;Item*&amp;gt; GetItemsByKeywordInSortedOrder(string keyword, offset, limit) // pagination using offset &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;and&lt;/span&gt; limit&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;{&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  // assuming IndexTable &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;is&lt;/span&gt; a big hashtable mapping keywords to Item BSTs&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  BST&amp;lt;Item*&amp;gt; items = IndexTable[keyword]; &lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  // suppose BST has a function InOrderProduceVector(), which creates a vector &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;and&lt;/span&gt; &lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  // inserts into it items fetched via reverse &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;in&lt;/span&gt;-order traversing the tree&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  // to get items &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;in&lt;/span&gt; descending order (starting &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;from&lt;/span&gt; the highest rated item)&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  vector&amp;lt;Item*&amp;gt; sorted_result = items.ReverseInOrderProduceVector(offset, limit);&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;return&lt;/span&gt; sorted_result;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;}&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p style=&quot;text-align: left;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);font-size: 12px;&quot;&gt;&lt;em&gt;通过排序关键词查找电影或产品&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;这就对了，我们可以非常快速地提供物品搜索结果。如上所示，反转索引在搜索引擎中最常用，例如谷歌搜索。虽然谷歌搜索引擎非常复杂，它确实利用了某些简单的思想，来将搜索查询匹配到文档上，并尽可能快速地提供结果。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;我们使用了树遍历来以分类排序提供结果。在这里，前序/顺序/后序遍历可能太多了，但有时候我们也需要应用其它类型的遍历。让我们来解决这个著名的编程面试问题：「如何按等级输出一个二值树等级？」&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 20px;&quot;&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.7601683029453016&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOCUM2dlECuUf3G3SWsgudIAnI9ibicX8qO0IRGEnEgJkBH4YIiadibFg4sw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;713&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;DFS vs. BFS&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;如果你对这个问题不熟悉，想想你在遍历树的时候可用于存储节点的数据结构。如果对比分层遍历树和上文介绍的其他方式（前序/顺序/后序遍历），就会发现两种主要的图遍历方法：深度优先搜索（DFS）和广度优先搜索（BFS）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.8291347207009858&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOuJwvjo6oia7CkDGMwq07HqmasXDqhgZ9sU3yLqMf9e0QuicplsK7Qfnw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;913&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;深度优先搜索寻找最远的节点，广度优先搜索先寻找最近的节点。&lt;/span&gt;&lt;/p&gt;&lt;ul class=&quot; list-paddingleft-2&quot; style=&quot;list-style-type: disc;&quot;&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 5px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;深度优先搜索——更多动作，更少思考。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;广度优先搜索——在进一步行动之前先仔细观察四周。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.7735085945399394&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOAZNqTX9qGrvLEjwpPibzGib2Vxd5MuZhYTDp5L2DicRZ3M7TgyRLVLlOw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;989&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;DFS 很像前序/顺序/后序遍历，而 BFS 用于分层输出树节点。我们需要一个队列（数据结构）来存储图的「层级」，同时输出（访问）其「父级」。在之前的插图中，节点是队列中浅蓝色的点。每一层的节点被从队列中取走，同时在访问每个被取走的节点时，我们还应该将其子节点插入队列（为下一层做准备）。下列代码很简单，可以帮助大家了解 BFS。代码假设图是连通的，尽管我们可以修改代码，使其应用于非连通图。&lt;/span&gt;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;python language-python hljs&quot; style=&quot;box-sizing: border-box;margin-right: 2px;margin-left: 2px;padding: 0.5em;font-size: 14px;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;word-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;&quot;&gt;// Assuming graph &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;is&lt;/span&gt; connected &lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;// &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;and&lt;/span&gt; a graph node &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;is&lt;/span&gt; defined by this structure&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;// struct GraphNode {&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;//   T item;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;//   vector&amp;lt;GraphNode*&amp;gt; children;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;// }&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;// WARNING: untested code&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;void BreadthFirstSearch(GraphNode* node) // start node&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;{&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;if&lt;/span&gt; (!node) &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;return&lt;/span&gt;;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  queue&amp;lt;GraphNode*&amp;gt; q;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  q.push(node);&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  &lt;span class=&quot;hljs-keyword&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;while&lt;/span&gt; (!q.empty()) {&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    GraphNode* cur = q.front(); // doesn&lt;span class=&quot;hljs-string&quot; style=&quot;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&#39;t pop&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    q.pop();&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    for (auto child : cur-&amp;gt;children) {&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;      q.push(child);&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    }&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    // do what you want with current node&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;    cout &amp;lt;&amp;lt; cur-&amp;gt;item;&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;  }&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;}&lt;br style=&quot;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;word-wrap: inherit !important;word-break: inherit !important;&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;/pre&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;在基于节点的连通图表示上可以轻松地了解基本思想。记住图遍历的实现因图表示而异。BFS 和 DFS 在解决图搜索问题中是重要的工具（但是存在大量图搜索算法）。尽管 DFS 具备优雅的递归实现，但进行迭代实现更合理。我们使用队列进行 BFS 的迭代实现，而 DFS 则需要堆栈。图领域中一个最流行的问题，同时也可能是你阅读本文的原因之一是寻找图节点之间的最短路径。这需要我们进行最后一个实验。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;text-align: justify;&quot;&gt;示例：Uber&lt;/span&gt;&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Uber 有 5000 万用户、700 万司机，对于 Uber 来说，最重要的事情之一就是高效匹配司机和乘客。该问题首先是定位的问题。后端要处理数百万份用户请求，将每份请求发送至一或多（通常是多）位附近的司机。尽管将用户请求发送至所有附近司机更加简单，有时也更加智能，但是预处理通常会有所帮助。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.782051282051282&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOekGZWPhYlz05JLteIhCmOiblbqkQfNCIN4PGzzOPQ7oaibicz8XjpRbug/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;702&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;除了处理请求、基于用户坐标确定定位、寻找最近坐标的司机以外，我们还需要寻找最适合这趟行程的司机。为了避免地理空间请求处理（对比司机当前坐标和用户坐标，来获取附近车辆），我们假设已经分割了用户和多辆附近车辆的地图，如下图所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.7818696883852692&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQO38WJh667h3ylJruUeMS7YY5cicLnKp94lRCCJWmf3bzGHmicsr1e3ccA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;706&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;黄色路线是车辆到用户处的可能路径。问题在于计算车辆到达用户的最小距离，即寻找最短路径。尽管这更多地涉及谷歌地图而不是 Uber，我们仍然尝试解决这一特定和简化案例，其原因主要在于通常存在多辆车，Uber 可能需要计算离用户最近的车。就这张插图而言，这意味着计算全部三辆车的最短路径并确定哪辆车最适合该行程。为了使问题简洁，我们将讨论只有一辆车的情况。下图显示了一些到达用户的可能路径。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.18618618618618618&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQO9Ncg1MaHFe4oS42RLqRib9eaPcDNJIFC5nicNFaR1szw0GU11qtPUticg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;999&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);font-size: 12px;&quot;&gt;&lt;em&gt;车辆到达用户的可能路径&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;我们将该地图分割表示为一个图：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.88379705400982&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOI7Yv96ZnLRCJntsXHOaWXbBU2j6ZOial7Bb45h4F92IwmRmzibFUbpEw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;611&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;这是一个无定向的加权图（更具体地说是，边加权）。为了找到从 B（车）到 A（用户）的最短途径，我们应该找到他们之间的一条边权重最小的路。你可以自由的设计你自己版本的解决方案，我们还是使用 Dijkstra 的版本。下面的步骤是从维基百科上找到的 Dijkstra 的算法的步骤。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;让我们把起始的节点叫做初始节点。节点距离 Y 表示初始节点到 Y 的距离。Dijkstra 的算法将分配一些初始距离值，并尝试一步步地改善它们。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 5px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;1. 标记所有未访问节点。创建所有未访问节点的集合「unvisited set」。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 5px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;2. 为每个节点分配一个实验距离值：初始节点的距离值设置为 0，其他节点设置为无穷大。将初始节点设置为当前节点。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 5px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;3. 对于当前节点，考虑其所有未访问近邻，通过当前节点计算它们的实验距离。对比新计算的实验距离和当前分配的值，分配较小的值。例如，如果当前节点 A 的距离是 6，连接 A 与近邻 B 的边长度为 2，则经过 A 到 B 的距离是 6 + 2 = 8。如果 B 之前标记的距离大于 8，则将其更改为 8。反之，保留当前值。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 5px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;4. 当我们考虑完当前节点的所有近邻之后，将当前节点标记为已访问，并从 unvisited set 中移除。已访问节点无需再检查。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 5px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;5. 如果目标节点已经标记为已访问（当规划两个特定节点之间路线的时候），或 unvisited set 中节点之间的最小实验距离是无穷大（当规划完整遍历时，初始节点和其余未访问节点之间没有连接时），则停止，算法结束。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;6. 反之，选择标记有最小实验距离的未访问节点，将其设置为新的「当前节点」，并返回第 3 步。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;在我们的示例中，我们首先将节点 B（车辆）设置为初始节点。前两步：&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.5968436154949784&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOAhLZQHmA0HpXSQ9puYTXbaN9V27SYUegofhpesRlqRksZickWjUjYgA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;697&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;我们的 unvisited set 包含了所有的节点，同时也要注意图左边里显示的表格。所有的节点都包括了到 B 和到之前节点的最短距离。例如，从 B 到 F 的最短距离是 20，之前节点是 B。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.6014388489208633&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOVricgIwah5wiaAMqI3o6C9bNtq2BPrFSVopiauR3fByaHaMJ7QrAuumGg/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;695&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;我们把 B 标注为访问过的然后移动到它的近邻 F。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.6017191977077364&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQOyQJ9vqwljtxwmuWo8nlibiaYibiaG8Oj5gu8eI3OsrPhYEWMtMSeUrRFGA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;698&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;现在，我们把 F 标注已访问过的，然后在最小实验距离下选下一个没被访问过的节点，就是 G。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img class=&quot;&quot; data-ratio=&quot;0.6166902404526167&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW9IcHbFIoLic1VEVWUYDcOQODnZJhL4wd563f7U7OXCEh6lMKxldtOP0egVXtzNzbze8vP1sY3bopw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;707&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;就像算法里说的，如果目标节点已经被标注为访问过的（当规划两个特定的节点间的路线时）那么我们可以停止。所以我们下一步用下面的值去停止算法。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;所以我们已经有了从 B 到 A 并且经过 F 与 G 的两条最短距离。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;这真的是 Uber 里最简单的问题的例子，和冰山类比相比较，我们在冰山的山尖上。然而，这对于我们探索图论应用的真实场景是个好的开始。我没有完成我一开始计划的文章，但在不久的将来这个文章最有可能继续下去（也包括数据库内部索引）。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;关于图论有很多内容需要去学习，这篇文章只是冰山一角，非常感谢各位读者有耐心能阅读完 ~&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 12px;color: rgb(136, 136, 136);&quot;&gt;&lt;em&gt;原文地址：https://medium.freecodecamp.org/i-dont-understand-graph-theory-1c96572a1401&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;line-height: 1.75em;margin-bottom: 20px;&quot;&gt;&lt;span style=&quot;font-size: 12px;color: rgb(136, 136, 136);&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;font-size: 12px;color: rgb(123, 12, 0);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;点击阅读原文，从技术到产品体验搜狗机器翻译&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;br style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.5929694727104533&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gW8yvAl9vP0l991GHNz69jjqTyILSYmmJeRFMpKd1LMdbT4qz0EiaKuBWGGq2eFBJCOKOxuibI5P6PbQ/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1081&quot; style=&quot;box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: auto !important;&quot; width=&quot;auto&quot;&gt;&lt;/p&gt;
                &lt;/div&gt;
                &lt;script nonce=&quot;942200068&quot; type=&quot;text/javascript&quot;&gt;
                    var first_sceen__time = (+new Date());

                    if (&quot;&quot; == 1 &amp;&amp; document.getElementById(&#39;js_content&#39;)) {
                        document.getElementById(&#39;js_content&#39;).addEventListener(&quot;selectstart&quot;,function(e){ e.preventDefault(); });
                    }

                    
                    (function(){
                        if (navigator.userAgent.indexOf(&quot;WindowsWechat&quot;) != -1){
                            var link = document.createElement(&#39;link&#39;);
                            var head = document.getElementsByTagName(&#39;head&#39;)[0];
                            link.rel = &#39;stylesheet&#39;;
                            link.type = &#39;text/css&#39;;
                            link.href = &quot;//res.wx.qq.com/mmbizwap/zh_CN/htmledition/style/page/appmsg/page_mp_article_improve_winwx31619e.css&quot;;
                            head.appendChild(link);
                        }
                    })();
                &lt;/script&gt;
                
                
                                
                &lt;div class=&quot;ct_mpda_wrp&quot; id=&quot;js_sponsor_ad_area&quot; style=&quot;display:none;&quot;&gt;&lt;/div&gt;

                
                                &lt;div class=&quot;reward_area tc&quot; id=&quot;js_preview_reward&quot; style=&quot;display:none;&quot;&gt;
                    &lt;p id=&quot;js_preview_reward_wording&quot; class=&quot;tips_global reward_tips&quot; style=&quot;display:none;&quot;&gt;&lt;/p&gt;
                    &lt;p&gt;
                        &lt;a class=&quot;reward_access&quot; id=&quot;js_preview_reward_link&quot; href=&quot;##&quot;&gt;&lt;span class=&quot;icon-reward&quot;&gt;&lt;/span&gt;赞赏&lt;/a&gt;

                    &lt;/p&gt;
                &lt;/div&gt;
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_preview_reward_qrcode&quot; style=&quot;display:none;&quot;&gt;
                    &lt;p class=&quot;tips_global&quot;&gt;长按二维码向我转账&lt;/p&gt;
                    &lt;p id=&quot;js_preview_reward_ios_wording&quot; class=&quot;reward_tips&quot; style=&quot;display:none;&quot;&gt;&lt;/p&gt;
                    &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; src=&quot;//res.wx.qq.com/mmbizwap/zh_CN/htmledition/images/pic/appmsg/pic_reward_qrcode.2x3534dd.png&quot;&gt;&lt;/span&gt;
                    &lt;p class=&quot;tips_global&quot;&gt;受苹果公司新规定影响，微信 iOS 版的赞赏功能被关闭，可通过二维码转账支持公众号。&lt;/p&gt;
                &lt;/div&gt;
                            &lt;/div&gt;&lt;div class=&quot;rich_media_tool&quot; id=&quot;js_toobar3&quot;&gt;
                
                                
                                            &lt;a class=&quot;media_tool_meta meta_primary&quot; id=&quot;js_view_source&quot; href=&quot;##&quot;&gt;阅读原文&lt;/a&gt;
                                &lt;div id=&quot;js_read_area3&quot; class=&quot;media_tool_meta tips_global meta_primary&quot; style=&quot;display:none;&quot;&gt;阅读 &lt;span id=&quot;readNum3&quot;&gt;&lt;/span&gt;&lt;/div&gt;

                &lt;span style=&quot;display:none;&quot; class=&quot;media_tool_meta meta_primary tips_global meta_praise&quot; id=&quot;like3&quot;&gt;
                    &lt;i class=&quot;icon_praise_gray&quot;&gt;&lt;/i&gt;&lt;span class=&quot;praise_num&quot; id=&quot;likeNum3&quot;&gt;&lt;/span&gt;
                &lt;/span&gt;

                &lt;a id=&quot;js_report_article3&quot; style=&quot;display:none;&quot; class=&quot;media_tool_meta tips_global meta_extra&quot; href=&quot;##&quot;&gt;投诉&lt;/a&gt;

            &lt;/div&gt;&lt;div class=&quot;rich_media_tool&quot; id=&quot;js_sg_bar&quot;&gt;
                
                                
                                &lt;a class=&quot;media_tool_meta meta_primary&quot; href=&quot;http://www.huodongxing.com/event/6429470863300&quot; target=&quot;_blank&quot;&gt;阅读原文&lt;/a&gt;
                                
            &lt;/div&gt;</description>
<author></author>
<guid isPermaLink="false">2018-03-11-1000000627</guid>
<pubDate>Sun, 11 Mar 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>前沿 | 区块链分享医疗数据：AI学者提出新型匿名数据收集方式</title>
<link>https://henix.github.io/feeds/weixin.sogou.almosthuman2014/2018-03-10-1000000626_503255317.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?timestamp=1520838466&amp;amp;src=3&amp;amp;ver=1&amp;amp;signature=60g4FlJblx0ynvOUS2XUspYgnCfnLlIE4wKAdgp82vIQeeJ3wTqzwri*aeP6HIJc17mS453JUn06-5lTp1FTgxmYufJpo3Rir99LcErKYFijLLHtLDJS-9mKUZ*-Rbz6VwsKoVrixjI93*aM1M5RXjzmS3jzR*r6n3qpl-Qe6Rs=&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;img-content&quot;&gt;
                
                &lt;h2 class=&quot;rich_media_title&quot; id=&quot;activity-name&quot;&gt;
                    前沿 | 区块链分享医疗数据：AI学者提出新型匿名数据收集方式                                    &lt;/h2&gt;
                &lt;div id=&quot;meta_content&quot; class=&quot;rich_media_meta_list&quot;&gt;
                                                            &lt;em id=&quot;post-date&quot; class=&quot;rich_media_meta rich_media_meta_text&quot;&gt;2018-03-10&lt;/em&gt;

                                        &lt;a class=&quot;rich_media_meta rich_media_meta_link rich_media_meta_nickname&quot; href=&quot;##&quot; id=&quot;post-user&quot;&gt;机器之心&lt;/a&gt;
                    &lt;span class=&quot;rich_media_meta rich_media_meta_text rich_media_meta_nickname&quot;&gt;机器之心&lt;/span&gt;


                    &lt;div id=&quot;js_profile_qrcode&quot; class=&quot;profile_container&quot; style=&quot;display:none;&quot;&gt;
                        &lt;div class=&quot;profile_inner&quot;&gt;
                            &lt;strong class=&quot;profile_nickname&quot;&gt;机器之心&lt;/strong&gt;
                            &lt;img class=&quot;profile_avatar&quot; id=&quot;js_profile_qrcode_img&quot; src=&quot;&quot; alt=&quot;&quot;&gt;

                            &lt;p class=&quot;profile_meta&quot;&gt;
                            &lt;label class=&quot;profile_meta_label&quot;&gt;微信号&lt;/label&gt;
                            &lt;span class=&quot;profile_meta_value&quot;&gt;almosthuman2014&lt;/span&gt;
                            &lt;/p&gt;

                            &lt;p class=&quot;profile_meta&quot;&gt;
                            &lt;label class=&quot;profile_meta_label&quot;&gt;功能介绍&lt;/label&gt;
                            &lt;span class=&quot;profile_meta_value&quot;&gt;专业的人工智能媒体和产业服务平台&lt;/span&gt;
                            &lt;/p&gt;
                            
                        &lt;/div&gt;
                        &lt;span class=&quot;profile_arrow_wrp&quot; id=&quot;js_profile_arrow_wrp&quot;&gt;
                            &lt;i class=&quot;profile_arrow arrow_out&quot;&gt;&lt;/i&gt;
                            &lt;i class=&quot;profile_arrow arrow_in&quot;&gt;&lt;/i&gt;
                        &lt;/span&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                
                
                
                
                                                
                                                                
                
                &lt;div class=&quot;rich_media_content &quot; id=&quot;js_content&quot;&gt;
                    

                    

                    
                    
                    &lt;section style=&quot;max-width: 100%;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);line-height: 28.4444px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section data-id=&quot;85660&quot; data-custom=&quot;rgb(117, 117, 118)&quot; data-color=&quot;rgb(117, 117, 118)&quot; style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section data-id=&quot;85660&quot; data-custom=&quot;rgb(117, 117, 118)&quot; data-color=&quot;rgb(117, 117, 118)&quot; style=&quot;max-width: 100%;border-width: 0px;border-style: initial;border-color: currentcolor;font-family: 微软雅黑;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;section style=&quot;margin-top: 2em;padding-top: 0.5em;padding-bottom: 0.5em;max-width: 100%;border-style: solid none;font-family: inherit;text-decoration: inherit;border-top-color: rgb(204, 204, 204);border-bottom-color: rgb(204, 204, 204);border-top-width: 1px;border-bottom-width: 1px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;p style=&quot;margin-top: -1.2em;max-width: 100%;min-height: 1em;text-align: center;line-height: 1.75em;border-width: initial;border-style: initial;border-color: currentcolor;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(255, 255, 255);background-color: rgb(117, 117, 118);font-size: 16px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;选自Nature&lt;/span&gt;&lt;/p&gt;&lt;section data-style=&quot;white-space: normal; text-align: left;font-size: 14px;line-height: 1.5em; color: rgb(12, 12, 12);&quot; style=&quot;padding: 16px 16px 10px;max-width: 100%;font-family: inherit;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(136, 136, 136);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;font-size: 12px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;作者：Amy Maxmen&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;font-size: 12px;color: rgb(136, 136, 136);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;机器之心编译&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;font-size: 12px;color: rgb(136, 136, 136);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;参与：白妤昕、李泽南&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;color: rgb(136, 136, 136);&quot;&gt;除比特币之外，区块链匿名与安全的特性还可以帮助医疗领域的研究者们收集用于训练 AI 算法的数据，其方法不会透露数据提供者的隐私信息。Nature 近日报道了来自 UCSF 等大学的新型区块链技术。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.66625&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gWibfx1GDSSiavg1FFH2RwXXhNicJhTZ1Nia3mElqvOpfsxEicWnrbOSez1QZudKEbL4uZNqxFKTC3IySHA/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;800&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;text-align: left;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 12px;color: rgb(136, 136, 136);&quot;&gt;&lt;em&gt;研究人员开发 AI 算法，通过 X 光片检测的乳腺癌&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Dexter Hadley 认为，如可用数百万张标记好的 X 光片训练筛查算法，人工智能（AI）在乳腺癌检测上或许比医生更具优势。那么研究人员如何获得如此大量的数据？很多国家从法律上保护公民隐私，因此敏感医疗信息依然是研究人员和科技公司的难以接近的地带。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;为解决这个问题，加州大学旧金山分校的医学和计算生物学家 Hadley 正为此设计解决方案。他的团队正在构建一个系统，让人们可以轻松、安全地与研究人员分享自己的医疗数据，并保留对数据的控制权。他们的方法基于近来最流行的加密货币——比特币基础上的区块链技术，新方法很快就将投入实际测试中。预计在今年 5 月，Hadley 和他的同事们将开展一项研究，训练一种新的乳腺癌检测 AI 算法，因此他们希望收集 300-500 万美国妇女的乳房 X 光照片。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;该团队加入了越来越多使用区块链技术的科学家和初创企业的行列——研究人员正希望以此让共享医疗图像，医疗记录和基因数据更具吸引力、也更加高效。有些项目甚至会对分享数据的用户付款。许多团队的最终目标是使用区块链系统收集所需的数据进行 AI 算法训练。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;数据安全&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;由于基于机器学习的人工智能技术依赖于大量数据进行训练，随着 AI 的兴起，公众正在越来越关注科技巨头是如何从个人医疗信息等数据中挖掘有价值信息的。曾有新闻披露英国国家卫生服务部门（NHS）的一个分支机构在未经充分同意的情况下获得了 160 万份患者病历，包括姓名和敏感信息，例如一个人是否患有性病。在 2016 年，这一事件让谷歌母公司 Alphabet 旗下的人工智能公司 DeepMind 陷入了争议。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;麻省麻省理工学院（MIT）计算机科学家 Andrew Lippman 表示：「现在，谷歌和 Facebook 收集到关于你的数据超乎想象。但医药领域没有 Facebook，」他补充道，「使用区块链来保护和分享分散的医疗信息，可能是数据身份控制的典范。」&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;区块链是一种分布式电子记账系统，可以记录难以改变的「区块链「中的交易。如果黑客要侵入一个区块，他必须独立地篡改所有与之相关的区块——这是一项几乎无法完成的任务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;在 Hadley 的研究中，区块链将起到开关的功能指导参与者，临床医生和研究人员之间的数据流动。参与其中的女性可以使用在线门户网站 breastwecan.org 提供或撤销其数据访问权限，breastwecan.org 依靠区块链来保护存储在云中的数据。&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;研究人员计划在数百万健康女性和乳腺癌患者的乳房 X 线照片上训练他们的 AI 算法，其目的是最终发展出比人类医生能够更加精确地为肿瘤分类的计算机算法。训练数据越多，算法就越准确，正如放射科医师鉴别肿瘤的能力会随着经验的增长而提高一样。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;Hadley 希望女性能够分享他们的乳房 X 光片来提高乳腺癌筛查的普遍性，并借此获得超过医疗机构所掌握的信息量。根据组织密度，年龄和其他已知因素，参与研究的妇女将能够在 breastwecan.org 上查看他们的扫描结果以及对其乳腺癌风险的标准临床解释。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;strong&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;连锁反应&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;越来越多的机构正在开发区块链市场来代理个人、公司以及学术研究人员之间的数据交换，并提供付款方式。其中一项工作就是 Nebula Genomics 和哈佛大学遗传学家 George Church 共同创立的初创公司。Nebula 旨在联系能够提供基因组测序的人与愿意为该服务付费的公司，以换取访问结果数据。支付自己测序费用的人将能够使用 Nebula 出售他们的遗传信息，支付将以数字代币的形式出现并可以兑换成美元。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt; Nebula 会确保其合作伙伴公司所作的任何承诺，例如公司保存个人数据的时间。相比之下，当加利福尼亚州山景城的 23andMe 等基因组测序公司的客户同意分享他们的数据进行研究时，用户们很大程度上放弃了对数据使用方式的控制。许多测序公司甚至会向生物技术和制药公司出售散装匿名遗传数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;「更好地利用医疗记录可以让我们获得更快速、更完善的治疗，」Lippman 表示。他和他的学生正在开发一种被称为 MedRec 的区块链健康记录共享系统，它将于今年在波士顿的 Beth Israel Deaconess 医疗中心进行测试。该系统允许用户将信息加入到自己的医疗记录中，其中可以包含可穿戴电子设备（如 Fitbits）上收集到的信息。临床医生和研究者可以在得到允许之后使用这些额外的数据，为人们量身定制医疗解决方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.48438327157226047&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gWibfx1GDSSiavg1FFH2RwXXhNk199TJ4LJubvOJVtYem1ibibwK7H1SMMogdS3pbWsjUf5xxW5dQ45n9A/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;1889&quot; style=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;text-align: justify;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;font-size: 14px;&quot;&gt;只有在被充分分享和研究之后，人们收集到的大量医疗数据才能让医疗领域获得进步。「我们需要吸引用户，让他们分享自己的数据，」Hadley 表示，「所以我们需要寻找能够完美掌控数据的新技术，而区块链正好是其中之一。」&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA3MzI4MjgzMw==&amp;amp;mid=2650726048&amp;amp;idx=3&amp;amp;sn=bd73de47cd65a1772c2df027cabd6a5c&amp;amp;scene=21#wechat_redirect&quot; style=&quot;text-decoration: underline;max-width: 100%;font-size: 14px;text-align: justify;white-space: normal;background-color: rgb(255, 255, 255);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;img class=&quot;&quot; data-copyright=&quot;0&quot; data-ratio=&quot;0.3287671232876712&quot; data-s=&quot;300,640&quot; src=&quot;https://mmbiz.qpic.cn/mmbiz_png/KmXPKA19gWib0JZxz5ovG7gL67yGQmoN7cKRk8EfHpuibXtdTP5lajgBIicEgEnWYzibP1BnWtKCOmZEibzX09iaSXrw/640?wx_fmt=png&quot; data-type=&quot;png&quot; data-w=&quot;73&quot; style=&quot;color: rgb(62, 62, 62);font-size: 16px;box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 50px !important;&quot; width=&quot;50px&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 1.75em;&quot;&gt;&lt;span style=&quot;color: rgb(136, 136, 136);font-size: 12px;&quot;&gt;&lt;em&gt;原文链接：https://www.nature.com/articles/d41586-018-02641-7&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);font-size: 16px;white-space: normal;background-color: rgb(255, 255, 255);text-align: justify;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;line-height: 25.6px;font-family: 微软雅黑;font-size: 14px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;color: rgb(62, 62, 62);line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;本文为机器之心编译，&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;转载请联系本公众号获得授权&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/strong&gt;。&lt;/span&gt;&lt;/strong&gt;&lt;br style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 5px;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);white-space: normal;background-color: rgb(255, 255, 255);font-size: 18px;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(127, 127, 127);line-height: 25.6px;font-family: 微软雅黑;text-align: justify;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;✄------------------------------------------------&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;margin-bottom: 5px;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);white-space: normal;background-color: rgb(255, 255, 255);font-size: 18px;font-family: 微软雅黑;text-align: center;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(217, 33, 66);font-size: 12px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;加入机器之心（全职记者/实习生）：hr@jiqizhixin.com&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);white-space: normal;background-color: rgb(255, 255, 255);font-size: 18px;font-family: 微软雅黑;text-align: center;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;color: rgb(217, 33, 66);line-height: 1.6;font-size: 12px;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;投稿或寻求报道：editor@jiqizhixin.com&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;max-width: 100%;min-height: 1em;color: rgb(62, 62, 62);white-space: normal;background-color: rgb(255, 255, 255);font-size: 18px;font-family: 微软雅黑;text-align: center;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;strong style=&quot;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;&lt;span style=&quot;max-width: 100%;font-size: 12px;color: rgb(217, 33, 66);line-height: 1.6;box-sizing: border-box !important;word-wrap: break-word !important;&quot;&gt;广告&amp;amp;商务合作：bd@jiqizhixin.com&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
                &lt;/div&gt;
                &lt;script nonce=&quot;458078296&quot; type=&quot;text/javascript&quot;&gt;
                    var first_sceen__time = (+new Date());

                    if (&quot;&quot; == 1 &amp;&amp; document.getElementById(&#39;js_content&#39;)) {
                        document.getElementById(&#39;js_content&#39;).addEventListener(&quot;selectstart&quot;,function(e){ e.preventDefault(); });
                    }

                    
                    (function(){
                        if (navigator.userAgent.indexOf(&quot;WindowsWechat&quot;) != -1){
                            var link = document.createElement(&#39;link&#39;);
                            var head = document.getElementsByTagName(&#39;head&#39;)[0];
                            link.rel = &#39;stylesheet&#39;;
                            link.type = &#39;text/css&#39;;
                            link.href = &quot;//res.wx.qq.com/mmbizwap/zh_CN/htmledition/style/page/appmsg/page_mp_article_improve_winwx31619e.css&quot;;
                            head.appendChild(link);
                        }
                    })();
                &lt;/script&gt;
                
                
                                
                &lt;div class=&quot;ct_mpda_wrp&quot; id=&quot;js_sponsor_ad_area&quot; style=&quot;display:none;&quot;&gt;&lt;/div&gt;

                
                                &lt;div class=&quot;reward_area tc&quot; id=&quot;js_preview_reward&quot; style=&quot;display:none;&quot;&gt;
                    &lt;p id=&quot;js_preview_reward_wording&quot; class=&quot;tips_global reward_tips&quot; style=&quot;display:none;&quot;&gt;&lt;/p&gt;
                    &lt;p&gt;
                        &lt;a class=&quot;reward_access&quot; id=&quot;js_preview_reward_link&quot; href=&quot;##&quot;&gt;&lt;span class=&quot;icon-reward&quot;&gt;&lt;/span&gt;赞赏&lt;/a&gt;

                    &lt;/p&gt;
                &lt;/div&gt;
                &lt;div class=&quot;reward_qrcode_area reward_area tc&quot; id=&quot;js_preview_reward_qrcode&quot; style=&quot;display:none;&quot;&gt;
                    &lt;p class=&quot;tips_global&quot;&gt;长按二维码向我转账&lt;/p&gt;
                    &lt;p id=&quot;js_preview_reward_ios_wording&quot; class=&quot;reward_tips&quot; style=&quot;display:none;&quot;&gt;&lt;/p&gt;
                    &lt;span class=&quot;reward_qrcode_img_wrp&quot;&gt;&lt;img class=&quot;reward_qrcode_img&quot; src=&quot;//res.wx.qq.com/mmbizwap/zh_CN/htmledition/images/pic/appmsg/pic_reward_qrcode.2x3534dd.png&quot;&gt;&lt;/span&gt;
                    &lt;p class=&quot;tips_global&quot;&gt;受苹果公司新规定影响，微信 iOS 版的赞赏功能被关闭，可通过二维码转账支持公众号。&lt;/p&gt;
                &lt;/div&gt;
                            &lt;/div&gt;&lt;div class=&quot;rich_media_tool&quot; id=&quot;js_toobar3&quot;&gt;
                
                                
                                            &lt;div id=&quot;js_read_area3&quot; class=&quot;media_tool_meta tips_global meta_primary&quot; style=&quot;display:none;&quot;&gt;阅读 &lt;span id=&quot;readNum3&quot;&gt;&lt;/span&gt;&lt;/div&gt;

                &lt;span style=&quot;display:none;&quot; class=&quot;media_tool_meta meta_primary tips_global meta_praise&quot; id=&quot;like3&quot;&gt;
                    &lt;i class=&quot;icon_praise_gray&quot;&gt;&lt;/i&gt;&lt;span class=&quot;praise_num&quot; id=&quot;likeNum3&quot;&gt;&lt;/span&gt;
                &lt;/span&gt;

                &lt;a id=&quot;js_report_article3&quot; style=&quot;display:none;&quot; class=&quot;media_tool_meta tips_global meta_extra&quot; href=&quot;##&quot;&gt;投诉&lt;/a&gt;

            &lt;/div&gt;&lt;div class=&quot;rich_media_tool&quot; id=&quot;js_sg_bar&quot;&gt;
                
                                
                                
            &lt;/div&gt;</description>
<author></author>
<guid isPermaLink="false">2018-03-10-1000000626_503255317</guid>
<pubDate>Sat, 10 Mar 2018 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
