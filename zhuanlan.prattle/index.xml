<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>迷思</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/</link>
<description>我的博客及微信公众号里的精华内容都会放在这里。</description>
<language>zh-cn</language>
<lastBuildDate>Sat, 19 May 2018 12:29:17 +0800</lastBuildDate>
<item>
<title>Code is Law</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2018-05-16-36913380.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/36913380&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-94e9c81b043fdbd3d0a1b6ecbc13dd97_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;如果你以为本文是在讲 Ethereum，或者 Smart Contract，那我非常抱歉。本文将要讲述的是 Engineering practices 以及我对一些流程的思考和应用。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;先举一个栗子&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;在展开新工作的第一天，我就试图将 bootcamp 和 BBL 的文化引入 Arcblock。两周后，我们的 bootcamp site 长这个样子：&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-1b319c991fc6979311c24607fb86d9a6_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1000&quot; data-rawheight=&quot;1600&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-1b319c991fc6979311c24607fb86d9a6&quot; data-watermark-src=&quot;v2-33e68c40b3b920cfac3d3f0286270c08&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;请原谅这个简单的 UI 一副舅舅不疼姥姥不爱的样子 —— 我们只是还没有精力去将其做得更加美观。我的偶像陈道明先生说：简约而不简单。这简单的界面下面，其实蕴含着复杂的自动化流程。&lt;/p&gt;&lt;p&gt;如果要写新的 slides，团队里的工程师只需在我们的 bootcamp repo 里新建一个 markdown 文件，然后遵循一定的标准去撰写，就可以生成合适的 slides，比如：&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-f005af389867dad9b9a6975892464397_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1600&quot; data-rawheight=&quot;1573&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-f005af389867dad9b9a6975892464397&quot; data-watermark-src=&quot;v2-c4205b5a6cd32700e56f8775367108c2&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;again，先暂且不要在意简单的 UI —— 面包会有的，一切都会好的。你要在意的是，confidential 的页面和非 confidential 的页面，差异仅仅在一个预定义好的 css class：&lt;code class=&quot;inline&quot;&gt;.confidential&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;当你完成了 slides 的编撰，&lt;code class=&quot;inline&quot;&gt;make create-pr&lt;/code&gt;（之后会介绍）会自动更新这个 repo 的版本，创建一个 pull request。&lt;/p&gt;&lt;p&gt;这时，勤劳的 travis 便会开始工作，把 slides build 一遍，确保无误后，给一个 green light。然后，reviewer review 后，merge PR。勤劳的 travis 会再度出现，先是把当前的版本打一个 tag，然后创建一个 github release，然后再把 slides 部署到一个 host static website 的 S3 bucket 上。这就是你开头看到的那幅图 —— 注意标题中的版本号。&lt;/p&gt;&lt;p&gt;整个流程的 UX 对 arcblock 的工程师来说，清晰，简单，并且是 day-to-day work，没有任何额外的入侵性的工作要做 —— 而且，系统帮你能简单就简单，连手工更新版本号，创建 pull request 这种工作，都只需要一条命令完成。&lt;/p&gt;&lt;p&gt;如果只是改一点点文字，觉得流程还是略繁琐，你还可以 inline edit（注意下图右上角的 label）：&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-2614ff57b075d7560412676e7d98b17c_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1600&quot; data-rawheight=&quot;1161&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-2614ff57b075d7560412676e7d98b17c&quot; data-watermark-src=&quot;v2-a96bfe1e149df2e0ceb554a91f5c9bf5&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;然后你可以不用命令行，直接编辑并创建 PR：&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-7ac8414f443a502bdb22b47045278a3d_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1363&quot; data-rawheight=&quot;1600&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-7ac8414f443a502bdb22b47045278a3d&quot; data-watermark-src=&quot;v2-0f741a8a1f5e8f7f92ef1002c8c83040&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;PR merge 之后，网站就得到自动更新了。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;为什么说 Code is Law？&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;当我工作得越久，我越发感觉到流程的自动化和易用，非常非常重要。大家都知道 security best practice，都了解 key rotation 的重要性，但没有人真正去实施，为何？太繁琐，需要记住的条条框框太多，流程自己害死了流程。然而好的流程往往自身已经优化到不可精简的地步 —— 着粉则太白，施朱则太赤 —— 这个时候，我们唯一可依赖的就只有代码。通过代码，我们可以固化流程，通过代码，我们可以在保持流程完备的情况下，让流程的 UX 尽可能简单而没有入侵性。&lt;/p&gt;&lt;p&gt;在 Arcblock，上面的例子仅仅是沧海一粟。我们很多做事的方法，都在最大程度地践行和优化 Code is Law。我们的开发流程有如下要求：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;所有的改动必须有 pre commit hook —— 代码的风格和静态检查，代码编译，单元测试，文档的自动生成都必须通过，才能 commit&lt;/li&gt;&lt;li&gt;所有的改动必须发 pull request，要 up to date，CI 通过，有至少一个 review 才能 merge&lt;/li&gt;&lt;li&gt;每个 PR 的 merge 必须是 squash merge，不能是 rebase 或者 merge&lt;/li&gt;&lt;li&gt;每个 PR 必须 bump version，在 merge 到 master 之后，必须要有相关的 changelog，并且创建一个 github release&lt;/li&gt;&lt;li&gt;如果是编译型的语言，编译后的结果要放在对应的 github release 上&lt;/li&gt;&lt;li&gt;如果是 static web site，生成的结果要放在对应的 S3 bucket 上，可以直接访问&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这些事情如果都是手工去做的话，非常费事，会让工程师叫苦不堪 —— 自然，会有聪明的工程师想办法将其自动化。然而，更进一步的问题出现了 —— 不同的 repo 里自动化的机理可能不一样，在不同的 repo 工作有学习成本和上下文切换成本。&lt;/p&gt;&lt;p&gt;于是我们问自己一个的问题：可不可以构建一个体系，让所有的 repo 尽可能长得一样，拥有相同的能力？&lt;/p&gt;&lt;p&gt;从产品设计的角度来说，这个面向工程师的产品应该是个 CLI，它应该可以这么交互，来帮助工程师生成新的 repo：&lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;$ arcli create:repo
? Repo name: arc-awesome-repo
? Please write concise description: Awesome repo in arcblock
? Choose a template: (Use arrow keys or type to search)❯
  elixir
  general
  nodejs
  python
  web&lt;/code&gt;&lt;p&gt;为什么使用 interactive CLI，而不是带参数的 CLI？因为我们不想加重工程师记忆的负担 —— 第一次使用它的工程师也能无障碍的使用。当然，如果在其他程序中调用，我们也支持把所需的数据以 JSON 的形式直接 pipe 给 &lt;code class=&quot;inline&quot;&gt;arcli create:repo&lt;/code&gt;，以符合 UNIX 文化。&lt;/p&gt;&lt;p&gt;这个自动生成的 repo 会有以下 layout，并且自动生成这些文件和目录：&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-80656f6f463a47c309685219acd96cee_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1034&quot; data-rawheight=&quot;893&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-80656f6f463a47c309685219acd96cee&quot; data-watermark-src=&quot;v2-6b3900d336962a7c2cf5ed95be7509c1&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;如果你在生成的 repo 下看看 make 的能力：&lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;$ make &amp;lt;tab&amp;gt;watch
dep             precommitall    deploy          release
browse-pr       doc             runbuild        init
bump-version    install         travisclean     lint
create-pr       post-build      travis-init     travis-deploy 
delete-release  pre-build       test&lt;/code&gt;&lt;p&gt;你会惊异地发现，很多基础的工具，都已经立等可用。你可以用 &lt;code class=&quot;inline&quot;&gt;make create-pr&lt;/code&gt; 去做 pull request，可以 &lt;code class=&quot;inline&quot;&gt;make browse-pr&lt;/code&gt; 打开 browser 查看当前 repo 的 pull requests，可以 &lt;code class=&quot;inline&quot;&gt;bump-version&lt;/code&gt;。此时此刻，你的第一个 travis build 应该已经 build 完了并且 all green —— 这个时候，你还没有写真正的代码，然而，整个世界已经串起来，滚滚前行。&lt;/p&gt;&lt;p&gt;单拎出 &lt;code class=&quot;inline&quot;&gt;make create-pr&lt;/code&gt; 来说。当一个 PR 创建出来的时候，工程师需要干四件事：改软件的版本号，commit，写 changelog，去 github 上创建 PR。&lt;code class=&quot;inline&quot;&gt;make create-pr&lt;/code&gt; 在命令行里将所有这些事情都做了：&lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;$ git commit -a -m &quot;my awesome commit&quot;
$ make create-prBump version...
Current version: 0.2.0
Latest commit hash: cca0f8c
Enter a version number [0.3.0]:
[feature/test 53e617d] bump version
 4 files changed, 9 insertions(+), 3 deletions(-)
remote: Resolving deltas: 100% (4/4), completed with 3 local objects.
To github.com:ArcBlock/arc-test.git
 * [new branch]      feature/test -&amp;gt; feature/test
https://github.com/ArcBlock/arc-test/pull/1&lt;/code&gt;&lt;p&gt;如果你的项目有需要预先安装的软件，可以将其置于 &lt;code class=&quot;inline&quot;&gt;init&lt;/code&gt; 下，其他用户下载 repo 后可以直接 &lt;code class=&quot;inline&quot;&gt;make init&lt;/code&gt;，就生成一个完全可用的开发环境，而非阅读长篇累牍的 “how to install”。&lt;/p&gt;&lt;p&gt;如果项目需要让 travis deploy，可以放在 &lt;code class=&quot;inline&quot;&gt;travis-deploy&lt;/code&gt; 下，而 &lt;code class=&quot;inline&quot;&gt;.travis.yml&lt;/code&gt; 会引用这个 make target。&lt;/p&gt;&lt;p&gt;任何一个工程师，只要学会了一个 repo 的使用方法，其它 repo 都是一模一样，真正的 learn once, run everywhere。&lt;/p&gt;&lt;p&gt;对于工程师来说，整个开发的繁杂流程简化成几条命令：&lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;$ arcli init:repo # 第一次使用，以后不需要，会调用当前 repo 下的 make init
$ arcli start:story # 选择一个 story 开始工作 - 会自动 git check -b feature/&amp;lt;story-id&amp;gt;/&amp;lt;title&amp;gt;
$ git commit
$ arcli create:pr # 调用 make create-pr（见上文）

&lt;/code&gt;&lt;p&gt;这大大增强了流程的易用性。&lt;/p&gt;&lt;p&gt;使用代码来实施流程有如下好处：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;reuse：某个流程的实现可以被复用到其他地方&lt;/li&gt;&lt;li&gt;compose：流程和流程可以组合&lt;/li&gt;&lt;li&gt;compile：流程可以从一种结构被 transform 成另一种结构&lt;/li&gt;&lt;li&gt;configure：流程可配置，可松可紧，可萝可御&lt;/li&gt;&lt;li&gt;extend：流程可以被继承并拓展&lt;/li&gt;&lt;li&gt;debug：流程可以很方便地 debug&lt;/li&gt;&lt;li&gt;test：流程可以 test&lt;/li&gt;&lt;li&gt;version：流程有其自己的版本号&lt;/li&gt;&lt;li&gt;document：流程有和代码在一起的文档&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;当然，还有代码的最大的好处：快速迭代。当我发现问题后，就可以立刻修改并且发送 pull request，让同事参与进来讨论。我们前几天完成了 interview process 的流程的制定，昨天讨论之后，就有一些 PR 发出来：&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-4f5202492b2efd7701be981f26b7ed1f_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1600&quot; data-rawheight=&quot;841&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-4f5202492b2efd7701be981f26b7ed1f&quot; data-watermark-src=&quot;v2-8e048f498c98b5875a68fd76ed67e1f0&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-dfd00d911e099088b1d5f37c700cac15_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1541&quot; data-rawheight=&quot;1600&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-dfd00d911e099088b1d5f37c700cac15&quot; data-watermark-src=&quot;v2-fb50b33629d66ee785aa77c5e8a33f55&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;b&gt;现在请你停下来，仔细想想这样的迭代速度多么地可怕。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;再想一想。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;我们常常说不要让流程僵化，人人都可参与，人人都可修改，然而，当你的公司的流程是贴在墙上的一张张纸，躺在内网里的一个个 PDF，你怎么去参与？怎么去修改？跟 HR 反馈？跟哪个 HR 反馈？我认识的那个 HR 管这个么？如果修改怎么修改？修改流程的流程是什么？当这么多困惑摆在眼前时，你最终不得不放弃；而当一个 github repo 放在那里，你只要会用 markdown，几分钟就能修改好，merge 之后，该 build 成 pdf travis 就 build pdf，该放在内网上就 travis 就将其放在内网上，你不用关心，最重要的是你的工作几乎能够立刻得到反馈，或被接受，或被拒绝 —— 并且，当被接受之后，就跟区块链一样，你的名字被永远地刻进了这次修订之中。&lt;/p&gt;&lt;p&gt;人人都说 lean startup，谁都知道 build - measure - learn 的 feedback loop —— 天下武功，唯快不破，说的也是这个 loop 的迭代速度要快。然而这个 loop 光靠吹是吹不快的，要靠好的机制，要靠 code。&lt;/p&gt;&lt;p&gt;还拿 interview 为例，昨天面试一个 data engineer，她给我们的 code test 提了些建议，我回头仔细想了想，很有道理，于是就在 clubhouse 里提了这么一个方案（还没有实现）：&lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;$ arcli create:code-test
Please choose a role: Data Engineer
Please choose a test: General
Please set expiration (1-7 days, default 7): 7
Please put the github id for the candidate: tyrchen

Code test is genearted for candidate tyrchen. Temporal link (expire in 7 days): https://....
Github repo is generated for candidate tyrchen. It will be merged into arcblock/arc-archived-code-tests upon expiration.&lt;/code&gt;&lt;p&gt;基本上，就是当我们要给一个 candidate 发 code test 时，我们可以选择相关的角色和试题，生成 github repo，生成关于试题的临时访问地址，然后通过邮件或者微信通知对方链接。这样，试题的说明我们可以随时更新，而不需要邮件或者微信上来来回回口头阐述 —— 而口头阐述是 conversation-based，很容易失真，很容易即兴发挥而引导对方到错误的方向。&lt;/p&gt;&lt;p&gt;这些都不重要，重要的是 —— &lt;b&gt;我们把流程和 user story 结合在了一起！发现流程的问题，谁都可以发 PR，当然，如果自己解决不了或者没空解决，可以提 user story，然后，会有工程师在这个 user story 上工作，写代码，测试，部署！然后我们自己 eat your own dog food！这才是流程能够不断演进之道！&lt;/b&gt;&lt;/p&gt;&lt;p&gt;扯两句 arcli —— 她也许已经成功取得了你的关注。arcli 也是我们 Code is Law 思想的一种体现。我们说我们的一个原则是 &lt;b&gt;内部的各种工具最好统一易用&lt;/b&gt;。那么对应的需求是：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;CLI 的界面要一致&lt;/li&gt;&lt;li&gt;CLI 能够很方便地被发现&lt;/li&gt;&lt;li&gt;CLI 是 interactive 和 self-document，能够轻松上手&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;所以我花了点时间用 commander 和 inquirer 写了个自注册的 CLI 的 framework（别被这个名头唬住 —— 整个 core 也就不到 100 行代码），同时做了一个 CLI 模板，可以自动生成新的 CLI 的整个 layout，最后填充执行的 action 即可。&lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;$ arcli create:arcli
? name of the cli (use &quot;:&quot; to differentiate action and object. e.g. create:repo): hello:world
? Please write concise description: hello world

Creating target index.js with file index.js.tpl.
Creating target cli.js with file cli.js.tpl.
Regenerateing /Users/tchen/projects/arcblock/arcli/src/cli/hello/index.js
Regenerateing /Users/tchen/projects/arcblock/arcli/src/cli/index.js
Code generated at: /Users/tchen/projects/arcblock/arcli/src/cli/hello/world

&lt;/code&gt;&lt;p&gt;这样，当一个工程师需要创建某个自动化工具时，她可以很方便快捷地创建，并专注于其逻辑而不是 CLI 如何注册，如何被发现，如何设置和选择参数等等。&lt;/p&gt;&lt;p&gt;而我们内部也在不断讨论，如何让这些工具和流程能够更加人性化，让体验是一种 peak experience：&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-c5016dbb2dc7dfc53e049be5df7be559_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;720&quot; data-watermark=&quot;watermark&quot; data-original-src=&quot;v2-c5016dbb2dc7dfc53e049be5df7be559&quot; data-watermark-src=&quot;v2-bbec173a70d159ceac29a71b4a97bb96&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;我们知道，如果一家公司口口声声说 user centric，give user love and care，内部的流程却处处反人性，并没有 user centric，那么如何让员工去 love and care user？如果一家公司拍着胸脯说每个员工都是公司的 leader，却根本不给予 leader 们合适的工具去行使 owner 的权利，那这和没有说有什么区别？在哈佛幸福课里，Tal 用生动的例子向大家证明，people don’t follow what you say, but follow what you do。&lt;/p&gt;&lt;p&gt;所以，在 Arcblock，我们说我们要构建一个 &lt;b&gt;人人可以参与制定 &lt;/b&gt;的公司文化，我们就要 &lt;b&gt;在工具上让这种参与唾手可得&lt;/b&gt; —— 所以，我们拥抱 Code is Law。虽然我们现在很多东西都还在起步阶段，但只要我们持续地用代码来表述流程，我们用 github 来记录流程，用 travis 来编译和部署流程，用开源代码合作的方式来进化流程，那么我们就能更快地演进，更快地自我迭代。而所有这一切，我们希望不仅仅工程师受益，整个公司都能受益；不仅仅工程师能发送 PR，其它职能部门的人，我们也会教会她们 markdown 和 github 的简单用法，从而无障碍地使用和更新；她们也可以在 clubhouse 里随时给工程师提需求，让流程源源不断地被工具简化。&lt;/p&gt;&lt;p&gt;Code is Law！&lt;/p&gt;&lt;p&gt;我们还在招人！可以看我前一篇文章了解详情：&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;amp;mid=2649827999&amp;amp;idx=1&amp;amp;sn=5374d71f1baa677ffe6805d36fac2af0&amp;amp;chksm=8704a883b07321953c6e713bb86a08ca546a18f661522bbbf89a8832fbdb897f82babdc7a11e&amp;amp;scene=21#wechat_redirect&quot;&gt;欢迎来到区块链的世界&lt;/a&gt;。对我们感兴趣请将简历发至：career at arcblock.io。谢谢！&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2018-05-16-36913380</guid>
<pubDate>Wed, 16 May 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>欢迎来到区块链的世界</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2018-05-07-36555780.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/36555780&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-5e07e2307e1cc402c4af607d67a7ac0a_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;在两三周前的文章中，我提到了我将要离开湾区，迁居到西雅图，做区块链相关的事情。四月底的那个周末，挥别妻女后，我一人一车，在后座上两个静悄悄的儿童座椅和 Ted Radio hour，backstreet boys，邓丽君等的陪伴下，一路北上，穿 Oregon（俄勒冈州）而抵 Redmond（雷蒙德），安全到达朋友家中。如今正式入职 Arcblock 一周，该安顿的已经安顿差不多了，是时候写点什么。&lt;/p&gt;&lt;p&gt;我知道很多关心我的朋友们会问：why Arcblock？&lt;/p&gt;&lt;p&gt;在回答这个问题前，还有一个更重要的问题：why blockchain？&lt;/p&gt;&lt;h2&gt;&lt;b&gt;why blockchain？&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;我们先试着把自己从个体的思维角度拉升，从宏观角度看待问题。&lt;/p&gt;&lt;p&gt;首先，blockchain 作为一种新兴的技术，其市场已经大到不容忽视。我们看 blockchain 的最直接的应用：cryptocurrency。&lt;/p&gt;&lt;p&gt;最近朋友圈的一件大事是伯克希哈撒韦的股东大会 —— 人们用参会、拍照、评论来拉近自己和股神之间的距离。对于 cryptocurrency，虽然华尔街的老牌金融机构们的态度正在剧烈转变，争相入市，然而巴菲特在刚刚结束的股东会上依旧坚持他的负面评价，并且笃定 cryptocurrency 没有价值支撑，一定会崩盘。我有很多朋友用巴老的话来提醒我这个行业的风险，却忽视了巴老同样不待见科技股。巴老的评价没有什么不好的，甚至，他反而佐证了 cryptocurrency 的重要性。引用 Think differently 广告中那段话 —— cryptocurrencies 已经是一个现下极为重要的一股力量 —— “You can quote them, disagree with them, glorify or vilify them. About the only thing you can’t do is ignore them”。&lt;/p&gt;&lt;p&gt;我上周在面试工程师或者设计师时，总会用下面的数字来说服面试者从另一个角度审视整件事情：整个 cryptocurrency 的盘子如今是 $450B（和俄罗斯，巴西，新加坡等国的 stock market 一个体量），每日成交量大概 $20B - $25B；如果我们对比世界上第二大经济体，我们的祖国的 A 股（上证 + 深圳），大概是 $8, 000B 的盘子，每天 $80B - $100B 的成交量。所以，它真的已经不容忽视，不仅仅是一句快意江湖的「毫无价值」或者「庞氏骗局」就能概括的。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-d6d0f71c8b938b0404c8dc18b868ad24_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;600&quot; data-rawheight=&quot;2990&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;（全球主要股市市值盘子）&lt;/p&gt;&lt;p&gt;其次，blockchain 虽然目前的市场容量，以及未来可对标的市场容量巨大，它还处在非常早期的阶段，就像淘金时代的狂野西部，蕴藏着巨大的危机 —— 危险和机遇。&lt;/p&gt;&lt;p&gt;在座的或多或少都知道或者见过 innovation adoption lifecycle 这幅图：&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-1cf1c833248e2e83653da9d37f280728_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1001&quot; data-rawheight=&quot;686&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;cryptocurrency 经过过去十年的发展，火炬已经从 innovators 手中传递到你我这样的 early adopters。甚至，我们可以认为，它的 lifecycle 已经在 early market 的后半程 —— 因为几乎你周围的人都知道，或者都在谈论它，并且有不少人真的在使用它。同样的，因为几乎所有人都只是在谈论它，而绝大多数都没有真正在使用它，它还不在 mainstream market。这也就意味着从 early adopters 到 early majority 之间，还有巨大的鸿沟需要跨越 —— 普罗大众需要的是完整的，方便的，可用的 &lt;b&gt;产品&lt;/b&gt;，而非极客们手上的引以自豪的 &lt;b&gt;技术&lt;/b&gt;。举个例子，菜场大妈都知道钱包里可以装钱，当需要使用的时候打开钱包使用即可；而她们想要在钱包里放比特币时，就犯难了 —— 什么是私钥，为什么第一次使用时要让我在纸上记下若干个奇奇怪怪的英文单词（TMD 为什么我要记这个，如果一定要记，为什么不能是中文），什么是钱包地址，为什么我要知道这样一串反人类的数字？我知道转账要手续费，但是什么 TMD 是矿工费用？&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-d5051ddc2210ea4fe850e495572e49f9_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1440&quot; data-rawheight=&quot;2880&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;如果类似于这样的产品问题无法解决，那么，这道鸿沟是无法逾越的。这是产品上的危机。&lt;/p&gt;&lt;p&gt;还有信任上的危机。blockchain 公司的 爱西欧 是人性的试金石，它把参与者放入摒弃一切约束和法规的 Westworld，放大你的心魔，膨胀你的欲望，让你在白帽和黑帽中恣意妄为。很多 爱西欧 的项目发起者无法抵御突如其来的 &lt;b&gt;巨额可隐匿财富&lt;/b&gt;，从而「承诺却根本不尽力兑现」，甚至直接携币潜逃，把整个圈子弄得乌烟瘴气，使得那些信仰满满的 early adopters 受到巨大伤害，从而引发用户的信任危机。传统的 startup，即便获得巨额的融资，还有到账时间的约束，有董事会对财务支出的约束，有银行系统对财务的监控等等使得创始人「携款潜逃」的风险很小。而 blockchain 的世界，称量的是创始人和团队的良心，这是非常危险的。&lt;/p&gt;&lt;p&gt;当产品无法发展得满足参与者对未来的预期，同时市场对 blockchain 公司这种「承诺却根本不尽力兑现」失去信心，可能会让整个行业出现重大危机 —— 比如产生一次有如千禧年科技股崩盘的惨况。然后，整个行业涅槃，blockchain 领域的 webvan 们倒下，amazon 们冉冉升起。&lt;/p&gt;&lt;p&gt;当然，我们更希望看到的情况是，blockchain 公司关注于产品，不断创新和迭代让整个市场整体往 early minority 方向发展，同时，从组织的形态上更好地解决对操盘者，也就是人的信任的问题，让整个行业更健康地发展。&lt;/p&gt;&lt;p&gt;再次，值得一提的是 blockchain 是目前最大的风口，而且这个风口已经持续一年多，很可能会继续持续下去。过去十多年的互联网教育我们，你站在风口浪尖之上，本身就获得了额外的竞争力。我曾在之前的文章中提到过，持续的话题性是一种重要的 unfair advantage。对比过去十年的 Google 和 Microsoft 的发展曲线，我深深地感受到「被人关注」是一种多么巨大的优势，而 google 极尽其能善用这种优势 —— google 曾经让人津津乐道的话题是 “do no evils”，gmail 的 unlimited storage，google doodle 以及已经消亡了的 google glass 们 —— 让 google 节省很多产品推广和品牌构建的费用，获得更快的发展。&lt;/p&gt;&lt;p&gt;即将 IPO 的小米的掌舵人雷军将其总结为「飞猪论」：风口来了，猪都会飞起来。进一步地，它被演绎为：顺势而为，选择比努力更重要；不要用战术上的勤奋掩盖战略上的懒惰。&lt;/p&gt;&lt;p&gt;从行业风口的角度来讲，blockchain 相关的领域造话题的能力甚至大大超越了前辈 IoT，ML/AI，自媒体，O2O/OMO，移动互联网，Web 2.0 等领域。它一直是人们谈论的中心和焦点，这意味着产品用很小的代价就能获得人们超常且极其耐心的关注。很多项目，比如说我们 Arcblock 自己，目前对外可见的产品还没有影子，却有了一群一直关注不断摇旗呐喊的忠实粉丝。这真是历史给予我辈的机会。&lt;/p&gt;&lt;p&gt;从技术风口的角度来说，blockchain 集多种已有的技术为一身，站在巨人的肩膀上，创造出目前这些让人叹为观止的技术，让其他的技术领域相形见绌。技术风口意味着 patents 和 papers —— 当 AI/ML 的山头插遍了红旗，blockchain 的山头还光秃秃一片。对于我们这些技术工作者，这是上天给与的慷慨馈赠。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;why Arcblock？&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;我很欣赏左林大叔对飞猪论的进一步讨论：&lt;/p&gt;&lt;blockquote&gt;第一层是什么样的风口是风口？第二层是你赌对了风口，风口来了，鸡犬升天后为何你升的最快？第三层则是风停了，你为何不掉下来，你的核心业务和核心壁垒到底是什么？好风凭借力，送我上青云的境遇人人心中都有，但为何又落在你头上。&lt;/blockquote&gt;&lt;p&gt;这其实也是我在加入前跟 Arcblock 创始人老冒讨论的焦点 —— 当然，还有我们对对方人品，对双方的性格契合程度，对文化的认知等等的考量。我跟老冒很早就认识，「&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;amp;mid=400531816&amp;amp;idx=1&amp;amp;sn=029b1ef56ebd3ad7fdaa643913ba2513&amp;amp;scene=21#wechat_redirect&quot;&gt;缘分天注定&lt;/a&gt;」一文，serendipity 一词就是他介绍给我的，这次算是再续前缘。我们在很多做事原则上的看非常一致 —— Ray Dalio 的《原则》一书也是他推荐我看的。我们有一些共同的看法：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;公司内部尽可能透明&lt;/li&gt;&lt;li&gt;关爱用户，持续赢得用户的信任和喜爱&lt;/li&gt;&lt;li&gt;让每个人参与并打造不断演进的良好文化&lt;/li&gt;&lt;li&gt;招募优秀有潜力的人，培养并授权&lt;/li&gt;&lt;li&gt;持续学习和改进&lt;/li&gt;&lt;li&gt;建立并不断优化方法论&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;那么，Arcblock 看中的风口是什么呢？是区块链这四千亿美金市值盘子下的产品和工具的机遇。&lt;/p&gt;&lt;p&gt;第一个方向，是围绕着数字资产的持有者和创造者的产品和应用 —— 已有的大饼如何切。有以下机遇：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;cryptocurrency 交易所。这目前是属于币安们的舞台，很快也会迎来纳斯达克等传统交易所。也许未来 DEX（去中心化交易所）会成为重要甚至主要的力量。&lt;/li&gt;&lt;li&gt;数字投行。如果把 爱西欧 对应于 IPO，那么，谁来做区块链时代的高盛？摩根斯坦利？&lt;/li&gt;&lt;li&gt;数字投资。如果把 token 看做资产，那么，谁是区块链时代的富达，桥水？谁来帮用户管理数字资产，打造合适的 cryptocurrency portfolio，让其保值和增值？&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;币安每天 $10B 的体量，已经可以和中小国家的证券交易所的成交量匹敌，足以说明问题。而若能做成区块链时代的桥水和高盛，想想都能流口水。&lt;/p&gt;&lt;p&gt;第二个方向，用区块链取代现有的解决方案。有几个机遇：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;去中心化金融科技。Fintech 领域也许是目前除了交易所外最成熟的应用领域，如 Ripple。&lt;/li&gt;&lt;li&gt;反欺诈。在电商，p2p lending，crowdfunding 等方向有很多机会。&lt;/li&gt;&lt;li&gt;数据保全。在知识产权，证书，身份（identity），供应链，以及用户的积分体系等等都有产生高质量用户的机会。&lt;/li&gt;&lt;li&gt;智能合约（smart contract）和分布式应用（Dapps）。这是吵得最凶，最滥，关注点最高的领域，但目前除了以太猫（crypto kitty）外，似乎没有太多实质的应用。这个领域需要足够好的思考和最够完善的基础设施才更容易出成果。&lt;/li&gt;&lt;li&gt;小额支付/点对点支付。这是一个很重要的方向，目前以我有限的想象力还很难看出有什么需要用区块链取代微信支付的小额支付场景。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;第三个方向，打造更好的，技术更领先，更快，更容易构建应用的公链，以取代「缓慢」，「buggy」的以太坊。这个方向市场巨大，成则雄霸天下；却也是异常拥挤的红海，几乎 90% 的区块链公司都把自己定位于一个更好的公链，最终的结果是一将功成万骨枯。&lt;/p&gt;&lt;p&gt;第四个方向，是围绕打破区块链只是为技术极客设计的樊篱，让这个技术有更大的普惠性 —— 如何扩展这个大饼的边界。这是 Arcblock 看中的方向。它以下机遇：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;打造能够给菜场大妈使用的区块链产品（首当其冲的必然是钱包应用），让「旧时王谢堂前燕，飞入寻常百姓家」。&lt;/li&gt;&lt;li&gt;打造产品为第一个和第二个方向的公司服务，成为淘金者身边的李维斯。&lt;/li&gt;&lt;li&gt;打造产品以及构建生态，桥接 real world 和 blockchain world —— 让 app 开发者可以简单嵌入一个 SDK 或者调用一些 API，使用 blockchain 的各种能力 —— app 开发者甚至不需要知道 blockchain tech 的存在。就像 app 开发者基本上都会使用 HTTP 来承载网络上的数据，有那个 app developer 需要读 RFC2616 / RFC7540 呢？blockchain tech 终将需要发展到这一步。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;这里面的 2 和 3，就是 Arcblock 的机会。Arcblock 选择这个方向，是完完全全从用户的角度出发，因为历史一再证明，要想一门有使用场景的技术进入主流市场，简单易理解体验好是起码的要求，而对用户的简单则是对开发者的难题，有时甚至是难以逾越的天堑。arcblock 的壁垒将是对 2 和 3 的用户的需求的深刻理解，我们内部的服务提供能力，我们的 node 快速部署的能力，我们的 blocklet 的 auto scaling 的能力，以及我们在追求正确方向和正确道路上打造出来的创新和学习能力 —— 这些都是冰山下面的部分，是风停了之后我们依旧能够前行的能力。&lt;/p&gt;&lt;p&gt;因而 —— 我们的愿景是：&lt;b&gt;专注客户/用户对区块链技术的需求，成为区块链世界的 AWS&lt;/b&gt;。（尚待斟酌）&lt;/p&gt;&lt;p&gt;我们的使命是：&lt;b&gt;通过提供各种各样的工具，让区块链技术可以很容易地被任何公司，开发者和个人使用&lt;/b&gt;。（尚待完善）&lt;/p&gt;&lt;p&gt;而我们正在编撰的员工手册中，是这样阐释我们的价值观的（演进中）：&lt;/p&gt;&lt;blockquote&gt;我们的价值观由一系列原则构成，在这个员工手册的后续部分，会用很大的篇幅来介绍和讨论这些原则，其中最重要的是：&lt;/blockquote&gt;&lt;ol&gt;&lt;li&gt;无论是一线员工，还是部门经理，我们都是 arcblock 的领导者，并且有责任不断追求卓越。&lt;/li&gt;&lt;li&gt;保持简单。简单的人际关系，简单的组织结构，简单的工作流程。&lt;/li&gt;&lt;li&gt;我们按照原则行事。我们的工作原则由团队共同编撰和确认。如果发现已有的原则缺失或者并不适用，当事人有责任提交 PR，添加或者更新原则。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;我在 arcblock 做什么？&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;我作为 VP of Engineering 加入 Arcblock 的。在加入 Arcblock 的第一周，我干了几件事情：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;文化：和老冒一起讨论并且撰写公司的愿景，使命，价值观，以及做事的原则。我们上线了一个粗糙的内部网站：handbook.arcblock.io，公司的每个员工都能查看并且参与文化的制定（只需发一个 PR，merge 后自动上线以及生产 pdf）。当它足够成熟时，我们很可能会将其开源出来。&lt;/li&gt;&lt;li&gt;招人：大量的 interview。其中花费了不少精力，像这篇文章所述内容一般宣讲 blockchain 和 Arcblock。&lt;/li&gt;&lt;li&gt;育人：构建我们内部的 bootcamp，我们上线了一个培训网站：bootcamp.arcblock.io。过去一周我们已经举办五场内部分享，让团队尽可能 in the same page。&lt;/li&gt;&lt;li&gt;重塑开发流程：结合我在 Tubi 所学和 Arcblock 的现有流程，打造更加 PR driven / review driven / automation driven 的工作流程。&lt;/li&gt;&lt;li&gt;OCAP：Open Chain Access Protocol 的讨论和设计，以及 ocap-service 的技术选型和设计。&lt;/li&gt;&lt;li&gt;重构 Arcblock 的 infrastructure。我们开始拥抱 IAS（Infrastructure As Code）—— 从技术角度来说，这是我在 Tubi 最后几个月参与的最重要的项目。我们目前没有 Tubi 的人力，所以只能很聪明地使用社区的力量，利用开源来打造更好的 IAS。&lt;/li&gt;&lt;li&gt;参与 Arcblock 其它产品的讨论。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;接下来，这些展开的工作会继续进行下去，各种架构也会逐渐提上日程。我会跟各个 SAAS 服务的 vendor 打交道，把从开发到 on call 的一整套系统所需的能力打造出来，让每个工程师都有能力完成端对端的解决方案：&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-b1a16104b11f8d00c83b2726df1cb9d5_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1600&quot; data-rawheight=&quot;784&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;b&gt;我们期待你的加入&lt;/b&gt;&lt;/p&gt;&lt;p&gt;是的，我们正在大力招人。我们有以下团队正在大力招募（目前全部汇报给我）：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;design team：为 arcblock 设计从 VI，design language，一路到具体产品的 UI/UX。目前正在招募 1 名：&lt;b&gt;Sr. UX designer&lt;/b&gt;，以及 1 名 &lt;b&gt;Jr. UX designer&lt;/b&gt;。&lt;/li&gt;&lt;ul&gt;&lt;li&gt;要求：有良好的产品感觉，设计风格与客户端工程师契合，有扎实的手绘能力。&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;infra &amp;amp; service team：负责 IAS，OCAP，API / msg gateway，blocklet framework，backend of Arcblock services / management console，billing system 以及 marketplace。目前在招募 3 名 &lt;b&gt;Sr. Software Engineer&lt;/b&gt;，及 3 名 &lt;b&gt;Jr. Software Engineer&lt;/b&gt;。&lt;/li&gt;&lt;ul&gt;&lt;li&gt;要求：会至少两种编程语言，热爱软件开发，愿意提供端到端的解决方案（从需求分析，到讨论设计，到开发/UT，到部署脚本，到上线，到监控，到解决用户问题的整个 loop）。有 functional programming / erlang / elixir 经验优先。&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;client team：负责 web site，management console，billing system，marketplace，iOS / android app 以及 internal system 的开发。目前招募：3 名 &lt;b&gt;Sr. web frontend engineer&lt;/b&gt;，2 名 &lt;b&gt;Jr. web frontend engineer&lt;/b&gt;，1 名 &lt;b&gt;Sr. iOS engineer&lt;/b&gt;，1 名 &lt;b&gt;Sr. Android engineer&lt;/b&gt;。&lt;/li&gt;&lt;ul&gt;&lt;li&gt;要求（web）：熟悉 webpack 及前端基础工具链，对 react/vue/angular 其一有不错的开发能力且没有偏见，愿意使用任何一个 framework，能够独立开发一个完整的 SPA。有 electron 开发经验优先。&lt;/li&gt;&lt;li&gt;要求（mobile）：熟悉相关平台的 HCI，各种主流的开源 framework，能够独立开发精美的 app。有 swift / kotlin 经验优先。&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;data team：负责和我一起构建 arcblock 的 analytics data pipeline 和 ETL，处理 core company KPI metrics，A/B testing，打造 team 内部的 data-driven decision making 的文化。目前招募：2 名 &lt;b&gt;Sr. Data Engineer&lt;/b&gt;。&lt;/li&gt;&lt;ul&gt;&lt;li&gt;要求：会使用 python / scala 分析和处理数据，能够使用开源项目或者第三方服务构建 data pipeline，能够撰写基础的 machine learning models。有 airflow / redshift / athena 等工具经验者优先。&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;p&gt;以上所有 Jr. 职位都欢迎应届生和能够长期实习并有意愿留下的实习生。国内我们同样也招募有经验的 leader，可以是以上任意角色，70% 以上的工作是技术工作，只不过未来将会和我一起分担国内团队的培育和管理。&lt;/p&gt;&lt;p&gt;所有的职位都需要：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;关爱用户，热爱产品开发，愿意聆听用户的声音，能够自发不断优化用户体验（对于 backend，client engineer 是你的用户，interface 和latency 关乎你的用户体验）&lt;/li&gt;&lt;li&gt;有不错的审美能力，对不够美的东西有强烈的愿望去修正，有设计或者代码洁癖（不能容忍邋邋遢遢的代码，表意模糊的变量名，不合理的间距和字体大小等）&lt;/li&gt;&lt;li&gt;注重基础知识，注重细节&lt;/li&gt;&lt;li&gt;快速学习，对新技术保持饥渴&lt;/li&gt;&lt;li&gt;容易沟通，愿意分享知识&lt;/li&gt;&lt;li&gt;能够且愿意去思考问题，解决问题&lt;/li&gt;&lt;li&gt;愿意成长，能够接受在兴趣范围内的各种项目的开发&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;因为今年 2 月份我们已经完成了资金的募集（37500 ETH），我们的资金储备是完备的，这些资金大部分会投入在打造我们的产品和服务，也就是说 R&amp;amp;D 上。我们将会提供有竞争力的 package 和福利，同时，作为初始团队的一份子，你的眼界，人脉，圈子将有机会大大拓展。我们在打造我们自己的，类似于 facebook 的新员工 bootcamp，让你的知识体系得到全面地拓展（包括 blockchain / backend / devOps / client / design / arch 等），同时 weekly BBL，让你的知识总能跟得上同事们，以及时代的脚步；除了各种内部的学习机会外，我们还会提供各种会议，培训，课程的机会，让你可以在 Arcblock 的生涯快速成长。我们在构建我们独特的员工手册，类似 Ray Dalio 在桥水做的那样，因而你有机会参与最初版本的修订。&lt;/p&gt;&lt;p&gt;对于美国和国内的团队，出差是必不可少的，而且未来并不仅限于中美两地，因为 blockchain 天然具备全球化的各种要素。&lt;/p&gt;&lt;p&gt;对于中国的团队，我们也将尽快完成我们的 WOFE 公司的设置，让 L1 肉身翻墙成为你的一种选择。&lt;/p&gt;&lt;p&gt;我们不要求 996，绝大部分时候，你只需要朝九晚六即可 —— 我们坚信你需要时间在不同的方向学习，读书，旅行，需要时间享受生活，需要时间陪伴家人。我们希望工作能够在白天完成，这样你不必心怀愧疚地很晚到家，面对心情不好的另一半 —— 相信我，对于年轻的夫妇来说，这是很糟糕的体验。但当你工作时，我们需要你投入其中，&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;amp;mid=401127730&amp;amp;idx=1&amp;amp;sn=11ca3c73adc4f0821f387d1e4514a011&amp;amp;scene=21#wechat_redirect&quot;&gt;make good art&lt;/a&gt;。就像伟大的 UCLA 教练 John Wooden 对他的小伙子们说的那样：make each day your masterpiece。&lt;/p&gt;&lt;p&gt;最后，除 design team 外的所有职位在美国和中国均有名额，并无区域上限。在美国，工作地点是宇宙中心 &lt;b&gt;Bellevue City Center&lt;/b&gt;（不支持 remote，你看我都从湾区爬过来了）；在中国，工作地点即将安排在真正的宇宙中心 &lt;b&gt;北京望京&lt;/b&gt;（望京 SOHO，阿尔法公社，或者其他，待定）。上海的朋友们请原谅我，我们经过考虑，觉得北京更加适合寻找到我们所期待的人才。同样，国内我们也暂不考虑 remote。&lt;/p&gt;&lt;p&gt;如果你感兴趣，愿意来西雅图或者北京的 arcblock 工作，那么，请将简历发至：career at arcblock.io，标题注明你的名字，想申请的职位，工作地点，以及来自知乎专栏（e.g. subject: Meimei Han - Sr Web Frontend Engineer - Beijing - 知乎专栏）。我们会优先处理。&lt;/p&gt;&lt;p&gt;6 月份初，我会回国，希望到那时可以和北京的同学们一同工作和修习。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;禅定时刻&lt;/b&gt;&lt;/h2&gt;&lt;blockquote&gt;Success is peace of mind attained only through self-satisfaction in knowing you made the effort to do the best of which you’re capable. Regarding success, others cannot judge you; it’s like character and reputation: your reputation is what you’re perceived to be; your character is what you really are. And what you really are is much more important than what you’re perceived to be.&lt;br&gt;&lt;br&gt;- John Wooden, The Coach, UCLA, Ted Talk “The difference between winning and succeeding”&lt;/blockquote&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2018-05-07-36555780</guid>
<pubDate>Mon, 07 May 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>Tubi 为什么</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2018-04-26-36138310.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/36138310&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-917202fe75e07e966742f4646c6bd008_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;在一段旅程行将结束的时候，retrospective 是最好的临别礼物。Tubi 是一家独特的 startup，站在外人的角度，你很难想象这样一家不到三十个工程师的公司，竟然同时维护着五个主要的产品线：二十多种客户端软件（并且还在不断增加）；五十多种自研或者第三方的后端服务（即便第三方，也还需要部署升级记录 metric 等维护工作）；一个完备的广告系统；一套复杂的 data pipeline 和 personalization engine；还有，刚刚研发成功的，堪比 netflix 水平的下一代转码系统。做同样的事情，Hulu 有数百（甚至成千）工程师，而 netflix 有数千工程师。所以我在为之自豪的同时，常常在想，究竟是我们做对了哪些地方，才导致这样的结果？毛同学在《实践论》中说：认识从实践始，经过实践得到了理论的认识，还需再回到实践去。本文，我希望能探讨并总结出理论的认识，从而指导自己下一步的实践。&lt;/p&gt;&lt;p&gt;我们先从这五条产品线面临的挑战起，看看 Tubi 的研发之道。为了避免文字过长，我主要讲讲 1) 客户端软件 2) 后端服务 3) 转码系统。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;客户端软件&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;对于 Tubi 这样的 streaming service，铺的客户端越多，能接触到的用户就越多，用户在某个时刻打开某个设备，使用我们的服务的几率就越大。所以我们要支持尽可能多的主流客户端（就北美市场而言）。而为了最好的体验，自然是能够 native，就 native。所以，iOS / android / roku，这样的有战略意义的平台，我们都用 native code 来完成（这几个平台放下不提）。而 Over The Top/smart TV（以下统称 OTT），品类众多，除了 FireTV 外虽然每个单独都不成势，但合并统计则规模巨大。从研发的角度，我们对其无法一一单独实现，所以选用了 html5 app 或者 hybrid 的方式来统一实现。&lt;/p&gt;&lt;p&gt;即便统一使用 html5 app，还有两个棘手的问题：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;每个厂商都有各自的 SDK 或者 API。所以要支持数量众多的 OTT 产品线，到具体的执行细节，还有很多很多要单独处理的部分，尤其是 video player。&lt;/li&gt;&lt;li&gt;由于使用 html5 app，每种客户端我们都需要部署其对应的 server 端，和 client 端的代码一同完成 app 的功能。十多个 app，每做一个功能，除了功能本身的 UT 外，这么多平台的 end-to-end testing，就是件让人头疼的事情；部署更是如此。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;要应对这样的挑战，一种方案是往上扑人，每个人（每几个人）负责一款产品；另一种方式是拥抱技术，尽可能把重复的工作外包给设计精良的架构，以及自动化脚本或者软件 —— 如果人手不够，不得不扑更多的人，那么增加工程师的目标是加强自动化，让架构更好，而不是在执行层面使蛮力。&lt;/p&gt;&lt;p&gt;Tubi 选择了后者。我们的目标是清晰的：write once, run everywhere。&lt;/p&gt;&lt;p&gt;对于第一个挑战，我们设计出一个 common layer 来处理 networking，metrics，analytics 以及 non-video player features；而对于 video player，又构建了一个 abstract player layer，来处理 video player 层的 ads playback，ads tracking 等，最后，在这个通用层之上，我们再构建每个平台特定的 video player。&lt;/p&gt;&lt;p&gt;对于第二个挑战，我们打造了一整套完善的 infrastructure 和部署流程。这意味着意味着我们铺新的平台，只要遵循一套既定的接口，能很快很产出对应的 OTT 产品，然后通过一条部署命令，将产品上线。在这一条命令之后，蕴含着巨大的工作 —— 服务器要部署，metrics 要收集，consul，envoy，datadog 等工具各司其职；代码要妥善打包 —— 不同的 OTT 还要考虑不同的打包方案：有的智能电视，内存就 50M，react 跑上去就容易崩，所以我们根据需要，选取 react 的替代品，并且将 dead code elimination 做到极致。&lt;/p&gt;&lt;p&gt;这便是从技术的角度来减轻丰富的产品线对人的依赖。我们的 web/ott 团队在今年 3 月份前，还仅有五人（只有两个 Sr. eng）。我们不搞 996，两个 Sr. eng 还有很多日常的管理任务，却把十几个平台的产品线处理地井井有条。&lt;/p&gt;&lt;p&gt;拥抱优秀的架构，拥抱 automation，化繁为简，是我们在客户端（以及所有研发）上面的成功之道。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;后端服务&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;对于 VOD 业务来说，后端服务主要是高效稳定地提供给客户端可访问的视频列表。这话说起来轻巧，不就是提供一系列 API 从 DB 里面读数据，然后做些 business logic 的处理，然后返回数据嘛？是这么回事，但做起来，或者做好，其实很困难。我在 &lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;amp;mid=2649827567&amp;amp;idx=1&amp;amp;sn=a001443824781ee8fa02ebd0d9b6d289&amp;amp;chksm=8704aaf3b07323e5dc9b29ed954aff78482de9dd7192917daea06e1619afc0de392c6eefd206&amp;amp;scene=21#wechat_redirect&quot;&gt;Policy Engine 的前世今生&lt;/a&gt; 一文中写到：&lt;/p&gt;&lt;blockquote&gt;一部电影的窗口期有时候会很复杂，有可能同时存在多个窗口，瞎编一个栗子：&lt;br&gt;&lt;br&gt;美国用户一季度可以在 roku，xbox 上访问&lt;br&gt;美国用户三季度可以在 web，iphone，ipad，android 上访问&lt;br&gt;加拿大用户 3-4 月可以在 appletv 上访问&lt;br&gt;英国用户 12/1 - 12/15 日可以在 firetv 上访问&lt;/blockquote&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;当每次 API 请求时都需要根据访问者的上下文（当前日期，地点和播放平台）计算这些规则的时候，效率是很低的，即便大量使用缓存，对于 95%-tile response time 来说，还是提升不大。我们用 nodejs 和 jison 开发了一个 rule parser（关于如何用 jison，见我的文章 &lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;amp;mid=210542047&amp;amp;idx=1&amp;amp;sn=9c813595c727c0fa028651b9dcdbab12&amp;amp;scene=21#wechat_redirect&quot;&gt;如何愉快地写个小parser&lt;/a&gt;），性能不错，但没有特别本质的飞跃，所以我们另辟蹊跷，研发了一个 policy engine 来解决这个问题。在 policy engine 研发的过程中，我们发现虽然通过 data as code 的方式让一次性计算大量的视频是否能在当前上下文播放这件事情做到了极致的速度，但随之而来的 recompile time 是个瓶颈，如果无法解决这个瓶颈，我们可能存在一个窗口期，把不该提供的视频提供给用户，这将是个很严重的问题。&lt;/p&gt;&lt;p&gt;摆在我们面前的是两条路 —— 一条是回到之前 rule parser 的中庸之道，不犯错；另一条是死磕 recompile time，将其优化到可以接受的范围。&lt;/p&gt;&lt;p&gt;我们选择了方向上对但异常艰难的路子，经过不断打磨，最终将 recompile time 从 10 分钟缩小到 20 秒。这里面，我们发现了一些 elixir 在极端情况下的问题（比如反复 compile，atom 会耗尽），并且将其反馈给社区；我们自己也为此开发了一个 autocompiler 的 service，来处理 elixir 服务中这种可能存在的，通用的 on-the-fly recompiling 的情况。&lt;/p&gt;&lt;p&gt;policy engine 让我们的服务性能提升了一个甚至多个量级，让各种 API 可以以此为基础，随心所欲打造想要的功能。通过 policy engine，我们学到一个关键的认知 —— &lt;b&gt;量变真的能够引发质变&lt;/b&gt;：当性能提升一个到若干个数量级，整个世界都不太一样了。之后，在 Tubi，我们尽可能做这种数量级级别的优化，让产品和研发的潜能大大释放出来，从而把一个个 “doesn’t make sense” 的问题变成 “why not”。&lt;/p&gt;&lt;p&gt;我们在做后端服务时，尤其是早期的 API system，一个重大的挑战是：&lt;b&gt;如何让平庸的程序员也能产出相对高质量的 API 接口和代码&lt;/b&gt;。所以我们除了有良好的架构外，还提供了一套简单的定义 API 的 DSL，让很多 &lt;b&gt;正确的事情自动发生&lt;/b&gt;，这在我的 &lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;amp;mid=401902529&amp;amp;idx=1&amp;amp;sn=575ae8fdf163afa30604d712a73079fd&amp;amp;scene=21#wechat_redirect&quot;&gt;再谈 API 的撰写 - 总览&lt;/a&gt; 系列文章中提到，就不赘述。除此之外，我们还对内提供方便非工程师使用的 DSL，方便工程师调用的 engine 和 SDK，比如 policy engine，materialization engine，envoy/dataplane SDK 和 A/B testing SDK 等。这些 DSLs， engine 和 SDKs 把大量的细节隐藏在简单的 API 之下，从而让整个 team 都能够受益。&lt;/p&gt;&lt;p&gt;多说两句 DSL。大概一年半以前，我定义了一个 feed DSL，来描述来自内容合作方的 feed 的 metadata 如何跟 Tubi 内部的系统对应。feed 的类型有 xml / json，各个域出现的位置和名称也各不相同，甚至数据类型也不相同，但它们都有类似于 title，duration，description，starring，image，video url 等信息。我们之前的做法是每个 feed 一个 class 去处理，它们大致相同，但处理细节很不一样，最终形成了几十个文件的冗长混乱的代码库。在对其抽象出 feed DSL 之后，我们只需要写一个 parser，根据 DSL 里的描述，做相应的转换。之前，每次添加一个新的 feed，都要用去工程师半天到一天的时间（copy &amp;amp; paste &amp;amp; modify）；当 core feed logic 有 bug 时，工程师需要花好几天修复并在几十个 feed 的源码中确保同样的问题不再出现。在一年半前我们重写了这部分逻辑后，feed parser 几乎没有改动过，而添加新的 feed，则可以由非工程师很快写完，且很不容易出错。关于这个的细节，可以看 &lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;amp;mid=401779088&amp;amp;idx=1&amp;amp;sn=99554843a8324b4fbfe5684784e38cb9&amp;amp;scene=21#wechat_redirect&quot;&gt;抽象的能力&lt;/a&gt;。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;转码系统&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;transcoding（视频转码）是 VOD 业务的一个重头戏，它将原始的视频文件转换成各个客户端可以流畅播放的格式和大小。在 Tubi，我们一份原始视频要转码成十多种不同的码率和尺寸，而我们的合作伙伴经常是批量给我们视频资源，因而，我们的 transcoding queue 经常会有成百上千的视频等待转码。&lt;/p&gt;&lt;p&gt;一份两小时的视频，转成十多个不同的结果，其所花费的时间，在 c4.4xlarge 的机器上，要十多个小时。如果你整个视频库规模不大，而日常待转的视频在几个，至多几十个时，这并不是问题。而 Tubi，在 2017 年，可供北美观众播放的视频就超过了 netflix，同时由于我们业务的特殊性（视频有多个可播放的窗口），我们的整个媒体库要比我们可播放的视频高了一个量级。所以我们日常有大量的视频等待转码。netflix 的 transcoding 技术独步全球，尤其是其 parallel transcoding 的能力，可以在几分钟完成别人几个小时完成的事情。在 Tubi，我们学习 netflix 的思路（netflix 有一篇简单的 blog 讲述其 pipeline），随后三个半工程师经过数月的努力下，用 elixir 构建和发布了一个高可伸缩的 transcoding engine，以及从内容合作方上传开始，一直到我们 transcoding 完成的整套解决方案。这个 engine 可以把大的视频文件切割成上千个 chunk，每个（或者若干个）chunk 被分配到有数百个 core 的集群里的一个 core 上去单独转码，然后做后续处理。上文说了，当性能提升一个到若干个数量级，整个世界会以一个前所未有的方式呈现在你面前。以这种强大的转码能力为后盾，我们整个内容处理系统（content pipeline）跳出了传统 VOD 厂商的视野，已经瞄上了新的领域（现在还不能说）。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;总结&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;很多问题，往往是大到一定规模，其真正的难度才浮出水面。streaming 业务并不是一个困难的业务。表面上看，Tubi 和她的竞争对手们，似乎并没有什么不同。然而，当竞争对手们（比如 Crackle)，把大把大把的银子投在 marketing 和 user acquisition 上的同时，Tubi 把钱用在研发。在 2 月份在 Napa 的年度 executive offsite 上，CEO Farhad 跟我们讲了他对 Marketing 和 R&amp;amp;D 愿景 —— 他说他希望在未来的三年，我们在技术上（尤其是 machine learning）方面累积的能力能够让 Tubi 在 user acquisition 上花费接近为零，从而让我们可以把节约出来的钱全部撒向 R&amp;amp;D，进一步拉大和竞争对手在研发能力上的差距。所以，要回答 Tubi 为什么，最重要的一个答案，也是我们的原则是：&lt;/p&gt;&lt;p&gt;&lt;b&gt;把赚到的钱不断投入在研发上。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;这听上去是稀松平常的，人人都知道的道理；但知易行难 —— 坚持，一心一意地坚持，实在是太难了：20多年过去了，巨大中华就是最好的注脚。荀子说：积水成渊，蛟龙生焉 。Tubi 在过去的四年里，就这样一点点熬着，投入着，直到今天。&lt;/p&gt;&lt;p&gt;也正因为此，在这场 AVOD（Ads supported VOD）的马拉松中，Tubi 后发却逐渐赶超，成为第一集团的领头羊。在 Tubi 把研发能力瞄准在能够处理 world’s largest premium contents 时，竞争对手们还在醉心于用钱堆出来的 MAU；当 Tubi 在把一项又一项关键研发能力打造到 a magnitude better 时，竞争对手也还在醉心于用钱堆出来的 market awareness。AVOD 群雄割据的版图就像战国七雄，而 Tubi 的竞争对手们，则像极了昏庸不争气的楚国，或者只知空谈的齐国。&lt;/p&gt;&lt;p&gt;有了「把赚到的钱不断投入到研发上」这个基础， Tubi 渐渐形成自己的研发之道 —— 我总结出来的几条原则是：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Build things that a magnitude better.&lt;/li&gt;&lt;li&gt;Build architecture, interfaces, engines, SDKs, DSLs and processes that makes average brains capable to produce outstanding results.&lt;/li&gt;&lt;li&gt;Put money on building (or acquire) tools to solve the problems, rather than putting money on people to repeatedly deal with the problems.&lt;/li&gt;&lt;li&gt;Build the invisible competitive advantages that take time.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;话说到这份上，你一定有一个问题：&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-9960bf2a0b7ab8fc4f54338c1e1a306b_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1224&quot; data-rawheight=&quot;609&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;招招招！（以下广告时间）&lt;/p&gt;&lt;p&gt;我们在北京计划招 4 个 engineer，技术方向在 Nodejs，Data/Algorithm，Elixir，Scala。工作地点：望京 Wework。福利及详情见我之前的文章：&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;amp;mid=2649827713&amp;amp;idx=1&amp;amp;sn=15812dea50e8c3af3a01723429649a18&amp;amp;chksm=8704ab9db073228b009febcc144780b99a2064cd66aaf2213abbd420ab2e98fce82ccf9d010f&amp;amp;scene=21#wechat_redirect&quot;&gt;Tubi TV 继续招募英才（5人）&lt;/a&gt;。（为了继续扩大中国团队，我们已经把办公室从 9 人间换成了 21 人间）&lt;/p&gt;&lt;p&gt;同时我们在旧金山也有很多职位空缺，技术方向在 Elixir，Data/Algorithm，Scala，Front-end，Android，Data Science。工作地点：315 Montgomery St。详情请访问 tubi.tv/jobs。&lt;/p&gt;&lt;p&gt;每个职位发展空间巨大，自由度较高，适合有事业雄心，愿意 make a difference 的人才加入。&lt;/p&gt;&lt;p&gt;基本要求：&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-1b089ba513a7698e7eda68967acbfc70_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1600&quot; data-rawheight=&quot;769&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-63cd132900e921abe9edc148dc402a9d_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1600&quot; data-rawheight=&quot;800&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;不要谦虚，狠狠地把简历砸给 talent@tubi.tv（应聘中国团队请在邮件 subject 里注明 China team，并提供中英文简历），程序君在此谢过了！&lt;/p&gt;&lt;p&gt;如果你想对 Tubi 有更多的了解，可以猛戳：&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;amp;mid=400501814&amp;amp;idx=1&amp;amp;sn=cc7a712d78e9263fa5fac0bc145c8056&amp;amp;scene=21#wechat_redirect&quot;&gt;派拉蒙，米高梅和狮门&lt;/a&gt; &lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;amp;mid=400531816&amp;amp;idx=1&amp;amp;sn=029b1ef56ebd3ad7fdaa643913ba2513&amp;amp;scene=21#wechat_redirect&quot;&gt;缘分天注定？&lt;/a&gt; &lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;amp;mid=2649827333&amp;amp;idx=1&amp;amp;sn=84d94dacc06dd3ddf4d5dc60fc896f20&amp;amp;scene=21#wechat_redirect&quot;&gt;向左走，向右走&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;amp;mid=2649827589&amp;amp;idx=1&amp;amp;sn=b10f3d0979fd5eda86ebb656fd38186d&amp;amp;chksm=8704ab19b073220f1b4d18cb0aabcb1b4fc34bc0ffa85df1a73bac7502bef42775b9404e8ce8&amp;amp;scene=21#wechat_redirect&quot;&gt;程序员字典：「牛逼」&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;amp;mid=2649827586&amp;amp;idx=1&amp;amp;sn=e33def1e9bcdb2fc46c2cf68dab187ce&amp;amp;chksm=8704ab1eb07322087b415ed5743800cf59d3738fed2bee4051a68eec4dba278b2f61e92711f0&amp;amp;scene=21#wechat_redirect&quot;&gt;新的冒险&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;amp;mid=2649827983&amp;amp;idx=1&amp;amp;sn=2a484ef76354f9ca10f7a49c28594bc4&amp;amp;chksm=8704a893b073218560be4b52bd6431cbb8c17b004e3d55a2296c89af09f901ed842ebd81da7b&amp;amp;scene=21#wechat_redirect&quot;&gt;告别 Tubi：我讲了三个故事&lt;/a&gt;&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2018-04-26-36138310</guid>
<pubDate>Thu, 26 Apr 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>告别 Tubi：我讲了三个故事</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2018-04-13-35616587.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/35616587&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-88b8ae023accb56e5501f792e2c9349a_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;blockquote&gt;宿雨收尘，朝霞破暝，风光暗许花期定。 —— 《踏莎行》晏几道&lt;/blockquote&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-88b8ae023accb56e5501f792e2c9349a_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1440&quot; data-rawheight=&quot;1080&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;这是我 3 月 23 日的一则朋友圈。下了一夜的雨后，清晨的 AT&amp;amp;T 球馆，如出水芙蓉，美目盼兮。走在去往公司的路上，我心情复杂，因为我终于要告诉老板我计划四月底离职的消息了。&lt;/p&gt;&lt;p&gt;是的，三月初那次西雅图之旅后，我便已下定决心，挥别 Tubi（虽然非常依依不舍），投身 blockchain 技术。之所以过了三周之后才告白，是因为我们正在做数据中心的迁移工作 —— 我不想因此而动摇军心，让这个项目再度延迟。好在 22 号凌晨的迁移，一切还算顺利，心口悬着的石头终于落地。&lt;/p&gt;&lt;p&gt;对我而言，这是一个异常艰难的决定 —— 从任何角度来看，Tubi 都处在它生涯的最好时光：我们的 personalization engine 表现超乎预期，内容越来越好，服务稳定，数据中心的迁移（主要是 Infra as Code）奠定了两三年甚至更久的 infrastructure 的基石，销售业绩更是芝麻开花节节高：我们在连续几年超过两倍的增长后，步入到一个新的，更具爆发力的拐点 —— 业绩历来最惨淡的一季度，竟然创出了有史以来最好的单季收入。即便不考虑今年的爆发，按照之前年均两倍增长的节奏，不出三五年，我们就有望摘取胜利的果实。&lt;/p&gt;&lt;p&gt;而要做 blockchain 就不可能避开的 cryptocurrency，则刚刚度过一个起高楼宴宾客的火爆的 2017，应了老子那句「物壮则老」，开始走下坡路。2018 年，比特币于高点已去将近一半，楼塌之言并不算得上是悲观之论。所以从入场的时机看，不算很好。&lt;/p&gt;&lt;p&gt;“Are you SERIOUS?” 这是我老板 Marios 和 Farhad 在听了我的决定，惊愕之余的第一反应。但既然我做下了决定，它便是一个 serious 的决定。对一个执拗的水瓶座来说，这样的决定一旦和家人（主要是妻子）商量妥帖，对朋友同事老板而言，剩下的就是交代。几个月前狸叔一篇文章谈起邹胜龙，满纸辛酸，说：人到中年，真心就是交代二字。我是越来越感觉到这两字的千钧之力。&lt;/p&gt;&lt;p&gt;老板们想尽各种办法留我，甚至在两次受挫后，在我从北京出差回来之后，不惜代价提出一个几乎我不该拒绝的方案。我还是善意地回绝了。我很感激，但我跟他们说，创业公司要死磕那些我们达成共识的 KPI，因而不该有人和 team 游离在这之外，享有特权。我们不是微软，在这个阶段不需要光吃草不产奶的研究型团队。&lt;/p&gt;&lt;p&gt;在他们还在纠结如何留我的同时，我花了一周把手头的事情了结。我写了一份关于 China team 每个人的 SWOT 分析的手稿，完成了计划中的 engineering bootcamp 的目标和初始的课程设置 —— 这将是一个造福 Tubi 未来，让 Tubi 源源不断产生合格工程师的重要项目。这是我对 Tubi 的交代。&lt;/p&gt;&lt;p&gt;终于，这周一，在我首次提出离职两周后，我们达成了共识。我花了整整一天的时间，和美国的团队，在美国出差的中国团队，以及还在北京的中国团队，一一谈话，挥手告别。周一早上十点开始，我开始和每个人聊，几乎不间断地重复回答大致相同的问题：为什么？去哪里？做什么？我们怎么办？产品怎么办？中国团队怎么办？未来怎么搞？一直聊到晚上十一点半，中国团队的最后一个人聊完。&lt;/p&gt;&lt;p&gt;随后，我们周二，也就是前天的例行 all hands meeting，Farhad 宣布了这一消息。他说了很多我的好话，说得我有些热泪盈眶。随后，他邀请我上台，讲点什么。&lt;/p&gt;&lt;p&gt;而我，准备了三个故事。这三个故事，既是给我的同事们的，也是给我自己的 —— 我希望，你看到这篇文章时，也能 get 到一点点东西。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Serendipity&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;第一个故事是和 Tubi 的邂逅。serendipity 这个美妙性感的词儿，我在 &lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;amp;mid=400531816&amp;amp;idx=1&amp;amp;sn=029b1ef56ebd3ad7fdaa643913ba2513&amp;amp;scene=21#wechat_redirect&quot;&gt;缘分天注定？&lt;/a&gt; 里面写过。那时我拿到 O1，正式加入 Tubi，正是意气风发的时候。我是这么说的（大概，有些内容准备了但没讲)：&lt;/p&gt;&lt;blockquote&gt;2015 年初，我踏上了美利坚的土地。很快，我认识了 Haofei。他是个聪明的小伙子，常来我家做客，然后跟我探讨当时 Tubi 在生产环境遇到的各种问题。他成功激发了我对 Tubi 这样一家创业公司的好奇。当那年 7 月份他兴冲冲告诉我 Tubi 正在招一个 VP of Engineering，要不要试试？我几乎毫不犹豫地答应了。我见了公司的创始人 Farhad 和 Tom，也跟团队一一见面。虽然我们互相倾心，但横亘其中的是签证问题。我拿的 L1 签证，无法换工作。Farhad 和 Tom 显示出了极大的耐心和诚意 —— 为我办理 O1 签证至少需要三个月之久，成功的概率也就在 50% 上下，然而他们甘愿冒着风险等待。终于，我如愿以偿，拿到签证，在 11 月加入 Tubi，写下了《缘分天注定》那篇文章。当时我不少身在美国的朋友很惊奇，下载了 Tubi TV 的 app，然后跟我说：这公司的 app 很烂，影视剧也很烂，没一个我想看的，你为什么要加入这么一家公司？&lt;br&gt;&lt;br&gt;我是这么回答的：&lt;br&gt;&lt;br&gt;「我跟创始人深入聊过，我觉得有两点 Tubi 做的很好，所以一定能成：1) 创始人对数据的重要性非常清楚 —— 我们 app 做得的确很烂，backend 更是烂到令人发指 —— 一个 API 要花近 10s 才返回结果，但这么烂的产品之下竟然有一套完整的数据采集和处理的流程 —— 即便大家不知道这数据怎么更好地使用；2) 在这么烂的系统之下，公司仍然有坚实的，不断增长的收入，所以这是一个 business，好的 business。而 engineering，没有什么黑魔法，只要我们有正确的架构，正确的人，正确的方法论，假以时日，一切都会变好。途客圈给我的教训是，engineering 再棒，没有 business，撑不到可以真正发展得哪一天；而 Tubi，几乎是万事俱备，只欠东风」。&lt;br&gt;&lt;br&gt;幸运的是，在大家共同的努力下，两年多的时间，Tubi 走到了今天。我们的服务越来越快，95%-tile response time 以 ms 来计，有些甚至可以用 us 度量；我们的内容一日千里，现在各种大厂的优质影片；而我们的 revenue，正如大家看到的，一季度我们刚刚度过有史以来最好的季度。&lt;br&gt;&lt;br&gt;这是一段让人难以忘怀的两年半，也是我个人成长最重要的两年半。我非常感激 Tubi 让我经历这一切。&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;Believe&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;第二个故事是关于信仰。说给团队听，其实也是说给我自己听的。&lt;/p&gt;&lt;p&gt;我原本准备的故事是 netscreen 的故事。之前读过童建和陈怀临的关于 netscreen 早年峥嵘岁月的故事，除了创业艰辛，事在人为，不让客户的问题过夜这些感悟外，我最大的收获是这么一段话（原文记不太清了）：我们一帮二流工程师组成的三流公司，打败一流公司（Cisco），硬生生把硬件防火墙这件事做成，靠的是我们相信这件事情能够做成，以及作为第一代技术移民，这事不成我们没有太多退路。我本想用 netscreen 的故事来探讨 believe is self-fulfilling prophecy，但考虑到把这个故事讲给网络圈外的人士听，有太多太多的知识点和细节需要普及。所以在台上，我讲了一个我讲过无数遍，每一次谈起都能激励自己的故事：Roger Banister 和 four-minute mile。&lt;/p&gt;&lt;p&gt;如果你听过 Tal Ben-Shahar 的 positive psychology，你对此一定不陌生。我是这么说的（有些内容当时一激动忘记讲了）：&lt;/p&gt;&lt;blockquote&gt;几十年前，四分钟时间内跑完一英里被认为是不可能的事情。很多顶尖的运动员不停地尝试，失败，尝试，失败 —— 哪怕非常接近四分钟，也没有任何人突破四分钟，因而四分钟跑完一英里被认为是人类的极限。甚至，科学家，生物学家都在不同场合，试图证明这一点。Roger Banister，剑桥的一个博士生，对这个所谓的极限非常怀疑：如果有一个极限，为什么这个极限恰巧是一个整数？为什么不是3’59“48？于是他就训练自己，试图突破这个所谓的极限。他不停尝试不停失败，一年又一年。终于有一天，在一次运动会上，他跑进了四分钟。全世界沸腾了 —— 头版头条纷纷记录这一英雄般的壮举。&lt;br&gt;&lt;br&gt;故事到此，其实才刚刚开始。就在他打破记录的一周后，一位澳大利亚的运动员，把他的记录进一步推进。之后又有别的运动员纷纷成功进入四分钟。自从他打破这个魔咒后，一年里有十几个运动员都完成了同样的事情。&lt;br&gt;&lt;br&gt;这让人叹为观止 —— 他们是同样一批运动员，训练方法并未有本质突破 —— 之前他们无法达成的夙愿，在 Roger Banister 完成尝试之后，却轻松完成。短时间内，他们身体上并未变得更好，但是，他们的思维，从「这是一件绝不可能发生的事情」，转变成「这事竟然发生了，那么我也可以做到」。当你相信你能做成一件事情的时候，你在主观上总是能去寻找不同的方法，从而不停地尝试和改进，直到做成。&lt;br&gt;&lt;br&gt;在 Tubi，我们也经历过自我怀疑的时刻。我们曾经有一位产品经理，在深入研究和分析过我们的 retention 后，得出结论，我们根本留不住用户，大概 3-6 个月，新用户便流失殆尽。一个做了好几年的公司，留不住用户，那么，product/market fit 一定出了问题，我们要重新审视我们的 product 的方向，及时转变方向，找到 product/market fit 的点。佐证这个观点的那些冷冰冰的数字，看了就让人透心凉。&lt;br&gt;&lt;br&gt;对于这个观点，我们产生过激辩。我们都认同我们的 retention 有问题，但我们不相信是 product/market fit 的问题，我们坚信我们的方向是正确的，出问题的部分是 product/engineering。我们为此把 retention 作为一个最重要的 KPI 在 product 和 engineering 层面不断优化 —— 对于 engineering 来说，就是不断提升性能，提高品质，降低崩溃率。最终，我们的 retention 渐渐做上来，一切变得美好起来。&lt;br&gt;&lt;br&gt;如果我们在那个时刻认命，失去信心，放弃寻找解决之道，那么，我们熬不到曙光初现的今天。&lt;br&gt;&lt;br&gt;Believe is self-fulfilling prophecy.&lt;/blockquote&gt;&lt;h2&gt;&lt;b&gt;Time&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;我的第三个故事有关时间。是我自己的经历。&lt;/p&gt;&lt;blockquote&gt;首先问大家一个问题，什么是时间？在我看来，时间是从因到果的一个度量（a measurement from a cause to a result）。&lt;br&gt;&lt;br&gt;人们总是问我，为什么你有如此之多的时间？一天花差不多四个小时通勤，要至少花些时间陪两个孩子，要管理一支 local 的团队，还有一支在中国的团队，还要写很多代码，还做自己的 side project，然后竟然还有工夫写文章。&lt;br&gt;&lt;br&gt;我是这么回答的：因为时间于我，尤其是空闲时间，太过稀缺（scarcity），以至于我不得不把点滴时间尽可能利用起来。当一件事情看上去很稀有，你才会格外珍惜它，从而好好利用它。&lt;br&gt;&lt;br&gt;我的第三个故事，源于我和女儿睡前故事后的一次对话。它就发生在几天前。&lt;br&gt;&lt;br&gt;那天晚上，我例行给她讲完故事。她问了我一些问题 —— 我现在已经完全忘记是什么问题了。然而我脑子被驴踢了，这么回答她：中国男性的平均寿命大概是 73 岁。爸爸已经活了 36 岁，所以能够陪伴你的时间只有 37 年。到你 18 岁的时候，我就只有 24 年的时间和你在一起。她听了之后先是一怔，继而放声大哭，边哭边说：爸爸，我希望你能活一百万年。那晚我额外多花了半个小时哄她入睡。&lt;br&gt;&lt;br&gt;回到书房，我才意识到，这是一个全新的，看待时间和生命的视角。生命真的很短暂。&lt;br&gt;生命真的很短暂，非常有限。你要学 elixir，最好现在就开始；你有还没解决完的 bug，fight with it。认识到生命的短暂之后，你总是能挤出时间做那些一直拖着，本想慢慢做的事情。重要的是，你会意识到，你是自己时间的主人，就像《肖申克救赎》里，杂货店老板对 Red 说的那样，你想尿尿，就去尿尿，不需要我的命令。是的，你不需要等待别人的命令来做某件事情。在 Tubi，我们有太多太多未解决的问题，你可以立即行动，而不必手头没有任务而荒度一天。&lt;br&gt;&lt;br&gt;和我一样，你在 Tubi 的时间其实也是非常有限的。我的日子还剩下 13.5 个工作日，你也许还有 250 个工作日，那是一年时光，或者 500，或者 1000，甚至 3000 个工作日。无论多寡，它都不是无限的（infinity）。如果你真正看到了这一点，你总能对团队做出比现在更大的贡献。你会更努力地工作，解决问题 —— 你若种下了这个因，剩下的 —— result，无论是金钱，地位，经验，能力，作为一个滞后的因子（trailing factor），都会随着时间的脚步最终追上来的。&lt;/blockquote&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2018-04-13-35616587</guid>
<pubDate>Fri, 13 Apr 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>Servicewall 在北京招人啦</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2018-04-10-35483281.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/35483281&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-5f6a79509fc0ef1e46943dbfe0109543_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;三月底回京，对我而言，最具爆炸性的新闻是 Juniper 北京研发的头儿，我的前老板李沙浪，离职创业了。作为一个浸淫在网络安全行业二十多年的老兵，他的这一步让我意外而惊喜。他的创业伙伴韦文，之前是 American Express 的 VP，再之前和沙浪一样，都是 NetScreen 的前辈，随着 NetScreen 一起打拼到上市。现在大家可能对 NetScreen 没有什么印象，但在 2000 年前后，NetScreen 是网络安全领域的翘楚，靠着硬件防火墙的强大功力，在市场上攻城略地，一度三分天下有其一，也是 911 后第一个高科技公司 IPO。2004 年 NetScreen 被 Juniper 四十多亿美金收购，随后创始人邓峰出来做了北极光创投，活跃在 TMT 领域。美团，vipkid，talking data， 汉庭，以及 hillstone 等一系列优质公司，均为北极光投资。而 NetScreen 的其它诸多前辈，在网络和安全领域，创立了很多优秀的公司 —— Palo Alto Networks（已上市），Aerohive（已上市），Hillstone，vArmour，Aella Data 等等。这次韦文和沙浪创立 Servicewall，也是看到了互联网安全领域的新的机会，全力一搏。公司已经拿到了北极光的天使融资，在硅谷建立了团队，打算在北京开办一个研发中心，招第一批团队成员（算是北京团队的创始成员啦）。&lt;/p&gt;&lt;p&gt;公司目前还处在非常早期的 stealth 阶段（这是硅谷创业公司前期惯用的模式），所以不能公布公司的简介以及项目的情况。加入早期团队，某种程度上，与其说赌公司，不若说在赌人，赌团队。从为人上来说，韦文和沙浪是很好的老板，对待部属很好，培养员工尽心竭力；从做事来说，他们自身是一路在沙场上摸爬滚打出来，经历了从零到一的时刻，我觉得已经达到了孔子所谓的「不惑，不忧，不惧」；从资源的角度来说，清华的校友圈子，和 NetScreen 创始人的深厚友谊，还有在安全领域历练多年打造的圈子，某种程度上是为这个时刻准备着的。所以，他们组建团队在互联网安全行业发力，前景可期。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;招聘职位&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;北京首批8名初级和高级软件开发工程师。你们将与硅谷团队一道，立即投入到产品原型开发。&lt;/p&gt;&lt;p&gt;&lt;b&gt;期待当中的你是这个样子滴：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;超强学习能力，有强烈的技术好奇心，主动钻研各种新技术，广泛的行业技术知识面。 思维敏捷缜密，行动迅速高效，出活快质量高。 快速的应变能力，从容驾驭快速迭代的产品发布节奏。 良好的沟通能力和团队合作精神。&lt;/p&gt;&lt;p&gt;&lt;b&gt;基本技术要求：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;国家重点院校计算机，信息工程相关专业本科以上学历。&lt;/p&gt;&lt;p&gt;&lt;b&gt;熟练使用一或两种如下编程语言:&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Java/EE， Node JS，Go，Lua 在至少两个如下技术领域具备两年以上工作经验： Restful services, Java, J2EE, Spring, Unix/Linux system programing, Shell scripting. 具备Service Oriented Architecture (SOA), Microservice 知识. 在运用数据库开发高性能，可扩展，高可靠性分布式WEB应用程序，或者NoSQL大数据开发方面有实战经验。&lt;/p&gt;&lt;p&gt;&lt;b&gt;高级职位技术要求：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;大型软件开发经验及系统知识。 3年以上互联网信息安全相关工作经验，在机器学习，或用户安全管理，用户认证，用户授权管理方面有深入研究和实战经验。 追踪且深入了解信息安全的最前沿技术并能有效应用于解决方案。 熟练掌握互联网，云计算以及大数据相关知识技能。 良好的文档创建，管理能力。&lt;/p&gt;&lt;p&gt;我们重视知识和经验，更重视快速学习和解决问题能力。对于录取者我们将提供富有竞争力的薪酬+丰厚的期权。&lt;/p&gt;&lt;p&gt;有意加盟请将简历发至 shalang at servicewall.ai&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2018-04-10-35483281</guid>
<pubDate>Tue, 10 Apr 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>管理是什么（上）</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2018-04-08-35408846.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/35408846&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-371493bfd52593ff111563d69e46e980_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;好久没有聊这个话题，谈谈我的看法。&lt;/p&gt;&lt;p&gt;简言之，无论团队大小，管理者的主要任务是建立 &lt;b&gt;信任&lt;/b&gt;，输出 &lt;b&gt;文化&lt;/b&gt;，确定 &lt;b&gt;目标和战略（策略）&lt;/b&gt;，有效 &lt;b&gt;执行&lt;/b&gt;，并且和团队不断 &lt;b&gt;学习和成长&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;我们一个个说。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;信任&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;信任是人与人之间最宝贵的东西，也是最神奇的东西。在一个团队里，如果人与人之间的关系首先不是信任关系，那么，很多事情的效率就只会变得无比低效 —— 因为你要么得依赖复杂的流程来控制失信的风险，要么用心计手段进行博弈防止最坏的事情发生。所以，我的原则是：trust is given by default, unless one breaks it.&lt;/p&gt;&lt;p&gt;默认给予信任有很多好处，尤其对于 startup。流程得以精简，人与人之间关系可以非常纯朴。比如说在 Tubi 我们有一个在家办公的福利：任何人感觉不舒服（比如小感冒），或者天气不好（自行决定，不必依赖爆表的指数），或者希望集中精力做某个 task，或者家中有事（比如陪孩子），都可以 slack 里吱一声就在家办公。我们默认相信每个人都出于对自己和公司有利的原则去使用这个福利，因而不必去监督一个人是否真的在家办公。再比如说我们内部一切数据都是公开透明的，任何人随时随地可以查阅到我们几乎所有的 KPI，精细到某个 platform 某日的 active user 或者收入情况。我们相信大家会很好地利用数据去优化产品，而不会将其卖给第三方牟利。&lt;/p&gt;&lt;p&gt;在一个受信的环境下，大家工作是为了公司，更是为了自己 —— 因而不必为了博取信任如临深渊如履薄冰；更不必为了博取信任而积极「表演」（比如说老板不下班自己就不敢下班，哪怕老婆孩子等着回家吃饭）。&lt;/p&gt;&lt;p&gt;要达到这种互信，首要一点，是公司（组织）把员工视为成人；而员工同样也把自己视为成人。&lt;/p&gt;&lt;p&gt;把自己视为成人并不容易。E E Cummings 说：It takes courage to grow up and become who you really are. 成年不代表成人，一个人要有足够的勇气让自己成长为成人。我们看看心理学上成人的标志：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;理性：能够区分感性认识和理性认识（比如说正确地面对焦虑，伤心等负面情绪，意识到自己的 imperfection）&lt;/li&gt;&lt;li&gt;有目标：对自己人生有自己的优先级（不是父母或者公司赋予的）&lt;/li&gt;&lt;li&gt;关系对等：人与人之间的关系是平等的 —— 既不试图去 parent 其他人；也不会被其他人 parent&lt;/li&gt;&lt;li&gt;积极主动自我决策：不被动等待，也不依赖他人替你决策&lt;/li&gt;&lt;li&gt;心态开放虚怀若谷：情感上成熟，能够就事论事，不人身攻击&lt;/li&gt;&lt;li&gt;能够拥有和掌控自己的意识：不会被洗脑&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-e890d6d11ad8f80c00cd454e2f9e784e_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1700&quot; data-rawheight=&quot;958&quot; data-watermark=&quot;&quot; data-original-src=&quot;&quot; data-watermark-src=&quot;&quot; data-private-watermark-src=&quot;&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;一个真正的成年人会寻求对等的关系，职场上尤其如此。他们会寻找那些把自己视为成人的公司工作，他们会寻找把自己视为成人的朋友交往。因为这样，相互之间才有平等的信任。&lt;/p&gt;&lt;p&gt;如果一个人不够成熟，好的管理者能够帮助他精神上成长和成人，进而双方之间形成良好地信任；而不是通过洗脑的方式，利用群体的压力，让对方精神上被无意识地胁迫而快乐地顺从。&lt;/p&gt;&lt;p&gt;工作中有了信任之后，整个工作环境就变得安全，可依赖。你知道你躺下睡觉的时候，值夜的那位会目光炯炯，密切注视周遭的一切危险。曹操之所以敢在官渡之战领五千轻骑直奔乌巢，是因为他信任荀彧等人能够守住大营，血战到底，既不会投降，也不会被全力一搏的袁绍击溃。如果没有这份信任，他必不敢轻出 —— 孤军深入敌人腹地，大有被合围全歼之险；如果没有这份信任，他也许会委任他人 —— 但绝人粮道需要一击必中，当时的形势已经千钧一发，不成功便成仁，他自己亲帅大军能让军心振奋 —— 这是胜负手。&lt;/p&gt;&lt;p&gt;互相信任产生一心，没有信任则造就多心。长平之战的赵括，同样是轻骑绝人粮道，却因为没有和团队达成良好的信任（部属多为廉颇旧将，多有不忿），因而他孤军深入，却未等来约定好的合击，被围剿而身死阵前，旋即四十万赵军不战而降，后被坑杀，酿成悲剧。周幽王「烽火戏诸侯」，更是失信于天下，于是身死国灭。&lt;/p&gt;&lt;p&gt;论语中，「信」出现过几十次。所谓「子以四教：文、行、忠、信」，可见「信」的重要性。论语里有一段有趣的「子贡问政」：&lt;/p&gt;&lt;blockquote&gt;子贡问政。&lt;br&gt;子曰：足食，足兵，民信之矣。&lt;br&gt;子贡曰：必不得已而去，于斯三者何先？&lt;br&gt;曰：去兵。&lt;br&gt;子贡曰：必不得已而去，于斯二者何先？&lt;br&gt;曰：去食。自古皆有死，民无信不立。&lt;/blockquote&gt;&lt;p&gt;这是从为上者的角度看待「信」，懂了这一点，你就能明白傅盛和可牛在最艰难的时刻，基本上是「去食」的状态，核心团队还对他不离不弃。&lt;/p&gt;&lt;p&gt;子还曾经曰过：&lt;/p&gt;&lt;blockquote&gt;恭、宽、信、敏、惠。恭则不侮，宽则得众，信则人任焉，敏则有功，惠则足以使人。&lt;/blockquote&gt;&lt;p&gt;这是从为下者的角度看待「信」 —— 信则人任焉。诚信，才会被人委以重任。&lt;/p&gt;&lt;p&gt;那么，管理者如何取信于人？这是神奇而微妙的地方。精干努力，把每件事情做得井井有条，从来不犯错误的保姆，并不比你邋邋遢遢不收拾屋子的先生，或者为了看韩剧把开水煮干的太太更值得信赖。获取别人高级别的信任首先要让别人更多地了解你，了解你的过去，了解你的偏好，了解你的故事，最好还了解你的痛苦和磨难。所以 story-telling 是一个很好的方式。管理团队经常时不时要 offsite，找个舒适惬意的环境（为得是让人放下戒心），谈天说地，畅谈理想，实际上就是增进彼此的了解，从而促进互信。&lt;/p&gt;&lt;p&gt;另一个好的方法是「示弱」。上位者往往承受更多的痛苦和不被理解，像 Musk 说的那样，嚼着玻璃凝视深渊。然而一味地坚强，人前一路保持阳光，正面的形象并不有助于和别人交心从而获取信任。把内心中柔弱的部分，苦闷的部分，拿出来适度地分享，反而有助于赢得他人的理解，从而获得信任。Tal 在他的 Positive psychology 课程中讲过的 Give yourself permission to be human，其实就是这个道理。&lt;/p&gt;&lt;p&gt;获取到别人更多的了解，只是信任的第一步，当然也是最基础最重要的一步。接下来是以身作则，be a role model。这话说起来简单，实践起来费劲地很。你要让三军用命，将士勇猛，你就要身先士卒，亲当矢石，一往无前。史记里面讲到吴起时，有这么个故事：&lt;/p&gt;&lt;blockquote&gt;起之为将，与士卒最下者同衣食。卧不设席，行不骑乘，亲裹赢粮，与士卒分劳苦。&lt;/blockquote&gt;&lt;p&gt;所以他的士兵信任他，可以为他死战到底。Tal 在他的课程里，讲了一个甘地的故事：&lt;/p&gt;&lt;blockquote&gt;有个母亲因为自己的孩子爱吃糖而焦虑万分。她听说甘地贤明，人人都相信他，所以带着孩子去甘地那里想请他说服自己的孩子。在这位母亲说明来意后，甘地沉默了一会，随后说：你两周之后再带孩子过来吧。母亲不解，还是照做了。两周后，母亲如约而来。甘地对孩子说：孩子，别吃糖了，对身体不好。然后就结束了对话。母亲很困惑，迟疑了很久终于忍不住问：圣雄，为什么两周前你不这么说呢？甘地说：两周前我也吃很多糖。&lt;/blockquote&gt;&lt;p&gt;太史公说：能行之者未必能言，能言之者未必能行。言行合一，以身作则，是取信他人的法宝，也是管理者必备的素质。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;文化&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;有了信任为基石，接下来的事情便好办得多。我们看文化。&lt;/p&gt;&lt;p&gt;文化很大程度上大家做事方法和处事态度的成文，或者不成文的总结。对新人来说，它更多来自 leader 和老员工的传帮带，是一种潜移默化。就像心理学上的研究那样，人们下意识地会 follow what you do, not what you say。在之前为 Tubi TV 所做的招聘帖中，我已经谈到好几次类似的文化，上周还和北京的团队一起研习了 tubi 的工程师文化。我主要分成七个部分来阐述我们的工程师文化的：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;Trust&lt;/b&gt; over Control&lt;/li&gt;&lt;li&gt;&lt;b&gt;Commitment&lt;/b&gt; over Compliance&lt;/li&gt;&lt;li&gt;&lt;b&gt;Data&lt;/b&gt; over Authority&lt;/li&gt;&lt;li&gt;&lt;b&gt;Fail recovery&lt;/b&gt; over Fail avoidance&lt;/li&gt;&lt;li&gt;Proud to be the &lt;b&gt;OWNER&lt;/b&gt;&lt;/li&gt;&lt;li&gt;Talk is cheap, &lt;b&gt;delivery&lt;/b&gt; rules!&lt;/li&gt;&lt;li&gt;One more thing (be an &lt;b&gt;awesome&lt;/b&gt; engineer)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;感兴趣的可以去我的 github 上（tyrchen/unchained/talks/Eng Culture.pdf）下载我的 slides，就不详细讲具体的内容了。&lt;/p&gt;&lt;p&gt;文化虽然是一种潜移默化，但写下来不断反思不断更新是必要的。它也可以作为做事的原则 —— 当发生冲突时，该采取什么方法应对。&lt;/p&gt;&lt;p&gt;张思宏在反思自己加入乐视五个月后离职的文章里说到：&lt;/p&gt;&lt;blockquote&gt;生在什么家庭，取了个什么太太，加入了什么公司，这三件事从本质上决定了人的一生：原生家庭决定了你的性格、教养、价值观；女人教会了你什么是爱以及如何去爱，而企业文化和工作环境培养了你如何与人相处，该以何种方式生存。与其说外企教会了我在职场成功的原则和方法，倒不如说它让我养成了一种生活的习惯和思考问题的方式，而这一切又反过来影响和修正了我的价值观和对生活的诉求，概括来讲这些影响来自以下几个方面：&lt;/blockquote&gt;&lt;ol&gt;&lt;li&gt;工作是生活的重要组成部分，二者密不可分。但工作不是生活的全部，因为你最终要回答的不是自己能取得什么样的职业成就，而是你想要的是一种什么样的生活。&lt;/li&gt;&lt;li&gt;尊重个体：一个好的企业是允许/鼓励甚至积极创造个体的多样性，个体对团体的归属感是建立在每个人发自内心的对企业文化认同的基础上的，个体的声音不应该被忽视和有意的隐藏 — 即便它有时和团队的主旋律有所不同。&lt;/li&gt;&lt;li&gt;家人/健康/快乐是人生最宝贵的财富，那些付诸于 work and life balance 的努力应该受到认可和支持，这和你对企业的承诺和责任心并不矛盾。&lt;/li&gt;&lt;li&gt;要有底线，要有底线，要有底线&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;我对这段话是非常赞同的。好的文化应该尊重个体，把员工当做「成人」平等对待，而不是一个在精神上被组织掌控的肉体。好的文化应该是大家一起追求卓越 —— 个人的卓越以及公司的卓越。一位员工，要想在组织里成就卓越，应该既有权利也有义务在更高的层面去理解公司的业务，去获取她为决策而需要知道的信息和帮助。她可以独立思考而不是盲目跟从，可以在众人蒙眼狂奔的时候像那个指出皇帝新衣的小孩那样，无所畏惧地发表自己的观点和看法，无论它是否有事实或者数据支撑（当然，在决策阶段必须要有 data 或者 fact 的支撑），并不必担心受到群体粗暴的诋毁。其实在很大程度上说，公司里的每个人既是文化的执行者，信仰者，也是文化的制定者，推广者。&lt;/p&gt;&lt;p&gt;在这段历程中，双方可以相濡以沫，也可以相忘于江湖 —— 我曾经在 &lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;amp;mid=2649827713&amp;amp;idx=2&amp;amp;sn=d744af9c02ebac9bfb1fd2114c5cc6a5&amp;amp;chksm=8704ab9db073228bb3403f8b750e0d25946130c053bf09f5ff1569c91e23a1312f02bc502e78&amp;amp;scene=21#wechat_redirect&quot;&gt;如何选择工作&lt;/a&gt; 中谈过 X model：公司和个人是两条相交的直线，在交汇处，二者发生关系，随后若个人追不上公司的发展，或者公司无法满足个人的诉求，那么，挥一挥衣袖，相忘于江湖是最佳的选择。好的文化应该是公司和员工谁也不需要依附于谁，谁也用不着依赖于谁，大家为了共同的目标独立成长，携手共进。在一起的日子里，公司得到了业务上的发展，员工得到了能力上的成长，双方互相感激，互相祝福，根本不会一方居高临下地要求甚至胁迫另一方感恩；当分离的时刻到来，即便必然会有感伤，但那也是一种大学毕业时彼此依依不舍的，却又被新的前程召唤而义无反顾的，两种感情碰撞交织产生出的，愉悦的忧伤。&lt;/p&gt;&lt;p&gt;对于管理者来说，文化是一种汇集大家的力量，把劲往一个方向使的不二法门。一辈子没留下几句话，被曹丞相「夸奖」生子当如孙仲谋的权哥说：「天下无粹白之狐，而有粹白之裘，众之所积也。夫能以驳致纯，不惟积乎？故能用众力，则无故于天下矣；能用众智，则无畏于圣人矣。」东吴偏安积弱却一直人才济济，国泰民安，不外乎此。&lt;/p&gt;&lt;p&gt;一不小心单单信任和文化就写了这么多，剩下的，下期再写。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;更多和管理有关的内容，请看我四年前的旧文：&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;amp;mid=203185155&amp;amp;idx=1&amp;amp;sn=47d11db5ea75498eecd7848d7f359ce0&amp;amp;scene=21#wechat_redirect&quot;&gt;[奇博士的管理课] - 毛小天的第一课&lt;/a&gt; &lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;amp;mid=203237512&amp;amp;idx=1&amp;amp;sn=295b3fb09d2189439718ef523ea7de33&amp;amp;scene=21#wechat_redirect&quot;&gt;[奇博士的管理课] - 角色转换&lt;/a&gt; &lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;amp;mid=203304401&amp;amp;idx=1&amp;amp;sn=9eebb4d5891ec8f01a70397bb395c508&amp;amp;scene=21#wechat_redirect&quot;&gt;[奇博士的管理课] - 技术和管理的平衡&lt;/a&gt; &lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;amp;mid=203361276&amp;amp;idx=1&amp;amp;sn=658bd318acc3c9c7200e1cbb356503e8&amp;amp;scene=21#wechat_redirect&quot;&gt;[奇博士的管理课] - 工资，奖金和股票期权&lt;/a&gt; &lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;amp;mid=203434096&amp;amp;idx=1&amp;amp;sn=aae1b6ee291eb522e751433e5031533b&amp;amp;scene=21#wechat_redirect&quot;&gt;[奇博士的管理课] - 情感强度&lt;/a&gt; &lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;amp;mid=203638045&amp;amp;idx=1&amp;amp;sn=88c3e0aa5b4119f487a4425118443cb9&amp;amp;scene=21#wechat_redirect&quot;&gt;[奇博士的管理课] - 跟进&lt;/a&gt; &lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;amp;mid=203881961&amp;amp;idx=1&amp;amp;sn=c68db16e467338c88d8225a350bc307c&amp;amp;scene=21#wechat_redirect&quot;&gt;[奇博士的管理课] - 激励&lt;/a&gt;&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2018-04-08-35408846</guid>
<pubDate>Sun, 08 Apr 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>2018年3月过去了，我收获到什么？</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2018-04-03-35250058.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/35250058&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-2dbaec8466840297879da6b6a5721216_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;最大的收获自然是我和 Joe 老爷子访谈，它是无价的。我前些日子已经放了篇文章：&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;amp;mid=2649827948&amp;amp;idx=1&amp;amp;sn=d4ded0f9cf84328546eb1f31ef5064ff&amp;amp;chksm=8704a870b0732166d04ce8ef9ee73ee63c32619ae31678dceec0205d811b824a18bea513d64a&amp;amp;scene=21#wechat_redirect&quot;&gt;Joe Armstrong 面对面&lt;/a&gt;。没看过的同学可以点进去看看。我希望我六十岁时，也能像老爷子一样，睿智，洞悉世事，和我聊天的人都有这样的感觉 —— 就跟 Frodo 憧憬未来时夸赞 Sam 那样：Tyr the thinker。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Code Beam 演讲&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;这次 Code Beam，我做了一个三十多分钟的演讲：Release, Deploy, Upgrade, Monitor Elixir Services in Real World。题目长到没朋友。Slides 可以去我的 github：&lt;a href=&quot;https://github.com/tyrchen/unchained&quot;&gt;tyrchen/unchained&lt;/a&gt; 捞。视频地址：&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=kwHtlmyxE6c&quot;&gt;https://www.youtube.com/watch?v=kwHtlmyxE6c&lt;/a&gt;（也可以点击「阅读原文」获取，但需要梯子）。&lt;/p&gt;&lt;p&gt;稿子我改了五版，直到上台前十分钟，我还在做最后的修改。这个稿子完全用 notability 手绘而成，算是我这三个月使用 notability 的集大成者。我给 Joe 老爷子看我的初稿，还成功说服他也买了一份 copy 呢。对 notability 的使用，我即便说不上是超神入化，也对得起出类拔萃 —— 我能够更好地控制版面，我对颜色的使用日渐稳定（形成自己的体系），我对构图越来越精进，能够更好地表达我的意图，我还制作各种不同的 template，在不同的场合使用。最重要的一点 —— 现在全手绘已然不是瓶颈，大多数时候，我用 notability 手绘的效率，比用 grafio，gliffy 的效率还高不少。如果大家感兴趣，我改天写篇关于如何使用 notability + iPencil 提高效率的文章。&lt;/p&gt;&lt;p&gt;rehearsal 我做了两遍。一次 BBL，讲给 US Eng team 听；一次 elixir knowledge share，讲给 China elixir team 听。两遍 rehearsal 下来，让我对所讲的内容，关键点，以及时间有不错的把握。rehearsal 和我最后的 talk 出入不小，这得益于 Joe 对我的提点。我虽然对 Great leaders start with why 这句话倒背如流，可在自己的如此重要的 talk 上，还是对 why 重视不够，如果不是 Joe 吐槽，我可能会做一场非常平庸的演讲。“&lt;b&gt;what problem have you solved? Why it matters to me?&lt;/b&gt;” 是每个演讲者都应该重视，并且首先讲明白的问题。&lt;/p&gt;&lt;p&gt;我的演讲本身还是有不少毛病 —— 手势太碎，目光太多聚焦于讲稿而非观众，从头到尾拘囿于一方讲台，没有太多移动，着装可以再精干些，语言可以再简练些，铿锵有力些，少点嗯嗯啊啊，多些着重句子之后的停顿。不过对于第一次对外的英文 talk，我觉得已经不错了 —— 我给自己打 80 分。不积跬步无以至千里，慢慢来。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Erlang VM 培训&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;这次 Code Beam，我还参加了当周周六的 Erlang VM 的培训。讲师 Erik Stenman，Beam Book 的作者（我就是因为看了他的书才关注他的）。Erik 博士看着憨憨的一个工程师，其实 NB 得不得了：他 PhD 参与了 erlang 的 HiPE 项目（Erlang Native Compiler），让 Erlang 的执行效率提升 10-50 倍；Post Doc 参与 Scala 第一版 compiler 的开发，为 Scala 完成第一个可用的 compiler。这样一个牛人一天的培训才 300 刀，到哪里找这样的好事去？我去年写过一篇文章：&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;amp;mid=2649827661&amp;amp;idx=1&amp;amp;sn=d516a615364c9226356c2f538d643425&amp;amp;chksm=8704ab51b0732247186e98170b465e37bf64c932aca98c36be01baa06980d359b5e05484135b&amp;amp;scene=21#wechat_redirect&quot;&gt;当我参加培训的时候，我在学什么？&lt;/a&gt;不知道有多少人看过，又有多少人真正将其策略性地应用于自己的工作生活。&lt;/p&gt;&lt;p&gt;对于这种档次的大会的培训，学什么主题其实并不重要。重要的是你选择什么样的讲师，你想从讲师那里得到什么？&lt;b&gt;不要把培训看成培训，把培训看成是廉价的，对等的咨询的机会。&lt;/b&gt; 300 刀一天你找 Erik Stenman 咨询，这跳楼价可以笑到尿裤子吧。我的朋友小山同学显然从我那篇文章里得到了启发，这次花三天时间参加 Joe 老爷子的培训，一千多刀，从老爷子里那里学到很多人生经验（我看他的笔记本上小抄抄下不少），还和老爷子混的谙熟，我这次能跟老爷子约上两个小时单聊，也源自他的大力举荐。&lt;/p&gt;&lt;p&gt;所以，善用培训。善用讲师的时间。花点时间了解讲师，做些功课，看看你想从中得到些什么，或者你能从中得到些什么。说服你的老板把培训费用给报销（连这种费用都不给报的老板，可以把他炒掉），然后把你所有想问的问题都整理出来，利用培训的间歇（一天的培训，茶歇 + 午餐 + QA，怎么着也能匀出来两三个小时），好好「咨询」。:)&lt;/p&gt;&lt;p&gt;我这次本来打算培训前把 erlang emulator 的源码走一遍，攒一堆问题问 Erik，无奈最近在参会和公司的大项目两相夹击下，身心俱疲，没有功夫读代码，只得把 Beam Book 草草过一遍，问了些问题，然后又追着 Erik 聊了不少关于 aeternity 的问题。&lt;/p&gt;&lt;p&gt;去年我参加 OTP training，结识了erlang solution 的老大 Francesco，我们建立了深厚的联系，我去北京出差前我还邀请他来 Tubi HQ 参观，顺便探讨 Hive 和我做的 Overseer；等忙完这一阵，我也会和 Erik reconnect，好好向他取经 aebytecode（ae 里面处理 smart contract 的 compiler）。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Data Center 迁移&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;在 Tubi，过去的几个月我们一直在忙活一个大项目：data center 的迁移。把所有的服务和数据从一个 data center 迁移到另一个 data center 这样的事情，比我们大的公司要么不需要去做，要么有专门的团队处理；比我们小的公司要么还没遇到这种烦恼，要么一开始的设计就很好，避免这样的问题。我们不大不小，又背着数年的技术债，所以工程师才有机会接受这样空前的挑战和考验 —— 可能一辈子也不会遭遇第二回，实在是天赐的机会。data center 的迁移，不算是个脑力活，更多考究的是体力，韧性，和统筹能力。好几种形态各异的数据库服务，几十个 service，几百台机器，以及长长的 action list，由约莫十个后端工程师在流量低峰期的几个小时内迁移完毕，并且要尽可能降低对用户的影响和广告收入的影响，不啻于在一架正在飞行的飞机上更换引擎。几个月的努力，毕其功于一役，每个人所经受的压力非同寻常。&lt;/p&gt;&lt;p&gt;两周前的周四凌晨，也就是我出差前两天，我们的后端团队破釜沉舟，成功完成了这个壮举。详细的过程，有机会我会另行撰文总结。这里说两点收获。&lt;/p&gt;&lt;p&gt;《礼记 中庸》里曰：&lt;b&gt;凡事豫则立，不豫则废。言前定，则不跲；事前定，则不困；行前定，则不疚；道前定，则不穷&lt;/b&gt;。我们做事前如果先有详尽的计划和准备，发生让自己追悔莫及，走投无路的事情的概率就大大降低。Data Center 的迁移，是个苦活累活，考究的是事无巨细均考虑周全。我们都有哪些 service 和 database，哪些对外，哪些对内，哪些第三方，哪些自研，谁来负责，目前状态是什么，ETA 是哪天，这样的 responsibility matrix 要构建好。迁移时分几个阶段，迁移前几个小时干什么，迁移时 DNS 切换的先后顺序，迁移后都要验证些什么，如果出现问题，预案是什么。就跟下棋一样，一步步要先尽可能考虑清楚了，省得到时候焦头烂额，急中生错。这是其一。&lt;/p&gt;&lt;p&gt;其二是测试的重要性。即便新的 data center 测试无误，还是需要导入一些 production 的流量验证 —— 我一直有个担心：新的 Data Center 使用新域名 abc.com，所有的 client 使用 tubitv.com，即便 abc.com 一切服务无误，我们却很难保证当 tubitv.com 指向 abc.com 对应的服务上去时不出错。Tubi TV 整个 business 的麻烦之处是，client 太多太多，有些 legacy 的 client 对于我们自己来说都是黑盒。因而，我们不得已想出了一个非常 hack 的方式来测试 —— 把公司 HQ 的 DNS 服务器切换到了自己用 bind9 搭的 DNS 服务器上。这个 DNS 服务器会 hajack tubitv.com 的所有子域名，指向新的 data center，同时 forward 其它 DNS 请求。这个方法让我们在公司内部 eat our own dogshit，帮助我们测试出了一些严重的，我们完全没有预料到的 bug。&lt;/p&gt;&lt;h2&gt;&lt;b&gt;Blockchain 分享会&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;我每次出差都尽可能举办个活动，做点分享。这次出差一周，本想简单点，做一个知乎 live，讲讲 bitcoin —— 自从我写文章介绍我在 Tubi 内部的分享后，很多读者都希望我能公开讲一次。无奈知乎 live 的小编一根筋，非要让我证明我是这个领域的牛人，否则不予通过。我觉得我肯定不算牛人 —— 从我真正开始看 blockchain 相关的技术到现在，都不到三个月，和那些动辄三五年前就入行的，从经历上是没法比的。然而以我这段时间在中文社区的观察来看，真正扎在 blockchain 技术领域深耕，且愿意分享的屈指可数。这并不奇怪：1) blockchain 领域的浮躁让江湖地位以金钱，或者说，捞钱的能力来衡量，真正扎在技术里的人的声音被淹没；2) 好的技术专家未必是一个好的分享者 —— 就像写代码能力比我强的人海了去了，但像我这样写了四年技术公众号还有的写的，太少太少。所以即便我不是牛人，我觉得我所讲的内容也能对大多数人有所启发。&lt;/p&gt;&lt;p&gt;可惜事与愿违，我不得不证明我是牛人，而最终我没法证明我是知乎小编眼中的牛人 —— 我把我的 github 上有关 blockchain 的 code 和 talk 的 repo 提交上去，也不晓得对方是否懂得如何用 github，反正我更新两次，被拒绝两次 —— 我一气之下删了 live，这样的猫鼠游戏我没工夫玩。线上做不了，那干脆线下，于是在朋友的推荐下，和云享客牵上了线，线下分享。&lt;/p&gt;&lt;p&gt;且容我再引用一下我引用过无数次的箴言：The brick walls are not there to keep us out; the brick walls are there to give us a chance to show how badly we want something.&lt;/p&gt;&lt;p&gt;在知乎碰壁，我的傲娇被激发出来 —— 一个小时的分享我不够资格，那么，我干脆做一下午的分享如何？我跟云享客的 Helen 敲定了细节：不要嘉宾，就我自己干讲。时间从 1:00 到 5:00，讲四个小时，中间休息两次 —— 四个小时的单口相声，这是我从未尝试过的事情。&lt;/p&gt;&lt;p&gt;虽然我肚子里有那么一点点货，但做过讲座的人都了解，自己理解和讲出来让别人理解，难度不是一个数量级，台上一倍的时间，台下保底翻番。Data Center 迁移完成，新系统稳定下来后，我便开始写 slides，火车上写，睡前写，飞机上写，还几乎把出差期间的业余时间（除了和人吃饭）都搭进去。周五晚上在极客时间做完小分享回到酒店后，老婆问我明天的分享准备得如何？我苦笑到：才准备好三分之一的内容。于是周五又干到半夜。周六早五点半起来，看着剩下的内容，我估计五个小时能完成，写了一个小时后，酒店网络 + VPN 实在是个瓶颈，我便在早餐后大概7点多去公司继续忙活，这一写又是五小时，中午12点10分，我才赶完 120 页的 slides，然后在朋友的车上，简单把稿子过了一遍。&lt;/p&gt;&lt;p&gt;最终，我的分享在周六下午 1:15 开始。由于准备得还算充分，我最担心的事情没有发生：我的内容不足以撑起四个小时的讲座。最终，我讲了近五小时，还因为时间不够，跳过了原计划讲半小时的内容。&lt;/p&gt;&lt;p&gt;slides 同样可以在 &lt;a href=&quot;https://github.com/tyrchen/unchained&quot;&gt;https://github.com/tyrchen/unchained&lt;/a&gt; 下载。我还会继续更新这个 slides，使其装载更多的内容，真正达到我心目中理想的：一份 slides 在手，入门 blockchain 无忧。&lt;/p&gt;&lt;p&gt;讲座的视频，随后会先发给参与讲座的同学，之后看情况公布出来。&lt;/p&gt;&lt;p&gt;在这次讲座的 slides 的末尾，我放了 Roger Banister 的故事来佐证 believe is self-fulfilling prophecy（是的，我偷师于 Tal Ben Shahar 的 Positive psychology 课程）。这也是在这次讲座的整个过程中，我体会最深的地方。很多事情，别人怎么看并不重要，重要的是自己怎么看。信心从来都不是来自外界，而是自己笃定自己能成，就像庄子在逍遥游里说的那样：&lt;b&gt;「举世而誉之而不加劝，举世而非之而不加沮」&lt;/b&gt;。只有这样，才能够守着目标，勇往直前，逢山开路遇水搭桥。&lt;/p&gt;&lt;p&gt;当然，最重要的还是，当一件事情做成，「举世誉之」之时，不要沉湎其中，静静走开，追逐下一个目标。就像费德勒那样，第十九个大满贯奖杯到手，觥筹交错之后，就成了他孩子们的玩具。&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2018-04-03-35250058</guid>
<pubDate>Tue, 03 Apr 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>眼花缭乱的区块链技术，如何入门？</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2018-03-22-34841206.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/34841206&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-6db1390e357d27ca3a4928f3de53eafb_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;2018 年，最令人激动的技术便是 blockchain tech —— 我曾在今年的计划中，将 ML 和 blockchain 列为上下半年学习的方向，不料阴差阳错，先上了 blockchain 的贼船。blockchain 让我激动的地方主要有两点：&lt;/p&gt;&lt;p&gt;其一，它集各种现存的技术于一身，解决了一个实实在在的问题：&lt;b&gt;在一个节点之间彼此不能信任的分布式环境下，如何构建一个 open ledger，解决 double spending（双花）问题&lt;/b&gt;。如果说 blockchain 是站在巨人肩膀上的技术，一点也不为过。下图是主流的 cryptocurrency 使用到的技术：&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-52e167600649456c9accb386373b083e_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;489&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;它涵盖了分布式系统，密码学，网络，编译原理，虚拟机以及各式各样的数据结构，基本上把 CS 所涉及的主要技术都摸了一遍。如若完整走过某个 cryptocurrency（比如 bitcoin / ethereum）的学习，对技术的夯实是显而易见的。&lt;/p&gt;&lt;p&gt;其二，&lt;b&gt;blockchain 领域的创新&lt;/b&gt;（如果是真正要做事情而非圈钱式创新），在目前这个阶段，&lt;b&gt;技术人占主导地位&lt;/b&gt;（翻身农奴把歌唱）。和 SaaS，电商，OMO 等应用领域不同，blockchain 还处在基础研究的阶段，技术起决定性因素。如果没有对现有技术体系完整详尽的了解，你很难找对切入点，甚至都不知道哪些问题可以解决，哪些问题不能解决。我看过一些 Product-driven 的白皮书，连起码的技术都没搞懂，对 blockchain 技术的现状都不清楚，就抨击比特币和以太坊的诸多道听途说过来的问题，然后洋洋洒洒写下大篇毫无意义的文字解释自己如何「发明」了一种新的方法，「解决」现存的问题，从而可以完成某某某应用。&lt;/p&gt;&lt;p&gt;以上两个原因使得我们关注 blockchain 相关的技术变得理所当然。我在「&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;amp;mid=2649827812&amp;amp;idx=1&amp;amp;sn=8b2389d4c7221cb439ab0e705dd6e8e9&amp;amp;chksm=8704abf8b07322eee8aecb3bd6ad6f71f2673072feb0ed5b6f2f2fee97f0b0d11411526cc8ef&amp;amp;scene=21#wechat_redirect&quot;&gt;程序员的好日子什么时候才到头？&lt;/a&gt;」一文中说过：&lt;/p&gt;&lt;blockquote&gt;&lt;b&gt;市场一直对程序员的需求强劲，可靠的供给却严重不足&lt;/b&gt;。70 年来，几乎平均每五年，对程序员的需求就增长一倍。这意味着市场上大量充斥着 &amp;lt; 5 年工作经验的，新入行的程序员。这意味着什么？在这样一个疯狂的市场下，程序员这个职业本身已经获得比其他职业高得多的溢价，而靠谱的，有经验的程序员，则很容易在这个溢价的基础上，再翻上一两番。没办法，这是供需决定的。&lt;/blockquote&gt;&lt;p&gt;如今 blockchain 领域的投资不断飙升，需求越来越强进，而市场上靠谱的程序员却少之又少，巨大的亏空必然会让有经验有能力的程序员变得超级抢手。所以，对于程序员来说，这是一个非常值得关注的领域 —— 它不像 ML/DL/AI，专业性强，如若没有好的数学底子和开放性的思维，很难出类拔萃；在 blockchain 领域，需要的更多是广博的知识和工程能力。&lt;/p&gt;&lt;p&gt;然而 blockchain 技术比较难以入门，很多人一腔热血扎进去却碰了个钉子 —— 这有几个原因。&lt;/p&gt;&lt;p&gt;一. 整个体系还处在相当早期的阶段，工具和资料都不完善，大部分时间，我们需要 read the fxxking paper / code 来获得正确的认知。这往往令初学者很难窥到门径去深入学习。网络上虽然充斥的大量的文章，但要么蜻蜓点水，流于表面，要么干脆不谈技术，只聊虚头巴脑的应用。&lt;/p&gt;&lt;p&gt;二. 虽然 blockchain tech 还在早期，但各种 cryptocurrency 已经「乱花渐欲迷人眼」，市值在千万美金以上的都有 450 种之多（https://coinmarketcap.com）。generation 也从第一代的 bitcoin，到第二代的 ethereum，再到目前喧嚣的 blockchain 3.0。到底从哪里看起，心里没数。&lt;/p&gt;&lt;p&gt;三. 主流的 cryptocurrency，比如 bitcoin 或者 ethereum，安装个环境，就把你那 mbp 可怜兮兮的 512G disk 快要吃光 —— 还没开始学习呢，家底先败没了。&lt;/p&gt;&lt;p&gt;四. 新概念太多，不好理解。好容易搞清楚了 open ledger，又冒出来个 PoW，然后是 UTXO，然后是 smart contract，然后是 side-chain，无穷无尽。就拿核心的共识机制来说吧 —— 我最近在写一篇关于共识的文章，整理了一下，目前被各种白皮书提及的共识机制就有：PoW，PoS，PoI（NEM），PoD（Nebulas），PBFT（Hyperledger），FBA（Stellar），Hybrid PoW/PoD（peercoin），Tendermint（cosmos），dPoS（EOS)。。。数不胜数，真是黑云压城城欲摧，共识机制惹人悲。再说下去，都快要「从入门到放弃」了，有木有？&lt;/p&gt;&lt;p&gt;不过，我们敬爱的 Professor Randy Pausch 说过：The brick walls are not there to keep us out; the brick walls are there to give us a chance to show how badly we want something.&lt;/p&gt;&lt;p&gt;所以不要畏惧。那么，如果我现在开始看 blockchain，究竟该如何入门？是从 bitcoin 看起？还是直接上 ethereum？甚至，直接研究感兴趣的白皮书？&lt;/p&gt;&lt;p&gt;这次回京，我将和云享客合作，举办一次 blockchain 技术的线下活动，针对初学者，介绍以下几个话题，希望能帮助大家更好地入门：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;什么是 open ledger？从 bitcoin paper 谈起&lt;/li&gt;&lt;li&gt;分布式系统简介&lt;/li&gt;&lt;li&gt;为什么形成共识这么困难？从 paxos 到 PoW，再到一堆 PoX，它们都解决什么问题？&lt;/li&gt;&lt;li&gt;bitcoin 交易是如何完成的？为什么需要引入op code 和虚拟机？&lt;/li&gt;&lt;li&gt;bitcoin 里面那些天才的设计？对我们设计软件有什么启发？&lt;/li&gt;&lt;li&gt;bitcoin 目前都支持哪些应用？它的主要问题是什么？&lt;/li&gt;&lt;li&gt;Ethereum 对于 bitcoin 有哪些技术优势？什么是 smart contract？&lt;/li&gt;&lt;li&gt;什么是 ERC？都有哪些重要的 ERC？&lt;/li&gt;&lt;li&gt;在数百种 cryptocurrency / blockchain solution 中，哪些项目在技术上值得关注？&lt;/li&gt;&lt;li&gt;如何阅读白皮书？有哪些值得读的白皮书？&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;分享的时间大概 3-4 小时。&lt;/p&gt;&lt;p&gt;时间：3/31 下午 1:00 - 5:00&lt;/p&gt;&lt;p&gt;地点：云享客长富宫中心（朝阳区建国门外大街26号5号楼一层）&lt;/p&gt;&lt;p&gt;人数上限：80&lt;/p&gt;&lt;p&gt;报名地址：&lt;/p&gt;&lt;a href=&quot;http://www.huodongxing.com/event/9432365777300&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;v2-d80a367c0c9e626813e847e7c4ab9651&quot; data-image-width=&quot;540&quot; data-image-height=&quot;320&quot; data-image-size=&quot;180x120&quot;&gt;未来已来——眼花缭乱的区块链技术，如何入门！&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2018-03-22-34841206</guid>
<pubDate>Thu, 22 Mar 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>Joe Armstrong 面对面</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2018-03-20-34759478.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/34759478&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-a376c181f87c4c1ee760d240d145bee7_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;Joe 老爷子是 Erlang 世界里的一个图腾。&lt;/p&gt;&lt;p&gt;他书中的句子，他的公开演讲或是私下的谈话，都被不同的人到处引用 —— 今年的 code beam，好些 speaker 用 Joe 的原话来佐证自己的观点。Joe 因为 Erlang 的诞生被视作天才，视作英雄，视作传奇。但 Joe 自己却将其归功于 Ericsson 的「大度」：你知道 Ericsson 为什么把 Erlang 开源了么？因为有一天高层突然宣布：所有项目只能使用 C++ 或者 Java，不能用除此之外的任何语言。于是我们跟头头们商量，既然 Erlang 我们自己都不待见了，那干脆开源吧，头头说：随你便，我不关心。于是 Erlang 才得以摆脱 Ericsson 的控制，获得新生。&lt;/p&gt;&lt;p&gt;感谢 Ericsson 的愚蠢决定，否则这个世界便少了一门如此奇特而优雅的语言，而我也无法对半个地球外的一位老人顶礼膜拜。&lt;/p&gt;&lt;p&gt;如果你对 Erlang 没有了解，可以读一下我之前的文章：&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;amp;mid=2649827691&amp;amp;idx=1&amp;amp;sn=8d6854f91bb9d16470ef6eed9d3ad8ec&amp;amp;chksm=8704ab77b0732261eb63217ad03740a3433cde4491826eeec020f4bbebb8b18837c27ac3e74d&amp;amp;scene=21#wechat_redirect&quot;&gt;上帝说：要有一门面向未来的语言，于是有了 erlang&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;在那篇文章里，我介绍了 Joe 的 worldview：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;everything is a process.&lt;/li&gt;&lt;li&gt;process are strongly isolated.&lt;/li&gt;&lt;li&gt;process creation and destruction is a lightweight operation.&lt;/li&gt;&lt;li&gt;message passing is the only way for processes to interact.&lt;/li&gt;&lt;li&gt;processes have unique names.&lt;/li&gt;&lt;li&gt;if you know the name of a process you can send it a message.&lt;/li&gt;&lt;li&gt;processes share no resources.&lt;/li&gt;&lt;li&gt;error handling is non-local.&lt;/li&gt;&lt;li&gt;processes do what they are supposed to do or fail.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;他关于 Erlang 的所有想法，都或多或少和这个 worldview 相关。&lt;/p&gt;&lt;p&gt;跟老爷子坐在一起没聊多久，我就问了个「中二」的问题：「Erlang 在未来有没有打算引入 type system？」我知道 type system 会让 hot code reload 变得难以处理；也知道 type system 会让这门语言变得复杂，但就是莫名其妙问了这么一句。Joe 没有直接回复我，而是这样娓娓道来                                                ：&lt;br&gt;&lt;/p&gt;&lt;blockquote&gt;John Hughes（haskell 的发明人之一）在谈起 haskell 时总会说：think type first。而我会说：think concurrency first。这是这两门语言的本质不同。我并不关心 type system —— &lt;b&gt;programming is not about code, it’s about understanding&lt;/b&gt;。良好的类型设计反映了设计者对所设计系统的理解，然而 type system 并不能帮助你更好地理解你所设计的系统。在一个对所处理的问题理解错误的情况下，一个人可以写出正常编译通过的代码，并且这代码是可以测试通过的 —— 因为作者对 problem 理解是错误的，因而他写出的 test case 也是错误的。一切都如此漂亮，可是软件却并未解决问题。&lt;br&gt;所以纠结 type system，寄希望于 type system 让你不犯错误（或者让工程团队不犯错误），这是在寻找银弹。&lt;br&gt;think concurrency first。我们的世界本来就是并发/并行的。OOP 试图用一种错误的方式来描绘世界，因而得到的是复杂且不好理解的系统。比如一个电梯调度系统 —— 三部电梯停在各自的楼层，等待指令来决定如何运行。你如果试图用 OOP 描述电梯，为其设置属性，提供方法，其实是把问题复杂化了。三部电梯就是三个独立的 process，有他们自己的 state（所停楼层），它们把 state 通过 message 传递给调度系统，调度系统根据用户输入的 message，给最合适的 process 发消息，然后 process 决定自己如何行动。如果你 think concurrency first，那么，你对问题首先更容易理解，也更容易建模。&lt;/blockquote&gt;&lt;p&gt;随后，老爷子一锤定音：&lt;/p&gt;&lt;blockquote&gt;if you want type system, use a different language.&lt;/blockquote&gt;&lt;p&gt;整个谈话中，老爷子语速很快，往往我还在思考他抛出的上一个结论时，他就把下一个问题抛出来了 —— 这让你很难想象他已经是 67 岁的「高龄」。偶尔，他的思维会跳跃到物理学，比如 Minkowski space —— 跟一个差一点成为物理学家的计算机先驱谈话就是这么不着痕迹地在时空中跳跃。我问他还在写代码么，他给了我非常肯定的回答 —— 他说他在试图解决一些非常基础的问题。当我问是什么问题时，他狡黠一笑：你听了我明天的 keynote 就知道了。&lt;/p&gt;&lt;p&gt;我的好友孙博谈到白日梦旅行时，常说的两个词就是想象力和好奇心。想象力和好奇心是人类作为一个物种而言，最珍贵的品质。在聊天的过程中，Joe 老爷子的声音始终是柔和的，探寻的，他不断地抛出问题，像儿童一样处处充满好奇心，又像哲人一样通过问题启发你探寻事物的本源。他看问题的角度经常出乎我的意料，天马行空却扣着关键之处。讲一会，他会笑一笑，亲和地像一个邻家老爷爷，毫无架子，毫无世故，仿佛对面坐着的不是一个跪着的仰慕者，而是许久未见的忘年交。&lt;/p&gt;&lt;p&gt;聊着聊着，我渐渐轻松起来，问题也随意起来。我问他对这次 Code Beam 怎么看？他坦率地说听了几场，这届 speaker 不行。我会心一笑。他继续说 —— 人们在演讲的时候往往忽略了问题，而直接给出答案。&lt;b&gt;people didn’t really distinguish problem &amp;amp; solution. what’s your problem? why are you doing this?&lt;/b&gt; 在你的问题没有阐述清楚之前，我们之间无法达成共鸣，那么我为什么要关心你的答案？不解决问题，或者不解决我关心的问题（你要想办法让我关心），再光鲜亮丽的 solution 都是没有意义和价值的。我战战兢兢，汗出如浆 —— 因为，我自己的讲稿也是上来就是谈 tubi 的 elixir service 是如何构建，部署，升级和监控的，并没有谈我们遇到了什么问题，为什么要这么做，尤其是讲为什么要单做一个软件来做 release 时，非常突兀。好在，有了这次谈话，我正式讲的时候花了六七分钟来把 problem 和 why 讲清楚。&lt;/p&gt;&lt;p&gt;顺着 what&#39;s your problem 这个话题，他说做研究，找好的 problem 要 look at cracks on a marble floor：&lt;/p&gt;&lt;blockquote&gt;我们现在有太多太多的编程语言了 —— python，ruby 这样如此相似的语言，为什么我们需要发明两个？有了 Java 为什么还要有 C#？大家把太多太多精力都放在构建一门更好的语言，可是，真正称得上有自己思想的语言很少。大部分语言可以被归到几个类目下面。如果把一门门语言看成一个 blackbox 的话，那么，大家都只顾自己的一亩三分地；如果把一台台机器看成一个个 blackbox 的话，那么，大家挤在一方小小的土地上厮杀，此消彼长。我们应该更多地 &lt;b&gt;build things outside the boxes&lt;/b&gt;。在 blackbox 之间，广袤的领地，无人问津。blackbox 如何被连接在一起，如何 communicate &amp;amp; collaborate，还有大量的工作要做。&lt;/blockquote&gt;&lt;p&gt;说到兴起，他继续提点我：look at cracks 也分场合，优先选择那些重要的 cracks。他给我讲了个 Altair 的故事 —— 补充一下：Altair 是 PC 时代的先驱 —— apple I 就是受其启发而发明的，而盖老师在 DOS 之前的主营业务 Basic，生意也是始于 Altair Basic。他说七十年代末，Altair 在 geek 群体间已经很火爆，有个混 synth 圈子的哥们寻思着为 Altair 做一款 synth 的工具，必定火爆。结果软件吭哧吭哧做出来，也就几个人感兴趣。所以你可以在一个小众的，还未被认识的领域有所作为，但不要试图在两个小众的领域的交集间有所作为。这样的话市场太小了，你熬不过黎明前的黑夜。&lt;/p&gt;&lt;p&gt;接下来我问老爷子怎么看 blockchain？&lt;/p&gt;&lt;p&gt;老爷子一下子声音提高了八度。what are you talking about? are you referring cryptocurrency? or open ledger? or smart contract? or something else? people usually mixed these things up with “blockchain”&lt;/p&gt;&lt;p&gt;我赶忙说，我们先聊聊 cryptocurrency，或者 bitcoin。你觉得…&lt;/p&gt;&lt;p&gt;老爷子打断我的话：bitcoin is morally wrong. Isn’t it?&lt;/p&gt;&lt;p&gt;接下去差不多十分钟时间，老爷子就像拷问战犯一样，拷问 bitcoin，或者更严格地说，拷问毫无意义浪费资源，让地球变暖的 PoW。我好几次想插嘴，想把话题往技术上撩，都被老爷子弹开了。老爷子情绪激昂，我怕我再执拗下去，被放在火上烤的就不是 PoW 而是我 —— 毕竟，morally wrong 这顶大帽子是实锤，辨无可辨，因而我知趣地放弃这个话题，静静做个好听众。&lt;/p&gt;&lt;blockquote&gt;Bitcoin created a world of mess… As a software engineer, our responsibility is to &lt;b&gt;reduce complexity&lt;/b&gt;, or to reduce entropy….&lt;/blockquote&gt;&lt;p&gt;这句话我很认同，复杂是软件的天敌，我们搞这么多 principles，methodologies，paradigms，patterns，目的都是减少复杂度。我曾经写的一篇文章：&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;amp;mid=2649827625&amp;amp;idx=1&amp;amp;sn=76b275e9c4895d94f7ca963bedca7564&amp;amp;chksm=8704ab35b073222313df7222a944dcccc315ed852ab8390ab016d58bf5f373469e7a3f9084ae&amp;amp;scene=21#wechat_redirect&quot;&gt;是时候想想该怎么删代码了&lt;/a&gt; 提过一个思路：以构建可删除的代码为设计目标。这也是一种降低 complexity，减少软件中的 entropy 的方式。&lt;/p&gt;&lt;p&gt;在抨击完 bitcoin 道德上立不住后，老爷子显得有些疲态，我赶紧顺势把话题扯回到 Erlang —— 我还有一堆来自于朋友圈的问题有待发问。我挑了个简单的：你最喜欢 erlang 哪一点？&lt;/p&gt;&lt;p&gt;老爷子立刻精神起来，目光炯炯：&lt;/p&gt;&lt;blockquote&gt;简单。你看我们处理 concurrency 的方式 —— 这是唯一一个把 security，isolation，fault tolerance 完整地，且又简单清晰地，涵盖在内的方案。我们八十年代解决掉的问题，大家现在还在穷尽心力去解决。&lt;br&gt;我一个快 70 的老头儿，如果从凳子上摔下来，我能 recover 我自己么？显然不行。我只能发个 signal（message）给你，然后你把我扶起来 —— 甚至，我都不用主动发，我们之间有 link（link 是 erlang process 之间的一种连接），使得你密切关注着我，以至于我一旦跌倒，你立刻得到视觉上的通知（就像 &lt;code class=&quot;inline&quot;&gt;{&#39;EXIT&#39;, Pid, Reason}&lt;/code&gt; 一样），于是你很快把我扶起来。这就是 fault tolerance，简单，明了，不用深奥的计算机知识佐证（说你呢，exception handling），小朋友都能懂。这个方案之所以浅显易懂，是因为这是很自然的 solution，我们每天就是如此生活。你再看，process 只能通过 message 通讯，所以 process 和 process 完全独立（isolation），就像一个个人。由此一个 process 的问题也很难扩展到整个系统，因而 security 也得到了保证。&lt;/blockquote&gt;&lt;p&gt;「完全赞同！」我附和道。「而且 message passing 作为 concurrency 的一种方式，不仅适用于单机，也无缝适用于分布式系统。其它方案，单机内部一种模式，机器间还是要 message passing，因而不得不在两种模式间切换，考虑起来很复杂。」&lt;/p&gt;&lt;p&gt;老爷子点点头。「一件事情如果过于复杂，那么一定是哪里出问题了 —— 大部分情况下是对问题的理解出现偏差」。老爷子话锋一转：&lt;/p&gt;&lt;blockquote&gt;人们总是为没有想明白的问题创造解决方案，这是个严重的问题。比如说 JSON。what’s the reasoning? 我不理解为什么我们需要发明 JSON，也许是 JSON 之前的交流方式太复杂，或者太不可用，所以它就出现了？像 JSON 这样的 serialization 方案，human readable 绝对是个伪命题。想想网络上传输的内容 —— 它们不过是 signal 而已，传输的是一个个 bit —— 那为什么我们要用 text，而不是 binary 来节省带宽，降低消耗？human readable 在屏幕上是有意义的，在网络上，在内存中，完全是无稽之谈。&lt;/blockquote&gt;&lt;p&gt;聊了一个多钟头，快到午餐时间了。老爷子冲我狡黠一笑：你是不是准备了一堆问题？还剩什么问题想问的？我想出去走走，活动活动筋骨了。&lt;/p&gt;&lt;p&gt;我看了看我剩下的问题：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;What’s the future direction of erlang/OTP?&lt;/li&gt;&lt;li&gt;How do you see current status of distributed erlang? Any plan to improve it? for example, will we have gen_raft, or gen_pbft? or replace the full mesh network to p2p network?&lt;/li&gt;&lt;li&gt;How do you compare erlang and elixir?&lt;/li&gt;&lt;li&gt;How do you do trade off between performance and debugability, giving that OTP put so many efforts to make things traceable?&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;还有不少，我便挑了几个问他。&lt;/p&gt;&lt;p&gt;对 erlang/OTP 里加入更多的 distributed consensus behavior，如 gen_raft，老爷子是无所谓的态度。他说这不重要。他虽然有能力影响 OTP team，但这是他们的选择。对于 elixir，老爷子赞赏有加，说他有三个孩子，erlang 是第三个，elixir 是他所喜爱的小孙子。另外一个 erlang VM 上的语言，他的老友 Robert Verding 的 LFE（Lisp Flavored Erlang），就没那么好运气了 —— 老爷子说这是远房的侄子。对于 performance，老爷子看法一直未变：correctness is 1st, performance is the last thing I considered。这让我想起他曾经说过的：&lt;/p&gt;&lt;blockquote&gt;Make it work, then make it beautiful, then if you really, really have to, make it fast. 90% of the time, if you make it beautiful, it will already be fast. So really, just make it beautiful!&lt;/blockquote&gt;&lt;p&gt;临了，我问老爷子对中国的印象。他说他很喜欢中国，很喜欢北京，还拿了他和夫人在天安门前的合影给我看。我说，那你打算什么时候再去中国看看啊？他笑笑，那看你们什么时候邀请我来中国参加有关 erlang 的大会啊。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;一些题外话：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;是的，这里的对话并非原话 —— 我 iPad 上面记录的以及我回忆的，还有很多素材我记不起来或者不知道怎么摆进来。对话的顺序也根据行文的需要进行过调整。&lt;/li&gt;&lt;li&gt;Joe 是英国人，地道的英国腔。瑞典是他的第二故乡。&lt;/li&gt;&lt;li&gt;Joe 问了我一个有趣的问题 —— 在做某个研究前：How do you know if someone else has done it?&lt;/li&gt;&lt;/ul&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2018-03-20-34759478</guid>
<pubDate>Tue, 20 Mar 2018 00:00:00 +0800</pubDate>
</item>
<item>
<title>量子计算对 bitcoin 的威胁</title>
<link>https://henix.github.io/feeds/zhuanlan.prattle/2018-03-12-34458475.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/34458475&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-e9b39620e2e9829d8dbad5f83a5bafa2_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;在奉上有关「共识机制」的文章前，我们先来点甜点。&lt;/p&gt;&lt;p&gt;在两周前的 BBL 上，我给团队介绍了 bitcoin，相关的 slides 见：&lt;/p&gt;&lt;p&gt;github.com/tyrchen/unchained&lt;/p&gt;&lt;p&gt;其中花了点时间谈论了 quantum computing 对 bitcoin 的威胁。上周 google 发布了 72 量子比特通用量子计算机，引发了大家的热议 —— 尤其是，看上去牢不可破的 cryptocurrency，是不是到了快要被终结的时刻？&lt;/p&gt;&lt;p&gt;下图是当时我 talk 时讲的内容：&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-1240064759be2d18083e9b382990e616_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;915&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;首先我们看量子计算中已经比较成型的算法：Shor’s algorithm（下文简称 Shor） 和 Grover’s algorithm（下文简称为 Grover）。&lt;/p&gt;&lt;p&gt;Shor 不是通用的算法，它解决因式分解的问题 —— 给定一个整数 N，找到其质因数。以下是 Wikipedia 的介绍：&lt;/p&gt;&lt;blockquote&gt;On a quantum computer, to factor an integer N, Shor’s algorithm runs in polynomial time (the time taken is polynomial in log N, which is the size of the input).[1] Specifically it takes quantum gates of order O((log N)3) using fast multiplication,[2] demonstrating that the integer factorization problem can be efficiently solved on a quantum computer and is thus in the complexity class BQP. This is substantially faster than the most efficient known classical factoring algorithm, the general number field sieve, which works in sub-exponential time – about O(pow(e, 1.9(log N)1/3(log log N)2/3)).[3] The efficiency of Shor’s algorithm is due to the efficiency of the quantum Fourier transform, and modular exponentiation by repeated squarings.&lt;/blockquote&gt;&lt;p&gt;简单说，Shor 就是把指数级的时间复杂度降维成了 polynomial time，也就是多项式时间。所谓多项式时间，就是 O(nk)，其中 k 是个常量。下图是时间复杂度的对比，大家可以看到，指数（2n）到多项式（n2）差异非常大：&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-f0c2ca93f95e1d57b15d2707548647ce_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;550&quot; data-rawheight=&quot;319&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;虽然 Shor 只能加速因式分解，但如果你了解非对称加密的算法，你会记得 RSA 的基石就是两个大质数 p 和 q 的合数很难被因式分解出 p 和 q。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-d81c75c21e1cd70b09007ae53dd17cb1_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1600&quot; data-rawheight=&quot;959&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;大概五到十年前，人类通过通用计算机分解出来的最大的整数是 768 bit，因而理论上 RSA 密钥低于这个数字就是不安全的。实际生活中，我们基本会用 4096 长度的密钥：&lt;/p&gt;&lt;code lang=&quot;bash&quot;&gt;$ ssh-keygen -t rsa -b 4096 -C &quot;tyr@awesome.com&quot;&lt;/code&gt;&lt;p&gt;对于一个 768bit（二进制）大小的整数，我们对比两个算法的复杂度：&lt;/p&gt;&lt;code lang=&quot;js&quot;&gt;&amp;gt; n = 1230186684530117755130494958384962720772853569595334792197322452151726400507263657518745202199786469389956474942774063845925192557326303453731548268507917026122142913461670429214311602221240479274737794080665351419597459856902143413
1.2301866845301178e+231
&amp;gt; logn = Math.log(n)
532.1043224155328
&amp;gt; loglogn = Math.log(logn)
6.276839564883618
&amp;gt; pow1 = Math.pow(logn, 1/3)
8.103368625868256
&amp;gt; pow2 = Math.pow(loglogn, 2/3)
3.402728919940164
&amp;gt; 1.9 * pow1 * pow
252.389776867137634
&amp;gt; Math.pow(e, 52.389776867137634)
5.65706279069233e+22
&amp;gt; Math.pow(logn, 3)
150657362.61267015&lt;/code&gt;&lt;p&gt;前者是 1022，后者 109，如果 1ns 完成一个 operation（当然两个算法一次 operation 的时间是不等的，但是常量），前者需要 180 万年，后者需要 1s。&lt;/p&gt;&lt;p&gt;由此可见，Shor 对 RSA 体系的破坏性是显而易见的，而且，它的变种，对基于椭圆双曲线的 ECDSA 也有类似的降维杀伤力。从这个角度上讲，量子计算机不断走向成熟，整个非对称加密体系下的算法都会受到巨大的冲击 —— PKI 将坍塌，你访问 chase.com，CA 已经无法证明 chase.com 的 cert 属于 Chase；你也无法使用公钥去验证某个私钥的签名，因为私钥变得可以被公钥推导出来。所以，岌岌可危的并非 bitcoin，而是整个 internet。你无法信任你的银行的网站，银行无法信任你的 USB token 里的私钥提供出来的签名。我们的数字化生活会走向暗黑时代。&lt;/p&gt;&lt;p&gt;然而你还是能信任你的 bitcoin 钱包。虽然 bitcoin 钱包的私钥和钱包地址都来源于 ECDSA 的私钥和公钥，然而钱包地址并非直接是公钥，而是公钥的 hash。因而，你给一个钱包打钱，并不会需要钱包的公钥；只有这个钱包使用里面的钱（给别人打钱）时，才需要把自己的公钥放在 transaction 里。如果一个钱包只是收钱，那么它是安全的 —— 即便 Shor 算法也需要公钥去逆向私钥。因为公钥没有暴露出来，Shor 算法无法使用。因而即便量子计算破解了非对称加密算法，对于那些没有使用过的冷钱包（code wallet），也无法破解。对于那些需要 multisig 的钱包，也是类似。&lt;/p&gt;&lt;p&gt;如果非得破解冷钱包，那么需要先把钱包地址逆向出来其公钥，而这个操作 Shor 无法完成，只能借助其他算法。&lt;/p&gt;&lt;p&gt;这个算法是 Grover。先看 Wiki：&lt;/p&gt;&lt;blockquote&gt;Grover’s algorithm is a quantum algorithm that finds with high probability the unique input to a black box function that produces a particular output value, using just O(sqrt N) evaluations of the function, where N is the size of the function’s domain. It was devised by Lov Grover in 1996.&lt;/blockquote&gt;&lt;p&gt;基本上，Grover 对于函数 f(x) = y，只要给定 y，以及 x 取值的一个列表，它可以以 O(sqrt N) 的时间复杂度，找到这个 x。换句话说，随便一个算法，正常情况下暴力破解（在算法的定义域里一个个试），是 O(N)，Grover 将其降低成 O(sqrt N)，对于时间复杂度来说，这算法虽然看上去不错，但大多数情况下只是聊胜于无。下图是它和 log N 对比：&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-fec77dab102286f530de1559d89f3d4d_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;705&quot; data-rawheight=&quot;535&quot;&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;我们看一个 256bit 的公钥，其 O(sqrt N) 是多大。我们先得找 256bit 数字的取值范围：&lt;/p&gt;&lt;code lang=&quot;js&quot;&gt;&amp;gt; n_max = 0b111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
5.78960446186581e+76

&amp;gt; Math.sqrt(n_max)
2.4061596916800453e+38

&amp;gt; Math.log(n_max)
176.75253104278605&lt;/code&gt;&lt;p&gt;可以看到，虽然 sqrt 后量级已经大大减少，但还是 trillion trillion trillion 级别，在一个可以预见的时间内无法破解。所以，即便使用了 Grover 算法，也无法有效地通过钱包地址破解出公钥，进而进一步使用 Shor 算法从公钥破解出私钥。&lt;/p&gt;&lt;p&gt;从这个意义上讲，bitcoin 对 quantum computing 还是有一定免疫力的。在大家担忧量子时代到来后（可能二三十年到来，也可能三五十年） bitcoin 的前景时，还是先担忧一下现有的 PKI 体系吧，毕竟，信用卡，网银，微信支付，支付宝等所有基于非对称加密来保证安全的系统，可能都会变得不再可信。你以为你大爷是你大爷，可是你大爷真的不再是你大爷了。&lt;/p&gt;&lt;p&gt;一些问题：&lt;/p&gt;&lt;p&gt;Q: 是不是只是对于从没有交易过的冷钱包来说才是安全的？&lt;/p&gt;&lt;p&gt;A: 对。所以大钱放冷钱包；经常要花的小钱放热钱包，类比 checking / saving account。收钱是不受影响的。如果热钱包被打了很多钱，立刻转到冷钱包里去 —— 不管有没有量子计算，这都是好习惯。冷钱包一旦使用，记得把余额打到新的冷钱包里面。&lt;/p&gt;&lt;p&gt;Q: SHA256呢？这个算法被攻破的话挖矿将瞬时完成，现有的PoW崩溃，网络也就脆弱&lt;/p&gt;&lt;p&gt;A: 我文中最后提 Grover 算法就是在逆向由 ripemd(sha256(pk)) 生成的钱包地址，从中获取pk。是不可行的。量子计算会让 PoW 加速（别人十分钟产块，你理论上可以 3.1 分钟，但 difficulty 会随之而涨），因而量子霸权可以很容易让自己生成新的 block。但是要逆向 pow 是很难的，比如要逆向之前的 6 个区块，那么时间成本是指数增加的。PoW 目前的 difficulty 是 3290605988754，sqrt 后是1814002，对于单个 block，这是压倒性的优势；但要篡改历史上的区块，比如最近 6 个，需要 Math.pow(difficulty, 6)，使用 Grover 后，仍然要应对 3.6e+37 的量级的计算。&lt;/p&gt;&lt;p&gt;Q: 量子霸权会超50%算力进而伪造交易吗？&lt;/p&gt;&lt;p&gt;A: 可以形成算力上的垄断，但这种垄断无法直接伪造交易，只能让垄断者能够 double spend；如果要伪造交易，需要在 10分钟内攻破别人的私钥（使用 Shor 算法），且比别人都快出 block。如果到了到这个时候，我们需要先担心的是整个 PKI 体系坍塌带来的暗黑时代，而非 bitcoin 交易被伪造。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;延伸阅读：&lt;/p&gt;&lt;a href=&quot;https://www.technologyreview.com/s/609408/quantum-computers-pose-imminent-threat-to-bitcoin-security/&quot; data-draft-node=&quot;block&quot; data-draft-type=&quot;link-card&quot; data-image=&quot;v2-8794519f78d5605a42427192d576396c&quot; data-image-width=&quot;703&quot; data-image-height=&quot;395&quot; data-image-size=&quot;180x120&quot;&gt;Bitcoin security threatened by quantum computers, say cybersecurity experts&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>陈天</author>
<guid isPermaLink="false">2018-03-12-34458475</guid>
<pubDate>Mon, 12 Mar 2018 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
