<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>数据安全、隐私保护与密码学技术专栏</title>
<link>https://henix.github.io/feeds/zhuanlan.datasec/</link>
<description>本专栏主要发布如下内容： 1. 国际黑帽子大会（Black Hat），国际黑客大会（Def Con）上的演讲内容分析； 2. 密码学、网络安全相关的源代码分析； 3. 密码学、网络安全相关的知识介绍； 4. 业内可公开的安全架构思想； 5. 其他与信息安全相关的内容或转载文章； 欢迎投稿，欢迎指出任何错误~ 希望我们能够一起为普及、分享、研究信息安全相关理论和知识贡献自己的一份力量！</description>
<language>zh-cn</language>
<lastBuildDate>Mon, 12 Feb 2018 16:31:03 +0800</lastBuildDate>
<item>
<title>一个刷存在感的招聘帖：阿里巴巴-云零售事业部-数据技术团队招聘信息</title>
<link>https://henix.github.io/feeds/zhuanlan.datasec/2017-12-21-32211518.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/32211518&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-1fd607b4d8d73790d0210cdb7a2fa18a_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;好像这半年只写了2个答案，专栏也许久没更新了。一方面，8月以来自己的小家正在装修，现在的住处个人空间有点小，对于写答案的欲望也有所影响。另一方面，作为一个职场新人，正式投入工作后需要适应、理解、学习的事情很多，这段时间一直没有特别多的精力写答案。&lt;/p&gt;&lt;p&gt;说到工作，我这份工作就是在知乎上被阿里的大V勾搭到的。最新团队启动了新的招聘战役，释放了大量的招聘指标（Hire Count，据说上不封顶），我也希望能从知乎上吸引来更多志同道合的小伙伴，一起做一些很有意义的事情。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;如果你对岗位有疑惑，欢迎私信向我提问。&lt;/li&gt;&lt;li&gt;如果你对岗位感兴趣，欢迎私信我或通过邮箱联系我：weiran.lwr@alibaba-inc.com。如果初步交流后互相都觉得很合适，我会将相关信息转达给相关岗位的接口人。当然了，也可以根据招聘图上的要求，将简历通过邮箱投至adjob@taobao.com~&lt;/li&gt;&lt;li&gt;如果你对岗位不感兴趣也没关系，可以看看招聘信息，了解一下我们部门在做的工作是什么，没准未来有一天就对岗位感兴趣了呢？&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;先来一个招聘图&lt;/h2&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-0ce304a735858da60c978971d5c88ffb_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;1000&quot; data-rawheight=&quot;4381&quot;&gt;&lt;h2&gt;云零售事业部是一个什么部门？&lt;/h2&gt;&lt;p&gt;阿里巴巴云零售事业部（Alibaba Cloud Retail Service，CRS）的主要目标是通过数据、技术手段提升商家的经营效率，提速商家的业务增长，其使命是“引领商业全域转型”。其主要目标即包含对于传统电商的赋能提效，也包含对于线下零售商家利用数字化能力转型新零售提升经营效率。&lt;/p&gt;&lt;p&gt;阿里巴巴云零售事业部具有完备的商家运营产品矩阵，包含千牛以及服务商市场等生态，帮助电商企业依靠生态拓展商业能力。同时事业部向商家提供了全域运营的产品，包含“品牌数据银行”，帮助商家建立人群数据运营的能力；打造“智慧门店”等全渠道产品，建立商家线下业务的数据化能力，完成新零售模式的转型。&lt;/p&gt;&lt;p&gt;阿里巴巴云零售事业部的官方网站是：crs.alibaba.com。感兴趣的知乎er们可以访问此网站，了解此部门的相关信息。&lt;/p&gt;&lt;h2&gt;招聘的岗位有哪些？&lt;/h2&gt;&lt;p&gt;招聘岗位主要分为两大类：&lt;b&gt;数据科学应用团队&lt;/b&gt;、&lt;b&gt;系统工程团队&lt;/b&gt;。下面分别进行介绍。&lt;/p&gt;&lt;h2&gt;数据科学应用团队招聘岗位&lt;/h2&gt;&lt;p&gt;数据科学应用团队主要与数据本身打交道，考虑如何更有效地应用数据。数据科学应用团队主要岗位描述如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;高级数据分析师：（1）理解行业知识（快消、美妆、食品、家电等），通过品牌、消费者数据，建立针对品牌视角的分析体系和方法论；（2） 配合品牌商客户，使用大数据进行专案分析，提供定量的营销策略方案支持。详情：&lt;a href=&quot;https://job.alibaba.com/zhaopin/position_detail.htm?positionId=24076&quot;&gt;云零售 - 高级数据分析师/专家&lt;/a&gt;&lt;/li&gt;&lt;li&gt;高级数据安全工程师：（1）负责部门业务数据安全合规，进行风险识别评估，提供业务可落地的安全解决方案，构建智能感知的风控安全产品；（2）完成数据安全技术理论攻尖及对应的原型验证，配合开发人员进行原型系统的产品化； （3）参与云安全产品预研、需求分析及技术方案设计。详情：&lt;a href=&quot;https://job.alibaba.com/zhaopin/position_detail.htm?positionId=26446&quot;&gt;云零售 - 高级数据安全工程师/专家&lt;/a&gt;&lt;/li&gt;&lt;li&gt;高级数据研发工程师：（1）负责阿里巴巴Uni-marketing大数据产品中（数据银行，策略中心等）偏用户触发的数据计算，满足用户个性化诉求；（2）基于阿里海量数据和大数据引擎，解决的场景是：根据不同用户需求，在运行时决定底层的数据和计算引擎。详情：&lt;a href=&quot;https://job.alibaba.com/zhaopin/position_detail.htm?positionId=45069&quot;&gt;云零售 - 高级数据研发工程师/专家&lt;/a&gt;&lt;/li&gt;&lt;li&gt;高级数据仓库工程师：（1）负责阿里商家（品牌商、中小商家）的对外数据产品（数据银行、策略中心、客户运营平台、智慧门店，智慧快闪店）的数据研发，驱动业务成长；（2）基于阿里海量数据的数据仓库建设和数据分析，同时针对各业务场景探索大数据解决方案；（3）构建服务于品牌商和第三方开发者的安全的数据服务技术方案。详情：&lt;a href=&quot;https://job.alibaba.com/zhaopin/position_detail.htm?positionId=46190&quot;&gt;云零售 - 高级数据仓库工程师/专家&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;我自己就在数据科学应用团队做数据安全，所以我对数据安全相关岗位的了解最深入&lt;/b&gt;。不过上述岗位我都有一定的了解，就算不了解也可以请团队的其它小伙伴们回答嘛。&lt;/p&gt;&lt;h2&gt;系统工程团队招聘岗位&lt;/h2&gt;&lt;p&gt;系统工程团队主要与开发打交道，考虑如何将分析结果科学、合理地展现给商家。这一部分的职位我只了解一部分，因此我特别请系统工程团队的同学撰写了一份介绍~&lt;/p&gt;&lt;p&gt;&lt;b&gt;如果对系统工程团队感兴趣，请给这位同学发邮件：aiqiang.gaq@alibaba-inc.com。&lt;/b&gt;当然，也可以先联系我了解情况。职位详情：&lt;a href=&quot;https://job.alibaba.com/zhaopin/position_detail.htm?positionId=34974&quot;&gt;云零售 - 高级Java开发工程师&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;一、场景和挑战描述：&lt;br&gt;&lt;br&gt;云计算和大数据是阿里巴巴集团的战略之一。阿里的大数据，在规模、维度、全量性等方面，都居于世界领先地位。构建在大数据之上的阿里巴巴品牌数据银行，目标是为客户提供人货场全方面、全维度的分析和资产沉淀，是新零售的重要抓手。 &lt;br&gt;&lt;br&gt;以新零售为突破点，促进销售升级、零售升级，间接地促进制造业升级，促进供给侧改革，为国家制造2025等宏观计划增砖添瓦，为经济结构转型和经济腾飞做出贡献，为实现民族复兴贡献自己的智慧和力量。你有没有心动？这不是说大话，而是让我们搞软件和IT技术的能够融入国家大发展、民族和国家强盛的利益关系链，是我们每个人输出自己的智慧和力量的终局作用域。 &lt;br&gt;&lt;br&gt;这里的海量和大数据指的是万亿级别的数据规模，进行实时OLAP分析，要求秒级返回，这个技术挑战，你有方案吗？无所谓你想到了什么方案，在这里你都可以尝试，你都可以探索，只要能解决问题！&lt;br&gt; &lt;br&gt;二、职位要求&lt;br&gt;1、具备扎实的计算机基础，包括操作系统、编程语言、数据结构、数据库、软件工程等知识 &lt;br&gt;2、JAVA基础扎实，包括JVM、IO、多线程、并发、网络，深刻理解面向对象、设计原则、封装抽象等；  &lt;br&gt;3、熟练使用常用的Java技术框架，并对java web的各种开源框架如Spring、Spring Boot等有深入的应用和优化经验，掌握它的原理和机制；  &lt;br&gt;4、熟悉关系数据库、NoSQL、缓存、消息队列、RPC等内部机制；  &lt;br&gt;5、学习能力强，有较强的问题分析和处理能力，具有团队合作精神。&lt;br&gt;&lt;br&gt;符合以下经验者优先：&lt;br&gt;1、有大数据相关分布式系统（如Druid、GreenPlum、Kylin、Impala、HBase、Spark等）的开发/应用优化经验  &lt;br&gt;2、对高并发、高稳定可用性、高性能、大数据处理有过实际项目及产品经验者  &lt;br&gt;3、有大数据产品、中间件技术解决方案者 &lt;br&gt;4、有抽样统计、近似计算、数据仓库、OLAP相关理论和开发经验者&lt;br&gt;&lt;br&gt;三、补充&lt;br&gt;本部门也在找数据安全和隐私保护技术人才，职位要求一样。联系方式一样。&lt;br&gt;&lt;br&gt;如果你想对大学学到的微积分、概率等基础数学工具有一个温故知新，如果你想对前沿隐私保护技术有一定的理论认知，如果你还想把这些数学知识和隐私保护理论应用到工程中解决实际问题，如果你还想在进行机器学习和数据挖掘的时候也保护隐私，那么我们这里绝对是你综合运用各种理论和知识解决实际问题的绝佳场所。&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>刘巍然-学酥</author>
<guid isPermaLink="false">2017-12-21-32211518</guid>
<pubDate>Thu, 21 Dec 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>戏说密码学——比特币外传</title>
<link>https://henix.github.io/feeds/zhuanlan.datasec/2017-05-15-26908559.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/26908559&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-2c6a2c2c3c72b0a6041120c61e2e42e2_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;恭喜伍前红老师开通了自己的微信公众号“舌尖上的密码学”！公众号上的第一篇文章《比特币外传》文采飞扬，用一个幽默的故事讲述了比特币历史。比特币的诞生与发展充满了曲折，随着5月13日勒索病毒“WannaCry”的爆发，有关比特币的讨论又一次激烈了起来。比特币到底是怎么回事？它是如何诞生并发展起来的？为何近期的勒索病毒均只允许比特币支付？伍教授的故事向大家呈现了一个很生动的答案。&lt;br&gt;&lt;/p&gt;&lt;p&gt;我在本专栏转发此篇文章，标明出处：&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzU1MzA3MTAwMQ==&amp;amp;mid=2247483660&amp;amp;idx=1&amp;amp;sn=3bf91d53f08b66bf8600c1a7514d2781&amp;amp;chksm=fbf939facc8eb0ecc771c3bd7fb64692c73f97e4fc5f68f9dd1fc687c194a5e6f844b536f552&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=05140HuhcALW2w0Nq6gUw6Ub#rd&quot; class=&quot;&quot; data-editable=&quot;true&quot; data-title=&quot;比特币外传&quot;&gt;比特币外传&lt;/a&gt;。在转发之余，我尽我所能补充故事背后的事件，希望能让大家更好地了解比特币的历史，对比特币有一个更加形象的了解。&lt;/p&gt;&lt;p&gt;本转载已经经过伍前红教授的授权，进一步转载请注明出处和文章的原始出处。感兴趣的知友们可进一步关注伍前红教授的公众号：舌尖上的密码学。&lt;/p&gt;&lt;blockquote&gt;话说比特币，大家都叫他比娃，身世很可怜，娘亲是谁也不知道，比娃是08年底生的，生下来都没娘，也没奶水吃，他爹据说叫中本聪，村里人都瞧不上他，可能是个外来户，不会种地放羊养牛啥的，只会捣糨糊，就一天到晚磨米糊糊喂比娃。&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-237a60823ab3d0600120dc04132e4b2f_r.jpg&quot; data-rawwidth=&quot;1700&quot; data-rawheight=&quot;2200&quot;&gt;&lt;b&gt;2008年中本聪发表的论文&lt;/b&gt;（来源：&lt;a href=&quot;http://www.lucilladearcangelis.it/pdfPaper/bitcoin.pdf&quot; class=&quot;&quot; data-editable=&quot;true&quot; data-title=&quot;lucilladearcangelis.it 的页面&quot;&gt;http://www.lucilladearcangelis.it/pdfPaper/bitcoin.pdf&lt;/a&gt;）&lt;/p&gt;自互联网诞生后，很多学者提出了虚拟货币的概念，并尝试构造一种数字货币。但是这些货币一直无法解决一个重要的问题：二次消费（Double Spending）。日常的纸币在消费时需要把纸币直接交给对方，纸币消费后是无法在手中保留的。但是数字货币不行，因为计算机中存储的东西可以任意复制和粘贴，用户完全可以把电子货币复制一份，并用复制的电子货币重复完成交易。一直以来，解决二次消费问题的方法是引入一个类似银行的第三方（也成为重要认证机构）。所有的交易信息都要告诉第三方，有它来确认用于交易的电子货币在之前是不是已经被使用过了。很显然，如果交易规模太大，或者第三方的安全出现问题，整个电子货币系统就会崩溃。&lt;p&gt;2008 年 10 月 31 日，一个化名中本聪（Nakamoto S.）的人在一个很不知名的密码学论坛上公开了一篇题目为《比特币：一种点对点电子现金系统》（BitCoin: A Peer to Peer  Electronic Cash System）的论文。正是提出了比特币的概念。然而，到现在为止我们也不知道这个中本聪到底是谁，甚至连这个人是哪个国家的都不知道。从名字上看，这个人似乎是一个日本人，名字的粗略含义是“认真思考”。不过从论文中我们可以肯定的是，这个人精通密码学，并且有很不错的数学素养。&lt;/p&gt;&lt;p&gt;这篇论文刚发布的时候，在业界并没有得到什么反响。中本聪本人似乎一直在编写比特币系统的代码。2009年1月，比特币开源客户端上线。同时，中本聪通过挖矿的方式，获得50个比特币，这也是第一批比特币。&lt;br&gt;&lt;/p&gt;&lt;blockquote&gt;一直到1岁6个月大的时候遇到一个好心人，他爹一大堆糊糊换到两块披萨，才给比娃开荤，你说，也是奇了，这娃开荤就能吃俩披萨，吃完还下地走路了，然而比娃还没走出去多远，一转身，他爹也不见了，至今也没个信儿。&lt;/blockquote&gt;2010年5月17日，也就是中本聪发布论文的大约1年半后，来自美国佛罗里达州的程序员拉兹洛▪汗耶克（Laszlo Hanyecz）使用比特币交易平台发起了一个有关披萨的交易。他希望花费10000个比特币购买两张披萨。2010年5月22日，这笔交易得到了确认。一位来自英国的卖家通过信用卡完成了此笔交易。这是历史上首个比特币的真实交易，5月22日也成为了一个历史性的日子，称为比特币披萨日（Bitcoin Pizza Day）。&lt;p&gt;至此以后，比特币社区出现了一个单位，叫做披萨指数（Pizza Index），这个值标注了所购买的披萨现在值多少钱，也就等价于10000比特币现在值多少钱。当时披萨指数为41美金。截至目前为止，披萨指数已经达到1亿美金。不知道当时吃掉这披萨的汗耶克现在作何感想…（感谢&lt;a href=&quot;http://www.zhihu.com/people/72036ce918812daac46c75d7cac1e7d2&quot; data-hash=&quot;72036ce918812daac46c75d7cac1e7d2&quot; class=&quot;member_mention&quot; data-hovercard=&quot;p$b$72036ce918812daac46c75d7cac1e7d2&quot; data-editable=&quot;true&quot; data-title=&quot;@James Swineson&quot;&gt;@James Swineson&lt;/a&gt; 在评论中的指正，原始文章中Index翻译成了索引值，实际应该翻译成指数）&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-895a07a267936f0e16b23fc19bea73fc_r.jpg&quot; data-rawwidth=&quot;800&quot; data-rawheight=&quot;599&quot;&gt;&lt;b&gt;拉兹洛▪汗耶克购买的披萨&lt;/b&gt;（来源：&lt;a href=&quot;https://en.bitcoin.it/wiki/File:Laszlospizza.jpg&quot; data-editable=&quot;true&quot; data-title=&quot;en.bitcoin.it 的页面&quot; class=&quot;&quot;&gt;https://en.bitcoin.it/wiki/File:Laszlospizza.jpg&lt;/a&gt;）&lt;br&gt;&lt;/p&gt;&lt;blockquote&gt;比娃没娘亲，爹也没了，和所有没爹娘管的娃一样，比娃一天到晚就在街头混，被流氓黑老大当肉票，还得陪着黑老大吸粉、逛窑子、抢地盘、偷鸡摸狗，活一天算一天，还好这娃天生异禀，遗传了他老爹的分身术、隐身术和金钟罩，不怕挨揍，练过综合格斗的徐教练都打不倒他，比一代雷宗师还能挨打，不过据说怕另一代闫大师隔山打牛，怕套路。还好比娃饭量奇大，长得快，不管咋说，在小混混大混混欺负下居然活了下来，越长越帅，比他爹还帅（村里没人见过他爹）。&lt;/blockquote&gt;&lt;p&gt;比特币的构造基于密码学，所使用的密码学算法至今仍然认为是安全的。与之前的电子货币不同，比特币具有非常好的安全特性，如匿名性、交易不可否认性等，因此比特币发展迅速。&lt;/p&gt;&lt;blockquote&gt;各路黑老大都喜欢带着比娃，提个密码箱，觉得倍儿有面子，最惊险的一次是新丝路黑老大带着他得罪了村长，村长用媳妇钓鱼，比娃漏了马脚，村长带着保镖把新丝路黑老大给灭了，比娃跑得快，捡了一条小命。&lt;/blockquote&gt;&lt;p&gt;比特币虽然看似非常安全，但仍然有一些安全漏洞。最初的比特币交易记录中没有应用区块链（Blockchain）技术，因此交易不需要认证，这也意味着恶意用户可以绕过比特币的限制，创造无限量的比特币。2010年8月15日，一次交易竟然凭空创建了1840亿个比特币。几小时后，此次交易被发现，交易记录从比特币记录中移除，比特币开发者们也修复了此漏洞。这是比特币历史上唯一一个被发现并利用的安全漏洞。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-7bc7e4a18d93c4cd7e68e4ea5179f294_r.png&quot; data-rawwidth=&quot;350&quot; data-rawheight=&quot;175&quot;&gt;&lt;b&gt;Mt.Gox公司标志&lt;/b&gt;（来源：&lt;a href=&quot;https://en.bitcoin.it/wiki/File:MtGox.png&quot; data-editable=&quot;true&quot; data-title=&quot;en.bitcoin.it 的页面&quot;&gt;https://en.bitcoin.it/wiki/File:MtGox.png&lt;/a&gt;）&lt;/p&gt;&lt;p&gt;然而，比特币由于一直没有被政府部门承认，因此其交易一直处于不合法状态。但是由于比特币绝佳的安全特性，比特币一直被用于黑市交易，如洗钱、违禁品交易等。2011年6月，高科传媒发表一篇文章，指出一个叫做Silk Road的网站接收比特币支付，出售违禁品。同月，比特币交易平台被曝光出用户信息泄露问题。承担90%交易的比特币平台Mt.Gox承认用户信息遭到泄露，共计泄露了60000份用户名、电子邮件和密码，600人的比特币被盗。Mt.Gox在7天内停止了交易。这也使得比特币的信任值大幅下降。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;此后黑老大们把比娃盯得紧，关黑屋里，2013年比娃逮着个机会偷偷拿了一个黑老大的500欧大钞，在上面写着叔叔阿姨救我，被村西边默大婶捡到，要是以前，嘿嘿，这个大婶家可不是吃素的，比那些黑老大还要黑还要大，因为横过分了，被前村长、现任村长，还有文娱干事和体育干事联合起来揍了一顿，洗心革面，开了个铁铺，一心打铁，现在也是村里大户，把比娃收养了。&lt;/p&gt;&lt;p&gt;比娃由于说不清爹娘，一直没户口，默婶也只能给他弄个暂住证，没法摇号买车，还好比娃会天生会网遁，比土行孙还厉害，只有有网，唰，就跑不见了，虽然比娃时不时还被黑老大拎回去帮着提箱子，但总的日子越过越好，走路也比以前神气了，匪气少了些，还有点儒雅，大家有时不再叫他比娃，有姑娘背地里叫他比尔先生了。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;2013年，比特币终于得到了国家层面的认可。2013年7月，由金融监管权威机构监管的德国比特（Bitcoin Deutschland）成为了首家与银行建立直接合作关系的欧洲比特币交易平台，该公司同意与德国Web 2.0银行Fidor合作将比特币兑换为其他币种。2013年8月，德国金融部（Ministry of Finance）已经正式认可比特币成为一种“货币单位”（Currency Unit）和“私有资产”（Private Money）。德国政府正式承认了比特币的合法货币地位，德国也成为了全球首个认可比特币为合法货币的国家。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;村长在村东边开了一家空空小店，雇了一个叫安培的斜眼老大爷做掌柜，专做些无本的买卖，跑腿的事都让一个叫円的店小二在干，虽然现在破落了些，但安掌柜家有个叫仓井的闺女，从小特能挣钱，攒了不少银子，还够花几年，但坐吃山空啊。&lt;/p&gt;&lt;p&gt;安掌柜看默大婶的铁铺自从有了比娃，生意是越做越好，动起了心思，对仓井说，你也老大不小了，该有个归宿了，仓井脸一嘟嘴，才不呢，人家还小嘛，人家要陪ちち一辈子。&lt;br&gt;&lt;/p&gt;&lt;p&gt;安掌柜眼神闪过一丝不易觉察的不屑，我看你还是惦记着小二円吧，仓井啊，小二円细胳膊细腿，每次出门都被揍得鼻青脸肿，円没出息，你不能没出息啊，这空空小店你就不想做成大店，我看村西默婶的铁铺生意是越来越来好了，那帮默婶做生意的小伙还不赖，是把做生意的好手，虽然长得有点黑。&lt;br&gt;&lt;/p&gt;&lt;p&gt;仓井脸一红，爹爹说的是比哥哥啊，井井都听爹爹的安排，井井一定做个大店，伺候好ちち。安掌柜嘴角飞快完成了下弯上翘到恢复正常，经历了一个正弦函数完整周期，正色道，我已经找村长他妈看过日辰，村长东家也同意了，4月1日是个好日子，把比尔给你招过来，出门都带上，爹知道你的心思，小二円也给你留着，你们同心协力，做个大店，大大的有。&lt;br&gt;&lt;/p&gt;&lt;p&gt;安掌柜心思慎密，知道这不是什么光宗耀祖的事，也没敢大操大办，只想悄悄的进村，打枪的不要。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;随着比特币被德国认可，有国家陆续开始接受比特币。2013年10月，加拿大温哥华推出了世界上首个比特币ATM机。2013年11月，英国维珍银河公司宣布接受用户使用比特币预定机票。&lt;/p&gt;&lt;p&gt;然而，比特币在其它国家的推行并不顺利。美国对比特币持有谨慎态度，认为需要长时间发展后才能确定其有效性。俄罗斯对比特币持强硬态度，韩国拒绝承认比特币的货币地位，荷兰警告比特币风险。泰国将以下活动视为违法：买卖比特币、用比特币买卖任何商品或服务、与泰国境外的任何人存在比特币的往来。2013年12月，中国人民银行宣布所管辖银行不接受比特币，这也使得比特币价值暴跌。但随后比特币价值又得到回升。&lt;/p&gt;&lt;p&gt;日本对比特币的态度由不接受转变为了接受。2014年6月，日本执政党自民党表示，决定暂时不监管比特币。2015年8月，日本政府考虑比特币监管事宜。2016年5月，日本首次批准数字货币监管法案，并定义为财产。2017年4月1日，日本正式通过相关法律，正式确认比特币为一种合法的支付方式。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;没想到这事还是传出去了，引起了村南边一个姓澳的大户人家的注意，这户人家有些来头，是前村长的二儿子，因为老是顶撞他老爹，被他老爹赶到村南边一个到处都是鸵鸟屎的小岛上，没想到这混小子因祸得福，千千万万年下来，这些鸵鸟屎变成了矿石，老值钱了，澳大户看到有了比娃，默婶的铁铺红红火火，安掌柜的小店要变大店的样子，一天到晚琢磨怎么把比娃撬过来。&lt;/p&gt;&lt;p&gt;想一想比娃已经不是当年小黑屋的比娃，当初我对你爱理不理，现在你让我高攀不起，不好办啊，突然眼睛一亮，澳元波娃，就是她，不信他比娃不动心，可是澳大户眼神很快暗了下去，澳元波娃可是澳大户的黄花大闺女，心疼啊，澳大户心一横，不管了，舍不得孩子套不着狼，有了比娃的隐身术，咱的生意也可以做到全村了，托了人和比娃说合。&lt;/p&gt;&lt;p&gt;比娃先是有些犹豫，那人说了澳元波娃如何如何，比娃窃喜，却淡淡应道，上半年是没有时间了，下半年可以安排，那人飞也似地回去，回主人话，比娃说下半年可以。&lt;/p&gt;&lt;p&gt;2017年5月12日，澳大户迫不及待向村里宣布，比娃和他家的澳元波娃好上了，问了卦，7月1日，下半年的第一个日子是个好日子。这事有些突然，村里大妈买菜时候都在互相打听，这个比特币是个什么来历，怎么这些大户人家，生意人家，有头有脸的，争着要把自家的闺女A元B娃、E朵兰D娜什么的许给比特币，有的说比特币有神力，谁家姑娘许了他，家里马上黄金满屋，要什么有什么。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;2017年5月12日，澳大利亚政府宣布，澳大利亚将于2017年7月1日起确认比特币为合法货币，并将废除比特币商品与服务税。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;才一日，5月13一大早，突然传疯了，说比尔得了一种叫什么比特币病毒的病，得这病比尔自己倒没事，全村总共才195户人家，把村里99户人家都祸害了，前村长家差点弄出人命。&lt;br&gt;&lt;/p&gt;&lt;p&gt;各家掌柜的，东家，买菜的，男人女士，大人小孩都议论纷纷，村里一些姑娘可担心了，一些男士恨得牙痒痒的，还有看热闹的，一时谣言漫天飞，不知道比特币怎么啦，不是刚和仓井才好上么，怎么村里其他家里也出事了，有几户人家的私人医生说了，病根出在村长家那个也叫比尔的公子身上，他卖有洞的连裤袜给村里，就他一家卖连裤袜，不退货还不包修，都好多年了，前不久才说可以给大家弄个补丁把洞遮住，没来得及遮住的都被祸害了，是不是真的啊，出了这么大的事，比娃和澳元波娃的好事会不会黄，村长和村支书会不会出来表个态，比特币以后还会祸害村里么，比特币会不会被做掉。&lt;/p&gt;&lt;p&gt;欲知后事如何，啪！（敲桌子）且听下回分解。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;2017年5月13日，全球爆发了勒索病毒WannaCry，而这个病毒的一大特点就是只允许比特币支付勒索金。这个病毒利用了微软已经于2017年3月发现并退出相关补丁的漏洞，利用网络的445端口完成远程代码执行功能。这使得很多人意识到了比特币的一大重要的问题：因为比特币的匿名性，支付方只能通过比特币交易平台确认支付成功，但无法知道被支付方是谁。不光是支付方不知道，除了被支付方外的所有人都无法通过技术手段确认被支付方是谁。这也使得比特币成为勒索的绝佳平台：无法追踪被支付方的身份，只能让犯罪分子逍遥法外。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-35efbcafb813a4407b6d29d94f30b5f7_r.jpg&quot; data-rawwidth=&quot;817&quot; data-rawheight=&quot;565&quot;&gt;&lt;b&gt;WannaDecryptOr勒索对话框&lt;/b&gt;（来源：&lt;a href=&quot;http://www.59.cn/service/htm/page/3909.htm&quot; data-editable=&quot;true&quot; data-title=&quot;全球爆发Wannacry病毒 59互联推出紧急应对措施-服务中心,客户服务,59互联-中原最大的服务器租用/主机租用服务提供商,机房服务专家&quot;&gt;全球爆发Wannacry病毒 59互联推出紧急应对措施-服务中心,客户服务,59互联-中原最大的服务器租用/主机租用服务提供商,机房服务专家&lt;/a&gt;）&lt;/p&gt;&lt;p&gt;后事如何？且听下回分解。&lt;/p&gt;&lt;h2&gt;参考资料&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;秦波，陈李昌豪，伍前红等．比特币与法定数字货币．密码学报，2017，4(2)：176-186．&lt;a href=&quot;http://www.jcr.cacrnet.org.cn:8080/mmxb/CN/Y2017/V4/I2/176#&quot; data-editable=&quot;true&quot; data-title=&quot;比特币与法定数字货币&quot;&gt;比特币与法定数字货币&lt;/a&gt;．&lt;/li&gt;&lt;li&gt;木云三君．一张图了解比特币发展史．&lt;a href=&quot;http://www.360doc.com/content/13/1228/09/5052258_340704469.shtml&quot; data-editable=&quot;true&quot; data-title=&quot;一张图了解比特币发展史&quot;&gt;一张图了解比特币发展史&lt;/a&gt;．&lt;/li&gt;&lt;li&gt;Wikipedia. History of Bitcoin. &lt;a href=&quot;https://en.wikipedia.org/wiki/History_of_bitcoin&quot; data-editable=&quot;true&quot; data-title=&quot;History of bitcoin&quot; class=&quot;&quot;&gt;History of bitcoin&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Bitcoinwiki. Laszlo Hanyecz.&lt;a href=&quot;https://en.bitcoin.it/wiki/Laszlo_Hanyecz&quot; class=&quot;&quot; data-editable=&quot;true&quot; data-title=&quot;Laszlo Hanyecz - Bitcoin Wiki&quot;&gt;Laszlo Hanyecz - Bitcoin Wiki&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;玩币族．比特币是合法的吗？哪些国家承认比特币是合法的？比特币合法吗？&lt;a href=&quot;http://www.wanbizu.com/baike/201610257746.html&quot; data-editable=&quot;true&quot; data-title=&quot;比特币是合法的吗？哪些国家承认比特币是合法的？比特币合法吗？_玩币族&quot; class=&quot;&quot;&gt;比特币是合法的吗？哪些国家承认比特币是合法的？比特币合法吗？_玩币族&lt;/a&gt;．&lt;/li&gt;&lt;li&gt;比特娱乐．4月1日日本将正式认可比特币为合法支付货币．&lt;a href=&quot;http://www.bitebi988.com/1221&quot; data-editable=&quot;true&quot; data-title=&quot;4月1日日本将正式认可比特币为合法支付货币 | 比特币娱乐资讯网&quot;&gt;4月1日日本将正式认可比特币为合法支付货币 | 比特币娱乐资讯网&lt;/a&gt;．&lt;/li&gt;&lt;li&gt;全景网．澳大利亚政府将于7月1日承认比特币为货币．&lt;a href=&quot;http://www.p5w.net/weyt/201705/t20170515_1794731.htm&quot; data-editable=&quot;true&quot; data-title=&quot;澳大利亚政府将于7月1日承认比特币为货币_WE言堂_WE言堂_全景网&quot;&gt;澳大利亚政府将于7月1日承认比特币为货币_WE言堂_WE言堂_全景网&lt;/a&gt;．&lt;/li&gt;&lt;/ol&gt;</description>
<author>刘巍然-学酥</author>
<guid isPermaLink="false">2017-05-15-26908559</guid>
<pubDate>Mon, 15 May 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>DEF CON 24 - 大漩涡桌游 - 后附个人声明</title>
<link>https://henix.github.io/feeds/zhuanlan.datasec/2017-03-02-25510575.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/25510575&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-c6bb2c88a9e5f2a4c0f2cb59bc4ee8ae_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;h2&gt;前言&lt;/h2&gt;各位知友们好！这次继续为大家带来国际顶级安全会议DEF CON 24的一个视频。&lt;p&gt;与之前我经常制作的DEF CON Crypto &amp;amp; Privacy（密码与隐私）系列视频相比，这个视频从专业性上讲难度就小得多，思想也很有意思。不过由于视频中包含很多我不了解的专业术语，因此翻译着实费了一番功夫，而且我怀疑翻译结果仍然有很多错误的地方。不过也没关系，只要能帮助知友们理解大意，引起大家的兴趣，甚至让部分知友可以追随演讲者给出的链接深入理解视频的基本思想和贡献，我觉得这就够了。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;英文题目：Maelstrom: Are you playing with a full deck?&lt;/li&gt;&lt;li&gt;中文题目：大漩涡桌游：你玩的转吗？（其实我觉得这个翻译也不太恰当，因为原始题目实际上用了个双关）&lt;/li&gt;&lt;li&gt;YouTube：&lt;a href=&quot;https://www.youtube.com/watch?v=hZVcOxUxVEQ&amp;amp;t=188s&quot; data-editable=&quot;true&quot; data-title=&quot;youtube.com 的页面&quot; class=&quot;&quot;&gt;https://www.youtube.com/watch?v=hZVcOxUxVEQ&amp;amp;t=188s&lt;/a&gt;&lt;/li&gt;&lt;li&gt;演讲人员：Shane Steiger，某知名科技公司安全架构师（他本身没透露自己所在公司的名称），拥有注册信息系统安全师（CISSP）认证&lt;/li&gt;&lt;li&gt;关键词语：攻击生命周期，桌游&lt;/li&gt;&lt;/ul&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-5020874016082e841ee41f6b01c34345_r.jpg&quot; data-rawwidth=&quot;600&quot; data-rawheight=&quot;85&quot;&gt;&lt;h2&gt;攻击生命周期&lt;/h2&gt;&lt;p&gt;谈到网络攻击，一般想到的都是渗透测试啦，漏洞利用啦，入侵啦等等的名词。但如果稍微深入思考，就会发现这些名词对应的都是具体的攻击技术，而实施攻击并非只靠技术。实际上，攻击者要经历很多阶段，在不同的阶段达到不同的目标，最终实现攻击目的。从这个角度看，安全从业人员或许不仅可以从防御某个特定攻击技术的角度来抵挡攻击，更可以站在攻击者的立场上，以各个阶段为出发点实施防御。&lt;/p&gt;&lt;p&gt;如果想践行这一理念，首先要做的是：定义攻击者的各个攻击阶段。Steiger给出了一个很好的参考，即从洛克希德·马丁网络狙杀链（Lockheed Martin Cyber Kill Chain）出发，定义攻击者的攻击阶段。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-3eec4d3bffa6c9f3e7bb479de7e70910_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;洛克希德·马丁网络狙杀链给出了哪些攻击阶段呢？攻击者依次会经历如下几个阶段：&lt;br&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;侦查阶段（Reconnaissance）：收集攻击目标的信息&lt;/li&gt;&lt;li&gt;武器化阶段（Weaponization）：构建可能可以使用的攻击工具，可以说是广义角度的渗透&lt;/li&gt;&lt;li&gt;传递阶段（Delivery）：通过某种方法将攻击工具发送到攻击目标&lt;/li&gt;&lt;li&gt;利用阶段（Exploitation）：由攻击工具触发系统中的漏洞&lt;/li&gt;&lt;li&gt;安装阶段（Installation）：执行恶意脚本/安装恶意程序&lt;/li&gt;&lt;li&gt;命令&amp;amp;控制阶段（Command &amp;amp; Control）：在攻击目标上开启后门，通过后门传递指令，控制攻击目标&lt;/li&gt;&lt;li&gt;攻击目的阶段（Act on Objectives）：实现最终的攻击目的&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;仔细思考一下，整个攻击过程确实由这7个阶段来完成。只不过根据攻击目的的不同，各个阶段的攻击时间、攻击者所花费的开销等会有所不同。&lt;/p&gt;&lt;p&gt;定义了攻击流程后，我们可以试着从攻击流程的角度考虑防御方法，将不同的防御方法归类到不同的攻击流程上来。例如：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;侦查阶段防御技术：指定使用特定企业的邮箱或企业内部邮箱、使用VPN技术等&lt;/li&gt;&lt;li&gt;武器化阶段防御技术：安全软件开发、漏洞检测等&lt;br&gt;&lt;/li&gt;&lt;li&gt;传递阶段防御技术：企业内部邮件审计、邮件附件审查等&lt;/li&gt;&lt;li&gt;利用阶段防御技术：限制Java、Flash、Adobe Reader等插件的执行等&lt;/li&gt;&lt;li&gt;安装阶段防御技术：使用代理、抗恶意软件安装等&lt;/li&gt;&lt;li&gt;命令&amp;amp;控制阶段防御技术：使用代理、命令审查、网络流访问控制&lt;/li&gt;&lt;li&gt;攻击目的阶段防御技术：命令审查、数据流审查等&lt;/li&gt;&lt;/ol&gt;&lt;br&gt;&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-aee745406d5d8ce71e828dfcc6c1b1a7_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;如果我们能把所有攻击技术和各个阶段一一对应起来，给定了一个完整的攻击流程后，根据其所使用的各个攻击技术反过来定位攻击阶段，就能形成一个非常清晰的攻击者攻击声明周期了，而事实也确是如此。&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-815247e4ff59f50532a0417c35606d19_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-5020874016082e841ee41f6b01c34345_r.jpg&quot; data-rawwidth=&quot;600&quot; data-rawheight=&quot;85&quot;&gt;&lt;h2&gt;换一种方法思考防御&lt;/h2&gt;&lt;p&gt;既然如此，我们可以换一种角度思考攻击与防御。攻击实际上也是一个项目计划。攻击者（有意无意地）遵循着开发计划，一步一步地实施攻击。我们知道，提到项目计划，就有项目计划的4要素：范围（Scope）、时间（Time）、花销（Cost）、质量（Quality）。&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;范围对应攻击目标范围&lt;br&gt;&lt;/li&gt;&lt;li&gt;时间对应攻击执行周期&lt;/li&gt;&lt;li&gt;花销对应攻击所需的花费&lt;/li&gt;&lt;li&gt;质量对应攻击结果&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-f72dbdfc707cc1487e651ec503f4814f_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;&lt;p&gt;因此，如果防御者能够通过某些方式影响攻击者的攻击计划，也就达到了防御目的。&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-5020874016082e841ee41f6b01c34345_r.jpg&quot; data-rawwidth=&quot;600&quot; data-rawheight=&quot;85&quot;&gt;&lt;h2&gt;大漩涡桌游&lt;/h2&gt;&lt;p&gt;哎？等等？怎么听这个过程那么耳熟呢？我们有攻击技术，有防御技术，有攻击者和防御者，有各个攻击阶段，有攻击目的。如果把它们组合到一起，不就是一款桌游嘛！是的，Steiger这个极客就真的制作了这样一款桌游，桌游名字就叫做：大漩涡。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-c97aecdbaa58d9c612906415b458e04e_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;桌游板上面标注了上述7个阶段：侦查、武器化、传递、利用、安装、命令&amp;amp;控制、攻击目的。扮演攻击者的玩家目的是用攻击技术最终走到漩涡中心，而扮演防御者的玩家目的是把攻击者从漩涡中赶出去。这就是“大漩涡”这个名字的由来了。&lt;/p&gt;&lt;p&gt;我们应该还有攻击卡牌和防御卡牌呀。Steiger根据著名框架ATT&amp;amp;CK Framework所整理的攻击技术，构建了超过60种用红色表示的攻击卡牌。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-1a59934ef1c1f69d86b3f1526e0cdb92_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;Steiger进一步调研了现今的流行防御技术，构建了超过70种用蓝色表示的防御卡牌。&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-2f95a51252f755660c2d4651e899a245_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;根据攻击者的身份和攻击目的，Steiger又分别构建了身份卡牌和攻击目的卡牌。&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-ce0676f2c876ba331f61fba0eaac6e55_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-e2444836c4193c366e55cbe6eb829499_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;这个游戏做出来大概是这个样子：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-a973012ce7c18b55a4528b9646bdd26a_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;为什么我觉得这个工作很有意思呢？有如下几点：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;通过桌游，可以向大众普及安全知识。相信《三国杀》（桌游）的推出让不少知友们回过头来阅读了《三国演义》甚至是《三国志》。而《欧陆风云》（电脑游戏）的推出让无数玩家对欧洲历史产生了浓厚的兴趣。这个桌游如果确实好玩的话，也会促使玩家们回过头理解安全的相关知识。而这不就是科普的本质嘛！&lt;/li&gt;&lt;li&gt;通过桌游，可以为企业安全意识培训提供优秀的方法。很多公司的安全意识培训都是以讲座、授课的形式进行，考核方式一般就是在线答题等。如果某个企业能够参考这种方法进行安全意识培训，相信所有的员工都会乐意参与，并且会极大地增加学习的主动性。&lt;/li&gt;&lt;li&gt;通过桌游，可以为安全领域吸引人才。安全的一大问题就是相对比较抽象，门槛比较高。这对初学者来说实际上形成了一个天然的阻碍。另一方面，安全领域实在是太宽泛了：大到IT审计、IT治理，小到一个安全协议的设计，一个密码算法的调用，背后都是一大片知识。初学者很容易在这么多领域内挑花了眼。桌游可以让大家大致了解安全涉及的领域，并进一步根据自己的兴趣选择合适的领域进行研究。&lt;/li&gt;&lt;/ol&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-5020874016082e841ee41f6b01c34345_r.jpg&quot; data-rawwidth=&quot;600&quot; data-rawheight=&quot;85&quot;&gt;&lt;h2&gt;有价值的链接&lt;/h2&gt;&lt;p&gt;说了这么多，哪里能下载到呢？我这里列举视频中给出的几个链接，感兴趣的知友们可以参考。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/maelstromthegame/defcon24&quot; data-editable=&quot;true&quot; data-title=&quot;maelstromthegame/defcon24: Postings for DEF CON 24&quot; class=&quot;&quot;&gt;maelstromthegame/defcon24: Postings for DEF CON 24&lt;/a&gt;。这个项目的GitHub。里面包含了游戏规则、卡牌介绍、DEF CON视频的PPT等内容。&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://vimeo.com/177304576&quot; data-editable=&quot;true&quot; data-title=&quot;vimeo.com 的页面&quot;&gt;https://vimeo.com/177304576&lt;/a&gt;。这是此桌游试玩的演示视频。演示视频还挺逗的，最后防御者出了个杀手锏：&lt;b&gt;叫警察卡牌&lt;/b&gt;，令攻击状态退回到侦查阶段。这一下把攻击方搞的无语了…&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://attack.mitre.org/wiki/Main_Page&quot; data-editable=&quot;true&quot; data-title=&quot;ATT&amp;amp;CK&quot;&gt;ATT&amp;amp;CK&lt;/a&gt;。MITRE公司给出的ATT&amp;amp;CK框架。这个框架到现在为止（2017年3月2日）列举了127个典型攻击手段。对安全感兴趣的知友们可以把它当作一个攻击技术小词典。&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://capec.mitre.org/&quot; data-editable=&quot;true&quot; data-title=&quot;Common Attack Pattern Enumeration and Classification&quot;&gt;Common Attack Pattern Enumeration and Classification&lt;/a&gt;。一个更全的攻击技术目录，如果说ATT&amp;amp;CK是个小词典，那CAPEC就是个辞海了。&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-5020874016082e841ee41f6b01c34345_r.jpg&quot; data-rawwidth=&quot;600&quot; data-rawheight=&quot;85&quot;&gt;&lt;h2&gt;写在最后：个人声明&lt;/h2&gt;&lt;p&gt;回想至今，在知乎上答题/写专栏也有2年多了。在这2年多时间里，我在知乎上与很多优秀的知友们相识相知，可以说知乎带给了我很多东西，不论是认识朋友/前辈，还是获得了优质的知识。因此，我特别感谢这个高质量的社区，这也是我为何愿意为这个社区持续贡献知识（一些可能不是什么干货…）的主要原因。&lt;/p&gt;&lt;p&gt;2017年2月，我收到了知乎官方的推荐，成为了知乎社区“荣誉会员”的候选人之一。可以说，这是知乎社区官方对我答案和专栏文章贡献的肯定。虽然肯定是选不上的啦，但是有这样一个提名荣誉已经是对我最大的肯定了！而且客观对比，领域内其他答主的水平确实在我之上，无论是输出数量也好，输出质量也好，均超过我不是一星半点，因此我也呼吁：&lt;b&gt;关注我知乎，阅览我答案和文章的知友们为他们投上一票，他们更值得拥有“荣誉会员”这一称号！&lt;/b&gt;&lt;/p&gt;&lt;p&gt;然而，参加“荣誉会员”也好，答案入选“知乎日报”或“编辑推荐”也好，虽然给我带来了很多的认可，却也给我带来了很多的负担。一方面，我的答案深度越来越弱，语言越来越啰嗦。这是因为这样半持续性的输出几乎耗尽了我的库存。我本来也只是一个只了解一点领域内知识的普通人而已，耗尽知识存储后，答案和文章越发要抓热点，迎合更多知友的认可，反而让我无法更深入的学习并理解知识本身了。就好像我现在读论文只读Introduction，而不读后面的内容了。另一方面，答案和文章认可度的提升让我自己有点飘飘然。我明显觉得自己对待知识、对待知友们的态度越来越差（至少我自己觉得越来越差）。但我其实什么也不是。在此，我也想给所有知友们道歉。如果我的答案、文章、评论中有冒犯之处，还请知友们原谅…&lt;/p&gt;&lt;p&gt;近期几件事情也深深触动了我，让我理解到科普本身是对的，但是为了科普而科普，甚至为了科普而丢了自己本来拥有的优势，这是不可原谅的。为了一些虚荣，我其实已经迷失了方向。而在我迷失方向的时候，领域内/领域外的很多朋友们都在进步着。我在知乎上回答问题，撰写专栏，本身是为了给自己一个追新知识的契机，但我现在变成了自己最讨厌的样子。我周围朋友前几天不经意的一句话也点醒了我：“我现在觉得有时候不能浪费你的时间”。TA说这句话本身没有恶意。但我觉得，我的心态其实已经爆炸了，这不是我真正想要的。&lt;/p&gt;&lt;br&gt;&lt;p&gt;所以，借着写完毕业论文的状态，我认为是时候放下之前得到的一切，是时候重新轻装上阵，带着我5年前什么都不懂但什么都想学的态度，重新开始了。&lt;b&gt;我决定离开知乎一段时间，停止答案和本专栏的更新。&lt;/b&gt;因此，Black Hat、DEF CON优质视频的翻译和分享也将告一段落。当然了，除暂时离开知乎之外，我也有一些其它的计划和决定，但那些和知乎社区关系不大了…&lt;/p&gt;&lt;p&gt;我还会阅览知乎上的优质答案，支持好答案，为好答案点赞！另外，我仍然会前往盐Club，带着自己的热情，和优秀的答主们相见相识（当然了，要是这篇文章发布后邀请被撤销了，也是有可能的，哈哈哈）。&lt;/p&gt;&lt;p&gt;2017年3月26日，不见不散。&lt;/p&gt;</description>
<author>刘巍然-学酥</author>
<guid isPermaLink="false">2017-03-02-25510575</guid>
<pubDate>Thu, 02 Mar 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>Black Hat 2015 - 二进制自动化分析工具：angr</title>
<link>https://henix.github.io/feeds/zhuanlan.datasec/2017-02-09-25150055.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/25150055&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-efb324bac4ee3dc124b0f8c941c6f586_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;h2&gt;前言&lt;/h2&gt;&lt;p&gt;各位知友新年快乐！&lt;/p&gt;&lt;p&gt;今天收到私信，我这个接近半年没有更新的专栏竟然被知乎的编辑们推荐到了App端「发现」页面的「专栏」项目中了。我个人其实感觉挺羞愧难当的。虽然下半年也完成了不少Black Hat、DEF CON视频的翻译工作，无奈手头上的事情实在太多，没能静下心来好好撰写分析文章。不过现在好啦，手上的事情基本处理完了，我也能抽出时间踏踏实实读一读材料，尽量为知友们带来高质量的国际黑客大会演讲分析。&lt;/p&gt;&lt;p&gt;今天为大家带来的视频来自Black Hat 2015，题目为：应用静态二进制分析方法寻找固件中的漏洞和后门（Using Static Binary Analysis To Find Vulnerabilities And Backdoors In Firmware）。之所以分析这个视频，是因为我非常认同此种研究：依托高校，解决实际问题，同时在顶级安全会议和顶级黑客会议上报告。我认为这才是安全应有的态度，理论和实践本身是不分家的，理论和实践的结合会做出更棒的成果！&lt;/p&gt;&lt;ul&gt;&lt;li&gt;视频YouTube链接：&lt;a href=&quot;https://www.youtube.com/watch?v=Fi_S2F7ud_g&quot; data-editable=&quot;true&quot; data-title=&quot;youtube.com 的页面&quot; class=&quot;&quot;&gt;https://www.youtube.com/watch?v=Fi_S2F7ud_g&lt;/a&gt;&lt;/li&gt;&lt;li&gt;演讲者：加州大学圣巴巴拉分校（UC Santa Barbara）教授Christophe Hauser、加州大学圣巴巴拉分校（UC Santa Barbara）博士研究生Yan Shoshitaishvili&lt;/li&gt;&lt;li&gt;关键字：嵌入式设备固件、静态分析、二进制分析&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;固件和固件中的后门&lt;/h2&gt;&lt;p&gt;嵌入式设备越来越多地出现在人们的日常生活之中。所谓嵌入式设备，简单地说就是一个可独立完成特定工作的设备，或者说是一个微型计算机。最经典的嵌入式设备就是日常生活中的手机了。当然，不光智能手机属于嵌入式设备，以前的哪些非智能手机，甚至是最早的大哥大，都可以看作是嵌入式设备。&lt;/p&gt;&lt;p&gt;和计算机类似，嵌入式设备也有硬件部分和软件部分。嵌入式设备的硬件部分就是设备本身，而软件部分就是「固件」。为什么起了这么个名字呢？因为嵌入式设备的固件一般存储在EROM（可擦写只读存储器）或EEPROM（电可擦可编程只读存储器）中。&lt;/p&gt;&lt;p&gt;注意，这两种存储器都包含同一个关键字：「只读」。当写入到此类存储器后，固件只能被读取、或被擦除后重写，但是不能修改。这也是为什么如手机、路由器等典型嵌入式设备总有一个功能为：恢复出厂设置。所谓恢复出厂设置，就是把手机的全部内容擦除，把手机重置为存储在固件中的出厂设置。&lt;/p&gt;&lt;p&gt;不过，我们总会听到一种说法：刷一下固件。一般刷固件就是把EROM或EEPROM中存储的固件删除，再重写入一个新的固件。之前的很多手机都可以通过刷固件的方式实现各种神奇的功能，比如清除系统应用程序什么的。本质上，刷固件相当于把嵌入式设备的软件系统完全替换。软件系统都被完全替换了，系统应用程序自然而然也就被替换了。&lt;/p&gt;&lt;p&gt;什么是固件中的后门呢？固件后门是指，固件的开发人员或者恶意攻击者，可以利用所谓的后门，在未得到用户授权的条件下控制或完全控制设备。&lt;/p&gt;&lt;p&gt;听起来比较抽象，我们举个例子：一般来说，手机用户需要自行设置手机的解锁口令（比如密码、九宫格什么的），只有正确输入解锁口令才能解锁手机。然而，手机的固件中存在一个后门：只要输入一个特殊的口令就可以直接解锁手机。更隐蔽的方法可能是：按10次Home键，按3次增加音量键，再按2次减小音量键，就可以解锁手机。这就是所谓的后门了。&lt;/p&gt;&lt;p&gt;后门可能不仅仅是解锁手机这么简单。如果汽车、门禁系统有后门，那可就糟糕了。举几个例子：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;如果门禁系统有后门，攻击者可以通过后门打开门禁。当然，后门还可能是另一种形式：攻击者给门禁发送一个特殊的指令，门禁告诉攻击者用户那些时候开门了。这样一来，攻击者就可以把握用户的动向，判断用户是否在家。&lt;/li&gt;&lt;li&gt;如果智能电报有后门，攻击者或许可以篡改电表数字，让用户支付更多的电费。攻击者或许还可以知道用户用电量的趋势。如果某时刻用电量大，则判断用户在家；如果长时间用电量低，则判断用户出远门了。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;分析固件的后门还有一个难题：一般来说设备厂商不会公开固件的源代码。如果有源代码的话，后门的分析可能还简单一些。但是，我们可能只能从二进制文件入手分析固件的后门了。&lt;/p&gt;&lt;p&gt;我们知道，源代码要经过编译、链接等操作，最终生成二进制可执行文件：&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-d2791d75621f228b1204c10b08a76344_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;&lt;p&gt;但在生成二进制文件的过程中，代码中的变量名、变量类型、函数名等会被完全剔除。由于存储固件的存储器空间有限，编译器有时候还会对代码进行优化，甚至从汇编语言的层面上进行优化。这使得逆向工程会变得非常困难。即使实现了二进制文件的逆向工程，源代码可能也和天书没什么区别…&lt;/p&gt;&lt;p&gt;那么，如果不能对固件的二进制文件实施逆向，就无法分析后门了吗？答案是否定的。&lt;/p&gt;&lt;h2&gt;静态二进制分析与动态二进制分析&lt;/h2&gt;&lt;p&gt;一般来说，二进制文件有两种分析方法：静态分析、动态分析。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-eb686fbf260f7d94b3fd70845d688198_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;静态分析是指：直接阅读二进制编码。虽然固件已经被编译为二进制文件，但毕竟二进制文件本身还在，如果能弄明白二进制文件在做什么，肯定能判断固件是否存在后门。因此，静态分析的特点是：覆盖全面。&lt;/p&gt;&lt;p&gt;但是，静态分析有它的缺点。如前面所说，二进制文件本身并不好理解，甚至像天书一样。因此，静态分析想得到精确的结果，则需要进行长时间的分析，使分析时间变长。如果分析时间有限，静态分析得出的结论可能是不准确的。结论可能会是这样的：&lt;b&gt;这个固件可能存在后门&lt;/b&gt;。这个结论没错，但是没什么卵用。静态分析的优缺点可见下图的幻灯片：&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-0d30ba042d55db2f14573357a93bca5d_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;&lt;p&gt;动态分析不阅读二进制代码，而是直接把固件扔到实际环境下执行：&lt;b&gt;试试各种口令，看看能不能碰到一个万能口令&lt;/b&gt;。很明显，如果试出来了，那么不仅能判断固件有后门，还能判断后门是什么。但是，由于设备的输入信息可以是任意的，因此动态分析不可能做到面面俱到。也就是说，分析结果虽然非常准确，但不能全面覆盖。动态分析的优缺点可见下图的幻灯片：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-08557c1dc00bb6f8d1b44a9bc5a40f30_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;另外，我在网上找到了科罗拉多大学计算机科学家Mario Barrenechea的一个课件，课件中详细讲解了静态分析、动态分析这两种程序分析手段。知友们可参考此课件了解相关的知识：&lt;a href=&quot;https://www.cs.colorado.edu/~kena/classes/5828/s12/presentation-materials/barrenecheamario.pdf&quot; data-editable=&quot;true&quot; data-title=&quot;colorado.edu 的页面&quot;&gt;https://www.cs.colorado.edu/~kena/classes/5828/s12/presentation-materials/barrenecheamario.pdf&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;我们的问题是：能否克服静态分析或者动态分析的缺点，实现一个比较好的二进制文件自动化分析工具呢？&lt;/p&gt;&lt;h2&gt;基本实现思想&lt;/h2&gt;&lt;p&gt;Christophe Hauser与Yan Shoshitaishvili解决的问题是：应用静态分析方法，寻找「认证旁路」这类特殊的后门。所谓认证旁路，就是后门可以不执行固件中的身份认证算法，从而直接控制设备。&lt;/p&gt;&lt;p&gt;传统的认证旁路检测思路如下图所示：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-589a5d1d07e6f1f72282d86cbf741603_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;控制流图中一般存在一个「认证过程」，程序执行时先通过认证，认证通过后达到「认证通过」状态，进行后续操作；否则，达到「认证失败」状态，不允许进行后续操作。所谓后门，就是幻灯片左边的程序分支：应用后门可以绕过认证过程，直接达到「认证通过」状态。这种方法的问题是：从二进制程序中找到「认证过程」很麻烦。&lt;/p&gt;&lt;p&gt;我们换个思路，能否不找「认证过程」，而是找「认证通过」状态，通过「认证通过」状态回溯「认证过程」呢？答案是肯定的。实际上，这便是Christophe Hauser与Yan Shoshitaishvili的核心创新点：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-5c7154cc706355c2bc27782bc764a9c2_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;如何寻找认证通过状态呢？因为认证通过的目的是允许用户执行一些操作，因此我们可以先从功能上定义，哪些操作可以认为是认证通过后才允许执行的。这些操作就可以作为「认证通过」状态。这些操作包括但不限于：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;执行特定的系统服务，如唤醒系统、重启、关机等&lt;/li&gt;&lt;li&gt;访问特定的文件&lt;/li&gt;&lt;li&gt;访问特定的内存地址，甚至访问特定的寄存器地址&lt;/li&gt;&lt;li&gt;执行特定的代码，如向周边设备发送「请求数据」命令&lt;/li&gt;&lt;/ul&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-a80d5d77a6213a1143b4f70b6ab3b60d_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;&lt;br&gt;&lt;p&gt;得到「认证通过」状态后，以此状态为出发点对程序进行针对性的分析，从而找到漏洞。&lt;/p&gt;&lt;br&gt;&lt;h2&gt;二进制自动化分析工具：angr&lt;/h2&gt;&lt;p&gt;Christophe Hauser与Yan Shoshitaishvili所在的团队开发了二进制自动化分析工具angr，实现了上述思路，做到了固件认证旁路的自动化分析。当然了，他们的分析工具用到了很多比较复杂的技术，如符号执行（Symbolic Execution）、值-集分析（Value-Set Analysis）等。这些虽然是已经存在的技术，但是对非专业人士来说相对比较复杂。感兴趣的知友们需要阅读Christophe Hauser与Yan Shoshitaishvili发表的论文。我在专栏的最后会给出论文题目。&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-0dc87527bb430d5bfa52efab6f4b1742_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;&lt;p&gt;先来看看效果吧，Yan编写了一个包含后门的小程序：一般情况下，正确输入用户名和口令后，输入特定的口令，程序才会打印「认证通过」。但是，当输入特定的口令时，程序会直接打印「认证通过」。这个特定的口令直接写在了程序内部，并硬编码到了二进制可执行文件中。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-8a91ecb845099ab296bd4eda7b131b69_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;随后，Yan用angr的图形化操作界面，简单地点了点鼠标，就完成了此二进制文件的分析，找到了这个特定的口令：Welcom to the admin console, trusted user。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-295e3ed1743fdc5a98c0f78f5293ea1e_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;当然了，实际二进制文件的控制流图会非常复杂，后门可能不仅仅是特殊口令这么简单了。&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-e39fc21c0b75bb2913cebddf2f5ab040_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;&lt;p&gt;Yan用angr直接对bash的二进制文件进行分析。只分析bash的初始化过程就消耗了大量的时间。&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-b62540948e4d58e79699c0b2f63a8bf8_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;&lt;p&gt;为实现对任意二进制文件的快速分析，Yan等人综合应用了多种静态分析方法。这些方法的深入分析已经超过了我的理解能力… 感兴趣的知友真的需要阅读论文了。哎，不得不说，现在做安全也要读文献啦，其实是个好消息。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-a3ddb3ab56e0c351d26ec19054ae1670_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;Yan等人把angr用在了哪里呢？他们把angr用到了DARPA网络大挑战（DAPRA Cyber Grand Challenge）中，并获胜（官方网址：&lt;a href=&quot;http://archive.darpa.mil/CyberGrandChallenge_CompetitorSite/&quot; class=&quot;&quot;&gt;http://archive.darpa.mil/CyberGrandChallenge_CompetitorSite/&lt;/a&gt;）。可能有些知友不了解这个所谓的DAPRA Cyber Grand Challenge。这个比赛的宗旨是构建自动化工具，实现攻击和防御功能。可别小看这个比赛，Cyber Grand Challenge属于Grand Challenge的一部分，组织方是那个缩写Defense Advanced Research Projects Agency（DAPRA），这个组织隶属于美国国防部…&lt;/p&gt;&lt;blockquote&gt;The DARPA Grand Challenge is a prize competition for American autonomous vehicles, funded by the Defense Advanced Research Projects Agency, the most prominent research organization of the United States Department of Defense. Congress has authorized DARPA to award cash prizes to further DARPA&#39;s mission to sponsor revolutionary, high-payoff research that bridges the gap between fundamental discoveries and military use.（来源：&lt;a href=&quot;https://en.wikipedia.org/wiki/DARPA_Grand_Challenge&quot; data-editable=&quot;true&quot; data-title=&quot;DARPA Grand Challenge&quot; class=&quot;&quot;&gt;DARPA Grand Challenge&lt;/a&gt;）&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-ff842fcd4d61bd30381f7e40becc8e08_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;因为angr实在是太优秀了，Yan等人分别在Black Hat 2015和DEF CON 24上讲解了angr。下方连接为DEF CON 24的演讲稿：&lt;a href=&quot;https://media.defcon.org/DEF%20CON%2024/DEF%20CON%2024%20presentations/DEFCON-24-Shellphish-Cyber%20Grand%20Shellphish-UPDATED.pdf&quot; data-editable=&quot;true&quot; data-title=&quot;defcon.org 的页面&quot; class=&quot;&quot;&gt;https://media.defcon.org/DEF%20CON%2024/DEF%20CON%2024%20presentations/DEFCON-24-Shellphish-Cyber%20Grand%20Shellphish-UPDATED.pdf&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;与此同时，团队还在信息安全旗舰会议NDSS 2015、NDSS 2016、Security and Privacy 2016上分别介绍了angr的各个组成部分和功能。&lt;/p&gt;&lt;p&gt;最令人欣慰的是，在Black Hat 2015结束后，团队把angr开源了！整个工程用Python撰写，代码量约为60000行。angr的官方网址为：&lt;a href=&quot;http://angr.io&quot; data-editable=&quot;true&quot; data-title=&quot;angr.io 的页面&quot;&gt;http://angr.io&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-c64977042f4d2db96cbdd9c5bdd072c7_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;最后，我分别给出与angr相关的学术论文，它们是：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;NDSS 2015：Firmalice - Automatic Detection of Authentication Bypass Vulnerabilities in Binary Firmware（&lt;a href=&quot;http://101.96.8.164/www.cs.ucsb.edu/~chris/research/doc/ndss15_firmalice.pdf&quot; data-editable=&quot;true&quot; data-title=&quot;96.8.164 的页面&quot; class=&quot;&quot;&gt;http://101.96.8.164/www.cs.ucsb.edu/~chris/research/doc/ndss15_firmalice.pdf&lt;/a&gt;）。&lt;/li&gt;&lt;li&gt;NDSS 2016：Driller: Augmenting Fuzzing Through Selective Symbolic Execution（&lt;a href=&quot;https://www.internetsociety.org/sites/default/files/blogs-media/driller-augmenting-fuzzing-through-selective-symbolic-execution.pdf&quot; data-editable=&quot;true&quot; data-title=&quot;internetsociety.org 的页面&quot; class=&quot;&quot;&gt;https://www.internetsociety.org/sites/default/files/blogs-media/driller-augmenting-fuzzing-through-selective-symbolic-execution.pdf&lt;/a&gt;）&lt;/li&gt;&lt;li&gt;Security and Privacy 2016：SoK: (State of) The Art of War: Offensive Techniques in Binary Analysis（&lt;a href=&quot;http://ieeexplore.ieee.org/abstract/document/7546500/&quot; data-editable=&quot;true&quot; data-title=&quot;SOK: (State of) The Art of War: Offensive Techniques in Binary Analysis&quot;&gt;SOK: (State of) The Art of War: Offensive Techniques in Binary Analysis&lt;/a&gt;）&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;PS&lt;/h2&gt;&lt;p&gt;以前我一般会等中文翻译视频发布到i春秋的公开课平台（&lt;a href=&quot;http://www.ichunqiu.com/opencourse&quot; data-editable=&quot;true&quot; data-title=&quot;网络安全课程|网络安全视频课程|网络安全培训课程|信息安全培训教程-i春秋&quot;&gt;网络安全课程|网络安全视频课程|网络安全培训课程|信息安全培训教程-i春秋&lt;/a&gt;）上后再撰写分析贴的。但我现在发现，等视频发出来了，视频内容我也就忘得差不多了… 所以，后面的视频我做完后就会直接撰写分析贴。如果知友英语水平不错，可以直接翻墙到YouTube上面看原始视频，也可以关注i春秋的公开课页面，等待中文翻译版本上线。&lt;/p&gt;&lt;p&gt;需要强调的是，我还真不是为i春秋打广告。由于是i春秋平台组织的视频翻译工作，并负责中文字幕视频的发布与更新，因此知友们想看的话，可能只能通过这一种手段观看…不过，我负责翻译的视频在i春秋上都是免费观看的（但需要注册i春秋账号），我认为这也是尽量踢除广告效应，真切实现技术交流目的的一种方式。安全无价！&lt;/p&gt;</description>
<author>刘巍然-学酥</author>
<guid isPermaLink="false">2017-02-09-25150055</guid>
<pubDate>Thu, 09 Feb 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>随机真的是好事情吗？密文分组链接模式的碰撞攻击——理论与实践</title>
<link>https://henix.github.io/feeds/zhuanlan.datasec/2016-09-07-22268807.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/22268807&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/20017187563e47a19455cb871ac8be40_r.png&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;h2&gt;前言&lt;/h2&gt;&lt;p&gt;好久没给朋友们带来黑客大会视频的分析了。我自己在空余时间仍然在做黑客大会的翻译工作，不过这一段时间听译的内容大多数都是工具的介绍，写起来感觉有些空（不过，如果我遇到有意思的工具，我还是会和大家分享的）。然而，前天发生的一件事情让我下定决心一定要为将要上线的一个DEF CON 23视频撰写一篇专栏。&lt;/p&gt;&lt;p&gt;事情的起因是这样的，在前天中午我与实验室新来的一位老师闲聊的时候，他提到业内有个学者的博客很不错，可以时常关注一下。一听这个人叫Matthew Green，我就来了兴趣。安全圈子里面的人可能不太知道这个人，但这个人在理论圈子里面可是非常知名的。理论圈子里面有3个最顶级的安全会议，分别叫做Usenix Security Symposium（Usenix Security）、ACM Conference on Computer and Communications Security（ACM CCS）、IEEE Symposium on Security and Privacy（S &amp;amp; P）。基本上国内研究机构每年也没几个人能在这3个会议上发表论文。这3个会议只要中了一篇，基本上就是各种基金项目信手拈来的程度。然而，从2010年开始，Matthew Green这个人&lt;b&gt;每年&lt;/b&gt;都会在这3个会议上发表论文！更恐怖的是，这个人只是Johns Hopkins大学的一个普通的Assistant Professor而已。哎，只能说理论安全圈，国内外的研究水平还是有一定差距的…不过，Matthew Green本身是一个很喜欢Coding的人，尤其是喜欢做密码学工程相关的工作。他对理论分析倒并不是那么热衷，这没准也是他一直没沿着学术圈子继续往上升的原因吧。&lt;/p&gt;&lt;p&gt;言归正传，Matthew Green的博客叫做《&lt;a href=&quot;http://webcache.googleusercontent.com/search?q=cache:https://blog.cryptographyengineering.com/&quot; data-editable=&quot;true&quot; data-title=&quot;A Few Thoughts on Cryptographic Engineering&quot; class=&quot;&quot;&gt;A Few Thoughts on Cryptographic Engineering&lt;/a&gt;》（似乎需要翻墙，而且时常会出现链接挂掉的情况）。他的博客通俗易懂，有大家之范，有兴趣的朋友们可以关注一下。我们今天要谈到的就是他在2016年8月24日（没错，就是一周之前）发表的一篇博客《&lt;a href=&quot;https://blog.cryptographyengineering.com/2016/08/24/attack-of-week-64-bit-ciphers-in-tls/&quot; class=&quot;&quot; data-editable=&quot;true&quot; data-title=&quot;Attack of the week: 64-bit ciphers in TLS&quot;&gt;Attack of the week: 64-bit ciphers in TLS&lt;/a&gt;》。因为有的朋友可能打不开链接，我在这里贴出这篇博客的第一部分，大家可以感受一下：&lt;/p&gt;&lt;blockquote&gt;A few months ago it was starting to seem like you couldn’t go a week without a new attack on TLS. In that context, this summer has been a blessed relief. Sadly, it looks like our vacation is over, and it’s time to go back to school.&lt;br&gt;&lt;br&gt;Today brings the news that Karthikeyan Bhargavan and Gaëtan Leurent out of INRIA have a new paper that demonstrates a practical attack on legacy ciphersuites in TLS (it’s called “Sweet32”). What they show is that ciphersuites that use 64-bit blocklength ciphers — notably 3DES — are vulnerable to plaintext recovery attacks that work even if the attacker cannot recover the encryption key.&lt;br&gt;&lt;br&gt;While the principles behind this attack are well known, there’s always a difference between attacks in principle and attacks in practice. What this paper shows is that we really need to start paying attention to the practice.&lt;/blockquote&gt;&lt;p&gt;Karthikeyan Bhargavan和Gaëtan Leurent的这个工作已经被上面3个最顶级安全会议之一，ACM CCS 2016录用。今年，ACM CCS 2016将在奥地利的维也纳召开，时间是2016年10月24日至2016年10月28日（&lt;a href=&quot;https://www.sigsac.org/ccs/CCS2016/&quot; class=&quot;&quot; data-editable=&quot;true&quot; data-title=&quot;ACM CCS 2016&quot;&gt;ACM CCS 2016&lt;/a&gt;）。两位作者专门构建了一个网站：&lt;a href=&quot;https://sweet32.info/&quot; data-editable=&quot;true&quot; data-title=&quot;Sweet32: Birthday attacks on 64-bit block ciphers in TLS and OpenVPN&quot; class=&quot;&quot;&gt;Sweet32: Birthday attacks on 64-bit block ciphers in TLS and OpenVPN&lt;/a&gt;，提前将攻击原理、代码、分析等放在了网上。因此，我们有幸能提前2个月看到国际顶级学者们的最新研究成果，这也是一件值得庆贺的事情。&lt;/p&gt;&lt;br&gt;但是，当读完论文后我就傻眼了… 这个攻击的攻击原理是很简单的，之前也有人发现过。而公开这个问题的人，正是在DEF CON 23 - Crypto and Privacy Village上发表的讲座。而他们的讲座正是我的团队听译的… 他们是来自Fontbonne大学的Albert Carlson和Patrick Doherty。我不知道Karthikeyan Bhargavan和Gaëtan Leurent是否看过DEF CON 23的演讲，也不知道Albert Carlson和Patrick Doherty是否得知他们的攻击思想被来自另外机构的人完整实现。如果他们互相知道对方的成果，不知道会作何感想…&lt;p&gt;我想强调的是，这个攻击的原理很直观，但是如何正确利用这种攻击方式，两个大学的两组研究团队有着不一样的想法。而这不一样的想法导致他们分别在黑客大会和计算机理论大会上做相关的报告。这也引发了一个问题：&lt;b&gt;安全理论有用吗？&lt;/b&gt;&lt;/p&gt;&lt;h2&gt;讲座信息&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;原始视频：DEF CON 23 - Crypto and Privacy Village - Carlson and Doherty - Breaking CBC。YouTube链接：&lt;a href=&quot;https://www.youtube.com/watch?v=v0IsYNDMV7A&quot; data-editable=&quot;true&quot; data-title=&quot;youtube.com 的页面&quot; class=&quot;&quot;&gt;https://www.youtube.com/watch?v=v0IsYNDMV7A&lt;/a&gt;&lt;/li&gt;&lt;li&gt;中文字幕：i春秋平台上发布，链接为：&lt;a href=&quot;http://www.ichunqiu.com/open/54789&quot; data-editable=&quot;true&quot; data-title=&quot;ichunqiu.com 的页面&quot;&gt;http://www.ichunqiu.com/open/54789&lt;/a&gt;&lt;/li&gt;&lt;li&gt;翻译：ScalersTalk成长会听力小组成员Myra&lt;/li&gt;&lt;li&gt;校对、压制：&lt;a href=&quot;https://www.zhihu.com/people/d543743c88797978a0a8c453f8768974&quot; data-hash=&quot;d543743c88797978a0a8c453f8768974&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@刘巍然-学酥&quot; data-hovercard=&quot;p$b$d543743c88797978a0a8c453f8768974&quot;&gt;@刘巍然-学酥&lt;/a&gt;&lt;/li&gt;&lt;li&gt;时间轴：&lt;a href=&quot;https://www.zhihu.com/people/3e008eeed2acb09f3dcf3d66a214ab2c&quot; data-hash=&quot;3e008eeed2acb09f3dcf3d66a214ab2c&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@吴诗湄&quot; data-hovercard=&quot;p$b$3e008eeed2acb09f3dcf3d66a214ab2c&quot;&gt;@吴诗湄&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;视频的翻译虽然已经完成，但是&lt;a href=&quot;http://www.ichunqiu.com/&quot; data-editable=&quot;true&quot; data-title=&quot;网络安全培训|信息安全培训&quot; class=&quot;&quot;&gt;i春秋&lt;/a&gt;（微博：&lt;a href=&quot;http://weibo.com/ichunqiu&quot; data-editable=&quot;true&quot; data-title=&quot;i春秋学院的微博&quot;&gt;i春秋学院的微博&lt;/a&gt;）还在后期处理过程中，预计下周三（2016年9月7日）上线。视频上线后我会共享出链接，有兴趣的朋友们可以去i春秋平台上完整观看这个讲座。本文会用到视频中的一些截图。反正是我自己做的，不怕版权问题~&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/0c2ffc7c9178d30b56cd61b31cfd9fea_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;&lt;h2&gt;何为密文分组链接模式的碰撞攻击&lt;/h2&gt;&lt;p&gt;要讲起这个话题，我们得先来谈谈对称加密体制，或者说是单钥加密体制了。我在知乎上回答的绝大多数问题都是有关非对称加密体制，或者说是双钥加密体制的。不过，有关单钥加密体制的内容我在很早前已经在我的技术博客里面撰写了（因为后来我发现知乎平台分享知识的效果更好，所以就转战知乎专栏了）。相关分析和实现的内容链接为：&lt;a href=&quot;http://blog.csdn.net/liuweiran900217/article/details/38439875&quot; data-editable=&quot;true&quot; data-title=&quot;Java密码学原型算法实现——第二部分：单钥加密算法&quot; class=&quot;&quot;&gt;Java密码学原型算法实现——第二部分：单钥加密算法&lt;/a&gt;。在这个攻击中，我们只需要关注单钥加密体制里面的分组加密算法。这里我需要引用这里面的一些描述。下述有关分组密码和加密模式讲解的插图来自于Silent Void的happyhippy博客：&lt;a href=&quot;http://www.cnblogs.com/happyhippy/archive/2006/12/23/601353.html&quot; class=&quot;&quot; data-editable=&quot;true&quot; data-title=&quot;对称加密和分组加密中的四种模式(ECB、CBC、CFB、OFB)&quot;&gt;对称加密和分组加密中的四种模式(ECB、CBC、CFB、OFB)&lt;/a&gt;。觉得它博客里面的图还是非常清晰的，大家也可以直接看这位作者的描述。&lt;/p&gt;&lt;p&gt;分组密码将明文消息编码表示后的子串划分等长的组，各组分别在各子密钥的控制下变成等长的输出序列。最典型，现在仍然认为是安全的分组加密算法为AES。AES分组加密算法的流程如下图所示：&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/ad74a3c251e19b80baf4fac0517d76fd_r.jpg&quot; data-rawwidth=&quot;782&quot; data-rawheight=&quot;467&quot;&gt;&lt;p&gt;如果不特别说明，一般密码学初学者在使用分组加密算法时会使用所谓的电码本加密模式（ECB模式），也就是上图中的加密方法。这也是分组加密算法最简单、最直接的使用方法。&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;为了保证加密结果一定可以被正确的密钥成功解密，对于对称加密算法我们有这样一个要求：&lt;b&gt;如果加密时输入的明文和密钥是一样的，那么输出的密文也一定是一样的&lt;/b&gt;。ECB模式完美遵从了这个特性。&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/2d8921a5240454cbaca592655c45a7e0_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;&lt;p&gt;然而，这也带来了安全问题：如果在相同密钥下将一个消息加密两次，那么输出的密文也一定是相同的。在应用中，数据通常有部分可猜测的信息，例如薪水的数目就有一个可猜测的范围。如果明文消息是可猜测的，那么由确定性加密方案得到的密文就会使攻击者通过使用猜测的方法猜测出明文。因此，在大多数应用中不要使用ECB模式。在视频中，Carlson也讲到了ECB模式的这一个缺陷：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/2104afc441a4d8333fe659726a8e0a2d_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;为了解决这个问题，人们提出了其他的加密方法。比较典型的加密方法是密文分组链接模式（CBC模式）、输出反馈模式（OFB模式）、密码反馈模式（CFB模式）、计数器模式（CTR模式）。我们今天要攻击的就是CBC模式。&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/e94e466cfbff2e81578f367e079545b4_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;&lt;p&gt;CBC模式是用于一般数据加密的一个普通的分组密码加密模式。在这个模式中，第一个密文分组的计算需要一个特殊的明文，习惯上称之为初始向量（IV）。IV是一个随机的分组，每次会话加密时都要使用一个新的随机IV，IV无须保密，但一定是不可预知的。由于IV的随机性，IV将使得后续的密文分组都因为IV而随机化。由于IV需要公开，且第一个分组的加密结果是IV，因此CBC模式对于m个分组的明文将输出m+1个分组的密文。视频里面给出的CBC模式是这样的：&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/c706c5bbcd6be734bf13a7ddc4e08b0c_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;&lt;p&gt;我也想吐槽，幻灯片上的图实在是太小了… 我们还是用Silent Void博客：&lt;a href=&quot;http://www.cnblogs.com/happyhippy/archive/2006/12/23/601353.html&quot; class=&quot;&quot; data-editable=&quot;true&quot; data-title=&quot;对称加密和分组加密中的四种模式(ECB、CBC、CFB、OFB)&quot;&gt;对称加密和分组加密中的四种模式(ECB、CBC、CFB、OFB)&lt;/a&gt; 上的图吧，CBC模式实例如下图所示：&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/0d69c37d108716e61faac15523d9fd04_r.jpg&quot; data-rawwidth=&quot;583&quot; data-rawheight=&quot;398&quot;&gt;虽然CBC模式在理论界一直被别人诟病（最为经典的当属Padding Oracle Attack了，相关解释参见我的知乎答案：&lt;a href=&quot;https://www.zhihu.com/question/26437065/answer/32790364&quot; class=&quot;&quot; data-editable=&quot;true&quot; data-title=&quot;为什么说密文链接模式已经丧失安全性？ - 刘巍然-学酥的回答&quot;&gt;为什么说密文链接模式已经丧失安全性？ - 刘巍然-学酥的回答&lt;/a&gt;），但是在现实中可以使用的攻击方法也挺难找的。CBC模式真的不安全吗？实际上，密码学家们很早就发现一个问题：&lt;b&gt;当在CBC模式中使用分组长度比较短（比如每个分组的长度是64bit）的对称加密算法时，方案在理论上是不安全的&lt;/b&gt;，因为可以存在一个所谓的碰撞攻击。&lt;p&gt;什么是碰撞攻击？我们首先粗略讲解一下什么是安全的加密算法。一个加密算法足够安全的要求是，加密结果看起来和随机数没什么区别。这个性质要求非常高了，如果加密结果跟随机数一模一样的话，相当于我们无法从密文中得到任何信息，这个加密也就是安全的了。然而，随机性在CBC模式下会带来一个很严重的问题：&lt;b&gt;正因为随机，我们可以用很巧妙的概率学方法来分析，从而在随机中找到不随机&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;我们考察下面的一个情况：一组密文是用相同的密钥key，在CBC模式加密输出的。如果输出的密文中有两个密文相等，会发生什么情况？举例来说，下图中两个红色部分的密文是相等的。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://pic2.zhimg.com/aaa993710e0f574b7ef252904787290b_r.png&quot; data-rawwidth=&quot;601&quot; data-rawheight=&quot;242&quot;&gt;由于密文一样，密钥也一样，根据加密的一对一特性，我们可以直接得出：输入到加密算法的明文也一定是一样的，也就是说，上图“与或”运算的红色点是一样的。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/58d4105e5eec02b5e4ea16ec3b1887b2_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;然而，CBC模式输入的明文是什么呢？是真实的明文与上一个分组中密文的与或结果（上图黄色部分）。因此，假定两个密文分组c_i和c_j相等，这意味着：&lt;equation&gt;c_{i-1} \oplus p_i = c_{j-1} \oplus p_j&lt;/equation&gt;，也就是说，我们能找到c_i和c_j前面一个分组中明文和密文的关系。&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/d9924b537cb519ec3b6260b518291f90_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;&lt;p&gt;由于密文是通过不安全信道传输的，所有人都可能截获到密文。因此，如果我们知道其中一个明文是什么，我们就能够通过与或运算，得到另一个明文。&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/971db61e20046b969dacfee8f51507d6_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;&lt;p&gt;讲到这里，有的朋友不开心了… 输出都是随机的，密文中出现碰撞情况的概率太低了吧… 实际上概率一点都不低。朋友们还记得生日攻击吗？看看这个答案吧：&lt;a href=&quot;https://www.zhihu.com/question/23853358/answer/34099260&quot; data-editable=&quot;true&quot; data-title=&quot;你认为最反直觉的数学定理是什么？ - 知乎用户的回答&quot;&gt;你认为最反直觉的数学定理是什么？ - 知乎用户的回答&lt;/a&gt;。&lt;/p&gt;&lt;blockquote&gt;多少个人中可以找到2个生日在同一天的人？&lt;br&gt;&lt;br&gt;许多人以为要使至少有一个重复的概率大于0.5，那么大约应有100人，事实上只要23人。&lt;/blockquote&gt;&lt;img src=&quot;https://pic3.zhimg.com/b82a44efa427922c165354464113ea3a_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;&lt;p&gt;在单钥加密中，我们也能发现相同的规律。&lt;/p&gt;&lt;h2&gt;理论分析（有点数学，可忽略）&lt;/h2&gt;&lt;p&gt;放在分组加密算法中，假设加密算法中每n比特分成一组，那么密文输出一共有N=2^n种可能。假设我们得到了2^d个密文分组，那么发生碰撞的概率为：&lt;/p&gt;&lt;equation&gt;p=1-\prod_{i=0}^{D-1}{\frac{N-i}{N}} \geq 1 -  \prod_{i=0}^{D-1}{e^{-i/N}} \geq 1 - e^{-D(D-1)/2N}&lt;/equation&gt;&lt;br&gt;&lt;p&gt;也就是说，我们大概得到2^{n/2}个分组，就有大约50%的概率得到一次碰撞。更进一步，如果我们有2^d个密文分组，那么得到碰撞分组的个数大约为&lt;equation&gt;2^{2d-n-1}&lt;/equation&gt;。&lt;/p&gt;&lt;p&gt;这么看下来，感觉这个数也挺大的… 带入具体的数值呢？虽然AES分组很长，架不住安全工程师们不用啊… 根据调查，安全通信中仍然有大约1%的通信链路使用了64 bit分组的3DES或者Blowfish加密。如果分组长度是64 bit，并假设：敏感数据量占所有分组量的&lt;equation&gt;\alpha&lt;/equation&gt;，已知明文的密文分组占所有分组量的&lt;equation&gt;\beta
&lt;/equation&gt;，从概率上讲，我们只要能碰到一次已知明文的密文分组和敏感数据的分组，就能得到敏感数据了，所以有：&lt;equation&gt;2^{2d-n-1} = \frac{1}{\alpha \beta}&lt;/equation&gt;。整理一下，我们大概需要&lt;equation&gt;\sqrt{1/\alpha \beta}\cdot 2^{n/2}&lt;/equation&gt;个分组就够了。这是个什么概念呢？HTTP的一次问询的长度为512 Byte（64个64 bit的分组），如果其中包含了一个8 Byte的Cookie（1个64 bit的分组），并且问询的其他内容攻击者都知道的话，我们有&lt;equation&gt;\alpha = 63/64 \approx 1&lt;/equation&gt;，&lt;equation&gt;\beta = 1/64&lt;/equation&gt;，因此我们需要大约2^35个分组。这么多分组，需要捕获256GB的网络流量。256GB，似乎并不是一个很夸张的数字…攻击，没准是真的可行的。&lt;/p&gt;&lt;br&gt;&lt;h2&gt;实际分析：如何实现碰撞攻击——CCS 2016篇&lt;/h2&gt;&lt;p&gt;在实际网络中，这种攻击的实施具有哪些要求呢？Green列举了这些要求：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;The client and server must &lt;b&gt;negotiate a 64-bit cipher&lt;/b&gt;. This is a relatively rare occurrence, but can happen in cases where one of the two sides is using an out-of-date client. For example, stock &lt;b&gt;Windows XP&lt;/b&gt; does not support any of the AES-based ciphersuites. Similarly, SSL3 connections may negotiate 3DES ciphersuites.&lt;br&gt;&lt;/li&gt;&lt;li&gt;The server and client must &lt;b&gt;support long-lived TLS sessions&lt;/b&gt;, i.e., encrypting a great deal of data with the same key. Unfortunately, most web browsers place no limit on the length of an HTTPS session if Keep-Alive is used, provided that the server allows the session. The Sweet32 authors scanned and discovered that many servers (including IIS) will allow sessions long enough to run their attack. Across the Internet, the percentage of vulnerable servers is small (less than 1%), but includes some important sites.&lt;br&gt;&lt;/li&gt;&lt;li&gt;The client must &lt;b&gt;encipher a great deal of known data, including a secret session cookie&lt;/b&gt;. This is generally achieved by running adversarial Javascript code in the browser, although it could be done using standard HTML as well.&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;在CCS 2016中，Karthikeyan Bhargavan和Gaëtan Leurent是如此实现攻击的。攻击原理如下图所示（图片来源：&lt;a href=&quot;https://sweet32.info/#demo&quot; data-editable=&quot;true&quot; data-title=&quot;Sweet32: Birthday attacks on 64-bit block ciphers in TLS and OpenVPN&quot; class=&quot;&quot;&gt;Sweet32: Birthday attacks on 64-bit block ciphers in TLS and OpenVPN&lt;/a&gt;）。&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/64af5c6f185d1c1a2309bfba5691a11e_r.png&quot; data-rawwidth=&quot;324&quot; data-rawheight=&quot;333&quot;&gt;&lt;br&gt;&lt;ol&gt;&lt;li&gt;强制建立一个64 bit分组加密算法CBC模式的链接。Karthikeyan Bhargavan和Gaëtan Leurent做了详细的调研，认真分析了现有网络中64 bit分组加密算法CBC模式的使用率，结论是这种方式的使用率是非常高的。他们甚至指出，TLS的标准中也写明这种使用方法是正确而安全的，推荐使用（If you negotiate 3DES with a 1024-bit RSA key exchange with a host whose certificate you have verified, you can expect to be that secure），参见论文第3章。这里就可以看出，两位学者工作是多么的扎实。&lt;/li&gt;&lt;li&gt;要求通信双方建立长时间的TLS链接。这也是可以实现并在实际中会发生的，比如发送数据量很大、服务器的链接一直不断开。&lt;/li&gt;&lt;li&gt;重复发送一个秘密信息，并且其他信息攻击者还都知道。这个是最难实现的，然而两位学者想到了一个非常巧妙的方法：撰写一个Javascript恶意链接，让客户端重复请求下载并显示一个图片。作者利用了Session Cookie的特性来实现这个场景。Session Cookie的目的是让服务器知道对方是验证通过的用户，这个Cookie是秘密的，但是是在链接建立后，通过安全链接发送给服务器的。而HTTP的其他请求都是恶意程序生成的。这样就实现了知道秘密位置，不知道秘密本身，其他密文所对应的明文攻击者都能获知的这一极端条件。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;攻击结果呢？事实证明，整个攻击需要运行19-38小时的攻击程序，捕获785GB的数据，完成Session Cookie这一秘密值的恢复。看起来这个数字很夸张，但对于现在的计算机来说，这种攻击的时间和存储量是完全可以接受的！&lt;/p&gt;&lt;h2&gt;实际分析：如何实现碰撞攻击——DEF CON 23篇&lt;/h2&gt;&lt;p&gt;DEF CON 23中使用的攻击方法就没有看起来那么科学了… 他们测试了更小分组长度的密码（实际上把分组长度降低到了5 bit），但是对于64 bit分组的加密似乎仍然无能为力。在更小分组长度下，他们使用了语言的特性。但在实际攻击中，语言特性是很难利用的。&lt;/p&gt;&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/e279283d9deb2cb25bdbcf70579cee57_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;&lt;p&gt;不过，我们还是可以从视频中得到一些有意思的结论，比如下面这条：&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/cd0841b3c4261c8ae9e55efc6cce6a56_r.jpg&quot; data-rawwidth=&quot;1280&quot; data-rawheight=&quot;720&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;总结&lt;/h2&gt;&lt;p&gt;总的来说，针对64 bit分组长度、CBC加密模式的碰撞攻击条件在真实网络环境下仍然比较苛刻。但这也说明，随着计算机计算能力的不断提升，不仅是暴力破解的难度会逐渐降低，通过其他概率算法，也会从侧面对一些经典加密算法实现攻击。&lt;/p&gt;&lt;p&gt;在文章的最后我想问大家一个问题：&lt;b&gt;这种攻击的成功，标志着分组长度过短的加密算法在哪个安全模型下（选择密文攻击、选择明文攻击、静态攻击）是不安全的呢？或者说，在什么安全常数下是不安全的呢？&lt;/b&gt;（有关安全常数的解释，参见：&lt;a href=&quot;https://www.zhihu.com/question/48949270&quot; data-editable=&quot;true&quot; data-title=&quot;密码体制中的安全参数k到底是个什么？ - 信息安全和密码学&quot;&gt;密码体制中的安全参数k到底是个什么？ - 信息安全和密码学&lt;/a&gt;）&lt;/p&gt;</description>
<author>刘巍然-学酥</author>
<guid isPermaLink="false">2016-09-07-22268807</guid>
<pubDate>Wed, 07 Sep 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>Do not claim, show me the proof：记一个困扰了我小一年的问题</title>
<link>https://henix.github.io/feeds/zhuanlan.datasec/2016-08-25-22166332.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/22166332&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/2b0990c19b7cb65a19f593ccd1d3b07e_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;h2&gt;题注&lt;br&gt;&lt;/h2&gt;&lt;br&gt;更新：密码学交流群的朋友们说，更快速的方法是利用FFT，而且还可以并行加速。因为本质上我们计算的是卷积结果，FFT后到做乘法即可。才疏学浅，拜服！&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;Do not claim, show me the proof.&lt;br&gt;&lt;/blockquote&gt;&lt;p&gt;这是我和知乎密码学交流群共同的群主&lt;a href=&quot;https://www.zhihu.com/people/9cec268fa4cf3647f54f57703f8cc3d8&quot; data-hash=&quot;9cec268fa4cf3647f54f57703f8cc3d8&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@玄星&quot; data-hovercard=&quot;p$b$9cec268fa4cf3647f54f57703f8cc3d8&quot;&gt;@玄星&lt;/a&gt;同学日常交流时，他常常提到的一句话。在本篇专栏中，我也想把这句话送给所有做密码学，乃至其他数学或计算机科学相关的朋友们。很多时候，所看到的问题并没有想象的那么简单。&lt;/p&gt;&lt;p&gt;当然了，我这个问题可能根本就不难，可能好多人都知道，我比较白痴了？但我确实是不知道… 而且我咨询了很多周围的人，大家也都不知道。因此，看起来这确实是一个似乎很简单，但解决起来却没那么轻松的问题，特别适合证明&lt;a href=&quot;https://www.zhihu.com/people/9cec268fa4cf3647f54f57703f8cc3d8&quot; data-hash=&quot;9cec268fa4cf3647f54f57703f8cc3d8&quot; class=&quot;member_mention&quot; data-hovercard=&quot;p$b$9cec268fa4cf3647f54f57703f8cc3d8&quot; data-editable=&quot;true&quot; data-title=&quot;@玄星&quot;&gt;@玄星&lt;/a&gt;同学态度的好问题。因此我这里也想把这个问题分享给大家。&lt;/p&gt;&lt;p&gt;本篇专栏还要特别感谢一个人，就是我实验室的师弟&lt;a href=&quot;https://www.zhihu.com/people/hai-wen-57&quot; data-editable=&quot;true&quot; data-title=&quot;海文&quot; class=&quot;&quot;&gt;海文&lt;/a&gt;同学。我是在一次很偶然的机会中和他讨论了这个问题，当时我们也都没有想到一个比较好的解决方法。不曾想，&lt;a href=&quot;https://www.zhihu.com/people/hai-wen-57&quot; data-editable=&quot;true&quot; data-title=&quot;海文&quot;&gt;海文&lt;/a&gt;同学把这个问题一直留在了脑海中，并在阅读论文的过程中不断寻找问题的答案。直到上周五，&lt;a href=&quot;https://www.zhihu.com/people/hai-wen-57&quot; data-editable=&quot;true&quot; data-title=&quot;海文&quot;&gt;海文&lt;/a&gt;同学终于兴高采烈的告诉我，他在一个论文中找到了这个问题的解决方法！至此，这个困扰了我将近一年的问题终于在&lt;a href=&quot;https://www.zhihu.com/people/hai-wen-57&quot; data-editable=&quot;true&quot; data-title=&quot;海文&quot; class=&quot;&quot;&gt;海文&lt;/a&gt;同学的帮助下得到了解决~ 特别感谢&lt;a href=&quot;https://www.zhihu.com/people/hai-wen-57&quot; data-editable=&quot;true&quot; data-title=&quot;海文&quot;&gt;海文&lt;/a&gt;同学长时间以来的努力。因此，我也希望在我的专栏中向关注我动向的朋友们推荐这个将要入学读研究生，来自数学学院的小伙子，未来主要做Lattice-Based Cryptography以及Fully Homomorphic Encryption。相信经过未来几年的锤炼，他一定至少可以超过我，成为年轻一代应用密码学的杰出人才。各位业界的大佬们，求关注他哈~&lt;/p&gt;&lt;p&gt;本专栏文章的相关代码已经同步到我的CloudCrypto密码学函数库中：&lt;a href=&quot;https://github.com/liuweiran900217/CloudCrypto&quot; data-editable=&quot;true&quot; data-title=&quot;GitHub - liuweiran900217/CloudCrypto: A library for cryptographic primitive implementations for Cloud Storage applications.&quot; class=&quot;&quot;&gt;GitHub - liuweiran900217/CloudCrypto: A library for cryptographic primitive implementations for Cloud Storage applications.&lt;/a&gt;。相关代数问题解决方法的核心代码位于：&lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;src/main/java/cn/edu/buaa/crypto/algebra/HornerRule.java
&lt;/code&gt;&lt;p&gt;对应密码学原语实现的核心代码位于：&lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;src/main/java/cn/edu/buaa/crypto/encryption/ibbe/del07&lt;/code&gt;&lt;p&gt;对应密码学原语的使用例子位于：&lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;src/test/java/com/example/encryption/ibbe&lt;/code&gt;&lt;p&gt;如果有需要代码的朋友，请自行浏览或下载上述代码。如果觉得我写的能读，恳请留个star，让更多需要的朋友们看见，没准可以帮助他们解决更多的问题呢？&lt;/p&gt;&lt;p&gt;题图来自：&lt;a href=&quot;http://pic.baike.soso.com/p/20140430/20140430141100-761898745.jpg&quot; data-editable=&quot;true&quot; data-title=&quot;soso.com 的页面&quot;&gt;http://pic.baike.soso.com/p/20140430/20140430141100-761898745.jpg&lt;/a&gt;。其他图片为本人自绘。&lt;/p&gt;&lt;h2&gt;背景&lt;/h2&gt;&lt;p&gt;先来回顾一下所遇到问题的背景。这部分属于现代密码学的科普，如果觉得不太好理解的话可以跳过… 如果试着理解一下的话，有助于了解问题是如何引入的。不过，这部分内容不可避免地有不少公式，看着会令人头大…&lt;/p&gt;&lt;p&gt;早在2014年，我在导师的指导下开始着手构造一个被称为分层基于身份的广播加密（Hierarchical Identity-Based Broadcast Encryption，HIBBE）[1,2]。从这个密码学原语的名字上就可以看出，想构造这个密码学原语，肯定要参考诸如基于身份的加密（Identity-Based Encryption，IBE）[3,4]、广播加密（Broadcast Encryption，BE）[5,6]、分层基于身份的加密（Hierarchical Identity-Based Encryption，HIBE）[7,8]，以及基于身份的广播加密（Identity-Based Broadcast Encryption，IBBE）[9]。&lt;/p&gt;&lt;p&gt;前面所有的密码学原语都还好说，但这最后一个IBBE理解起来可是让我犯了难，因为这个方案的构造中用到了一个看起来特别简单，但是细想起来缺觉得无从下手的问题。而正是这个问题，使得我一直无法正确实现IBBE方案。无法实现IBBE的话，那我的Crypto库岂不是有很多遗憾了…&lt;/p&gt;&lt;p&gt;在阐述遇到的核心问题之前，我们先来简单聊聊什么叫做IBBE。朋友们最熟知的公钥加密体制是RSA了。RSA允许接收方运行密钥生成算法（Key Generation，KeyGen）生成一个公钥（Public Key，PK）和一个私钥（Secret Key，SK）。接收方把公钥公开，这样任何人都可以用公钥加密（Encrypt），只有拥有私钥的接收方才能够解密（Decrypt）。现在我们把这个问题扩展一下：如果接收方不止有1个人，而是有好多好多人，如何&lt;b&gt;同时&lt;/b&gt;给他们发送加密信息呢？&lt;/p&gt;&lt;p&gt;最简单的方法是按照下图所示，每个人都公开自己的公钥，加密时候用不同的公钥给不同的人加密。这种方法最大的缺点是，加密结果的长度，也就是密文（Ciphertext，CT）长度和接收者人数相关，接收者人数越多，密文长度越长。如果团体人数过多的话，这种方法的效率就不太高了。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/1b40551f9c6da52ac2c7f7e19590e742_r.jpg&quot; data-rawwidth=&quot;866&quot; data-rawheight=&quot;548&quot;&gt;&lt;p&gt;解决这个问题的方法是引入BE的概念。在BE中，接收方组成一个小群体。我们找一个可信第三方（一般叫做Dealer），由它来生成公钥，并且给小群体中的每个人发送不同的私钥。发送方此时只运行一次加密算法，然后把这一份密文同时发送给所有人。如果密文长度和接收者人数数量无关，或者说密文长度为常数的话，就可以一次给很多很多人发送加密信息，大大降低通信的开销。同时，广播加密进一步可以选择接收者人数。比如我的加密信息可以只允许编号为1、3、5的用户解密，那么编号为2、4等的其他用户虽然也有自己的私钥，但即使它们联合起来也无法解密信息。这种加密方法在有线电视信号、音视频信息订阅中有着广泛的应用。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/2938212e08375f022a1a703fcbfdd1c7_r.jpg&quot; data-rawwidth=&quot;1089&quot; data-rawheight=&quot;548&quot;&gt;BE看起来已经足够好了，但是还有问题：因为群体中每个人有一个编号，发送者进行加密时需要知道群体中每个人的编号对应的是多少。但用编号标示一个人多么不方便啊。最好的方法是，每个人的编号是一个有意义的字符串，比如这个人的名字，这个人的邮箱什么的。不过，有意义的字符串的情况个数太多了，我们这时候让Dealer事先执行Setup算法，产生公钥和一个称为主私钥（Master Secret Key，MSK）的东西。每一个用户加入群体的时候，就用自己的名字什么的向Dealer申请私钥。这时候，Dealer运行KeyGen算法，用主私钥生成各个用户对应的私钥。加密的时候，发送方利用公钥，和每个人的名字作为参数运行加密算法。这就是IBBE的概念了。有关IBBE的具体内容，可以看看我在《密码学报》灌水的一篇论文《选择密文安全的基于身份的广播加密方案》（&lt;a href=&quot;http://www.jcr.cacrnet.org.cn:8080/mmxb/EN/article/downloadArticleFile.do?attachType=PDF&amp;amp;id=74&quot; data-editable=&quot;true&quot; data-title=&quot;cacrnet.org.cn 的页面&quot; class=&quot;&quot;&gt;http://www.jcr.cacrnet.org.cn:8080/mmxb/EN/article/downloadArticleFile.do?attachType=PDF&amp;amp;id=74&lt;/a&gt;），这是个中文论文，写的更系统一些。&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/36a7df997ec579629ed84482f9386c2a_r.jpg&quot; data-rawwidth=&quot;1095&quot; data-rawheight=&quot;581&quot;&gt;&lt;p&gt;由于我们可以在有意义的字符串中增加诸如时间信息、次数信息等等有意义的信息，因此IBBE天生也带有&lt;b&gt;撤销&lt;/b&gt;的功能。举个例子，Dealer可以要求每个申请私钥的人拿到的都是“姓名+日期”所对应的私钥，比如Alice拿到的是&quot;Alice20160805&quot;所对应的私钥。第二天，加密所用的信息统一变成&quot;Alice20160806&quot;，这样一来，前面一天的私钥就作废了。&lt;/p&gt;&lt;p&gt;这么一看，IBBE的功能简直强大的不要不要的。2007年，Cécile Delerablée基于双线性群（Bilinear Group）构造了第一个IBBE方案。朋友们也不用太纠结双线性群是什么，简单来说就是，这个东西涉及到3个代数群：&lt;equation&gt;\mathbb{G}_1,\mathbb{G}_2,\mathbb{G}_T&lt;/equation&gt;，还有一个函数&lt;equation&gt;e(\cdot,\cdot):\mathbb{G}_1 \times \mathbb{G}_2 \rightarrow \mathbb{G}_T&lt;/equation&gt;就好了。我们着重来看看这个方案的构造。这里我们只回顾Setup算法和Encrypt算法就够了。方案的构造沿用我自己《密码学报》论文的描述。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;equation&gt;(PK,MSK) \leftarrow \textsf{Setup}(\lambda, m)&lt;/equation&gt;。首先生成一个满足安全常数&lt;equation&gt;\lambda \in \mathbb{N}&lt;/equation&gt;的双线性群&lt;equation&gt;(p, \mathbb{G}_1, \mathbb{G}_2, \mathbb{G}_T, e)&lt;/equation&gt;。随后，算法随机选择元素&lt;equation&gt;g \overset{R}{\leftarrow} \mathbb{G}_1&lt;/equation&gt;，&lt;equation&gt;h\overset{R}{\leftarrow} \mathbb{G}_2&lt;/equation&gt;，&lt;equation&gt;\gamma \overset{R}{\leftarrow} \mathbb{Z}_p&lt;/equation&gt;，并选择一个安全的哈希函数&lt;equation&gt;H:\{0,1\}^* \rightarrow \mathbb{Z}_p&lt;/equation&gt;。主私钥为&lt;equation&gt;MSK=(g,\gamma)&lt;/equation&gt;，公钥为&lt;equation&gt;PK=\left(w,v,h,h^{\gamma}, \ldots, h^{\gamma^m}\right)=\left(g^{\gamma}, e(g, h), h,h^{\gamma}, \ldots, h^{\gamma^m}\right)&lt;/equation&gt;。&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;equation&gt;(CT,K)\leftarrow \textsf{Encrypt}(PK,S)&lt;/equation&gt;。给定公钥PK以及广播身份集合&lt;equation&gt;S=\{ID_1, \cdots, ID_s\}&lt;/equation&gt;，其中&lt;equation&gt;s \leq m&lt;/equation&gt;,加密算法随机选择&lt;equation&gt;k\overset{R}{\leftarrow}\mathbb{Z}_p&lt;/equation&gt;，计算密文为&lt;equation&gt;C_1 = w^{-k}&lt;/equation&gt;，&lt;equation&gt;C_2=h^{k \cdot \prod_{i=1}^{s}(\gamma + H(ID_i))}&lt;/equation&gt;。封装的会话密钥为&lt;equation&gt;K=v^k&lt;/equation&gt;。&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;好了，看到这里我想问个问题：&lt;b&gt;&lt;equation&gt;C_2&lt;/equation&gt;怎么求？&lt;/b&gt;这里面有两个比较坑的地方。&lt;/p&gt;&lt;p&gt;有的朋友说了，这不简单嘛，所有的参数都给出了，直接求就可以了啊。这就是第一个比较坑的地方。在加密算法中，我们是不知道&lt;equation&gt;\gamma&lt;/equation&gt;具体值的。因此，h指数上面的东西似乎求不了？怎么办呢？&lt;/p&gt;&lt;p&gt;&lt;b&gt;&lt;u&gt;如果你看到这里没有想明白这个问题，请暂停一下，想明白以后再继续往下看。&lt;/u&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;如果你想明白了这个问题，那么你一定会为&lt;equation&gt;\prod_{i=1}^{s}(\gamma + H(ID_i))&lt;/equation&gt;的展开式发愁了。而一直困扰我的也就是这个问题了。&lt;/p&gt;&lt;h2&gt;问题&lt;/h2&gt;我们把这个问题再一般化一点。实际上，我们要解决的问题是这个：&lt;p&gt;&lt;equation&gt;x^n+a_{n-1}x^{n-1}+\cdots+a_1x+a_0 = \prod_{i=1}^{n}(x + b_i)&lt;/equation&gt;，给定所有的&lt;equation&gt;b_i&lt;/equation&gt;，求每一个&lt;equation&gt;a_i&lt;/equation&gt;。这个问题看上去特别的简单，很像二项式展开啊有没有？的确，&lt;equation&gt;a_1&lt;/equation&gt;和&lt;equation&gt;a_{n-1}&lt;/equation&gt;的计算非常简单。然而，其他的似乎就没那么直观了，我们有：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;a_0=b_1b_2\cdots b_n=\prod_{i=1}^{n}b_i &lt;/equation&gt;，&lt;/p&gt;&lt;equation&gt;a_1=b_2b_3 \ldots b_n + b_1b_3 \ldots b_n + \cdots + b_1b_2\ldots b_{n-1}&lt;/equation&gt;&lt;br&gt;&lt;p&gt;...&lt;/p&gt;&lt;p&gt;&lt;equation&gt;a_{n-1}=b_1 + b_2 + \cdots + b_n = \sum_{i=1}^{n}{b_i} &lt;/equation&gt;。&lt;/p&gt;&lt;p&gt;实际上，上述这些多项式还有个名字，叫做基本对称多项式（Elementary Symmetric Polynomials，ESP）。基本对称多项式后在数学中的很多领域都得到了应用。然而，即使是维基百科（&lt;a href=&quot;https://en.wikipedia.org/wiki/Elementary_symmetric_polynomial&quot; class=&quot;&quot; data-editable=&quot;true&quot; data-title=&quot;Elementary symmetric polynomial&quot;&gt;Elementary symmetric polynomial&lt;/a&gt;）也没有提到这个多项式求值的方法。我们先不谈具体的算法。我们来分析一下：如果硬算的话，需要多少次加法运算和多少次乘法运算。&lt;/p&gt;&lt;p&gt;加法运算次数很容易得到。&lt;/p&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;equation&gt;a_0&lt;/equation&gt;需要&lt;equation&gt;C_n^n-1=0&lt;/equation&gt;次加法；&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;equation&gt;a_1&lt;/equation&gt;需要&lt;equation&gt;C_n^{n-1}-1=n-1&lt;/equation&gt;次加法；&lt;br&gt;&lt;/li&gt;&lt;li&gt;...&lt;/li&gt;&lt;li&gt;&lt;equation&gt;a_i&lt;/equation&gt;需要&lt;equation&gt;C_n^{n-i}-1&lt;/equation&gt;次加法；&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;因此加法运算总次数为：&lt;equation&gt;\sum_{i=0}^{n-1}{(C_n^{n-i}-1)}=2^{n} -n-1&lt;/equation&gt;。&lt;/p&gt;&lt;p&gt;乘法运算次数也是类似的。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;equation&gt;a_0&lt;/equation&gt;需要&lt;equation&gt;C_n^0(n-1)=n-1&lt;/equation&gt;次乘法；&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;equation&gt;a_1&lt;/equation&gt;需要&lt;equation&gt;C_n^1(n-2)=n(n-2)&lt;/equation&gt;次乘法；&lt;br&gt;&lt;/li&gt;&lt;li&gt;...&lt;/li&gt;&lt;li&gt;&lt;equation&gt;a_i&lt;/equation&gt;需要&lt;equation&gt;C_n^i(n-1-i)&lt;/equation&gt;次乘法；&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;因此乘法运算总次数为：&lt;equation&gt;\sum_{i=0}^{n-1}{C_n^{i}(n-1-i)} &lt;/equation&gt;。&lt;/p&gt;&lt;p&gt;可以看到，即使是加法运算也已经是指数级的了，乘法运算次数甚至比加法运算还要多。&lt;b&gt;如果这是真的，就意味着IBBE方案随着广播用户数量的增加，算法的复杂度也将以指数级增长，因此这根本就不是一个高效的算法&lt;/b&gt;。难道，AISACRYPT上的论文有这么明显的错误吗？是否存在一种高效的算法，可以让我们快速求解&lt;equation&gt;a_0,\ldots,a_{n-1}&lt;/equation&gt;呢？&lt;/p&gt;&lt;br&gt;&lt;h2&gt;解决&lt;/h2&gt;这个问题我一直都没有找到有效的算法，直到上周五，&lt;a href=&quot;https://www.zhihu.com/people/hai-wen-57&quot; data-editable=&quot;true&quot; data-title=&quot;海文&quot; class=&quot;&quot;&gt;海文&lt;/a&gt;师弟说他在PKC 2010上的一篇论文的附录部分找到了这个算法[10]。由于师弟是做Fully Homomorphic Encryption（FHE）的，因此他会时常阅读相关的论文。一看论文的名字《Fully Homomorphic Encryption with Relatively Small Key and Ciphertext Size》就知道，这也是个FHE的论文了。&lt;p&gt;在论文[10]的第20页，作者提到了一句话：&lt;/p&gt;&lt;blockquote&gt;To compute the &lt;equation&gt;S&lt;/equation&gt; symmetric polynomials on (the encryptions of) &lt;equation&gt;s_1&lt;/equation&gt; bits we proceed in a recursive manner, essentially using Horner’s Rule to compute the last &lt;equation&gt;S+1&lt;/equation&gt; coefficients of the product &lt;equation&gt;\prod_{i=1}^{s_1}{(b_i\cdot x + 1)} &lt;/equation&gt;。&lt;/blockquote&gt;&lt;p&gt;这不正是我们要解决的问题吗！不过，所谓的Horner&#39;s Rule又是什么呢？这个所谓的Horner&#39;s Rule，又叫做秦九昭算法，是几百年前中国数学家秦九昭提出的一种多项式快速求值方法。19世纪，英国数学家William George Horner重新发现并提出了这个算法，所以才叫Horner&#39;s Rule。&lt;/p&gt;&lt;p&gt;Horner&#39;s Rule解决的问题是求解高次多项式&lt;equation&gt;f(x)=a_nx^n + a_{n-1}x^{n-1}+\cdots+a_1x+a_0&lt;/equation&gt;在某个点&lt;equation&gt;x=x_0&lt;/equation&gt;处值的快速算法。如果直接从多项式本身求&lt;equation&gt;x=x_0&lt;/equation&gt;处值的话，很显然需要&lt;equation&gt;O(n)&lt;/equation&gt;次加法和&lt;equation&gt;O(n^2)&lt;/equation&gt;次乘法，速度很慢。Horner&#39;s Rule的方法利用了一个迭代关系：&lt;/p&gt;&lt;equation&gt;f(x)=a_0+x(a_1+x(a_2+\cdots+x(a_{n-1}+a_nx)))&lt;/equation&gt;&lt;br&gt;&lt;p&gt;因此，我们可以依次可以从括号最里面开始进行迭代求值，即依次求&lt;/p&gt;&lt;ul&gt;&lt;equation&gt;c_{n-1}=a_{n-1}+a_nx_0&lt;/equation&gt;&lt;br&gt;&lt;equation&gt;c_{n-2}=a_{n-2}+a_{n-1}c_{n-1}&lt;/equation&gt;&lt;br&gt;&lt;li&gt;...&lt;br&gt;&lt;/li&gt;&lt;equation&gt;c_{1}=a_{1}+a_2c_2&lt;/equation&gt;&lt;br&gt;&lt;equation&gt;c_{0}=a_{0}+a_1c_1&lt;/equation&gt;&lt;br&gt;&lt;/ul&gt;&lt;br&gt;&lt;p&gt;最后的&lt;equation&gt;c_0&lt;/equation&gt;就是我们要求的&lt;equation&gt;f(x_0)&lt;/equation&gt;。如果按照这种方式计算，只需要进行&lt;equation&gt;O(n)&lt;/equation&gt;次加法和&lt;equation&gt;O(n)&lt;/equation&gt;次乘法即可，大大降低了计算量。&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Horner&#39;s Rule能够降低求解高次多项式的计算量的原因在于充分利用了迭代关系，那么，能否找到类似的迭代关系，从而解决我们的问题呢？实际上，基本对称多项式也有类似的关系。很容易可以看出，&lt;equation&gt;a_i&lt;/equation&gt;是从n个&lt;equation&gt;b_j&lt;/equation&gt;中依次保留n-i个&lt;equation&gt;b_j&lt;/equation&gt;后相乘再相加的结果，因此我们称&lt;equation&gt;a_i&lt;/equation&gt;是n元n-i次基本对称多项式，记为&lt;equation&gt;ESP(n, n-i)&lt;/equation&gt;。对于n元k次基本对称多项式，其迭代关系如下：&lt;/p&gt;&lt;equation&gt;\[{ESP(n,k) = }\left\{ {\begin{array}{*{20}{c}}
  {ESP(n - 1,k) + {b_n}}&amp;amp;{k = 1} \\ 
  {{b_n}ESP(n - 1,k - 1)}&amp;amp;{n = k} \\ 
  {ESP(n - 1,k) + {b_n}ESP(n - 1,k - 1)}&amp;amp;{n &amp;gt; k} 
\end{array}} \right.\]&lt;/equation&gt;&lt;br&gt;&lt;p&gt;看起来有点麻烦？我们用下面的图来描述就好了：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/632f120bf907ea014c2cd4c5a92dab79_r.jpg&quot; data-rawwidth=&quot;477&quot; data-rawheight=&quot;209&quot;&gt;每一个竖线代表一次加法，每一个斜线代表一次乘法，所乘的内容就是&lt;equation&gt;b_i&lt;/equation&gt;了。而最后一行就是我们想得到的结果。图中可以清晰的看出，所需要的运算量为&lt;equation&gt;O(n^2)&lt;/equation&gt;次加法和&lt;equation&gt;O(n^2)&lt;/equation&gt;次乘法。原来，论文没有骗我们…&lt;/p&gt;&lt;h2&gt;实现&lt;/h2&gt;有了迭代关系，代码的实现异常简单，直接看图说话即可：&lt;code lang=&quot;java&quot;&gt;/**
 * Created by Weiran Liu on 2016/8/22.
 *
 * Given coefficients of n fundamental polynomials, computes the coefficients of the extended n-degree polynomial.
 *
 * The algorithm is called Horner&#39;s Rule, or Qin Jiu Zhao algorithm.
 * The detailed algorithm is shown in the paper:
 * Nigel P. Smart, Frederik Vercauteren. Fully Homomorphic Encryption with Relatively Small Key and Ciphertext Sizes.
 * PKC 2010, pp. 420 - 443, 2010.
 *
 * @author Hanwen Feng &amp;lt;A HREF=&quot;mailto:feng_hanwen@buaa.edu.cn&quot;&amp;gt; (feng_hanwen@buaa.edu.cn) &amp;lt;/A&amp;gt; and
 * Weiran Liu
 */
public class HornerRule {
    /**
     * Compute n coefficients for n-degree polynomials by given n elementary coefficients
     * @param elementaryCoefficient
     * @return n coefficients
     */
    public static Element[] ComputeEfficients(Pairing pairing, Element[] elementaryCoefficient) {
        int n = elementaryCoefficient.length;
        Element[] allCoefficients = new Element[n+1];
        //set a_{n} to be 1
        allCoefficients[n] = pairing.getZr().newOneElement().getImmutable();
        //set all other efficients to be initially zero
        for (int i = 0; i &amp;lt; n; i++) {
            allCoefficients[i] = pairing.getZr().newZeroElement().getImmutable();
        }
        for (int k = 0; k &amp;lt; n; k++) {
            for (int i = n - k - 1; i &amp;lt; n - 1; i++) {
                allCoefficients[i] = allCoefficients[i].add(allCoefficients[i + 1].mulZn(elementaryCoefficient[k])).getImmutable();
            }
            allCoefficients[n-1] = allCoefficients[n-1].add(elementaryCoefficient[k]).getImmutable();
        }
        return allCoefficients;
    }
}
&lt;/code&gt;&lt;h2&gt;总结&lt;/h2&gt;&lt;p&gt;很多看起来很显然的东西，可能都经不起推敲。看似我们懂了，其实还是有很多不懂，甚至根本没有理解的地方。学习也好，工作也罢，还是知其然又知其所以然比较好。开始的时候真的要做到刨根问底，不要以讹传讹哦！&lt;/p&gt;&lt;h2&gt;参考文献&lt;/h2&gt;&lt;p&gt;[1] Weiran Liu, Jianwei Liu, Qianhong Wu, Bo Qin. Hierarchical Identity-Based Broadcast Encryption. ACISP 2014, pp. 242-257, 2014.&lt;/p&gt;&lt;p&gt;[2] Weiran Liu, Jianwei Liu, Qianhong Wu, Bo Qin, Yan Li. Practical Chosen-Ciphertext Secure Hierarchical Identity-Based Broadcast Encryption. International Journal of Information Security, 2016, 15(1): 35-50.&lt;/p&gt;&lt;p&gt;[3] Adi Shamir. Identity-Based Cryptosystems and Signature Schemes. CRYPTO 1984, pp. 47-53, 1984.&lt;/p&gt;&lt;p&gt;[4] Dan Boneh, Matt Franklin. Identity-Based Encryption from the Weil Pairing. CRYPTO 2001, pp. 213-229, 2001.&lt;/p&gt;&lt;p&gt;[5] Amos Fiat, Moni Naor. Broadcast Encryption. CRYPTO 1993, pp. 480-491, 1993.&lt;/p&gt;&lt;p&gt;[6] Dan Boneh, Craig Gentry, Brent Waters. Collusion Resistant Broadcast Encryption with Short Ciphertexts and Private Keys. CRYPTO 2005, pp. 258-275, 2005.&lt;/p&gt;&lt;p&gt;[7] Jeremy Horwitz, Ben Lynn. Towards Hierarchical Identity-Based Encryption. EUROCRYPT 2002, pp. 466-481, 2002.&lt;/p&gt;&lt;p&gt;[8] Craig Gentry, Alice Silverberg. Hierarchical ID-Based Cryptography. ASIACRYPT 2002, pp. 548-566, 2002.&lt;/p&gt;&lt;p&gt;[9] Cécile Delerablée. Identity-Based Broadcast Encryption with Constant Size Ciphertexts and Private Keys. ASIACRYPT 2007, pp. 200-215, 2007.&lt;/p&gt;&lt;p&gt;[10] Nigel P. Smart, Frederik Vercauteren. Fully Homomorphic Encryption with Relatively Small Key and Ciphertext Size. PKC 2010, pp. 420-443, 2010.&lt;/p&gt;</description>
<author>刘巍然-学酥</author>
<guid isPermaLink="false">2016-08-25-22166332</guid>
<pubDate>Thu, 25 Aug 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>数学、英语对程序员来说重要吗？记线性秘密分享方案（Linear Secret Sharing Scheme，LSSS）的实现</title>
<link>https://henix.github.io/feeds/zhuanlan.datasec/2016-07-21-21664741.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/21664741&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/495989616cfd91da906072ad3934d76f_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;h2&gt;前言&lt;/h2&gt;昨天晚上我终于完成了公钥密码学基于属性加密（Attribute-Based Encryption，ABE）中的一个核心模块：线性秘密分享方案（Linear Secret Sharing Scheme，LSSS）的实现。这个模块的实现是困扰我将近1年的一个问题，我相信也是国内（以及国外）众多公钥密码学研究者一直困扰的问题。所以，我相信此代码会给ABE的研究人员，特别是国内ABE的研究人员提供帮助。不过，由于我代码注释能力不太过关，并且这个程序的调用方法确实需要一些背景知识，因此我准备撰写一个专栏或者博客，和朋友们分享LSSS的概念，理论问题和实现问题。&lt;p&gt;相关源代码已在GitHub上发布：&lt;a href=&quot;https://github.com/liuweiran900217/CloudCrypto&quot; class=&quot;&quot;&gt;https://github.com/liuweiran900217/CloudCrypto&lt;/a&gt;。这实际上是我维护的一个密码学函数库，其中已经包含了IBE、HIBE、Revocable Encryption，以及我部分发表论文的代码实现了。如果有类似需求的朋友们，也可以参考这个代码，进行修改或者直接调用。有关本模块得使用方法参见&lt;a href=&quot;https://github.com/liuweiran900217/CloudCrypto/tree/master/src/test/java/com/example/access&quot; class=&quot;&quot;&gt;https://github.com/liuweiran900217/CloudCrypto/tree/master/src/test/java/com/example/access&lt;/a&gt;中的测试代码。对应的具体代码和解析见下文。这个代码也用了很多设计模式，我想实现的目的是：只要稍微知道原理，就可以在不知道具体实现的前提下，直接调用各种方法实现LSSS或者相关方案。这里也希望知乎的大V们批评指导，是否此源代码达到了这个目的呢？&lt;/p&gt;&lt;p&gt;源代码也参考了下面两个开源的实现。我这里想说明的是，代码的使用虽然是免费的，但如果觉得代码好用，恳求朋友们给个Star或者给个Watch，这也是对我继续完善CloudCrypto库的鼓励嘛…&lt;/p&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;源代码参考了其它开源的代码和程序。有关访问控制政策（Access Policy）解析器的代码，参考了北京大学的李聪同学及其师兄的代码：&lt;a href=&quot;https://github.com/cleverli2008/ABE&quot; class=&quot;&quot;&gt;https://github.com/cleverli2008/ABE&lt;/a&gt;。&lt;br&gt;&lt;/li&gt;&lt;li&gt;源代码参考了来自Raytheon BBN Technologis上P3S项目中有关LSSS的部分代码。不过，这个代码中有很多Bug，基本判断是不能使用的。我参考了其代码结构，特别是访问控制树（Access Tree）的输入方法：&lt;a href=&quot;https://dsl-external.bbn.com/tracsvr/openP3S/browser/trunk/jmiracl-crypto/src/main/java/com/bbn/projects/spar/p3s/jmiracl/crypto&quot; class=&quot;&quot;&gt;https://dsl-external.bbn.com/tracsvr/openP3S/browser/trunk/jmiracl-crypto/src/main/java/com/bbn/projects/spar/p3s/jmiracl/crypto&lt;/a&gt;。&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;p&gt;我开始时在犹豫这篇文章应该发表在知乎专栏上，还是应该发表在CSDN上。要说这种比较技术，比较偏重于实现的文章应该发表到CSDN上的。但是，这几天我在知乎一直看到这样的问题：&lt;a href=&quot;https://www.zhihu.com/question/48617074&quot; class=&quot;&quot; data-editable=&quot;true&quot; data-title=&quot;程序员不需要知道太多数学，你认同吗？&quot;&gt;程序员不需要知道太多数学，你认同吗？&lt;/a&gt;，或者这种问题：&lt;a href=&quot;https://www.zhihu.com/question/26630519&quot; class=&quot;&quot; data-title=&quot;英语对程序员来讲有多重要？会英语的程序员和不会英语的程序员有什么差距？&quot; data-editable=&quot;true&quot;&gt;英语对程序员来讲有多重要？会英语的程序员和不会英语的程序员有什么差距？&lt;/a&gt;因此，我不再犹豫，决定把这个文章发表在知乎专栏上。&lt;/p&gt;&lt;p&gt;我对上面这两个问题的看法随时间的推移而发生了巨大的改变。回想起我本科的时候，对上面这两个问题的答案是：&lt;b&gt;程序员不需要知道太多数学，程序员不需要学习太多的英语。&lt;/b&gt;然而，随着时间的推移，我发现本科时我对这两个问题的理解完全是错误的。现今，我看到以互联网企业为代表的科技类企业，越来越注重招收数学、计算机基础相关的硕士、博士生，我对此种现象表示强烈的认同。如果现在让我回答这两个问题的话，我会毫不犹豫地回答：&lt;b&gt;程序员需要扎实的数学基础，需要过硬的英语阅读能力&lt;/b&gt;。当然，口说无凭，我想借助LSSS的实现，向朋友们说明为什么程序员需要数学、英语技能。另外，程序员实际上还需要过硬的计算机基础知识。我作为非科班出身，这方面同样比较薄弱，因此LSSS的实现还有一个问题我没有解决。希望毕业前最后不到1年的时间，我能好好补一补计算机基础知识，把这个问题解决。我同样把问题抛给知友们，如果你有能力解决这个问题，欢迎和我联系~&lt;/p&gt;&lt;p&gt;如果朋友们认为此专栏中我的一些理解并不准确，也欢迎和我讨论。&lt;/p&gt;&lt;h2&gt;ABE、访问控制政策、访问控制树的概念&lt;/h2&gt;&lt;p&gt;在讲此模块的实现之前，就不得不要讲解一下ABE、访问控制政策、访问控制树、LSSS的概念了。别急，我们一个一个来。&lt;/p&gt;&lt;p&gt;基于属性加密（Attribute-Based Encryption，ABE）是基于身份加密（Identity-Based Encryption）的扩展。有关IBE的介绍，请参考知乎问题：&lt;a href=&quot;https://www.zhihu.com/question/26533817&quot; class=&quot;&quot; data-title=&quot;基于身份的密码体制是什么？&quot; data-editable=&quot;true&quot;&gt;基于身份的密码体制是什么？&lt;/a&gt;我的答案基本上可以看作截止到2013年的IBE小综述。&lt;a href=&quot;https://www.zhihu.com/people/li-fei-42-50&quot; class=&quot;&quot; data-editable=&quot;true&quot; data-title=&quot;@李飞&quot;&gt;@李飞&lt;/a&gt;同学在后面补充了的答案中，就提到了ABE的开山之作[1]。Sahai和Waters首先定义了ABE[1]，他们指出在ABE中：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;加密的文件被一个属性集合所标识，里面包含n个属性，每个属性用一个有意义的字符串来描述（如：某个大学或机构的名称、文档等级等）；&lt;/li&gt;&lt;li&gt;用户的私钥也被一个属性集合所标识，里面包含m个属性，每个属性同样用有意义的字符串来描述；&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;解密时，方案会自动对私钥属性集合和密文属性集合作交集，如果属性交集的个数大于等于某个阈值t，则可以解密成功。举个例子，加密文件对应的属性集合为&lt;equation&gt;S=\{\text{Computer}, \text{Professor}, \text{High-level}\}&lt;/equation&gt;，阈值t设置为2。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;某个老师拥有的属性集合为&lt;equation&gt;S_1 = \{\text{Computer},\text{Professor}\}&lt;/equation&gt;，我们有&lt;equation&gt;|S_1 \cap S| = |\{\text{Computer},\text{Professor}\}|=2&lt;/equation&gt;，则这个老师就可以用其私钥解密文档。&lt;br&gt;&lt;/li&gt;&lt;li&gt;某个学生拥有的属性集合为&lt;equation&gt;S_2=\{\text{Computer},\text{Student},\text{High-level}\}&lt;/equation&gt;，我们有&lt;equation&gt;|S_2 \cap S| = |\{\text{Computer},\text{High-level}\}|=2&lt;/equation&gt;，则这个学生也可以用其私钥解密文档。&lt;/li&gt;&lt;li&gt;某个学生拥有的属性集合为&lt;equation&gt;S_3 = \{\text{Software},\text{Professor},\text{Low-level}\}&lt;/equation&gt;，我们有&lt;equation&gt;|S_3 \cap S| = |\{\text{Professor}\}|=1&lt;/equation&gt;，则这个老师就不能用其私钥解密文档。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;我们可以看到，这种方法已经可以实现比较灵活的访问控制了，不过还没达到特别灵活，毕竟加密文件和私钥所对应的都是属性集合，还没有实现真正意义上的访问控制政策（Access Policy），或者称访问控制结构（Access Structure）。那么，什么叫作访问控制政策呢？早在1996年，Beimel在其博士毕业论文中就定义了访问控制政策，以及单调访问控制政策（Monotone Access Policy）[2]，我们来看一看定义[2,3]，英文的定义最为精确和严谨：&lt;/p&gt;&lt;blockquote&gt;Let &lt;equation&gt;\mathcal{P} = \{P_1, P_2, \cdots, P_n\}&lt;/equation&gt; be a set of parties. A collection &lt;equation&gt;\mathbb{A} \subseteq 2^{\{P_1, P_2, \cdots, P_n\}}&lt;/equation&gt; is monotone if for any &lt;equation&gt;B&lt;/equation&gt; and &lt;equation&gt;C&lt;/equation&gt;: if &lt;equation&gt;B \in \mathbb{A}&lt;/equation&gt; and &lt;equation&gt;B \subseteq C&lt;/equation&gt; then &lt;equation&gt;C \in \mathbb{A}&lt;/equation&gt;. An access structure (respectively, monotone access structure) is a collection (respectively, monotone collection) &lt;equation&gt;\mathbb{A}&lt;/equation&gt; of non-empty subsets of &lt;equation&gt;\{P_1, P_2, \cdots, P_n\}&lt;/equation&gt;, i.e., &lt;equation&gt;\mathbb{A} \subseteq 2^{\{P_1, P_2, \cdots, P_n\}} \backslash \{\emptyset\}&lt;/equation&gt;. The sets in &lt;equation&gt;\mathbb{A}&lt;/equation&gt; are called the authorized sets, and the sets not in &lt;equation&gt;\mathbb{A}&lt;/equation&gt; are called the unauthorized sets.&lt;/blockquote&gt;&lt;p&gt;上述描述非常的清楚，请理解上文后继续往后看...&lt;/p&gt;&lt;p&gt;在Sahai和Waters提出ABE概念的下一年，Goyal，Pandey，Sahai和Waters真正实现了支持访问控制政策的ABE方案[4]。他们将访问控制政策描述为树（Access Tree）的形式，如下图：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/f8e78e95653f138d37a89c0511e2c138_r.jpg&quot; data-rawwidth=&quot;520&quot; data-rawheight=&quot;170&quot;&gt;上图中，每个叶子节点都是一个属性，非叶子节点为一个门限节点（Threshold Gate/Node），里面的数据形式为(n, t)，表示：此节点一共有n个子节点，只要有t个子节点满足条件，那么此节点也满足条件。解密时，只要属性集合使得访问控制树的根节点满足条件，就可以正确解密。&lt;/p&gt;&lt;p&gt;访问控制树带来了极为方便的访问控制描述形式，其直接覆盖了所谓单调布尔代数访问控制政策（Montone Boolean Formula）的描述形式：对于AND，其门限节点形式为(n, n)；对于OR，其门限节点形式为(n, 1)。举个例子，对于访问控制政策&lt;/p&gt;&lt;equation&gt;\text{(A and B and C) and (D or E or F) and (G and H and (I or J or K or L))}&lt;/equation&gt;&lt;br&gt;&lt;p&gt;其对应的访问控制树为：&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/b7973042122e2ea6c84e48db95247e36_r.jpg&quot; data-rawwidth=&quot;520&quot; data-rawheight=&quot;170&quot;&gt;&lt;p&gt;对于这个访问控制树，下述属性集合满足条件（所列举的并未覆盖所有满足的属性集合）：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;{A, B, C, E, G, H, K}&lt;/li&gt;&lt;li&gt;{A, B, C, E, F, G, H, I, J, K, L}&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;下述属性集合不满足条件：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;{A, B, C, G, H, K}&lt;/li&gt;&lt;li&gt;{A, B, C, E, G, K}&lt;/li&gt;&lt;li&gt;{A, B, C, D, G, H}&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;那么，访问控制树应该放在哪里呢？Goyal等人指出，如果私钥用访问控制树标识，加密文件用属性集合标识，此种ABE称为私钥策略ABE（Key-Policy ABE，KP-ABE）；反之，如果私钥用属性集合标识，加密文件用访问控制树标识，此种ABE称为密文策略ABE（Ciphertext-Policy ABE，CP-ABE）。Goyal等人构造了第一个KP-ABE[4]。再往后一年，Bethencourt，Sahai和Waters构造了第一个CP-ABE[5]。同时，Bethencourt等人公开了其CP-ABE的实现代码，这使得ABE的研究前进了一大步，毕竟人们有代码参考了嘛。&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;说到这里，就要讲点黑历史了。虽然Bethencourt等人给出了CP-ABE的实现，但是那个实现实在是太&lt;b&gt;脏&lt;/b&gt;了！那个代码使用C语言编写的，代码结构非常凌乱，程序的撰写思路特别的面向过程，基本上只能用来测测时间… 不过，那个代码几乎解决了所有ABE的实现问题，具体哪些问题我们后面来讲。&lt;/p&gt;&lt;p&gt;在访问控制树的实现中，最为核心的是门限节点（非叶子节点）的实现。在2007年以前的ABE论文，以及2008年以后非密码学会议/期刊上的ABE论文中，都使用了同样的方法进行实现，这就是密码学中非常著名的Shamir秘密分享方案。Shamir就是RSA算法中的“S”，他实际上为密码学做出了很多突出的贡献。比如前文最先提到的IBE概念也是他提出来的[6]。第一个秘密分享方案也是它提出来的[7]。&lt;/p&gt;&lt;p&gt;我这里需要稍微介绍一下Shamir秘密分享方案的基本思路。Shamir秘密分享方案的目的是，给n个人分享秘密，只要n个人中的t个人（t &amp;lt;= n）在一起，就能够把秘密恢复出来。这就好像一个保险柜有n把钥匙，只要t个人在场，就能够把保险柜打开。Shamir秘密分享方案利用了拉格朗日多项式差值方法，其基本思想是：如果预先定义了一个t-1阶的多项式，那么如果知道这个多项式上的t个点，则一定能完整恢复出这个多项式。假设所要分享的秘密是s，我们任取t-1个随机数&lt;equation&gt;a_1, a_2, \cdots, a_{t-1}&lt;/equation&gt;，构造一个t-1阶多项式&lt;equation&gt;f(x)=a_{t-1}x^{t-1}+a_{t-2}x^{t-2}+\cdots+a_1x+s&lt;/equation&gt;。对于每个用户&lt;equation&gt;i,1 \leq i \leq n&lt;/equation&gt;，其分享结果为&lt;equation&gt;(i,f(i))&lt;/equation&gt;。这样，当t个用户在场时，就可以使用拉格朗日插值公式恢复出多项式&lt;equation&gt;f(x)&lt;/equation&gt;，从而得到秘密s了。&lt;/p&gt;&lt;p&gt;在访问控制树中，我们就采取类似的方法，加密的密钥s放置在根节点上，对于每一个门限节点（非叶子节点），我们都构造一个多项式。利用Shamir秘密分享方案，将密钥s一层一层地分享下去，最后给到叶子节点。解密时，满足解密条件的用户手上拥有恢复s的足够信息，就可以把密钥s恢复出来了。&lt;/p&gt;&lt;p&gt;对于布尔代数描述的访问控制政策来说，AND意味着构造一个n-1阶多项式；OR意味着构造一个0阶多项式，实际上就是把秘密直接传给孩子节点。对于上述给定的访问控制政策：&lt;/p&gt;&lt;equation&gt;\text{(A and B and C) and (D or E or F) and (G and H and (I or J or K or L))}&lt;/equation&gt;&lt;br&gt;&lt;p&gt;一共有3个AND，根据门限节点中门限值的不同，分别构造3个多项式为：&lt;/p&gt;&lt;equation&gt;f_0(x)=a_{0,2}x^2 + a_{0,1}x + s&lt;/equation&gt;&lt;br&gt;&lt;equation&gt;f_1(x)=a_{1,2}x^2+a_{1,1}x+f_0(1)&lt;/equation&gt;&lt;br&gt;&lt;equation&gt;f_2(x)=a_{2,2}x^2+a_{2,1}x+f_0(3)&lt;/equation&gt;&lt;br&gt;&lt;p&gt;对应的分享结果如下图所示：&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/c56bc02b8ad06adc6c1ae6508bff9d12_r.jpg&quot; data-rawwidth=&quot;529&quot; data-rawheight=&quot;180&quot;&gt;&lt;p&gt;访问控制树的实现相对比较简单，我就不过多介绍了。拉格朗日差值的实现位于&lt;a href=&quot;https://github.com/liuweiran900217/CloudCrypto/blob/master/src/main/java/cn/edu/buaa/crypto/access/tree/LagrangePolynomial.java&quot; class=&quot;&quot;&gt;https://github.com/liuweiran900217/CloudCrypto/blob/master/src/main/java/cn/edu/buaa/crypto/access/tree/LagrangePolynomial.java&lt;/a&gt;。访问控制树的实现位于&lt;a href=&quot;https://github.com/liuweiran900217/CloudCrypto/blob/master/src/main/java/cn/edu/buaa/crypto/access/tree/AccessTreeEngine.java&quot; class=&quot;&quot;&gt;https://github.com/liuweiran900217/CloudCrypto/blob/master/src/main/java/cn/edu/buaa/crypto/access/tree/AccessTreeEngine.java&lt;/a&gt;。&lt;/p&gt;&lt;h2&gt;线性秘密分享方案（Linear Secret Sharing Scheme，LSSS）&lt;/h2&gt;&lt;p&gt;既然已经实现了ABE方案，为什么又来了个LSSS呢？实际上，LSSS是Shamir秘密分享方案的一般性推广。密码学界已经提出了很多秘密分享方案，具有更好的效率和更佳的安全性。然而，无论所提出的秘密分享方案是什么，只要是线性的，我们都可以用同一个模型来描述[2]，这就是线性秘密分享方案了。我们来看看定义[2,3]：&lt;/p&gt;&lt;blockquote&gt;A secret sharing scheme &lt;equation&gt;\Pi&lt;/equation&gt; over a set of parties &lt;equation&gt;\mathcal{P}&lt;/equation&gt; is called linear (over &lt;equation&gt;\mathbb{Z}_p&lt;/equation&gt;) if:&lt;br&gt;(1) the sares for each party form a vector over &lt;equation&gt;\mathbb{Z}_p&lt;/equation&gt;.&lt;br&gt;(2) there exists a matrix &lt;equation&gt;M&lt;/equation&gt; called the share-generating matrix for &lt;equation&gt;\Pi&lt;/equation&gt;. The matrix &lt;equation&gt;M&lt;/equation&gt; has m rows and d columns. For &lt;equation&gt;i=1,\ldots,m&lt;/equation&gt;, the &lt;equation&gt;i^{\text{th}}&lt;/equation&gt; row &lt;equation&gt;M_i&lt;/equation&gt; of &lt;equation&gt;M&lt;/equation&gt; is labeled by a party &lt;equation&gt;\rho(i)&lt;/equation&gt; where &lt;equation&gt;\rho&lt;/equation&gt; is a function from &lt;equation&gt;\{1, 2, \ldots, m\}&lt;/equation&gt; to &lt;equation&gt;\mathcal{P}&lt;/equation&gt;. Given a column vector &lt;equation&gt;\vec v = (s, r_2, \ldots, r_d)&lt;/equation&gt;, where &lt;equation&gt;s \in \mathbb{Z}_p&lt;/equation&gt; is the secret to be shared and &lt;equation&gt;r_2, \ldots, r_d \in \mathbb{Z}_p&lt;/equation&gt; are randomly chosen, &lt;equation&gt;M \vec v&lt;/equation&gt; is the vector of m shares of the secret s according to &lt;equation&gt;\Pi&lt;/equation&gt;. The share &lt;equation&gt;\lambda_i = \left(M \vec v\right)_i&lt;/equation&gt;, i.e., the inner product &lt;equation&gt;M_i \cdot \vec v&lt;/equation&gt; belongs to party &lt;equation&gt;\rho(i)&lt;/equation&gt;.&lt;/blockquote&gt;&lt;p&gt;一看定义，懵逼了… 虽然给出了s的分享方法（一个矩阵相乘就结束了，非常方便快捷），但是完全没给出LSSS的具体构造啊。实际上，Beimel本人是个学数学的，它只是证明了类似的方案都可以转换成这种形式，但是没给出具体怎么转换。更为严重的是，它确实证明了存在方法，当满足LSSS分享条件时，就一定可以恢复出秘密s，但是其没给出具体算法，来看看定义[2,3]：&lt;/p&gt;&lt;blockquote&gt;Any LSSS defined as above enjoys the linear reconstruction property defined as follows. Suppose that &lt;equation&gt;\Pi&lt;/equation&gt; is an LSSS for access structure &lt;equation&gt;\mathbb{A}&lt;/equation&gt;. Let &lt;equation&gt;S \in \mathbb{A}&lt;/equation&gt; be an authorized set, and &lt;equation&gt;I \subset \{1, \ldots, m\}&lt;/equation&gt; be defined as &lt;equation&gt;I = \{i: \rho(i) \in S\}&lt;/equation&gt;. There exist constants &lt;equation&gt;\{\omega_i \in \mathbb{Z}_p\}_{i \in I}&lt;/equation&gt; satisfying &lt;equation&gt;\sum_{i \in I}{\omega_i M_i} = (1, 0, \ldots, 0) &lt;/equation&gt;, so that if &lt;equation&gt;\{\lambda_i\}&lt;/equation&gt; are valid shares of any secret s according to &lt;equation&gt;\Pi&lt;/equation&gt;, then &lt;equation&gt;\sum_{i \in I}{\omega_i \lambda_i} = s &lt;/equation&gt;. Furthermore, these constants &lt;equation&gt;\{\omega_i\}&lt;/equation&gt; can be found in time polynomial in the size of the share-generating matrix M. For any unauthorized set, no such constants exists. The LSSS is denoted by &lt;equation&gt;(M, \rho)&lt;/equation&gt;.&lt;/blockquote&gt;&lt;p&gt;读完了上述段落，是不是有一种想摔键盘的冲动… 我靠，这不是数学中大法：存在性吗！&lt;/p&gt;&lt;ol&gt;&lt;li&gt;数学上证明了一定存在&lt;equation&gt;\{\omega_i\}&lt;/equation&gt;，但没说怎么求。&lt;/li&gt;&lt;li&gt;Beimel根本没给出如何给定一个访问控制政策，将其转换成LSSS中矩阵M的方法。&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;br&gt;&lt;p&gt;这，就是我们要解决的两个问题（其实还有第三个问题）。试问，如果在互联网公司中，老大给了这么一个类似的任务（比如根据论文实现这个算法，Machine Learning和Deep Learning相关的工作中经常会遇到吧？），没有数学和英语的功底，如何去解决呢？&lt;/p&gt;&lt;h2&gt;理论分析：如何求解常数omega&lt;/h2&gt;&lt;p&gt;我们先来解决第2个问题，如果我们知道给定属性集合一定可以恢复秘密的话，如何求每个属性对应的&lt;equation&gt;\omega_i&lt;/equation&gt;。我们来试着推导一下。&lt;/p&gt;&lt;p&gt;Step 1：我们知道，&lt;equation&gt;\vec \lambda = M \cdot \vec v&lt;/equation&gt;，而我们的目的是恢复出&lt;equation&gt;\vec v&lt;/equation&gt;的第一个项，也就是我们的秘密s，那么最直观的方法就是对M求逆嘛~ 但这会遇到一个问题，M并不是方阵，没办法求逆。不过，反过来想，既然我们想恢复s，是不是只要对M的某个子阵求逆呢？换句话说，如果给定的属性集合一定可以恢复秘密的话，我们是否一定能把M化简为一个满秩矩阵呢？答案是肯定的，否则属性集合无法提供足够的信息来恢复s。&lt;/p&gt;&lt;p&gt;Step 2：矩阵M的行数是&lt;equation&gt;\rho&lt;/equation&gt;的总个数，列数代表什么呢？实际上就代表了这个秘密至少需要多少方参与才能恢复。但是，从访问控制政策上考虑，即使满足列的数量，也不一定能够恢复出秘密，比如{A or B) and (C or D}，如果属性集合是{A, B}的话也不可以。实际上，这种情况映射到M上，意味着A和B对应的行是重复的，即互相之间可以线性表示。因此，只要我们在给定属性集合中找到一个子集，使得子集对应的M行所组成的子阵满足满秩就可以了。&lt;/p&gt;&lt;p&gt;Step 3：然而，我们如何找到这个子阵呢？我们要用到单调性这个特性了。单调性意味着，如果属性集合中有更多的属性，则其满足访问控制政策的能力也就更强。反过来也就意味着，如果一个属性是冗余的，那么即使去掉这个属性，所对应的子属性集合也一定能满足访问控制政策。既然如此，最简单的方法就是一个一个试：先看给定的属性集合是否满足访问控制政策，如果满足，依次去除各个属性，再看是否满足：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;如果子属性集合依然满足访问控制政策，则删掉M中对应的行；&lt;/li&gt;&lt;li&gt;如果子属性集合不能满足访问控制政策，则M中对应的行要保留；&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;通过这种方法，我们就能在线性时间内找到一个M的子矩阵M‘，其对应的分享为&lt;equation&gt;\vec \lambda&#39;&lt;/equation&gt;，M&#39;满足可逆性，则我们就能恢复出秘密向量&lt;equation&gt;\vec v&lt;/equation&gt;。&lt;/p&gt;&lt;p&gt;Step 4：实际上我们能拿到秘密s就可以了，因此，我们有：&lt;/p&gt;&lt;equation&gt;s = (1, 0, \ldots, 0) \cdot \vec v = (1, 0, \ldots, 0) \cdot M&#39;^{-1} \vec \lambda&#39;&lt;/equation&gt;&lt;br&gt;&lt;p&gt;因此，我们可以先计算左边的相乘结果，所得到的结果是什么呢？就是我们要求的&lt;equation&gt;\{\omega_i\}&lt;/equation&gt;嘛：&lt;/p&gt;&lt;equation&gt;\vec \omega = (1, 0, \ldots, 0) \cdot \vec M&#39;^{-1}&lt;/equation&gt;&lt;br&gt;&lt;p&gt;这还意味着，在求&lt;equation&gt;\{\omega_i\}&lt;/equation&gt;时，我们完全不需要知道&lt;equation&gt;\vec \lambda&lt;/equation&gt;，只要知道LSSS的矩阵M，以及知道能够满足恢复s条件的属性集合就可以了。&lt;/p&gt;&lt;p&gt;源代码中的抽象类LSSSPolicyEngine给出了LSSS秘密分享，以及求解&lt;equation&gt;\omega&lt;/equation&gt;的具体实现，链接为：&lt;a href=&quot;https://github.com/liuweiran900217/CloudCrypto/blob/master/src/main/java/cn/edu/buaa/crypto/access/lsss/LSSSPolicyEngine.java&quot; class=&quot;&quot;&gt;https://github.com/liuweiran900217/CloudCrypto/blob/master/src/main/java/cn/edu/buaa/crypto/access/lsss/LSSSPolicyEngine.java&lt;/a&gt;。&lt;/p&gt;&lt;h2&gt;理论分析：如何构造LSSS矩阵&lt;/h2&gt;下一个问题是，如何构造LSSS矩阵呢？这个还真不是程序员能解决的问题，还得靠学者呀！2010年，Lewko和Waters在其论文中[8]给出了一个LSSS的构造方法：给定一个访问控制树，只要是AND和OR描述的，都能转换为LSSS方案。这篇论文还有个完整版本，发表在EUROCRYPT 2011上[9]，只不过由于篇幅限制，会议版本的论文把这段删掉了…&lt;p&gt;Lewko和Waters给出的方案非常“简单”，用了两段话就描述完了，我们来看看[8]：&lt;/p&gt;&lt;blockquote&gt;We now describe a general algorithm for converting a boolean formula into an equivalent LSSS matrix. We consider the boolean formula as an access tree, where interior nodes are AND and OR gates and the leaf nodes correspond to attributes. We will use &lt;equation&gt;(1,0,\ldots,0)&lt;/equation&gt; as the sharing vector for the LSSS matrix. We begin by labeling the root node of the tree with the vector (1)(a vector of length 1). We then go down the levels of the tree, labeling each node with a vector determined by the vector assigned to its parent node. We maintain a global counter variable c which is initialized to 1.&lt;br&gt;&lt;br&gt;If the parent node is an OR gate labeled by the vector v, then we also label its children by v (and the value of c stays the same). If the parent node is an AND gate labeled by the vector v, we pad v with 0’s at the end (if necessary) to make it of length c. Then we label one of its children with the vector &lt;equation&gt;(v|1)&lt;/equation&gt; (where | denotes concatenation) and the other with the vector &lt;equation&gt;(0,\dots, 0 | -1)&lt;/equation&gt;, where &lt;equation&gt;(0, \ldots, 0)&lt;/equation&gt; denotes the zero vector of length c. Note that these two vectors sum to &lt;equation&gt;(v|0)&lt;/equation&gt;. We now increment the value of c by 1. Once we have finished labeling the entire tree, the vectors labeling the leaf nodes form the rows of the LSSS matrix. If these vectors have different lengths, we pad the shorter ones with 0’s at the end to arrive at vectors of the same length.&lt;/blockquote&gt;&lt;p&gt;好了，如果我们给定一个访问控制树，就可以用上述方法进行转换了，读起来很简单的样子。不过，如何描述一个访问控制树呢？在搜索过程中，我发现了Raytheon BBN Technologis上P3S项目中的LSSS源代码。不过，这个代码虽然声称实现了LSSS，但里面有两个问题：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;没有解决我们前面提到的M矩阵变方阵的问题，在代码的utils/LSSS.java中的164行和171行注释也提到了：&lt;/li&gt;&lt;/ul&gt;&lt;code lang=&quot;text&quot;&gt;TODO: reduce attribtues to min authorized set&lt;/code&gt;&lt;ul&gt;&lt;li&gt;他们的LSSS实现基于Liu等人的方案[3]，但是不知是实现问题还是原始方案问题，这个方法在有些情况下并不能实现正确的转换。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;不过，这个代码提供了一个很好的描述访问控制树的方法，具体方法在utils/LSSS.java的注释中写明了：&lt;/p&gt;&lt;blockquote&gt;&lt;code lang=&quot;text&quot;&gt; * An access structure is represented using as an int[][] array
 * with row indexes being the node ids and each row describes a node (k of n )threshold and list of children nodes or leafs).
 * A leaf node has a negative index &amp;lt;br&amp;gt; 
 * Example: from the paper See http://eprint.iacr.org/2010/374&amp;lt;br&amp;gt;
 * int access[][]={
 *      {2,2,1,2}, //the root node 0 is a 2of2 threshold and its children are nodes 1 and 2 (at rows 1 and 2) &amp;lt;br&amp;gt;
 *      {2,1,3,4}, //node 1 is a 1of2 threshold and its children are nodes 3 and 4 &amp;lt;br&amp;gt;
 *      {4,3,-5,-6,-7,-8}, //node 2 note that -5 here correponds to index of attribute E in the alphabet&amp;lt;br&amp;gt;
 *      {2,2,-2,5}, //node 3 &amp;lt;br&amp;gt;
 *      {3,2,-3,-4,-5}, //node 4 &amp;lt;br&amp;gt;
 *      {2,1,-1,-3} //node 5 &amp;lt;br&amp;gt;
 *      }; &amp;lt;br&amp;gt;
 * The number of rows in the LSSS matrix equal to the number of leaves &amp;lt;br&amp;gt;
 * The number of cols is 1+sum_i(t_i -1) where t_i is the threshold of non leaf nodes i
 *
 * Notice that it is easy to retrieve the children of a node in order.
 * We use this structure to avoid having to construct/traverse trees especially
 * since the parent relation is not needed in the LSSS construction algorithm &amp;lt;br&amp;gt;
 *
 * Objects are immutable
 * @author jkhoury
 *
 */&lt;/code&gt;&lt;/blockquote&gt;&lt;p&gt;根据这个注释，我们前面的访问控制政策：&lt;/p&gt;&lt;equation&gt;\text{(A and B and C) and (D or E or F) and (G and H and (I or J or K or L))}&lt;/equation&gt;&lt;br&gt;&lt;p&gt;就可以写为：&lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;int[][] accessPolicy = new int[][] {
{  3,  3,  1,  2,  3,}
{  3,  3, -1, -2, -3,}
{  3,  1, -4, -5, -6,}
{  3,  3, -7, -8,  4,}
{  4,  1, -9,-10,-11,-12,}
};&lt;/code&gt;&lt;p&gt;更棒的是，这种描述方式还可以描述任意带有门限节点的访问控制政策。这为后面我们代码的扩展带来了便利。&lt;/p&gt;&lt;p&gt;最终，以李聪同学给出的代码作为参考，Lewko和Waters的LSSS方案实现放置在了&lt;a href=&quot;https://github.com/liuweiran900217/CloudCrypto/blob/master/src/main/java/cn/edu/buaa/crypto/access/lsss/lsw10/LSSSLW10Engine.java&quot; class=&quot;&quot;&gt;https://github.com/liuweiran900217/CloudCrypto/blob/master/src/main/java/cn/edu/buaa/crypto/access/lsss/lsw10/LSSSLW10Engine.java&lt;/a&gt;中。&lt;/p&gt;&lt;h2&gt;实现分析：如何解析访问控制政策&lt;/h2&gt;&lt;p&gt;在实际中，我们总不能让用户输入一个int[][]吧，这也太不方便了… 我们更希望用户能够直接输入一个用字符串表示的访问控制政策，比如直接输入：&lt;/p&gt;&lt;equation&gt;\text{(A and B and C) and (D or E or F) and (G and H and (I or J or K or L))}&lt;/equation&gt;&lt;br&gt;&lt;p&gt;我们应该提供一个工具，把这个访问控制政策直接转换成树的形式，这才方便嘛~&lt;/p&gt;&lt;p&gt;这是我们实现中遇到的第3个问题。这个问题在Bethencourt等人给出的CP-ABE中已经实现了，其方法就是用yacc自己写了个Parser...更为关键的是，他们进一步实现了数值属性，如年龄、发布时间等的解析方法，从而实现了属性的比较功能。具体代码参见：&lt;a href=&quot;http://acsc.cs.utexas.edu/cpabe/&quot;&gt;http://acsc.cs.utexas.edu/cpabe/&lt;/a&gt;。我自己还没有学过Parser，如果有朋友可以对这个C代码中的Parser进行分析，并用Java实现的话，欢迎联系我。&lt;/p&gt;&lt;p&gt;不过，我们还是能做一些事情的，如果访问控制政策中包含AND、OR，不包含数值属性的话，我们实现了一个简化版的Parser。其代码参见了李聪同学提供的Parser。对应代码为&lt;a href=&quot;https://github.com/liuweiran900217/CloudCrypto/tree/master/src/main/java/cn/edu/buaa/crypto/access/parser&quot;&gt;https://github.com/liuweiran900217/CloudCrypto/tree/master/src/main/java/cn/edu/buaa/crypto/access/parser&lt;/a&gt;。使用时，只要调用ParserUtils里面的GenerateAccessPolicy方法，就可以将一个字符串描述的访问控制政策转换为访问控制树的形式了。&lt;/p&gt;&lt;h2&gt;总结与未来展望&lt;/h2&gt;&lt;p&gt;LSSS的实现只是ABE实现的基础。因为秘密分享方案无法解决共谋攻击的问题：假设用户1拥有属性A，用户B拥有属性B，加密文件对应的访问控制政策为A and B，我们应该要求用户1和用户2合谋后仍然不能解密文件。然而，只使用秘密分享方案或者LSSS是无法解决这个问题的。这就需要借助双线性映射和密码学的思路了。有关ABE的实现，我会逐渐测试后更新到GitHub中，敬请期待。&lt;/p&gt;&lt;p&gt;不知朋友们看完这篇专栏的感受是什么？我相信，这个问题，或者类似问题的解决，肯定不是会写程序就能完成的，还需要一定的数学、英语积累，以及信息检索的能力。&lt;b&gt;我数学并不好（没有专心系统学习过数学），英语也一般般（六级450分在此，知道我其它背景的朋友们求匿，别打我…）&lt;/b&gt;，因此功能实现花费了接近1年的时间才最终找到了方法。同时，&lt;b&gt;我完全没有计算机基础（特指编译原理）&lt;/b&gt;，因此有关Parser的实现只能借助其他人的成果。相信在未来的工作中，我一定会为这些知识的缺失而付出代价。&lt;/p&gt;&lt;p&gt;所以，朋友们，如果还有人说：程序员不需要知道太多数学，英语不需要很好，你还信吗？计算机语言只是一门工具，科学问题的解决更多考察的是数学、计算机基础、英语。&lt;b&gt;如果不是这样，我们拿什么和培训机构训练出的程序员竞争呢？我们如何比它们代码写得好，写的快呢&lt;/b&gt;？我还没有说明的是，我现在才理解面向对象编程实际上是考察抽象思维的能力：总结规律，总结共通的方法和属性，通过面向对象实现代码之间的内在关系，这是面向对象的根本吧…？&lt;/p&gt;&lt;br&gt;&lt;h2&gt;参考文献&lt;/h2&gt;&lt;ol&gt;&lt;li&gt;Sahai A., Waters B.: Fuzzy identity-based encryption. EUROCRYPT 2005. Springer Berlin Heidelberg, (2005) 568-588.&lt;br&gt;&lt;/li&gt;&lt;li&gt;Beimel, A.: Secure schemes for secret sharing and key distribution. Ph.D. dissertation. Israel Institute of Technology, Technion, Haifa, Israel, 1996.&lt;/li&gt;&lt;li&gt;Liu, Z., Cao, Z., Duncan S.W.: Efficient generation of linear secret sharing scheme matrices from threshold access trees. IACR ePrint Achieve, (2010) 374.&lt;/li&gt;&lt;li&gt;Goyal, V., Pandey, A., Sahai, A., Waters, B.: Attribute-based encryption for fine-grained access control of encrypted data. CCS 2006. ACM, (2006) 89-98.&lt;/li&gt;&lt;li&gt;Bethencourt, J., Sahai, A., Waters, B.: Ciphertext-policy attribute-based encryption. S and P 2007. IEEE (2007) 321-334.&lt;/li&gt;&lt;li&gt;Shamir, A.: Identity-based cryptosystems and signature schemes. CRYPTO 1984. Springer, Berlin, Heidelberg (1985) 47-53. &lt;br&gt;&lt;/li&gt;&lt;li&gt;Shamir, A.: How to share a secret. Communications of the ACM, 1979, 22(11): 612-613.&lt;/li&gt;&lt;li&gt;Lewko, A., Waters, B.: Decentralizing attribute-based encryption. IACR Cryptology ePrint Archive, (2010) 351. &lt;a href=&quot;https://eprint.iacr.org/2010/351&quot; class=&quot;&quot;&gt;https://eprint.iacr.org/2010/351&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Lewko, A., Waters, B.: Decentralizing attribute-based encryption. EUROCRYPT 2011. Springer Berlin Heidelberg, (2011) 568-588.&lt;/li&gt;&lt;/ol&gt;</description>
<author>刘巍然-学酥</author>
<guid isPermaLink="false">2016-07-21-21664741</guid>
<pubDate>Thu, 21 Jul 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>Winter School on Cryptography 2012中英双语视频学习指南</title>
<link>https://henix.github.io/feeds/zhuanlan.datasec/2016-07-12-21560413.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/21560413&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/7e4c2d1708043756324443cd9d549bac_r.png&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;长文预警，难度预警。&lt;/p&gt;&lt;p&gt;=======分=======隔=======符=======&lt;br&gt;&lt;/p&gt;&lt;h2&gt;概述&lt;/h2&gt;这篇专栏也算是我近半年来的总结了，Winter School on Cryptography 2012 - Lattice-Based Cryptography全套视频终于完整发布了！鼓掌，撒花！&lt;p&gt;经过沟通，视频独家发布团队i春秋负责人已经开放了权限，&lt;b&gt;在手机端可以直接观看视频，无需登录&lt;/b&gt;。这也算是i春秋团队为密码学界作出的一份努力吧！不过，我刚才试了一下，好像还是有点问题，我会继续反馈，请i春秋团队修复问题的。电脑端观看的话，还是需要登录。不过，我个人认为i春秋中的相关课程是非常有价值的。大多数课程，尤其是著名的黑客大会DEF CON、Black Hat等视频都是免费发布的。如果想进一步学习的话，可以注册一下。我个人也参与了Black Hat 2014、Black 2015、DEF CON 23 - BioHacking、DEF CON 23 - Crypto等大会演讲的听译工作。相关视频的分析也可以在我的专栏文章中找到，有兴趣的朋友们可以多多关注，我认为干货满满。&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/f457a7cfccec3a8179e08bba65a78489_r.png&quot; data-rawwidth=&quot;841&quot; data-rawheight=&quot;255&quot;&gt;&lt;p&gt;回到本篇专栏涉及的视频中来。到目前为止，本系列视频已经有1.7万观众观看，即便没有进行广泛的宣传，其在学科内也已经产生了一定的影响。当然了，由于听译人员（包括我自己）水平有限，字幕中难免有一些疏忽或者错误，如果有任何问题，欢迎通过邮件联系我：footman_900217@126.com。我很愿意力所能及地回答朋友们提出的问题。不过，由于我个人并不是Lattice-Based Cryptography（LBC）领域的研究者，并没有精读LBC相关的论文，因此一些具体问题我可能无力回答，还请朋友们多多包涵。&lt;/p&gt;&lt;p&gt;本篇专栏的撰写，一方面是回顾一下全部视频的制作过程，感谢所有参与视频制作，为视频的成功完成付出努力的人员们。另一方面，作为全套视频的翻译和校对人员，我也想给出一个简要的视频观看指南，希望有志于学习并研究LBC的朋友们能够以本套视频作为入门，更平滑地进入这一领域。&lt;br&gt;&lt;/p&gt;&lt;p&gt;本系列视频的最终完成，离不开朋友们的大力支持！&lt;/p&gt;&lt;ul&gt;&lt;li&gt;感谢i春秋团队&lt;a href=&quot;https://www.zhihu.com/people/f132733706a33886bc8d1f2eea5c3651&quot; data-hash=&quot;f132733706a33886bc8d1f2eea5c3651&quot; class=&quot;member_mention&quot; data-title=&quot;@雅弛&quot; data-editable=&quot;true&quot; data-tip=&quot;p$b$f132733706a33886bc8d1f2eea5c3651&quot;&gt;@雅弛&lt;/a&gt;同学的支持，没有她的支持，我们也没有动力完成这一系列视频的翻译和发布工作。和&lt;a href=&quot;https://www.zhihu.com/people/f132733706a33886bc8d1f2eea5c3651&quot; data-hash=&quot;f132733706a33886bc8d1f2eea5c3651&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@雅弛&quot; data-tip=&quot;p$b$f132733706a33886bc8d1f2eea5c3651&quot;&gt;@雅弛&lt;/a&gt;同学愉快地合作了将近1年，未来我们还会继续合作下去，为朋友们推出更精致的视频听译。&lt;br&gt;&lt;/li&gt;&lt;li&gt;感谢阿尔法小分队科教组成员&lt;a href=&quot;https://www.zhihu.com/people/230da628270e493d4aefb74157c79289&quot; data-hash=&quot;230da628270e493d4aefb74157c79289&quot; class=&quot;member_mention&quot; data-title=&quot;@吴诗湄&quot; data-editable=&quot;true&quot; data-tip=&quot;p$b$230da628270e493d4aefb74157c79289&quot;&gt;@吴诗湄&lt;/a&gt; ，也就是MW同学的帮助。全部视频的时间轴都是由&lt;a href=&quot;https://www.zhihu.com/people/230da628270e493d4aefb74157c79289&quot; data-hash=&quot;230da628270e493d4aefb74157c79289&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@吴诗湄&quot; data-tip=&quot;p$b$230da628270e493d4aefb74157c79289&quot;&gt;@吴诗湄&lt;/a&gt;同学一帧一帧拉出来的，辛苦了！&lt;/li&gt;&lt;li&gt;感谢&lt;a href=&quot;https://www.zhihu.com/people/dd331d75c50e28dd9e719ba2c6a0594a&quot; data-hash=&quot;dd331d75c50e28dd9e719ba2c6a0594a&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@scalers&quot; data-tip=&quot;p$b$dd331d75c50e28dd9e719ba2c6a0594a&quot;&gt;@scalers&lt;/a&gt;的ScalersTalk听力狂练小组同学们的帮助。视频的听译量非常大，仅凭我个人的能力是无法完成整个视频制作的。&lt;a href=&quot;https://www.zhihu.com/people/dd331d75c50e28dd9e719ba2c6a0594a&quot; data-hash=&quot;dd331d75c50e28dd9e719ba2c6a0594a&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@scalers&quot; data-tip=&quot;p$b$dd331d75c50e28dd9e719ba2c6a0594a&quot;&gt;@scalers&lt;/a&gt;同学发动了听力狂练小组的精英们，协助我进行了多个困难视频的听写工作。未来我们还会继续合作，完成更多视频的听写和翻译工作，也欢迎有志向的同学一起加入！&lt;/li&gt;&lt;li&gt;感谢知乎密码学交流群全体成员的支持，没有大家的支持和鼓励，可能我们真的无法坚持到最后。感谢交流群联合创建人&lt;a href=&quot;https://www.zhihu.com/people/9cec268fa4cf3647f54f57703f8cc3d8&quot; data-hash=&quot;9cec268fa4cf3647f54f57703f8cc3d8&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@玄星&quot; data-tip=&quot;p$b$9cec268fa4cf3647f54f57703f8cc3d8&quot;&gt;@玄星&lt;/a&gt;同学、管理员&lt;a href=&quot;https://www.zhihu.com/people/871ce326f127d5dc7ce228d84956b517&quot; data-hash=&quot;871ce326f127d5dc7ce228d84956b517&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@Qian Chen&quot; data-tip=&quot;p$b$871ce326f127d5dc7ce228d84956b517&quot;&gt;@Qian Chen&lt;/a&gt;同学、&lt;a href=&quot;https://www.zhihu.com/people/6ca0bd71e48a8988b203d88a5d78b394&quot; data-hash=&quot;6ca0bd71e48a8988b203d88a5d78b394&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@刘健&quot; data-tip=&quot;p$b$6ca0bd71e48a8988b203d88a5d78b394&quot;&gt;@刘健&lt;/a&gt;同学、以及很多很多现在在群里都已经实名称呼，我实在艾特不出来的各位朋友们，辛苦大家了！&lt;/li&gt;&lt;li&gt;还要感谢许许多多为视频做出过努力的朋友们，包括帮助我校对部分视频的师弟@海文同学，宽宏大量的阿尔法小分队老大&lt;a href=&quot;https://www.zhihu.com/people/da5e94dc7ded5c39b61ea519ec51a1c5&quot; data-hash=&quot;da5e94dc7ded5c39b61ea519ec51a1c5&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@Lzghome&quot; data-tip=&quot;p$b$da5e94dc7ded5c39b61ea519ec51a1c5&quot;&gt;@Lzghome&lt;/a&gt;（把御用时间轴抢了，实在抱歉…）；一直默默支持我工作，可能以后会经常虐我的神秘人&lt;a href=&quot;https://www.zhihu.com/people/d9a3fab8b46aff9a73dfe5e6e3a336f9&quot; data-hash=&quot;d9a3fab8b46aff9a73dfe5e6e3a336f9&quot; class=&quot;member_mention&quot; data-title=&quot;@张茂森&quot; data-editable=&quot;true&quot; data-tip=&quot;p$b$d9a3fab8b46aff9a73dfe5e6e3a336f9&quot;&gt;@张茂森&lt;/a&gt;大V（我错了…不过FHE真不靠谱，我这就去看DP，别打我…），等等等等。要是有遗漏，一定要私信我啊~&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;p&gt;=======分=======隔=======符=======&lt;/p&gt;&lt;h2&gt;视频简介&lt;/h2&gt;&lt;p&gt;位于以色列的Bar-Ilan University（&lt;a href=&quot;http://crypto.biu.ac.il/&quot; class=&quot;&quot;&gt;http://crypto.biu.ac.il/&lt;/a&gt;）自2011年起，每年冬季都举办一次题为BIU Winter School的冬令营活动。各次冬令营都邀请密码学和安全领域的著名学者进行为期3天的主题演讲。本系列视频是2012年第2届BIU Winter School活动，主题为《Lattice-Based Cryptography and Applications》，即“格密码学及其应用”，链接：&lt;a href=&quot;http://crypto.biu.ac.il/2nd-biu-winter-school&quot; class=&quot;&quot; data-editable=&quot;true&quot; data-title=&quot;2nd BIU Winter School _ Cryptography Research Group&quot;&gt;2nd BIU Winter School _ Cryptography Research Group&lt;/a&gt;。&lt;u&gt;&lt;b&gt;相关幻灯片和视频连接也可以在此网站中找到&lt;/b&gt;&lt;/u&gt;。&lt;/p&gt;&lt;p&gt;冬令营结束后，Bar-Ilan University都会将全套视频发布在YouTube上，供全世界的研究者们学习，链接：&lt;a href=&quot;https://www.youtube.com/watch?v=4ulHOV8iLls&amp;amp;list=PL149BD5341FDF6641&quot; class=&quot;&quot; data-title=&quot;Winter School on Cryptography 2012&quot; data-editable=&quot;true&quot;&gt;Winter School on Cryptography 2012&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;视频中英双语翻译版本委托i春秋平台独家发布，&lt;a href=&quot;http://www.ichunqiu.com/course/50433&quot; class=&quot;&quot; data-editable=&quot;true&quot; data-title=&quot;世界上最顶级的密码学课程_公开课_i春秋学院_培育信息时代的安全感&quot;&gt;世界上最顶级的密码学课程_公开课_i春秋学院_培育信息时代的安全感&lt;/a&gt;。要注意的是，由于YouTube视频发布的顺序并非为演讲的真实顺序，我们在i春秋视频中进行了相应的调整，因此列表中的课程顺序和Winter School on Cryptography 2012中的顺序有些许不同，不过并不影响观看。i春秋发布视频顺序对应YouTube视频顺序如下：&lt;/p&gt;&lt;li&gt;1.1：&lt;a href=&quot;http://www.ichunqiu.com/section/50439&quot; class=&quot;&quot; data-editable=&quot;true&quot; data-title=&quot;基于密码学中格的基础知识相关介绍&quot;&gt;基于密码学中格的基础知识相关介绍&lt;/a&gt; - 1. Introduction to Lattices, Oded Regev&lt;/li&gt;&lt;li&gt;1.2：&lt;a href=&quot;http://www.ichunqiu.com/section/50441&quot; class=&quot;&quot; data-editable=&quot;true&quot; data-title=&quot;基于格上最小整数解的密码研究&quot;&gt;基于格上最小整数解的密码研究&lt;/a&gt; - 3. Reduction for SIS, Vadim Lyubashevsky&lt;/li&gt;&lt;li&gt;1.3：&lt;a href=&quot;http://www.ichunqiu.com/section/50443&quot; class=&quot;&quot; data-editable=&quot;true&quot; data-title=&quot;Learning With Errors困难问题&quot;&gt;Learning With Errors困难问题&lt;/a&gt; - 2. Learning With Errors, Chris Peikert&lt;/li&gt;&lt;li&gt;1.4：&lt;a href=&quot;http://www.ichunqiu.com/section/51789&quot; class=&quot;&quot; data-editable=&quot;true&quot; data-title=&quot;基本的密码分析&quot;&gt;基本的密码分析&lt;/a&gt; - 6. Basic Cryptanalysis, Vadim Lyubashevsky&lt;/li&gt;&lt;li&gt;1.5：&lt;a href=&quot;http://www.ichunqiu.com/section/52469&quot; class=&quot;&quot; data-editable=&quot;true&quot; data-title=&quot;理想格及其应用&quot;&gt;理想格及其应用&lt;/a&gt; - 8. Ideal Lattices and Applications, Vadim Lyubashevsky&lt;/li&gt;&lt;li&gt;1.6：&lt;a href=&quot;http://www.ichunqiu.com/section/52471&quot; class=&quot;&quot; data-editable=&quot;true&quot; data-title=&quot;Somewhat同态加密&quot;&gt;Somewhat同态加密&lt;/a&gt; - 7. Fully Homomorphic Encryption, Craig Gentry&lt;/li&gt;&lt;li&gt;1.7：&lt;a href=&quot;http://www.ichunqiu.com/section/50437&quot; class=&quot;&quot; data-editable=&quot;true&quot; data-title=&quot;根据方案效率介绍格密码学的历史&quot;&gt;根据方案效率介绍格密码学的历史&lt;/a&gt; - 11. A History of Lattice-Based Encryption, Vadim Lyubashevsky&lt;/li&gt;&lt;li&gt;1.8：&lt;a href=&quot;http://www.ichunqiu.com/section/53547&quot; class=&quot;&quot; data-editable=&quot;true&quot; data-title=&quot;GGH与NTRU签名方案的安全性分析&quot;&gt;GGH与NTRU签名方案的安全性分析&lt;/a&gt; - 5. Cryptanalysis of GGH and NTRU Signatures, Oded Regev&lt;/li&gt;&lt;li&gt;1.9：&lt;a href=&quot;http://www.ichunqiu.com/section/53863&quot; class=&quot;&quot; data-editable=&quot;true&quot; data-title=&quot;LWE问题的困难性证明&quot;&gt;LWE问题的困难性证明&lt;/a&gt; - 10. Proving Hardness of LWE, Oded Regev&lt;/li&gt;&lt;li&gt;1.10：&lt;a href=&quot;http://www.ichunqiu.com/section/52251&quot; class=&quot;&quot; data-editable=&quot;true&quot; data-title=&quot;基于格的陷门函数及其应用&quot;&gt;基于格的陷门函数及其应用&lt;/a&gt; - 4. Trapdoors and Applications, Chris Peikert&lt;/li&gt;&lt;li&gt;1.11：&lt;a href=&quot;http://www.ichunqiu.com/section/53433&quot; class=&quot;&quot; data-editable=&quot;true&quot; data-title=&quot;全同态加密方案&quot;&gt;全同态加密方案&lt;/a&gt; - 12. Fully Homomorphic Encryption, Craig Gentry&lt;/li&gt;&lt;li&gt;1.12：&lt;a href=&quot;http://www.ichunqiu.com/section/52773&quot; class=&quot;&quot; data-title=&quot;同态加密中的Bootstrapping步骤&quot; data-editable=&quot;true&quot;&gt;同态加密中的Bootstrapping步骤&lt;/a&gt; - 9. Fully Homomorphic Encryption and the Bootstrapping, Craig Gentry&lt;/li&gt;&lt;p&gt;=======分=======隔=======符=======&lt;/p&gt;&lt;h2&gt;演讲者简介&lt;/h2&gt;&lt;p&gt;四位演讲者分别为Oded Regev，Vadim Lyubashevsky，Chris Peikert，Graig Gentry，均为格密码学奠基性人物，其简单介绍如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Oded Regev（&lt;a href=&quot;http://www.cims.nyu.edu/~regev/&quot; class=&quot;&quot;&gt;http://www.cims.nyu.edu/~regev/&lt;/a&gt;）：现为Courant Institute of Mathematical Sciences, New York University的讲师（应该还没升到教授）。2005年，Oded Regev提出了Learning With Errors这一格密码学的重要安全假设，开创了可证明安全格加密方案领域。&lt;/li&gt;&lt;li&gt;Vadim Lyubashevsky（&lt;a href=&quot;http://www.di.ens.fr/~lyubash/&quot; class=&quot;&quot;&gt;http://www.di.ens.fr/~lyubash/&lt;/a&gt;）：现为IBM Research - Zurich的研究员。2010年，Vadim Lyubashevsky提出了基于理想格（Ideal Lattice）的Learning With Errors假设，后续学者可基于此假设构造非常高效的格加密方案。&lt;/li&gt;&lt;li&gt;Chris Peikert（&lt;a href=&quot;http://web.eecs.umich.edu/~cpeikert/&quot; class=&quot;&quot;&gt;http://web.eecs.umich.edu/~cpeikert/&lt;/a&gt;）：现为Computer Science and Engineering，University of Michigan的副教授。2008年，Chris Peikert基于格构造了一个陷门函数这一重要的密码学原语，这使得格密码学真正成为了学者们的主流研究方向。&lt;/li&gt;&lt;li&gt;Graig Gentry（&lt;a href=&quot;https://www.macfound.org/fellows/914/&quot;&gt;https://www.macfound.org/fellows/914/&lt;/a&gt;）：现为IBM Thomas J. Watson Research Center研究员。2009年，Graig Gentry基于理想格构造了全同态加密方案，从而解决了20年来密码学的公开问题。到现在为止，全同态加密方案依然为密码学界的研究热点。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;=======分=======隔=======符=======&lt;/p&gt;&lt;h2&gt;观看指南&lt;/h2&gt;&lt;p&gt;前面啰啰嗦嗦说了那么一大堆，终于到观看指南了~ 不过因为长度有限，我只能简单介绍下各个视频的讲解内容，以及相关的核心论文。要注意的是，视频的讲解时间相对来说还是比较短的，有很多具体的细节问题在讲座中都没有具体涉及。在此我会补充相关的链接和论文。朋友们在学习格密码学时，可以以视频作为主线学习，但一定注意：&lt;b&gt;视频只是概述，想要深入了解，一定要精读&lt;u&gt;所有涉及的论文&lt;/u&gt;&lt;/b&gt;。科研没有可以偷懒的任何机会，任何一个不清楚的地方，都会在自己的论文写作中赤裸裸地展示出来。&lt;/p&gt;&lt;p&gt;那么，这个视频的意义在哪里呢？对于刚接触这一领域的人来说，所有的知识都是新的、没有遇到的，在阅读论文、学习相关方案的时候难免会顾此失彼。视频所讲解的内容就是论文的核心贡献。也就是说，视频的讲解会帮助你抓住核心点，以免在阅读论文时偏离了主线。经过测试后，我的师弟@海文同学告诉我，观看视频后再阅读论文，就能大概把握住论文的脉络，不会因为个别知识点的丢失而进一步放开了论文的主脉络。&lt;/p&gt;&lt;p&gt;不过，为什么要研究格密码学呢？我们简要给出3个核心理由：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;基于格构造的全同态加密方案，在未来很可能成为云计算的基础密码学工具。这一年我也前往了一些展览和会场进行参观，很多企业都声称其在研究全同态加密。但经过交流后我发现大多数企业的研究结果都不理想。这也是我制作这个视频的核心原因，目的在于向感兴趣的朋友们真正展示全同态加密。有关全同态加密的概念，参见我的答案：&lt;a href=&quot;https://www.zhihu.com/question/27645858/answer/37598506&quot; class=&quot;&quot; data-editable=&quot;true&quot; data-title=&quot;同态加密的实现原理是什么？在实际中有何应用？ - 刘巍然-学酥的回答&quot;&gt;同态加密的实现原理是什么？在实际中有何应用？ - 刘巍然-学酥的回答&lt;/a&gt;&lt;/li&gt;&lt;li&gt;可能很多朋友们已经知道，量子计算正逐渐走入人们的事业。量子计算的实现，意味着从理论上，基于大整数分解的RSA方案、基于离散对数问题的Diffie-Hellman等方案都不再安全。而格密码学将成为候选抗量子计算攻击的密码学方案。因此，未来对于格密码学的研究势必会越来越深入。有关量子计算的最直观概述，参见阿尔法小分队科教组推出的视频：&lt;a href=&quot;http://www.bilibili.com/video/av3553667/&quot; class=&quot;&quot; data-editable=&quot;true&quot; data-title=&quot;【中字】量子是什么？量子计算机又是什么？&quot;&gt;【中字】量子是什么？量子计算机又是什么？&lt;/a&gt;。有关量子密码学的介绍，参见DEF CON 23 - Crypto的视频：&lt;a href=&quot;https://www.youtube.com/watch?v=1Fp6ibfOQ4Y&amp;amp;list=PL9fPq3eQfaaDK_Lk1DtcxD5X8MoubaBJ_&amp;amp;index=13&quot; class=&quot;&quot; data-title=&quot;DEF CON 23 - Crypto and Privacy Village - Marina - Hacking Quantum Cryptography&quot; data-editable=&quot;true&quot;&gt;DEF CON 23 - Crypto and Privacy Village - Marina - Hacking Quantum Cryptography&lt;/a&gt;。此视频我已经听译完毕，未来也会在i春秋发布。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;由于这一系列视频是2012年录制的，因此视频中最新的参考文献也就截止到2012年。不过对于想学习格密码学，以及全同态加密的朋友们来说，这些论文都是基础中的基础。有关最新的研究成果，请在相关会议论文集（STOC、FOCS、CRYPTO、EUROCRYPT）中检索，或查看视频中核心论文的引用文献。&lt;/p&gt;&lt;h2&gt;1.1：基于密码学中格的基础知识相关介绍&lt;/h2&gt;&lt;p&gt;视频链接：&lt;a href=&quot;http://www.ichunqiu.com/section/50439&quot; class=&quot;&quot;&gt;http://www.ichunqiu.com/section/50439&lt;/a&gt;&lt;/p&gt;&lt;p&gt;第一个视频是格相关知识的介绍。这一部分的内容讲解的非常粗浅，目的是让听众能够对格和格密码学有个基本的概念。这一视频没有对应的论文。如果希望进一步了解格的相关知识，Oded Regev本人的Lecture Notes是个非常好的切入点，其链接为：&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//www.cims.nyu.edu/%7Eregev/teaching/lattices_fall_2009/index.html&quot; class=&quot;&quot; data-editable=&quot;true&quot; data-title=&quot;Lattices in Computer Science (Fall 2009)&quot;&gt;Lattices in Computer Science (Fall 2009)&lt;/a&gt;。配合一本经典的教材《Lecture Notes: Lattices and Their Application to Cryptography》（&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//www.math.ucdavis.edu/%7Edeloera/MISC/BIBLIOTECA/trunk/Dwork/gitter.ps&quot; class=&quot;&quot; data-editable=&quot;true&quot; data-title=&quot;Lecture Notes: Lattices and Their Application to Cryptography&quot;&gt;Lecture Notes: Lattices and Their Application to Cryptography&lt;/a&gt;），对于格的相关知识就基本够了。&lt;/p&gt;&lt;h2&gt;1.2：基于格上最小整数解的密码研究&lt;br&gt;&lt;/h2&gt;&lt;p&gt;视频链接：&lt;a href=&quot;http://www.ichunqiu.com/section/50441&quot;&gt;http://www.ichunqiu.com/section/50441&lt;/a&gt;&lt;/p&gt;&lt;p&gt;格至今有两个非常重要的困难问题及其对应的安全假设。这两个困难问题分别对应格密码学的两个发展方向。第一个问题就是最小整数解问题（Small Integer Solution，SIS）。本视频介绍了SIS问题，以及SIS问题的困难性证明。同时，视频中也介绍了在格密码学中经常使用的Gaussian Distribution。如果说第一个视频是格入门的必备，那么本视频是格密码学入门的必备。&lt;/p&gt;&lt;p&gt;本视频对应的核心论文为：&lt;/p&gt;&lt;p&gt;Daniele Micciancio, Oded Regev. Worst-Case to Average-Case Reductions Based on Gaussian Measures. SIAM Journal on Computing, 2007, 37(1): 267-302. Preliminary version in Proceedings of FOCS 2004.&lt;/p&gt;&lt;p&gt;本篇论文比较偏重于数学，对于密码学研究者来说，主要把握的是论文中给出的结论，对于证明部分，可以作为补充内容参考。&lt;/p&gt;&lt;h2&gt;1.3：Learning With Errors困难问题&lt;/h2&gt;&lt;p&gt;视频链接：&lt;a href=&quot;http://www.ichunqiu.com/section/50443&quot; class=&quot;&quot;&gt;http://www.ichunqiu.com/section/50443&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;前面说到，格密码学中的第一个重要问题是SIS问题，那么第二个重要问题就是Learning With Errors（LWE）问题了。利用LWE问题，可以构造可证明安全的格加密方案。这是格密码学的重大进步。本视频讲解了LWE问题的定义，以及如何利用LWE问题构造可证明安全的公钥加密方案。&lt;/p&gt;&lt;p&gt;要注意的是，这个视频并没有涉及LWE问题的困难归约，换句话说，没有证明为什么LWE问题是困难的。LWE困难性的证明是整个系列讲座中最困难的部分，在“1.9：LWE问题的困难性证明”中，Oded Regev花费了90多分钟的时间讲解了相关的内容。&lt;/p&gt;&lt;p&gt;本视频对应的核心论文为：&lt;/p&gt;&lt;p&gt;Oded Regev. On Lattices, Learning With Errors, Random Linear Codes, and Cryptography. Journal of the ACM, 2009, 56(6): 34. Preliminary version in Proceedings of STOC 2005.&lt;/p&gt;&lt;p&gt;Abhishek Banerjee, Chris Peikert, Alon Rosen. Pseudorandom Functions and Lattices. EUROCRYPT 2012, pp. 719-737.&lt;/p&gt;&lt;h2&gt;1.4：基本的密码分析&lt;/h2&gt;&lt;p&gt;视频链接：&lt;a href=&quot;http://www.ichunqiu.com/section/51789&quot; class=&quot;&quot;&gt;http://www.ichunqiu.com/section/51789&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;格密码学和基于离散对数问题、基于大整数分解问题等的密码学的根本区别是，格密码学中涉及到格维度m和n、模数p等诸多参数，各个参数之间的关系会严重影响方案的安全性，有时甚至导致方案是可证明不安全的。本视频讲解了格密码学中参数的基本设置方法。在学习和研究中，请朋友们一定仔细思考格中的所有参数设置方式，避免构造不安全的方案。&lt;/p&gt;&lt;p&gt;本视频同时讲解了格中最为重要的一个算法，称为LLL算法。在Oded Regev的Lecture Notes有LLL算法的详细讲解。如果朋友们之前阅读了Lecture Notes，可以只听本视频的后半部分。&lt;/p&gt;&lt;p&gt;本视频对应的核心论文为：&lt;/p&gt;&lt;p&gt;Nicolas Gama, Phong Q. Nguyen. Predicting Lattice Reduction. EUROCRYPT 2008, pp. 31-51.&lt;/p&gt;&lt;h2&gt;1.5：理想格及其应用&lt;/h2&gt;&lt;p&gt;视频链接：&lt;a href=&quot;http://www.ichunqiu.com/section/52469&quot; class=&quot;&quot;&gt;http://www.ichunqiu.com/section/52469&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;理想格（Ideal Lattice）以及与之相关的Ring-LWE困难问题可以用来构造效率更高的格加密和签名方案，这是因为利用环的特性可以扩展明文空间，或者说用相同长度的参数包含更多的信息。这一视频讲解了理想格的概念，Ring-LWE困难问题，以及Ring-LWE问题的困难归约。&lt;/p&gt;&lt;p&gt;本视频对应的核心论文为：&lt;/p&gt;&lt;p&gt;Vadim Lyubashevsky, Chris Peikert, Oded Regev. On Ideal Lattices and Learning With Errors over Rings. Journal of the ACM, 2013, 60(6): 1-23. Preliminary version in Proceedings of EUROCRYPT 2010.&lt;/p&gt;&lt;h2&gt;1.6：Somewhat同态加密&lt;/h2&gt;&lt;p&gt;视频链接：&lt;a href=&quot;http://www.ichunqiu.com/section/52471&quot; class=&quot;&quot;&gt;http://www.ichunqiu.com/section/52471&lt;/a&gt;&lt;/p&gt;&lt;p&gt;经过了一系列的铺垫，终于轮到Gentry讲解全同态加密方案了！不过在讲解全同态加密方案之前，我们首先需要了解同态加密方案的构造原理，以及Somewhat同态加密。Somewhat同态加密的概念是，可以对密文进行同态加法和同态乘法操作，但是操作的总次数受到限制。注意这里要区分Somewhat同态加密和半同态加密这两个概念：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;半同态加密：只允许对密文进行加法&lt;b&gt;或&lt;/b&gt;乘法操作。&lt;/li&gt;&lt;li&gt;Somewhat同态加密：允许对密文进行加法&lt;b&gt;和&lt;/b&gt;乘法操作，只不过操作次数受限。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;可以说，Somewhat同态加密已经接近全同态加密了，并且在大多数情况下，使用Somewhat同态加密已经可以满足一定的实际应用需求。更进一步，虽然学术界先构造了全同态加密，后构造了Somewhat同态加密，但在后续研究过程中发现，Somewhat同态加密依然是全同态加密的基础（需要在Somewhat同态加密上增加Boostrapping步骤，或modular reduction步骤，从而构造全同态加密）。因此，我个人推荐先学习Somewhat同态加密。&lt;/p&gt;&lt;p&gt;本视频对应的论文很多，Gentry讲解了多个Somewhat同态加密方案，不过最核心的方案为：&lt;/p&gt;&lt;p&gt;Zvika Brakerski, Vinod Vaikuntanathan. Fully Homomorphic Encryption from Ring-LWE and Security for Key Dependent Messages. CRYPTO 2011, pp. 505-524.&lt;/p&gt;&lt;p&gt;Zvika Brakerski, Vinod Vaikuntanathan. Efficient Fully Homomorphic Encryption from (Standard) LWE. FOCS 2011, pp. 97-106.&lt;/p&gt;&lt;br&gt;&lt;h2&gt;1.7：根据方案效率介绍格密码学的历史&lt;/h2&gt;&lt;p&gt;视频链接：&lt;a href=&quot;http://www.ichunqiu.com/section/50437&quot;&gt;http://www.ichunqiu.com/section/50437&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;如果朋友们不太想了解全同态加密方案，只对格密码学方案感兴趣的话，那么这个视频就非常适合你了。Vadim从方案效率的角度，梳理了格密码学的发展历史。这个视频也可以看成是一个非常不错的综述讲座。整个讲座也不是很烧脑，推荐所有对密码学感兴趣的朋友们观看。&lt;/p&gt;&lt;p&gt;由于是综述论文，本视频对应的论文就比较多了。不过相关论文都可以在讲义的最后一页找到，并且绝大多数论文都是我们前面提到过的核心论文。&lt;/p&gt;&lt;h2&gt;1.8：GGH与NTRU签名方案的安全性分析&lt;/h2&gt;&lt;p&gt;视频链接：&lt;a href=&quot;http://www.ichunqiu.com/section/53547&quot;&gt;http://www.ichunqiu.com/section/53547&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;这个讲座相对来说和其他讲座的内容有所不同。其他讲座大多是构造安全的格密码学方案，而这个讲座讲解的是如何破解格签名方案。这个工作是Oded Regev在2006年完成的，这个工作的发布意味着NTRU这一进入了IEEE标准的签名方案正式退出了历史舞台。有关这个方案的相关故事，参见我的知乎答案：&lt;a href=&quot;https://www.zhihu.com/question/47316089/answer/105413118?from=profile_answer_card&quot; class=&quot;&quot; data-editable=&quot;true&quot; data-title=&quot;在有限专家间评议加密算法是不是比直接公开更安全？ - 刘巍然-学酥的回答&quot;&gt;在有限专家间评议加密算法是不是比直接公开更安全？ - 刘巍然-学酥的回答&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;本视频对应的核心论文为：&lt;br&gt;&lt;/p&gt;&lt;p&gt;Oded Regev, Phong Q. Nguyen. Learning a Parallelepiped: Cryptanalysis of GGH and NTRU Signatures. Journal of Cryptology, 2009, 22(2): 139-160. Preliminary version in Proceedings of EUROCRYPT 2006.&lt;/p&gt;&lt;h2&gt;1.9：LWE问题的困难性证明&lt;/h2&gt;&lt;p&gt;视频链接：&lt;a href=&quot;http://www.ichunqiu.com/section/53863&quot; class=&quot;&quot;&gt;http://www.ichunqiu.com/section/53863&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;我个人认为这是所有视频中最烧脑的两个视频之一了。Oded Regev花费了90多分钟的时间讲解了如何使用量子算法将LWE问题归约到格上的最糟糕情况困难问题。这个视频也是我们听的最痛苦的… Oded Regev本来法国口音就重，讲的又那么难… 不过根据师弟@海文的反馈，看过这个视频后，回过头来再看原始论文，整个思路会清晰很多。所以如果LWE原始论文看着太头痛的话，不妨先看看这个视频，没准会有一些启迪呢？&lt;/p&gt;&lt;p&gt;本视频对应的核心论文为：&lt;/p&gt;&lt;p&gt;Oded Regev. On Lattices, Learning With Errors, Random Linear Codes, and Cryptography. Journal of the ACM, 2009, 56(6): 34. Preliminary version in Proceedings of STOC 2005.&lt;/p&gt;&lt;h2&gt;1.10：基于格的陷门函数及其应用&lt;/h2&gt;&lt;p&gt;视频链接：&lt;a href=&quot;http://www.ichunqiu.com/section/52251&quot;&gt;http://www.ichunqiu.com/section/52251&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;如果朋友有一定密码学基础的话，一定会知道陷门函数在公钥密码学中的重要性了。利用陷门函数可以直接构造随机预言模型下可证明安全的签名方案！迄今为止，我们找到的有效陷门函数都是依赖于大整数分解问题的（RSA就是最典型的一个）。所以，利用RSA和哈希函数所构造出的签名方案是可证明安全的，这也是为什么RSA签名方案依然活跃在互联网中的原因了。&lt;/p&gt;&lt;p&gt;但是，随着量子算法的提出，我们可以认为这些陷门函数都不再安全。利用格，虽然无法构造严格意义上的陷门函数，但是可以构造条件稍微宽松些的陷门函数（称为Preimage Sampleable Trapdoor Function），这类陷门函数依然可以构造随机预言模型下可证明安全的签名方案。同时，利用这一陷门函数，我们还可以利用格构造基于身份的加密方案（Identity-Based Encryption，IBE），以及基于层次身份的加密方案（Hierarchical Identity-Based Encryption，HIBE），这打破了仅能通过双线性映射构造（H）IBE的限制。&lt;/p&gt;&lt;p&gt;不过我个人觉得，这个视频的核心仍然是陷门函数的构造。理解了陷门函数，签名方案、（H）IBE方案的构造就非常直观了。&lt;/p&gt;&lt;p&gt;本视频对应的核心论文为：&lt;/p&gt;&lt;p&gt;Graig Gentry, Chris Peikert, Vinod Vaikuntanathan. Trapdoors for Hard Lattices and New Cryptographic Constructions. Electronic Colloquium on Computational Complexity, 2015, 14: 197-206. Preliminary version in Proceedings of STOC 2008.&lt;/p&gt;&lt;h2&gt;1.11：全同态加密方案&lt;/h2&gt;&lt;p&gt;视频链接：&lt;a href=&quot;http://www.ichunqiu.com/section/53433&quot; class=&quot;&quot;&gt;http://www.ichunqiu.com/section/53433&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;我个人认为这是所有视频中最烧脑的两个视频中的第二个了。Gentry在这个视频中讲解了从Somewhat同态加密方案构造全同态加密方案的核心技术：Modulus Reduction技术，Bootstrapping技术。同时，Gentry还穿插讲解了各种脑洞大开或者理论上可行的全同态加密方案。我个人认为朋友们需要重点关注的方案有：&lt;/p&gt;&lt;p&gt;Zvika Brakerski, Craig Gentry, Vinod Vaikuntanathan. Fully Homomorphic Encryption without Bootstrapping. ACM Transactions on Computation Theory, 2011, 18(18): 169-178.&lt;/p&gt;&lt;p&gt;Zvika Brakerski, Vinod Vaikuntanathan. Efficient Fully Homomorphic Encryption from (Standard) LWE.. FOCS 2011, pp. 97-106.&lt;/p&gt;&lt;h2&gt;1.12：同态加密中的Bootstrapping步骤&lt;/h2&gt;&lt;p&gt;视频链接：&lt;a href=&quot;http://www.ichunqiu.com/section/52773&quot; class=&quot;&quot;&gt;http://www.ichunqiu.com/section/52773&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Bootstrapping步骤相对来说比较复杂，Gentry单独花费了60分钟的时间深入分析了其原始论文中的Bootstrapping思想。遗憾的是，这个讲座的幻灯片似乎没有地方可以下载，所以朋友们只能看视频了…如果想详细了解Bootstrapping步骤的话，可以粗读一下Gentry的全同态加密方案原始论文：&lt;/p&gt;&lt;p&gt;Craig Gentry. Fully Homomorphic Encryption using Ideal Lattices. STOC 2009, pp: 169-178.&lt;/p&gt;&lt;p&gt;=======分=======隔=======符=======&lt;br&gt;&lt;/p&gt;&lt;p&gt;至此，系列视频的各个核心内容和所对应的核心论文已经梳理完毕。格密码学和全同态加密是非常有趣也非常有意义的研究方向。我个人衷心希望未来的工业界能够逐渐使用全同态加密方案作为云计算安全的基础方案。当然了，在未来的工作中我也会继续深入了解前沿发展。&lt;/p&gt;&lt;p&gt;再次向所有为科学奋斗的学者们致敬！&lt;/p&gt;</description>
<author>刘巍然-学酥</author>
<guid isPermaLink="false">2016-07-12-21560413</guid>
<pubDate>Tue, 12 Jul 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>信息安全体系的“术”：“术”的详解</title>
<link>https://henix.github.io/feeds/zhuanlan.datasec/2016-07-02-21355001.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/21355001&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/353001c05a8ec7f59b0b081cd96c0e95_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;多图预警，长文预警，难度预警。阅览过程中如发现不适，恳请休息，休息一下…&lt;/p&gt;&lt;p&gt;=======分=======隔=======符=======&lt;/p&gt;&lt;h2&gt;前言&lt;/h2&gt;&lt;p&gt;本篇文章为《信息安全体系的“术”》系列专栏文章。本系列专栏文章由&lt;a href=&quot;https://www.zhihu.com/people/d543743c88797978a0a8c453f8768974&quot; data-hash=&quot;d543743c88797978a0a8c453f8768974&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@刘巍然-学酥&quot; data-tip=&quot;p$b$d543743c88797978a0a8c453f8768974&quot;&gt;@刘巍然-学酥&lt;/a&gt;根据&lt;a href=&quot;https://www.zhihu.com/people/a595498e4a99d675c7e17797875975e2&quot; data-hash=&quot;a595498e4a99d675c7e17797875975e2&quot; class=&quot;member_mention&quot; data-title=&quot;@业斐&quot; data-editable=&quot;true&quot; data-tip=&quot;p$b$a595498e4a99d675c7e17797875975e2&quot;&gt;@业斐&lt;/a&gt;的幻灯片、讲解录音，以及后期修订后总结而来。因此，特别标注本文的作者为&lt;a href=&quot;https://www.zhihu.com/people/a595498e4a99d675c7e17797875975e2&quot; data-hash=&quot;a595498e4a99d675c7e17797875975e2&quot; class=&quot;member_mention&quot; data-title=&quot;@业斐&quot; data-editable=&quot;true&quot; data-tip=&quot;p$b$a595498e4a99d675c7e17797875975e2&quot;&gt;@业斐&lt;/a&gt;、&lt;a href=&quot;http://www.zhihu.com/people/liu-wei-ran-8-34&quot; data-editable=&quot;true&quot; data-title=&quot;@刘巍然-学酥&quot;&gt;@刘巍然-学酥&lt;/a&gt;。欢迎各位知友转载本篇专栏，转载请注明文章来源和作者信息。&lt;/p&gt;&lt;p&gt;=======分=======隔=======符=======&lt;br&gt;&lt;/p&gt;&lt;h2&gt;上期回顾与本期内容&lt;/h2&gt;&lt;p&gt;在上一篇专栏文章《&lt;a href=&quot;https://zhuanlan.zhihu.com/p/21348250?refer=WeiranCrypto&quot; class=&quot;&quot; data-editable=&quot;true&quot; data-title=&quot;信息安全体系的“术”：标准主线与关联性&quot;&gt;信息安全体系的“术”：标准主线与关联性&lt;/a&gt;》中，我们讲解了企业内部风险控制、信息技术（Information Technology，IT）风险控制、信息安全管理体系的相关标准。我们梳理了标准主线，以及标准相互之间的关联性。&lt;/p&gt;&lt;p&gt;本期，我们灵活讲解具体术的使用技巧，但不涉及具体的内容。我们已经将文章中所涉及的全部文件放置在百度云盘中，欢迎朋友们下载、浏览、学习和研究。下载链接为：&lt;a href=&quot;https://pan.baidu.com/s/1skMAqap&quot; class=&quot;&quot;&gt;https://pan.baidu.com/s/1skMAqap&lt;/a&gt;。网盘密码见文章末尾。&lt;/p&gt;&lt;br&gt;&lt;p&gt;按照标准之间的关系，我们分别梳理如下体系中渗透出的“术”：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;企业风险管控&lt;/b&gt;：COSO，SOX法案，SOX的404条款&lt;/li&gt;&lt;li&gt;&lt;b&gt;IT风险管控&lt;/b&gt;：COBIT&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;信息安全风险评估&lt;/b&gt;：ISO13335、ISO27005&lt;/li&gt;&lt;li&gt;&lt;b&gt;信息安全技术评估&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;信息安全技术体系&lt;/b&gt;：IATF、等级保护&lt;/li&gt;&lt;li&gt;&lt;b&gt;信息安全管理体系&lt;/b&gt;：ISO27000系列&lt;/li&gt;&lt;li&gt;&lt;b&gt;信息安全流程体系&lt;/b&gt;：ITIL系列&lt;/li&gt;&lt;li&gt;&lt;b&gt;IT审计&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;实际上，信息安全本质上就是风险管理控制。而风险管理控制的核心就是守护价值。在进入企业参与信息安全相关的工作时，经常会存在一个误区，认为保障信息安全是天经地义的事情。其实，做任何事情都是有价值的。由于信息安全会涉及较大的开销，如果企业的IT无法产生足够的价值，那么保障信息安全反而会带来更大的负担。举个例子，如果我有1000根金条，总价值超过1亿，我才愿意花费100万元购买一个可靠的保险柜。反之，如果我只有1万元的资产，我肯定不会去购买100万元的保险柜。很多企业的信息安全风险管控不健全，可能的原因之一是其IT无法带来与安全相匹配的价值。因此，在考察企业信息安全风险管控和相关管理、技术等方面时，要注意这个问题。不能一刀切，认为所有的企业都需实现健全的信息安全风险管控。&lt;/p&gt;&lt;p&gt;=======分=======隔=======符=======&lt;br&gt;&lt;/p&gt;&lt;h2&gt;守护价值：企业风险管控&lt;/h2&gt;&lt;p&gt;&lt;u&gt;企业具体关注什么风险&lt;/u&gt;？&lt;/p&gt;&lt;p&gt;COSO发布了企业风险管理综合框架，详细总结了企业需要关注的风险，主要由财务风险、法律风险、组织风险、运营风险等。下图展示的是2004版COSO企业风险管理综合框架*（图片来源：&lt;a href=&quot;http://www.hnsbgl.org.cn.img.800cdn.com/uploadfile/2015/0623/20150623053002100.jpg&quot; data-editable=&quot;true&quot; data-title=&quot;COSO企业风险管理综合框架&quot; class=&quot;&quot;&gt;COSO企业风险管理综合框架&lt;/a&gt;）。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/aa5aed3cce8293943938aca8842a5edf_r.jpg&quot; data-rawwidth=&quot;1119&quot; data-rawheight=&quot;969&quot;&gt;COSO企业风险管理综合框架主要关注8大层面的企业风险。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;内部环境&lt;/b&gt;：治理结构、组织结构、授权与责任、风险偏好、人力资源政策、风险管理文化等。&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;目标设定&lt;/b&gt;：战略目标、经营目标、报告目标、合规目标。&lt;/li&gt;&lt;li&gt;&lt;b&gt;事项识别&lt;/b&gt;：事件识别方法、事件分类、风险与机会。&lt;/li&gt;&lt;li&gt;&lt;b&gt;风险评估（与信息安全高度相关）&lt;/b&gt;：固有风险与剩余风险评估。现在，COSO里面的风险评估方法为“风险=发生可能性*影响”。ISO27005也采用了相同的风险评估方法。这进一步体现了标准与标准之间的映射和借鉴关系。&lt;/li&gt;&lt;li&gt;&lt;b&gt;风险应对&lt;/b&gt;：风险回避、风险降低、风险分担、风险承担。&lt;/li&gt;&lt;li&gt;&lt;b&gt;控制活动（与信息安全高度相关）&lt;/b&gt;：企业层面控制、业务流程层面控制、IT一般控制与应用控制。其中，IT一般控制与应用控制具体实现在COBIT里面进行了详尽描述。这也体现了标准之间的映射和借鉴关系。&lt;/li&gt;&lt;li&gt;&lt;b&gt;信息与沟通&lt;/b&gt;：收集与传递内部信息、外部信息。&lt;/li&gt;&lt;li&gt;&lt;b&gt;监控&lt;/b&gt;：独立监控、持续监控、自我评价、缺陷改进。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;u&gt;COSO和IT风险有什么关系&lt;/u&gt;？&lt;/p&gt;&lt;p&gt;结合COSO框架和上一篇专栏所讲解的内容，我们可以看出框架中的部分内容实际和COBIT等框架是有契合点的。&lt;b&gt;控制活动&lt;/b&gt;中业务流程层面控制、IT一般控制、应用控制和COBIT是契合的。实际上，COBIT中专门提到了IT一般控制和应用控制，与COSO框架中此部分的内容完全契合；COSO中的&lt;b&gt;信息与沟通&lt;/b&gt;、&lt;b&gt;监控&lt;/b&gt;等在COBIT中也有相应的承接。&lt;/p&gt;&lt;p&gt;&lt;u&gt;SOX法案与COSO相比，增加了什么内容，和IT风险有什么关系&lt;/u&gt;？&lt;/p&gt;&lt;p&gt;在上一篇专栏中我们讲到，安然公司的破产等丑闻事件促使美国颁发了SOX法案。SOX法案所增加的核心内容之一是企业风险和刑事责任的结合。而另一个核心内容与IT风险有着紧密的关系，就是我们之前提到的404条款。404条款要求保证会计账务、财务报告、财务流程、财务应用和底层IT基础架构的完整性、可用性、准确性。虽然SOX法案无法具体落地，但SOX法案对IT风险控制产生了巨大的影响。&lt;/p&gt;&lt;p&gt;=======分=======隔=======符=======&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;h2&gt;守护价值：IT风险管控&lt;/h2&gt;&lt;p&gt;&lt;u&gt;COBIT是什么&lt;/u&gt;？&lt;/p&gt;&lt;p&gt;首先，我们来看一看COBIT 4.1的框架图（图片来源：IT Governance Institute，中国建设银行翻译，COBIT 4.1，第43页）&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/41bd8cb25bbd601e20cf6f510ea26dcc_r.jpg&quot; data-rawwidth=&quot;954&quot; data-rawheight=&quot;1089&quot;&gt;&lt;p&gt;COBIT中主要关注4个维度的内容：计划与组织、获取与实施、交付与支持、监控与评价。各个维度所关注的具体项目如下图所示。&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/4912b73c47d06be3d536cd9d0f393d0e_r.jpg&quot; data-rawwidth=&quot;889&quot; data-rawheight=&quot;378&quot;&gt;&lt;p&gt;业内对于COBIT的定义有不同的观点。有的人认为，COBIT是一个IT风险评估框架；有的人认为，COBIT是一个IT审计框架；有的人认为，COBIT是一个IT治理框架。我们认为这3种理解都是正确的。&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;IT风险评估是指，根据自己的方法去评估IT中有哪些风险。可以使用COBIT作为IT风险评估的方法。COBIT列举了很多条目。当评估IT风险时，我们可以考察所缺失的项，并评估这些缺失的项会引发何种风险。此时，我们可以将COBIT理解为IT风险评估框架。&lt;br&gt;&lt;/li&gt;&lt;li&gt;IT审计框架相对比较好理解，我们可以按照COBIT框架，对IT的各项进行逐条审计。&lt;/li&gt;&lt;li&gt;业内一般将IT治理分为2类：控制论IT治理和决策论IT治理。决策论IT治理主要考虑决策什么，谁来决策，如何监督有效执行。控制论IT治理就是以COBIT为代表，其主旨是通过控制风险达到治理目标。即考察：IT架构与企业风险是否是战略匹配的；所拥有的资源是否可以恰巧解决高、中、低风险；项目管理是否是有效的；管理框架和要求是否可以落地执行等。因此，可以通过风险控制的方式实现IT治理。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;u&gt;IT风险比信息安全风险更关注什么&lt;/u&gt;？&lt;/p&gt;&lt;br&gt;&lt;p&gt;信息安全风险是IT风险的一部分。信息安全风险主要关注系统如何不被入侵，如何实现数据保密等。而IT风险需要考察与涉及IT活动的各种风险。举个例子，企业想上线一套企业资源规划（Enterprise Resource Planning，ERP）系统实现IT业务线的资源流程管理。那么，企业是购买系统，还是独自开发系统？独自开发系统的话，如果在规定时间内没有完成开发，则如何处理？这类问题也是IT风险需要控制的内容。在某种程度上，IT风险和信息安全风险也是互相映射的。举个例子，企业遭到了黑客的攻击，那么企业要购买安全设备抵御攻击？还是独立研发技术和设备抵御攻击？总之，IT风险关注的问题比信息安全风险所关注的问题要大，但互相之间是相互映射的。&lt;/p&gt;&lt;p&gt;在此，我们举一个IT风险的实例，让朋友们更好地理解IT风险及其控制方法。互联网云服务提供商为客户提供云存储服务。客户所要求的服务等级协议（Service-Level Agreement，SLA）中要求提供7*24小时的服务。然而，云服务商的某个堡垒机是从某个外企厂商购买的，此外企厂商仅承诺提供5*8小时的服务。因此，一旦在5*8小时之外出现事故，那么云服务提供商就会面临相应的风险。如何降低这种风险呢？我们可以按照COBIT框架进行风险控制和管理。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;识别所有的供应服务商。&lt;/li&gt;&lt;li&gt;对供应服务商按照设备功能、关键程度等进行分类。服务器相关、网络设备相关等关键程度最高；笔记本电脑相关、台式电脑相关的关键程度较低。&lt;/li&gt;&lt;li&gt;要求供应服务商提供相应的支持证书。&lt;/li&gt;&lt;li&gt;考察服务商的持续发展能力。对于小规模企业，要注意企业可能会破产、倒闭等。&lt;/li&gt;&lt;li&gt;管理与供应服务商的关系，保持联系。&lt;/li&gt;&lt;li&gt;在购买设备和服务时，要签订相应的SLA。&lt;/li&gt;&lt;li&gt;确保供应商所提供的服务满足法律相关的业务标准，要签订相应的保密协议和责任协议。&lt;/li&gt;&lt;li&gt;实施供应服务商的变更流程、惩罚与奖励措施。&lt;/li&gt;&lt;li&gt;实施绩效管理。服务供应商应满足业务要求，能够履行合同协议。绩效与市场现状相比要有能力、价格等的竞争力。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;上述就是COBIT框架。虽然这个框架看起来比较空，但真正落地的时候，我们会发现COBIT覆盖了几乎所有的IT风险。因此，&lt;u&gt;COBIT堪称经典&lt;/u&gt;！&lt;/p&gt;&lt;p&gt;=======分=======隔=======符=======&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;h2&gt;守护价值：信息安全风险评估&lt;/h2&gt;&lt;p&gt;在讲信息安全风险评估前，我们首先看一看风险评估标准ISO13335中给出的风险管理中的关系（图片来源：ISO13335-1:1996，P16）。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/0e5b3f6886a2cc52d0b264968dac0a76_r.jpg&quot; data-rawwidth=&quot;595&quot; data-rawheight=&quot;451&quot;&gt;按照上图，我们可以很清楚地整理出各个项与风险之间的关系：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;信息资产&lt;b&gt;拥有&lt;/b&gt;价值，&lt;b&gt;增加&lt;/b&gt;风险；&lt;/li&gt;&lt;li&gt;威胁可以&lt;b&gt;利用&lt;/b&gt;漏洞，&lt;b&gt;增加&lt;/b&gt;风险；&lt;/li&gt;&lt;li&gt;漏洞会&lt;b&gt;暴露&lt;/b&gt;相应的信息资产；&lt;/li&gt;&lt;li&gt;相应的防护措施可以&lt;b&gt;抗击&lt;/b&gt;威胁，可以&lt;b&gt;降低&lt;/b&gt;风险。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;有了风险管理中的各个关系，我们就可以根据关系进行相应的风险评估了。在风险评估中，我们主要关注的就是资产、威胁、漏洞。业内一般有3种风险评估方式：定性风险评估、定量风险评估、半定量风险评估。&lt;/p&gt;&lt;p&gt;&lt;u&gt;定性风险评估：ISO13335、ISO27005&lt;/u&gt;&lt;/p&gt;&lt;p&gt;定性风险评估就是ISO13335和ISO27005标准，业内对标准的使用和理解已经很成熟，在此不再过多讲解。但是注意，使用风险评估时一定要和业务紧密结合。&lt;/p&gt;&lt;p&gt;举个例子，飞机设计图纸是否具有极高的保密性要求？如果没有和业务人员进行充分交流，我们可能会想当然地认为&lt;b&gt;任意国家&lt;/b&gt;的飞机设计图纸均为高度机密资料。但是，风险评估与业务紧密结合后发现，&lt;b&gt;A国某型号的飞机设计图纸&lt;/b&gt;是从空客或波音公司的飞机原型中拆解描绘得来，仅描述了部件的规格和型号，此设计图纸在国际范围内不会引起其他国家的关注。同时，&lt;b&gt;A国&lt;/b&gt;仅有唯一的企业有资格制造和生产飞机。因此，即使飞机设计图纸泄密，也不会对企业造成较大的业务风险。考虑上述业务背景后，A国的飞机设计图纸就不具有极高的保密性要求了。&lt;/p&gt;&lt;p&gt;&lt;u&gt;定量风险评估&lt;/u&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;定量风险评估和财产挂钩，也就是用财产量化的方式描述风险。一般，业内不会实施定量风险评估，因为很难评估风险所涉及的&lt;b&gt;财产价值&lt;/b&gt;。但是我们可以通过相同的定量风险评估方式核算出风险的控制收益的趋势。&lt;/p&gt;&lt;p&gt;定量风险评估的方法一般需要比较两个参数的大小：（1）采用安全控制措施后的收益、（2）安全控制措施的成本。显然，当（1）大于（2）时，意味着所采取的安全控制措施为企业带来了收益，应该采用；否则（1）小于（2），意味着安全控制措施的成本大于收益，不应采用此安全措施。而采用安全控制措施后的收益可以通过财产价值与下述参数计算得到：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;暴露因子（EF）：标识的威胁造成的财产损失百分比&lt;/li&gt;&lt;li&gt;单次损失期望值（SLE）=&lt;b&gt;财产价值&lt;/b&gt;*EF&lt;/li&gt;&lt;li&gt;年发生概率（ARO）：某个威胁一年中发生的估计概率&lt;br&gt;&lt;/li&gt;&lt;li&gt;年损失期望值（ALE）=SLE*ARO&lt;br&gt;&lt;/li&gt;&lt;li&gt;采用安全控制措施后的收益=ALE-采用安全控制措施后的ALE&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;现在，信息安全风险评估方法在逐渐与企业风险评估模型靠近。信息安全风险评估方法在信息安全领域已经使用的非常成熟了。&lt;/p&gt;&lt;p&gt;=======分=======隔=======符=======&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;h2&gt;信息安全技术评估&lt;/h2&gt;&lt;p&gt;我们看到了IT风险评估，信息安全风险评估。那么，有信息安全技术评估的相关标准吗？实际上，是没有信息安全技术评估标准的。但是，业内仍然存在这样的意识形态，如评估网络可靠性、渗透测试等安全技术。这是为什么呢？&lt;/p&gt;&lt;p&gt;实际上，风险评估是2004年开始发展的。但是在当时，并不是所有的企业都有能力实施风险评估。然而，一些安全企业发现，风险评估中的一些具体活动，如扫描、渗透测试等，是可以具体实施的。因此，这些安全企业就逐渐开展了类似的技术评估。而技术评估结果等更加直观的体现了技术薄弱点。对于客户来说，发现了100个漏洞并修复；发现了服务器入侵风险，进行相应的措施等，比空泛地定性风险评估更容易被用户所接受。&lt;/p&gt;&lt;p&gt;所以，信息安全技术评估虽然没有相关标准，但类似的活动还会长期存在下去。我们在这里起码要区分清楚，信息安全技术评估不再标准里面，是约定俗成的一种意识形态。在业内，要区分IT风险评估、信息安全风险评估、信息安全技术评估这些概念。&lt;/p&gt;&lt;p&gt;=======分=======隔=======符=======&lt;br&gt;&lt;/p&gt;&lt;h2&gt;管理体系：ISO27000系列&lt;/h2&gt;&lt;p&gt;我们终于讲到ISO27000系列了，这是信息安全业内最广为人知的系列标准。&lt;/p&gt;&lt;p&gt;&lt;u&gt;ISO27000标准家族&lt;/u&gt;&lt;/p&gt;&lt;p&gt;首先要强调，ISO27000是一个标准族，包括概论及术语、要求、规范、实施指南、测量、信息安全风险管理、认证机构要求等。&lt;/p&gt;&lt;p&gt;我们还是用制造桌子的例子来描述ISO27000系列各个标准之间的关系。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;ISO27000，概论及术语，2009年出版：指出后面要用到一些名词，如桌子、边、直的等；&lt;/li&gt;&lt;li&gt;ISO27001，要求，2009年出版，对桌子进行认证，说明作为桌子应该有什么要求；&lt;/li&gt;&lt;li&gt;ISO/IEC27002，规范，2013年改版：如何满足桌子的要求？桌子应该有4条边，边应该是直的。&lt;/li&gt;&lt;li&gt;ISO/IEC27003，实施指南，2010年出版：如何保证有4条边呢？如何做才能保证边是直的？&lt;/li&gt;&lt;li&gt;ISO/IEC27004，测量，20009年出版：桌子是否满足要求，查看做出来的东西与桌子之间相差多少。&lt;/li&gt;&lt;li&gt;ISO/IEC27005，风险管理，2008年出版：并没有有关桌子的合适实例。&lt;/li&gt;&lt;li&gt;ISO/IEC27006，认证机构要求，2007年出版：桌子制作完，认证机构要进行认证。但是，如何认证认证机构本身？&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;u&gt;认证委、认证公司、咨询公司的关系&lt;/u&gt;&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;上面我们提到，ISO/IEC27006用于对认证机构进行认证。&lt;b&gt;认证委&lt;/b&gt;就是国家机关。国家机关对认证公司的能力、认证实施过程和方法论等进行认证，最终向认证公司颁发认证资质。&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;认证公司&lt;/b&gt;是获得国家机关认证的资质，来认证其他的机构是否符合ISO27001。&lt;br&gt;&lt;/li&gt;&lt;li&gt;ISO27001是一个比较复杂的标准，通过ISO27001相对来说也比较困难，因此就出现了&lt;b&gt;咨询公司&lt;/b&gt;。咨询公司为企业提供咨询，帮助企业获得ISO27001认证。&lt;/li&gt;&lt;/ul&gt;&lt;u&gt;ISO27001和ISO27002有什么不同？&lt;/u&gt;&lt;p&gt;前面说到，ISO27001是要求，ISO27002是规范，这两个到底有何不同呢？我们简单对比一下ISO27001和ISO27002的具体内容，就可以大概理解其不同之处。下图是ISO27001附录A的第1页，我们只关注“5 信息安全方针”一部分即可（图片来源：ISO/IEC27001：2013，小李飞刀翻译，P15）。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://pic2.zhimg.com/f2051c7633b33be83c5fe47d7f00c4c9_r.jpg&quot; data-rawwidth=&quot;1654&quot; data-rawheight=&quot;2339&quot;&gt;下图是ISO27002所对应的“5 信息安全方针”一部分（图片来源：GB/T 22081-2008/ISO/IEC27002：2005，P11）。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/30b7eac3344b6c8f51fd2e6a7400e26e_r.jpg&quot; data-rawwidth=&quot;1241&quot; data-rawheight=&quot;1766&quot;&gt;可以看出，虽然都是“5 信息安全方针”一部分，目标是一样的。但是ISO27001只是给出了具体目标，而ISO27002指出了具体的控制措施。&lt;/p&gt;&lt;p&gt;&lt;u&gt;ISO27001只有管理要求吗&lt;/u&gt;？&lt;br&gt;&lt;/p&gt;&lt;p&gt;不能简单地认为ISO27001只涉及管理，只涉及文档。比如，提出访问控制需求后，根据安全域的划分需求进行安全域划分，划分后还应有具体的技术方案实现访问控制需求。所以，ISO27001中不仅涉及了管理要求，还有各种支持性文档和指南文件作为技术方案落地的参考。下图是ISMS的方针目标、策略、和相关的指南文件结构图。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/d0bb543ce1753c60c4a33632775c0354_r.jpg&quot; data-rawwidth=&quot;989&quot; data-rawheight=&quot;515&quot;&gt;其中，蓝色框中的为总体目标和总体方针。粉色框中的为各目标和方针的指南文件、操作文件，作为技术方案落地的参考。最下方的表单相应的技术维护文档，用户记录评审信息和维护信息。&lt;/p&gt;&lt;p&gt;总之，ISO27001不仅涉及管理和文档，还有具体的实施指南、规定和办法，用户进行技术落地。但是，我们这里要强调的是，信息安全管理体系并没有进行具体技术体系的指导。但是，没有指导不代表不去参考。&lt;/p&gt;&lt;p&gt;&lt;u&gt;ISO27001：2013版本有什么变化&lt;/u&gt;？&lt;br&gt;&lt;/p&gt;&lt;p&gt;我们直接引用上海安言咨询给出的图来描述ISO27001：2013版本的变化。业内一般称“北谷安、南安言”，这两家公司是信息安全咨询非常知名的公司。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/6cdf8cab4145b2af4c5491beadb93ee5_r.jpg&quot; data-rawwidth=&quot;998&quot; data-rawheight=&quot;534&quot;&gt;可以看到，与ISO27001：2005版本相比，ISO27001：2013版本针对近年来的安全需求，对部分内容进行了分化，也增加了部分内容。&lt;/p&gt;&lt;p&gt;=======分=======隔=======符=======&lt;br&gt;&lt;/p&gt;&lt;h2&gt;流程体系：信息技术基础架构库（Information Technology Infrastructure Library，ITIL）&lt;/h2&gt;&lt;p&gt;ITIL是一套有关IT服务管理的方法，从而为业务部门提供更好的服务。ITIL已经成为事实上的业界标准，并以其为中心在全球形成了完成的产业。ITIL分为两个重要的版本，ITIL version 2和ITIL version 3。这两个版本有很大的不同。现在，业内一般使用ITIL version 3了。下图很好地描述了ITIL的各个模块，并指出了ITIL version 2和ITIL version 3的区别（图片来源：ITIL V3 Foundation中文培训讲义，交大慧谷培训中心，P25）。&lt;img src=&quot;https://pic3.zhimg.com/703e1f6c2d3bff264db9fd873aa82166_r.jpg&quot; data-rawwidth=&quot;790&quot; data-rawheight=&quot;528&quot;&gt;&lt;/p&gt;&lt;p&gt;由于ITIL的模块较多，这里不能进行一一展开。在此，我们仅简单介绍几个重要的模块。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;供应商管理&lt;/b&gt;：方案是背靠背。&lt;/li&gt;&lt;li&gt;&lt;b&gt;信息安全管理&lt;/b&gt;：参考ISO27001。&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;业务连续性管理&lt;/b&gt;：参考ISO22301。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;容量管理&lt;/b&gt;：应使用一定的技术手段去监测，当性能不足时应能够进行相应的快速扩容。举个例子，以前互联网的带宽是100M，现在变成1G，那么路由、网络设备、安全设备都需要升级。&lt;br&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;服务级别管理&lt;/b&gt;：就是服务级别协议（Service Level Agreement，SLA）。所承诺的SLA代表了1年所出事故的时长要小于规定的范围。&lt;br&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;发布与部署管理&lt;/b&gt;：当信息系统从测试环境编译，待正式发布时，应该有一定的控制措施。&lt;br&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;资产与配置管理&lt;/b&gt;：就是运维配置管理数据库（Configuration Management Database，CMDB）。&lt;br&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;变更管理&lt;/b&gt;：直观上看，发布与部署管理属于变更的一种。但是ITIL把发布与部署管理、变更管理进行了区分。这是因为发布一般来说是从测试环境到生产环境的变化。但只要生产环境有所变化，都应属于变更。所以，从定义上两者需要进行区分。变更管理的一个典型实例是，系统工程师为了测试方便，在防火墙的Untrust区到Trust区第1条规则中就设置了any to any permit，导致防火墙的规则防护形同虚设。如果采用了恰当的变更管理流程，此种规则变更在审批时将无法获得通过。&lt;br&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;事件管理&lt;/b&gt;：我们认为翻译成事态管理更加合适。事态是指暂时没有没有影响到生产环境，但持续下去预计会影响业务执行的事件。比如，CPU使用率前天为50%，昨天是60%，今天是70%。这类事件就属于事态管理的范畴。&lt;br&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;问题管理&lt;/b&gt;：问题是指已经影响到生产环境的事件。比如，防火墙使用了NAT状态功能，当防火墙瘫痪时，就需要对生产环境进行变更，进行相应的处置。&lt;br&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;故障管理&lt;/b&gt;：如果某个问题事件频发，问题就升级成为了故障。比如，思科路由器存在SSH拒绝服务漏洞，此漏洞被蠕虫病毒所利用，导致思科路由器的CPU使用率飙升。虽然重启路由器会暂时解决此问题，但问题会周期性地重复出现。此时就需要进行问题回溯，追溯问题发生的原因。此类事件称为故障。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;=======分=======隔=======符=======&lt;br&gt;&lt;/p&gt;&lt;h2&gt;技术体系：IATF&lt;/h2&gt;&lt;p&gt;信息保障技术框架（information Assurance Technical Framework，IATF）总体架构如下图（图片来源：IATF Release 3.1，Appendix C，P42）。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/51747a3296a2b5476fdf1a0eddd9aa2e_r.png&quot; data-rawwidth=&quot;948&quot; data-rawheight=&quot;681&quot;&gt;IATF是国际上第一个提出技术、运行、人员（PPT）三位一体的纵深防御理念。其指出，人员，借助技术的支持，实施一系列的运行过程，最终实现信息保障目标的方法。根据纵深防御理念，IATF提出4部分架构：本地的计算环境、区域边界、网络和基础设施、支持性的基础设施。技术环境就是服务器等；区域边界指外联区、广域网、加盟机构等相互之间的边界；网络和基础设施就是企业的基本网络设施；支持性的基础设施指的是证书机构（Certification Authority，CA）、电子邮件（Email）等设施。其具体关键点总结如下：&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/4316fb26f7b6ffea406d4e14603902c0_r.jpg&quot; data-rawwidth=&quot;662&quot; data-rawheight=&quot;246&quot;&gt;&lt;p&gt;IATF指出，要按照纵深防御的理念，人员、操作、技术的方式，在本地的计算环境、区域边界、网络和基础设施、支持性的基础设施中，重复地采用纵深防御进行防护。我们之所以将IATF列为技术体系，并不是因为其指出了人员、操作、技术的纵深防御理念，而是因为IATF给出了本地的计算环境、区域边界、网络和基础设施、支持性的基础设施这四个区域中所需要技术防御方法和架构。举个例子，在区域边界中（IATF Release 3.1——September 2002，第六章），IATF详细给出了如下内容：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;防火墙的功能要求、潜在攻击、潜在攻击策略、技术评估方法&lt;/li&gt;&lt;li&gt;远程访问的功能要求、潜在攻击、潜在对策、技术评估方法&lt;/li&gt;&lt;li&gt;边界访问的要求、潜在攻击、潜在对策、技术评估方法、产品选择准则&lt;/li&gt;&lt;li&gt;……&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;IATF虽然现在基本已不再使用，3.0版本后也不再更新，但是纵深防御的理念为未来的安全体系奠定了基础。&lt;br&gt;&lt;/p&gt;&lt;p&gt;=======分=======隔=======符=======&lt;br&gt;&lt;/p&gt;&lt;h2&gt;偏技术体系：等级保护&lt;/h2&gt;&lt;p&gt;等级保护相对来说偏技术体系，这是因为在使用等级保护时，我们一般只参考技术部分。&lt;/p&gt;&lt;p&gt;大部分人所能接触到的都是等级保护的基本要求。等级保护分为技术层面和管理场面，分别有各种对应的要求。企业需要根据这些要求完成相应的文档、流程、表单等。下图可以很好地总结等级保护的要求。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/a51f32db4b3a6bf7e3c42825d50cf526_r.jpg&quot; data-rawwidth=&quot;1304&quot; data-rawheight=&quot;529&quot;&gt;不同级别所要求等级保护的点数也有所不同。标准根据不同的安全域，一共划分了五个等级。但是标准中没有规定第5级的要求，因此一般称有4级等级保护要求。标准中规定了各个层级的要求和综合管理要求，对信息安全的技术体系具有指导意义。&lt;/p&gt;&lt;p&gt;等级保护对技术要求的整理和归纳是很不错的，使用起来很方便，也不会出现歧义。有些企业会自己制定相应的技术体系，如从预警、检测、防护、恢复这4个维度构建技术体系。这是一种技术体系落地的一种可行方法。业内一般用信息安全管理体系代替等级保护的管理要求。这同样体现了标准与标准之间互相渗透的特性。&lt;/p&gt;&lt;p&gt;业内实现等级保护时一般只参考《等级保护基本要求》。实际上等级保护相关的标准和规定很多，共有8个政策性文件以及各种技术文件。8个政策性文件为：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;《中华人民共和国计算机信息安全保护条例（国务院147号令）》&lt;br&gt;&lt;/li&gt;&lt;li&gt;《关于信息安全等级保护工作的实施意见（公通字【2004】66号）》&lt;/li&gt;&lt;li&gt;《信息安全等级保护管理办法（公通字【2007】43号）》&lt;/li&gt;&lt;li&gt;《关于开展全国重要信息系统安全等级保护定级工作的通知（公信安【2007】861号）》&lt;/li&gt;&lt;li&gt;《信息安全等级保护备案实施细则（公信安【2007】1360号）》&lt;br&gt;&lt;/li&gt;&lt;li&gt;《公安机关信息安全等级保护检查工作规范（公信安【2008】736号）》&lt;br&gt;&lt;/li&gt;&lt;li&gt;《关于加强国家电子政务工程建设项目信息安全风险评估工作的通知（发改高技【2008】2071号）》&lt;br&gt;&lt;/li&gt;&lt;li&gt;《关于开展信息安全等级保护安全建设整改工作的指导意见（公信安【2009】1429号）》&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;客观地说，等级保护在标准的整个生命周期框架里是非常完整的。无论是从国家立法、监督执行与指导、与风险评估的结合、相关部位的支撑都是非常体系化的，并不亚于ISO27001标准。等级保护详细描述了实施生命周期内的主要活动，如图所示。&lt;img src=&quot;https://pic3.zhimg.com/1ab60a6e7549dff9468ef7de5606e706_r.jpg&quot; data-rawwidth=&quot;1542&quot; data-rawheight=&quot;692&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;我们对等级保护的评价是非常中肯的，我们很想为等级保护正名。在信息安全起步的初级阶段，等级保护可以起到很好的指导借鉴作用。&lt;/p&gt;&lt;p&gt;=======分=======隔=======符=======&lt;/p&gt;&lt;h2&gt;IT审计&lt;/h2&gt;&lt;p&gt;IT审计是：独立的第三方IT审计师获取并评价证据，以判断IT环境是否能够保证资产的安全、数据的完整、有效率的利用组织资源、有效果地实现组织目标的过程。 IT审计有几个重要的关键点：独立的第三方、获取并评价证据、证据可被重复识别和评价、可得到一直结论。下图可以很好地描述IT审计的作用。&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/a79675d333c5db0bd531f93bde5410b5_r.jpg&quot; data-rawwidth=&quot;897&quot; data-rawheight=&quot;546&quot;&gt;&lt;p&gt;IT审计有很多方法获取证据，我们这里强调几个和安全相关的审计方法：文档审核、访谈、配置核查、实地查看、漏洞扫描、渗透测试。审计证据要支撑审计结论，一共有符合并超出预期、符合、轻微不符合、部分不符合、严重不符合、不适用这几个维度。&lt;/p&gt;&lt;p&gt;IT审计中，优势证据的选择是一个很重要的问题。IT审计要求证据可以不断重复再现并能够统一得出一致性的意见。我们以审计服务器是否打补丁为例子：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;访谈：找负责人询问是否安装了补丁；&lt;/li&gt;&lt;li&gt;配置核查：查询补丁安装的档案；&lt;/li&gt;&lt;li&gt;漏洞扫描：通过漏洞扫描查看漏洞是否通过安装补丁的方法修复；&lt;/li&gt;&lt;li&gt;渗透测试：通过渗透测试检查漏洞是否存在，是否有可能被利用；&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;那么，上述情况中哪些可以作为优势证据呢？对于安装补丁方面，漏洞扫描和渗透测试结果可以作为优势证据。这是因为：访谈可能会出现不真实的回答，甚至伪造。配置核查的结果确实安装了补丁，但没有对服务器进行重启，导致补丁没有生效。漏洞扫描结果可能会出现漏报。因此，上述顺序不存在严格的递进关系，要通过具体情况选择合适的证据。&lt;/p&gt;&lt;p&gt;IT审计中有两个重要的概念：符合性测试与实质性测试。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;符合性测试是指，所宣称的控制措施是否真的有效。比如，安全工程师宣称防火墙对某台服务器采用了最小化服务的配置规则，但实际查看时可能会发现服务器对外开放了不必要的数据库端口。&lt;br&gt;&lt;/li&gt;&lt;li&gt;实质性测试是指在符合性测试的基础上，为取得直接证据而在业务数据流程中使用检查、查询及计算、分析性复核等方法。比如财务系统需要做实质性测试，需要检查财务数据处理流程中每个模块的输入、处理、输出的函数是否会造成数据异常，来验证财务数据是否是完整可靠的。&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;业内公认，符合性测试结果越好，说明信任度越高，实质性测试相对来说可以越少。另外，在测试时一定要注意独立第三方原则，避免内部勾结造假。&lt;/p&gt;&lt;p&gt;另外，IT审计分为内审和外审。内审是指内部人员来审计目前的规章制度和运行情况与标准之间的差距。外审就是第三方的人员进行审计。一般建议，内审半年或者一个季度一审查。外审一般是一年一审。IT审计也适用于安全审计。&lt;/p&gt;&lt;p&gt;=======分=======隔=======符=======&lt;br&gt;&lt;/p&gt;&lt;h2&gt;知识和文档体系展示&lt;/h2&gt;&lt;p&gt;在专栏文章的最后，我们用一个框架图来展示信息安全的知识，及相应的文档体系。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/3e0478cf0e5e023fd52d50348d66d2d5_r.jpg&quot; data-rawwidth=&quot;794&quot; data-rawheight=&quot;851&quot;&gt;&lt;p&gt;所有所涉及的标准和文件已按照类别放置在百度云盘中，链接见文章最上方，密码：9s3i&lt;/p&gt;</description>
<author>刘巍然-学酥</author>
<guid isPermaLink="false">2016-07-02-21355001</guid>
<pubDate>Sat, 02 Jul 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>信息安全体系的“术”：标准主线与关联性</title>
<link>https://henix.github.io/feeds/zhuanlan.datasec/2016-06-16-21348250.html</link>
<description>&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/21348250&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/d3a3d64f6e0d5297c3292d2b532da853_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;多图预警，长文预警，难度预警。阅览过程中如发现不适，恳请休息，休息一下…&lt;p&gt;=======分=======隔=======符=======&lt;br&gt;&lt;/p&gt;&lt;h2&gt;&lt;b&gt;前言&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;大约半年前一个很偶然的机会，我认识了从事信息安全咨询的前辈@&lt;a href=&quot;https://www.zhihu.com/people/shi-ye-fei-ran&quot; data-editable=&quot;true&quot; data-title=&quot;业斐&quot; class=&quot;&quot;&gt;业斐&lt;/a&gt;。从相识到熟悉，从简单的讨论到深入的探讨，我从@&lt;a href=&quot;https://www.zhihu.com/people/shi-ye-fei-ran&quot; data-editable=&quot;true&quot; data-title=&quot;业斐&quot; class=&quot;&quot;&gt;业斐&lt;/a&gt;那里学到了很多信息安全方面的知识。交流以后我的感觉就是自己菜到抠脚。当然了，@&lt;a href=&quot;https://www.zhihu.com/people/shi-ye-fei-ran&quot; data-editable=&quot;true&quot; data-title=&quot;业斐&quot; class=&quot;&quot;&gt;业斐&lt;/a&gt;也多次宽慰我：“你年轻的很，慢慢来，不着急~”。但看着前辈们的伟大形象，自己就更应该从交流和探讨中学习一些东西呀。今年4月份，@&lt;a href=&quot;https://www.zhihu.com/people/shi-ye-fei-ran&quot; data-editable=&quot;true&quot; data-title=&quot;业斐&quot; class=&quot;&quot;&gt;业斐&lt;/a&gt;和我商量，能否把自己对信息安全体系的一些框架、标准，以及自己的理解和看法整理出来，发表在我的知乎专栏上，供其它人阅读和参考。这种可以深入学习各种信息安全知识的机会，我自己当然不能错过！&lt;/p&gt;&lt;br&gt;&lt;p&gt;于是，就有了今天有关信息安全体系的系列专栏文章：《信息安全体系的“术”》。所谓“术”，就是一种知识，一种经验。而信息安全体系的“术”，顾名思义，就是信息安全体系中的相关知识和经验。本系列专栏文章首先和朋友们探讨，相关从业人员应该掌握信息安全体系的哪些知识，以及各个知识之间的关系。在后续的专栏中，我们还会讲到《信息安全体系的“道”》。&lt;a href=&quot;https://www.zhihu.com/people/d543743c88797978a0a8c453f8768974&quot; data-hash=&quot;d543743c88797978a0a8c453f8768974&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@刘巍然-学酥&quot; data-tip=&quot;p$b$d543743c88797978a0a8c453f8768974&quot;&gt;@刘巍然-学酥&lt;/a&gt; 自己学习一遍的感受是：一般认为信息安全是加密/解密、安全协议、漏洞挖掘、渗透测试等具体技术。实际上，&lt;b&gt;信息安全涉及管理、治理、人员、技术等多个维度，是一门非常宽泛的综合性交叉学科&lt;/b&gt;。正因为这个学科的宽度和广度均十分夸张，只精通其中的一个维度，就足以在业界立足。但是，从多个维度取了解和学习信息安全这一大的方向，可以帮助我们更好地把握知识的脉络，从更体系化的层次去看待信息安全。&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;系列专栏文章由&lt;a href=&quot;https://www.zhihu.com/people/d543743c88797978a0a8c453f8768974&quot; data-hash=&quot;d543743c88797978a0a8c453f8768974&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@刘巍然-学酥&quot; data-tip=&quot;p$b$d543743c88797978a0a8c453f8768974&quot;&gt;@刘巍然-学酥&lt;/a&gt;  根据@&lt;a href=&quot;https://www.zhihu.com/people/shi-ye-fei-ran&quot; data-editable=&quot;true&quot; data-title=&quot;业斐&quot; class=&quot;&quot;&gt;业斐&lt;/a&gt;的幻灯片、讲解录音，以及后期修订后总结而来。因此，特别标注本文的作者为@&lt;a href=&quot;https://www.zhihu.com/people/shi-ye-fei-ran&quot; data-editable=&quot;true&quot; data-title=&quot;业斐&quot; class=&quot;&quot;&gt;业斐&lt;/a&gt;、&lt;a href=&quot;https://www.zhihu.com/people/d543743c88797978a0a8c453f8768974&quot; data-hash=&quot;d543743c88797978a0a8c453f8768974&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@刘巍然-学酥&quot; data-tip=&quot;p$b$d543743c88797978a0a8c453f8768974&quot;&gt;@刘巍然-学酥&lt;/a&gt;  。刚开始阅读这一系列专栏文章时，起来可能会觉得比较空，比较宽泛。实际上，本文的内容结合了@&lt;a href=&quot;https://www.zhihu.com/people/shi-ye-fei-ran&quot; data-editable=&quot;true&quot; data-title=&quot;业斐&quot; class=&quot;&quot;&gt;业斐&lt;/a&gt;近十年信息安全体系的相关经验和理解。如果有朋友立志做信息安全领域，特别是信息安全体系领域相关工作的话，本文可以作为体系和标准的绝佳总结。欢迎各位知友转载本篇专栏，转载请注明文章来源和作者信息。&lt;br&gt;&lt;/p&gt;&lt;p&gt;对于绝大多数读者来说，本系列专栏文章可以告诉你的是：&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;信息安全体系包含哪些领域？&lt;br&gt;&lt;/li&gt;&lt;li&gt;这些领域相互之间有何关系？&lt;br&gt;&lt;/li&gt;&lt;li&gt;信息安全术语和标准有哪些？&lt;br&gt;&lt;/li&gt;&lt;li&gt;这些标准体现的知识有哪些？&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;本文暂时不涉及的内容是：&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;“互联网时代”面临的信息安全新体系。&lt;br&gt;&lt;/li&gt;&lt;li&gt;具体安全技术，如漏洞挖掘、渗透测试。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;=======分=======隔=======符=======&lt;br&gt;&lt;/p&gt;&lt;p&gt;2016年07月02日更新：根据前辈@飞啸师兄的意见，对文章中部分论述不清晰和不准确的地方进行了修改，非常感谢@飞啸师兄的宝贵意见！&lt;br&gt;&lt;/p&gt;&lt;p&gt;=======分=======隔=======符=======&lt;/p&gt;&lt;h2&gt;&lt;b&gt;从信息安全的标准出发，把握信息安全体系&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;在阅读下面的内容之前，请朋友们先思考一个核心问题：什么是信息安全？&lt;br&gt;&lt;/p&gt;&lt;p&gt;相信一抛出这个问题，大家就会开始争论不休。做理论的人会说，信息安全就是密码学、安全协议、隐私保护；做技术的人会说，信息安全就是漏洞挖掘、渗透测试；做体系的人会说，信息安全就是行业标准，管理体系。&lt;/p&gt;&lt;p&gt;上述理解都是部分正确的。信息安全包含了上述各个方面：有技术层面、管理层面、人员层面等。实际上，各个相关标准或多或少都会提到“安全”或者“信息安全”这类关键词。在深入信息安全具体知识之前，了解信息安全体系的最好方法就是从标准出发。我们首先考察标准的诞生及其生命周期，通过剖析标准的演化过程，形成信息安全体系。&lt;/p&gt;&lt;p&gt;



在给出信息安全相关标准的演化过程之前，我们首先要强调3个关键点。在讲解标准演化过程之时，我们也会不断强调这3点。在实际应用这些标准的时候，也需把握住这3个核心点，从而正确理解和使用标准：&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;标准与标准之间是相互渗透和包含的。任何一个好的标准经过不断地完善、改良、更新后，都会形成体系和框架，并且在其生命周期中逐渐与其他标准进行融合。（@飞啸师兄补充：标准也是业界最佳实践的沉淀，能够代表大多数行业内的应用实践。同样的，标准也是针对业界常遇到的问题的，统一解决方案的参考内容，是应用科学方案的实践总结，是经验快速复制的有力手段。）&lt;br&gt;&lt;/li&gt;&lt;li&gt;标准不是绝对的，是可以修改的。标准自身也承认其可修改性，并允许在应用过程中对标准本身进行添加、裁剪和修改。这种修改可能是标准自身的版本更新，也可能是企业根据实际需求对标准进行修改。&lt;br&gt;&lt;/li&gt;&lt;li&gt;标准可以互相借鉴和映射。我们可以把标准和法律进行类比。在以《宪法》为代表的法律中，一般并不指明具体的量刑依据和处罚措施，而是通过《刑法》等细节法律法规，或具体案件的解释来执行法律。信息安全中的标准也是这样的。一般来说，具体的应用流程为：标准--&amp;gt;管理制度和流程--&amp;gt;技术要求--&amp;gt;解决方案--&amp;gt;产品和具体技术实现。&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;前面铺垫了这么多，现在我们终于可以切入正题，来整理信息安全领域相关的主线标准了。我们用一个总体框架图来描述概念、标准之间的联系。本图列出的是能够列出信息安全体系的主线标准（感谢@飞啸师兄指正），其目的是讲清楚各个标准和其引出“术”之间的关系。整个框架图分为上、中、下三个层次。第一层为企业内部风险控制；第二层为信息技术（Information Technology，IT）风险控制、第三层则是信息安全体系。这三个层次从上到下依次细化，最终落实到信息安全的管理和风险控制上。&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/d3a3d64f6e0d5297c3292d2b532da853_r.jpg&quot; data-rawwidth=&quot;1117&quot; data-rawheight=&quot;785&quot;&gt;&lt;p&gt;————分————隔————符————&lt;br&gt;&lt;/p&gt;&lt;h2&gt;第一层：企业风险评估&lt;/h2&gt;&lt;p&gt;我们首先谈一谈最上层的企业风险评估。一个企业在运行和发展过程中要面临很多的风险。所以，各个企业的CEO真不是躺着挣钱，企业时时刻刻都面临着巨大的风险。比如：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;财务风险&lt;/b&gt;。企业高层为伪造财务指标，指示财务人员对营业额、利润等进行虚假性处理。&lt;/li&gt;&lt;li&gt;&lt;b&gt;组织风险&lt;/b&gt;。董事会没有监管机制来监管总经理是否正确执行了所赋予的职责，导致总经理可以直接利用个人权利以公谋私，对企业造成伤害。例如，郑州亚细亚商场在1990-1995年是一家非常成功的零售连锁集团。然而，由于其内部控制薄弱，存在组织风险，最终成为亚细亚集团倒闭的一个主要原因。&lt;/li&gt;&lt;li&gt;&lt;b&gt;法律风险&lt;/b&gt;。指企业运行时可能违反法律法规而造成的损失。比如由于“嘀嘀打车”的商标已被一家杭州公司注册，如果继续使用这一商标的话，会引发法律风险。因此，才有现在的“滴滴打车”，这并不是错别字。&lt;/li&gt;&lt;li&gt;&lt;b&gt;IT风险&lt;/b&gt;。当企业规模变大后，企业的IT化会成为一种必然。然而，IT化在给企业带来运行、管理便利的时候，也会引入风险。别有用心的财务人员可能会利用财务IT系统的逻辑处理等漏洞，直接修改财务金额或者指标，从而引发风险。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;有这么多想得到，甚至想不到的风险，如何去精确定位企业的各种风险，并对这些风险进行控制呢？这实际上是全球任何一家企业都面临的一个严峻问题。企业内部风险控制有一个权威标准，是由Committee of Sponsoring
Organizations of the Treadway Commission（COSO）推出的，因此我们把这个权威标准也叫作COSO企业风险评估框架（&lt;a href=&quot;https://en.wikipedia.org/wiki/Committee_of_Sponsoring_Organizations_of_the_Treadway_Commission&quot; data-editable=&quot;true&quot; data-title=&quot;Committee of Sponsoring Organizations of the Treadway Commission&quot; class=&quot;&quot;&gt;Committee of Sponsoring Organizations of the Treadway Commission&lt;/a&gt;）。至此，企业可以根据这个框架准确地定位企业的风险，从而进行有效的规避。&lt;/p&gt;&lt;p&gt;COSO企业评估框架很不错，企业可以用它来正确定位和识别风险，并采取相应的措施改进。但是，COSO企业评估框架只能被动地定位和识别风险，无法高维度地打击风险。&lt;/p&gt;&lt;blockquote&gt;（&lt;a href=&quot;https://en.wikipedia.org/wiki/Sarbanes%E2%80%93Oxley_Act&quot; data-editable=&quot;true&quot; data-title=&quot;Sarbanes-Oxley Act&quot; class=&quot;&quot;&gt;Sarbanes-Oxley Act&lt;/a&gt;）2001年，美国最大的能源公司之一安然公司，突然申请破产保护。此后，上市公司和证券市场丑闻不断。2002年6月，世界通信公司会计丑闻事件，使得投资者对资本市场的信心遭受了巨大的打击。这些事件暴露出公司和证券监管的诸多问题。为了解决此类问题，美国国会于2002年7月25日正式通过《Sarbanes-Oxley Act》，即《塞班斯-奥克斯利法案》（简称《SOX法案》），在公司治理、会计职业监管、证券市场监督等方面做出了许多新的规定。&lt;/blockquote&gt;&lt;p&gt;这里面还有个小故事。安然公司倒闭的原因是财务问题。而负责安然公司财务审计的公司是当时世界著名5大审计所之一的安达信公司，这个公司在财务审计时，恶意销毁了审计档案。由于此事件的揭露，安达信公司最终也走向了倒闭。世界著名的5大审计所，就变为了现在的4大审计所了。安达信公司后来转型成为了现在业内著名的IT咨询公司埃森哲。&lt;/p&gt;&lt;p&gt;《SOX法案》的亮点之一，就是提出了对公司高层主管及白领犯罪的刑事责任。至此，企业风险的责任追溯中增加了刑事责任，加强了企业风险管理的能力。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;（&lt;a href=&quot;https://en.wikipedia.org/wiki/Sarbanes%E2%80%93Oxley_Act&quot; data-editable=&quot;true&quot; data-title=&quot;Sarbanes-Oxley Act&quot; class=&quot;&quot;&gt;Sarbanes-Oxley Act&lt;/a&gt;）第8至第11章主要是提高对公司高层主管及白领犯罪的刑事责任：&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;针对安达信毁审计档案事件，制订法规，销毁审计档案最高可判10年监禁，在联邦调查及破产事件中销毁档案最高可判20年监禁；&lt;br&gt;&lt;/li&gt;&lt;li&gt;强化公司高管层对财务报告的责任，公司高管须对财务报告的真实性宣誓，提供不实财务报告将获10年或20年的刑事责任。&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;p&gt;SOX法案同样规定了财务风险、组织风险、法律风险等。COSO中的风险基本都能与SOX法案中找到对应。&lt;/p&gt;&lt;p&gt;SOX法案对于后来的信息安全风险管理起到了两个重要的借鉴作用。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;b&gt;追溯刑事责任&lt;/b&gt;。SOX增加的刑事责任追溯启迪了信息安全风险管理与刑事责任的关联。因此，在面临黑产等计算机相关攻击时，政府会出台相应的法律，规定了针对计算机犯罪的相关刑事责任。&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;404条款&lt;/b&gt;。这一条款指出了IT的相关要求。而这个要求，就与IT和信息安全产生了关系，促使了后面相关标准的诞生。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;————分————隔————符————&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;h2&gt;第二层：IT风险评估&lt;/h2&gt;&lt;p&gt;SOX法案的404条款指出了IT技术审计的相关要求。然而，这个要求实在是太简单，以至于人们没办法落实这个要求。这个要求有多简单呢？请看404条款中，a(1)和a(2)两句话，这两句话就是与IT相关的要求。&lt;/p&gt;&lt;blockquote&gt;a(1)：强调公司管理层建立和维护内部控制系统及相应控制程序充分有效的责任；&lt;br&gt;a(2)：发行人管理层最近财政年度末对内部控制体系及控制程序有效性的评价；&lt;/blockquote&gt;&lt;p&gt;写的倒是挺高大上的，但这也太高大上了，没办法落地实施吧？实际上，在SOX法案出台以后，业内也在寻找一个可以落地执行的相关标准。最终，业内终于找到了这个标准，就是IT风险中最为经典的框架：COBIT框架。&lt;/p&gt;&lt;blockquote&gt;（&lt;a href=&quot;https://zh.wikipedia.org/wiki/CobiT&quot; data-editable=&quot;true&quot; data-title=&quot;https://en.wikipedia.org/wiki/COBIT&quot; class=&quot;&quot;&gt;COBIT&lt;/a&gt;）COBIT的全称为Control Objectives for Information &amp;amp; related Technology。它是一系列关于IT管理最佳实践（框架）的集合，由美国信息系统审计与控制协会（Information Systems Audit and Control Association，ISACA）和IT治理委员会（IT Governance）于1992年创建。&lt;/blockquote&gt;&lt;p&gt;COBIT框架非常经典，可以说，IT风险中可能遇到的所有问题的风险处置问题，在COBIT中都能找到相应的答案。&lt;/p&gt;&lt;p&gt;2012年，ISACA已经推出了COBIT 5版本。但是，COBIT 4是学习COBIT很好的一个框架。如果想学习COBIT的话，建议先学习COBIT 4版本。这是因为，COBIT 4版本的逻辑非常清晰，而COBIT 5在COBIT 4的基础上进一步进行了融合。如果直接学习COBIT 5的话，会缺少很多必要的背景知识和基础。&lt;/p&gt;&lt;p&gt;业界找到COBIT框架之后，都开始使用COBIT作为SOX法案IT风险方面的承接框架。然而，虽然所有的具体标准都从COBIT中裁剪得到，但是各方对于问题的理解和对COBIT的裁剪方法都有所不同，没有形成统一的标准。后来，ISACA作为COBIT的推出方，专门裁剪、定制出了一个适合SOX法案的IT风险控制框架，这就是《IT Control Objectives for Sarbanes-Oxley》，即《遵从塞班斯法案的IT控制目标》。这一框架中，增加了我们熟知的变更控制、计算机病毒防治等多种具有IT特色的风险控制项。&lt;/p&gt;&lt;p&gt;我们回到COBIT。COBIT作为IT风险控制框架，用来控制IT活动有可能影响企业目标的潜在事件可能性，及其影响程度。这句话听起来比较拗口。实际上，企业在执行任何决策和行动之前，都需要对风险进行识别，这就是前面说到的企业风险内部控制，如财务风险、组织风险等。当企业的目标依托于IT目标，由IT目标支撑时，就需要对IT进行风险识别。COBIT就是用来对IT相关项进行风险识别的框架，如IT环境有无风险，IT决策架构有无风险，IT服务有无风险，&lt;b&gt;信息安全&lt;/b&gt;有无风险等。&lt;u&gt;注意，我们常见的信息安全属于IT风险中的一类。&lt;/u&gt;业内有些人也会混淆这两个概念，把IT风险和信息安全风险混在了一起，这是不准确的。&lt;/p&gt;&lt;p&gt;COBIT中指出了IT中的多种风险和管理方法：IT治理、信息安全管理体系、IT服务管理、IT审计、平衡计分卡、业务连续性管理、风险评估等等。而信息安全管理体系最终得到展开，映射到第三层。接下来，我们在第二层谈一谈除信息安全管理体系之外的几个重要的管理体系。&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;IT服务管理&lt;/b&gt;。IT服务管理可以认为就是信息技术基础架构库（Information Technology Infrastructure Library，ITIL）。IT服务管理的目的是让公司的内部员工方便、舒适地使用IT服务。举个例子，HelpDesk，即桌面运维。为了让内部员工感受好这个服务，IT服务管理会明确出服务目录，如提供操作系统重装服务、硬件维修服务、数据备份服务等；明确出服务等级协议（Service Level Agreement，SLA）承诺，如首次电话接通率95%，首次服务故障解决率80%等）；明确出问题管理，如公司标配软件和个人常用软件冲突时，采用常用软件库来规避。当然，IT服务管理还包括更大层面的运维管理，如变更管理、容量管理等。&lt;/li&gt;&lt;li&gt;&lt;b&gt;IT审计&lt;/b&gt;。IT审计要使用一定的审计方法，帮助企业在各个维度进行风险识别时，能够应用审计的架构和理念，帮助企业规避此类风险。比如，IT服务管理中变更管理引发了风险。而IT审计就通过审计方法，具体告知企业变更管理的哪些方面做的不够。这里要注意的是，IT审计和风险评估有一点区别。风险评估依据经验，没有固定的标准；而IT审计由于是由财务审计脱胎而来，因此其具有严格的标准，希望通过逻辑化的、可重复实现的电子证据来证明现状与标准之间的差距。在进行IT审计时，需要按照标准和实际情况进行一一比对，依托可复现的证据具体定位风险和问题。&lt;/li&gt;&lt;li&gt;&lt;b&gt;平衡计分卡&lt;/b&gt;。在执行相关规定和措施时，很重要的一点就是确认这些规定和措施是否能够正确、有效地执行。而监督执行所使用的方法一般就是平衡计分卡，换个大家都熟悉的词就是绩效考核。平衡计分卡是比财务审核更加优化、更加领先的一种考核方式。以前，衡量企业或个人的方式很简单：财务。只要企业财务好，收入高，大家的绩效考评就都会高；反之，财务情况不好，收入低，那么大家的绩效考评就都不高。与之相比，平衡计分卡提出，考核项不仅仅取决于财务考核，还应该有20%-30%来自于其他地方，如团队能力建设、流程优化、客户服务等。从各个维度对员工进行综合评估，这样才可以使绩效反应出更加准确的信息，更有利于组织的长期发展。&lt;/li&gt;&lt;li&gt;&lt;b&gt;业务连续性管理&lt;/b&gt;。业务连续性指企业有应对风险、自动调整和快速反应的能力，以保证企业业务的连续运转。我们熟知的信息安全，可以防止黑客入侵、防止数据被恶意删改等，可以降低风险。但是，企业不可避免地面临自然灾害等非人为因素的影响，导致不可预估的后果。规避此类风险，就需要依靠业务连续性了。举例来说，911事件发生时，位于美国纽约世贸双子星大楼的国际金融服务公司摩根斯坦利的核心机房也被炸毁了。但是，1天过后，摩根斯坦利的服务业务得到了恢复，重新面对全球开放。这是因为摩根斯坦利遵从了业务连续性管理，花费资金构建了同城、甚至异地的容灾机房。业务连续性管理现在可以与ISO22301标准划等号了。ISO22301给出的是业务连续性框架，规定了很多管理要求，如定期演练、容灾团队建设、容灾机房建设等等。实施ISO22301，还需要应用具体的技术实现。比如，为了提高业务连续性，网络公司的主数据中心通过核心路由器、核心交换机、高速冗余光纤，通过上百兆异地异步传输，实现了异地容灾机制。这就是ISO22301和具体技术相互依托、相互指导的例子。&lt;/li&gt;&lt;li&gt;&lt;b&gt;风险评估&lt;/b&gt;。一方面是IT风险评估，另一方面也包括信息安全风险评估。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;COBIT之所以堪称经典，是因为COBIT基本上覆盖了业内的所有IT风险。举个简单的例子，我们来看一看中国银监会颁发的《商业银行科技管理风险指引》这一监管性文件（&lt;a href=&quot;http://www.cbrc.gov.cn/chinese/home/docDOC_ReadView/20090601FC296F80D3957B65FFFA9EDA836D7300.html&quot; data-editable=&quot;true&quot; data-title=&quot;商业银行信息科技风险管理指引&quot;&gt;商业银行信息科技风险管理指引&lt;/a&gt;）。这一监管性文件主要规定了商业银行所面临的信息科技风险。下面是此文件的目录：&lt;/p&gt;&lt;br&gt;&lt;blockquote&gt;第一章 总则&lt;br&gt;第二章 信息科技治理 //对应COBIT的IT治理&lt;br&gt;第三章 信息科技风险管理               //对应COBIT的风险评估&lt;br&gt;第四章 信息安全                             //对应COBIT信息安全管理体系中的信息安全&lt;br&gt;第五章 信息系统开发、测试和维护     //对应COBIT信息安全管理体系中的安全软件开发流程&lt;br&gt;第六章 信息科技运行                      //对应COBIT的IT服务管理&lt;br&gt;第七章 业务连续性管理                  //对应COBIT的业务连续性管理&lt;br&gt;第八章 外包                                    //对应COBIT信息安全管理体系中的外包风险控制&lt;br&gt;第九章 内部审计                             //对应COBIT中部分提到了审计&lt;br&gt;第十章 外部审计                             //对应COBIT中部分提到了审计&lt;br&gt;第十一章 附则&lt;/blockquote&gt;&lt;p&gt;因此，可以 依据COBIT框架，根据不同的场景制定不同的规范。只要处于IT层面的风向控制和管理，基本可以确定脱离不了COBIT框架。可以这么说，&lt;u&gt;熟用COBIT，走遍业内都不怕！&lt;/u&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;注意，唯一的例外是互联网场景。在互联网场景中，需要其他的框架进行衔接。本系列专栏不涉及互联网环境的信息安全体系。在下一系列专栏中，我们会着重讲解互联网环境下的信息安全体系。&lt;/b&gt;&lt;/p&gt;&lt;p&gt;————分————隔————符————&lt;br&gt;&lt;/p&gt;&lt;h2&gt;第三层：信息安全体系&lt;/h2&gt;&lt;p&gt;讲完COBIT，我们落到第三层：信息安全体系。信息安全体系进一步细分，会有很多相关的标准和框架。我们一般认为，要首先确定信息资产风险等级和控制优先级。&lt;/p&gt;&lt;p&gt;&lt;b&gt;信息安全风险评估体系&lt;/b&gt;&lt;/p&gt;&lt;p&gt;在COBIT里面已经提到了IT风险评估，但在第三层中又单独提到了信息安全风险评估，是否有些多余？实际上并不是这样。风险评估最能体现标准与标准之间相互借鉴、相互包容的特点。风险评估是一个逐渐借鉴和向其他标准融合的过程。在最初，业内遵循ISO13335的风险评估方式，即：风险值=资产*威胁*脆弱性。后来，在企业内部风险控制层面就不提这种风险评估方式了，而是提出：风险值=影响*发生可能性。随后，ISO27005也开始提出类似的观点。任何标准如果想做到使用方便、影响力大，则在版本更替和扩充的时候，都会逐渐形成大的标准，达到四通八达，与其他标准互相映射的状态。因此，标准与标准之间会逐渐形成大融合。&lt;/p&gt;&lt;p&gt;现在，&lt;b&gt;信息安全风险值=影响*发生可能性&lt;/b&gt;。这种关系与原先的风险值=资产*威胁*脆弱性有什么联系呢？实际上，影响=资产*脆弱性；发生可能性=威胁*脆弱性。假设我口袋里有100元钱，这100元钱就是&lt;b&gt;资产&lt;/b&gt;；小偷是&lt;b&gt;威胁&lt;/b&gt;；口袋开了个大口子就是&lt;b&gt;脆弱性&lt;/b&gt;。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;小偷看到了口袋里面有100元，且口袋的口子打开的很大，那么小偷就很容易偷走钱。此时，&lt;b&gt;威胁&lt;/b&gt;和&lt;b&gt;脆弱性&lt;/b&gt;都很大，也就是&lt;b&gt;发生可能性&lt;/b&gt;很大。&lt;br&gt;&lt;/li&gt;&lt;li&gt;小偷虽然在我旁边，但是他没看到我口袋里有没有钱，而且我口袋也封闭的很好。此时，&lt;b&gt;威胁&lt;/b&gt;仍然存在，但&lt;b&gt;脆弱性&lt;/b&gt;很小，所以&lt;b&gt;发生可能性&lt;/b&gt;很小。&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;p&gt;而&lt;b&gt;影响&lt;/b&gt;是，100元与脆弱性结合起来，对我实际业务影响有多大？有的人会认为，丢了100元也无所谓，&lt;b&gt;影响&lt;/b&gt;不大；有的人会认为，这几天的饭钱就靠这100元了，&lt;b&gt;影响&lt;/b&gt;很大。将&lt;b&gt;影响&lt;/b&gt;和&lt;b&gt;发生可能性&lt;/b&gt;结合起来，就是风险值了。&lt;/p&gt;&lt;p&gt;通过上述方法，我们就计算得到了信息安全风险值。对于一个企业来说，想改进信息安全的话，改进点会非常多，投入是无止境的。因此，如果要对企业的信息安全实施改进，需要考虑优先级和重点。信息安全风险评估就是来确定优先级和重点的。比如一个O2O企业，它显然会面临黑客攻击的风险，但同时也面临个人隐私数据泄露的风险。通过风险评估，企业可能会认为个人隐私数据泄露的风险要大于黑客入侵的风险。因此，企业会优先改进个人隐私数据保护方法和措施。&lt;/p&gt;&lt;p&gt;我前面已经提到了，信息安全风险评估有2个标准，一个是ISO13335，一个是ISO27005。然而，这两个都是标准，如何具体实施呢？OCTAVE是来指导企业实施信息安全风险评估的实施指南文件。&lt;/p&gt;&lt;p&gt;风险评估自身应该按照年度执行。但是，互联网企业的风险评估方式会有所不同，操作方式也会有所不同。在此就不展开论述了。再未来的专栏文章中，我们会详细分析适合互联网企业的信息安全体系。&lt;/p&gt;&lt;p&gt;————分————隔————符————&lt;br&gt;&lt;/p&gt;&lt;p&gt;确定信息资产风险等级和控制优先级后，一般采用人员管理（Personne）、过程管理（Process）、技术管理（Technology）的架构进行处理。这三大架构简称为PPT架构。一些企业，如华为，会将运维单独列为第四大方面，这并不矛盾。下面，我们按PPT这三大方面初步讲解信息安全体系。&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;2、信息安全组织体系（Personne）&lt;/b&gt;&lt;/p&gt;&lt;p&gt;在实施信息安全管理、技术和运维体系前，首先应该构建信息安全组织体系，应该具备专门的信息安全组织。然而，除了像华为、阿里等大型公司之外，中国很少有企业具备独立的信息安全组织，而是从网络部门或者运维部门划分出一个部门作为信息安全组织。这种情况下，信息安全组织的权威性会较弱，不利于实施信息安全管理、技术和运维体系。&lt;/p&gt;&lt;p&gt;当建立起信息安全组织后，应该协调好组织与组织、人员与人员、组织与企业高层之前的关系，同时梳理相关的资源。这不仅仅涉及到能力和技术，还涉及到相关人员的水平。在有些公司，信息安全组织具有高度的权威性，可以随意与企业高层之间面对面交流。信息安全组织下达的指令会得到严格的执行。但也有公司，信息安全组织的权威性较差，并需要承担具体的工作和任务。此时，人员考评、技术部署等都会推动的很慢。&lt;/p&gt;&lt;p&gt;在安全人员管理方面，应该与其他部门相同，明确人员职责、明确考评方式、进行人员背景调查、执行相应的人员控制。在实施比较好的情况下，还应该注意人员的内部控制、人员的能力提升等，应该给安全人员一个成长的空间。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;3、信息安全管理体系（Process）&lt;/b&gt;&lt;/p&gt;&lt;p&gt;信息安全管理体系的落实就是ISO27000标准族了。相信安全从业人员都会或多或少听说过ISO27000。但是在业内，有些人会把ISO27000、ISO27001和ISO27002混淆。我在这里想强调一下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;ISO27000是一个标准族，里面包括认证、指导实施指南、度量、风险评估、通过认证机构的标准等等。&lt;br&gt;&lt;/li&gt;&lt;li&gt;ISO27001具体提出了对组织的信息安全管理能力进行评估，以确定其是否满足组织自身的信息安全需求。可以说，ISO27001是一种认证标准。&lt;/li&gt;&lt;li&gt;ISO27002是指导实施指南。我们一般说，一家企业按照ISO27002进行了相应的建设。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;ISO27000标准族作为一个成熟的信息安全管理体系标准，也具有向其他标准借鉴，与其他标准融合的特点。比如，ITIL中也提到了信息安全，其中指出：信息安全管理可以参考ISO27001。再比如，ISO27001中也提到了COBIT中的业务连续性，可以参考ISO22301进行实施。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;4、信息安全技术体系（Technology）&lt;/b&gt;&lt;/p&gt;&lt;p&gt;新版本的ISO27002中包含了14大安全域，包括通信安全、访问控制、业务连续性、信息安全组织、物理与环境安全、人力资源安全等。我们现在有了安全管理体系，如何实施技术落地呢？举个例子，假设访问控制有如下管理要求：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;办公区不能直接访问生产区；&lt;br&gt;&lt;/li&gt;&lt;li&gt;访客区不能访问内部办公区；&lt;br&gt;&lt;/li&gt;&lt;li&gt;测试区不能直接向生产区上传数据；&lt;/li&gt;&lt;li&gt;生产数据传入测试区时，应当进行脱敏处理。&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;规定了具体要求后，就需要进行技术改造。首先是安全域划分，根据不同的功能和不同的安全属性划分不同的区域。然后才涉及技术项目。再往后是技术测试等。因此，具体技术实际是按照管理要求落实的。&lt;/p&gt;&lt;p&gt;讲到技术项目，就涉及到信息安全技术体系了。由于技术实现手段很多，现在业内已经不太流行提出技术体系标准了。因此，在图中我们把技术体系单独放在最右侧。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;ISO7498-2&lt;/b&gt;：最早的技术体系标准，于1980年发布，现在基本已经不再使用了。&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;TCSEC&lt;/b&gt;：大家应该听说过操作系统的安全分级，如Windows 95属于D级安全系统，Windows 98属于C级安全系统等，这就是TCSEC给出的。这个标准现在也基本不再使用。&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;CC&lt;/b&gt;：通用测评准则，指出系统开发时需要满足哪些安全功能，现在还有一定的使用率。&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;IATF&lt;/b&gt;：80年代美国国防局使用的标准，在2000年发布。这个标准中首先提出了安全域的划分；提出了域与域之间的控制；第一个提出了人员、流程、技术，即PPT三防一体的纵深防御理念。虽然IATF现在已经不再流行，但是它对整个信息安全界的影响还是非常深远的。&lt;/li&gt;&lt;li&gt;&lt;b&gt;等级保护&lt;/b&gt;：是由中国公安部、国家保密局、国家密码管理委员会办公室、国务院信息化工作办公室联合推动的中国信息安全标准，其中技术要求指导了物理安全、网络安全、主机安全、应用安全、数据安全五个层面的技术方向。&lt;/li&gt;&lt;li&gt;&lt;b&gt;OWASP
TOP 10&lt;/b&gt;：Open Web Application Security Project（OWASP）中发布的Web 10大安全风险（&lt;a href=&quot;https://en.wikipedia.org/wiki/OWASP&quot; class=&quot;&quot; data-editable=&quot;true&quot; data-title=&quot;OWASP&quot;&gt;OWASP&lt;/a&gt;）。这是现在比较流行的Web安全风险点，不能算是一种标准。OWASP会定期更新10大安全风险，并给出相关的标准、书籍、和工具。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;技术标准进一步落地就是技术方案。举个例子，信息安全管理体系要求生产区和办公区之间不能随意访问。因此，我们提出了相应的技术隔离措施和要求：使用跳转机进行跳转；跳转机本身具有审计功能；审计达到50天；可以审计图形化操作和命令化操作，等等；随后，需要针对技术要求提出相应的解决方案，由产品完成具体实现。&lt;/p&gt;&lt;p&gt;&lt;b&gt;5、信息安全运维体系&lt;/b&gt;&lt;/p&gt;&lt;br&gt; 除了PPT外，有的企业还会将信息安全运维体系作为独立的体系。在业内，华为公司是实现安全和运维紧密结合的杰出代表。因为华为的运维配置管理数据库（Configuration&lt;br&gt;Management Database，CMDB）信息非常准确，准确率高达98%，把安全变更、IP地址滥用、特权账号管理、安全事件等都通过CMDB实现自动化运维，这是一个非常了不起的事情。举个例子，一个服务器上线时，必须要在CMDB中执行上线流程，否则CMDB会发现没有遵守上线流程而报警，并关联绩效。按照上线流程申请后，会自动向CMDB申请IP地址，开通安全策略等安全卡点。当服务器IP地址需要改变时，也需要在CMDB中进行申请变更。审批通过后，对应的安全策略会自动调整为最新的IP地址策略。当服务器下线时，CMDB会自动化地关联删除安全策略，避免安全策略空载。可以说，华为是信息安全运维体系的业界标杆。 &lt;br&gt;&lt;br&gt;&lt;p&gt;=======分=======隔=======符=======&lt;/p&gt;&lt;h2&gt;&lt;b&gt;总结&lt;/b&gt;&lt;/h2&gt;&lt;p&gt;至此，标准主线与相互之间的关联性就介绍完毕了。如果上述标准可以做到融会贯通的话，那么你就能够成为信息安全体系建设方向的专家了。&lt;/p&gt;&lt;p&gt;在下一篇专栏中，我们会讲这些信息安全体系标准中所渗透出的具体“术”。&lt;/p&gt;</description>
<author>刘巍然-学酥</author>
<guid isPermaLink="false">2016-06-16-21348250</guid>
<pubDate>Thu, 16 Jun 2016 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
